"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@smithy/types/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AlgorithmId: () => AlgorithmId,
      EndpointURLScheme: () => EndpointURLScheme,
      FieldPosition: () => FieldPosition,
      HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation2,
      HttpAuthLocation: () => HttpAuthLocation,
      IniSectionType: () => IniSectionType,
      RequestHandlerProtocol: () => RequestHandlerProtocol,
      SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY4,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig3
    });
    module2.exports = __toCommonJS2(src_exports);
    var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
      return HttpAuthLocation2;
    })(HttpAuthLocation || {});
    var HttpApiKeyAuthLocation2 = /* @__PURE__ */ ((HttpApiKeyAuthLocation22) => {
      HttpApiKeyAuthLocation22["HEADER"] = "header";
      HttpApiKeyAuthLocation22["QUERY"] = "query";
      return HttpApiKeyAuthLocation22;
    })(HttpApiKeyAuthLocation2 || {});
    var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
      return EndpointURLScheme2;
    })(EndpointURLScheme || {});
    var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
      return AlgorithmId2;
    })(AlgorithmId || {});
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "sha256",
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "md5",
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig2) => {
      const runtimeConfig = {};
      clientConfig2.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return getChecksumConfiguration(runtimeConfig);
    }, "getDefaultClientConfiguration");
    var resolveDefaultRuntimeConfig3 = /* @__PURE__ */ __name((config) => {
      return resolveChecksumRuntimeConfig(config);
    }, "resolveDefaultRuntimeConfig");
    var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
      return FieldPosition2;
    })(FieldPosition || {});
    var SMITHY_CONTEXT_KEY4 = "__smithy_context";
    var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {
      IniSectionType2["PROFILE"] = "profile";
      IniSectionType2["SSO_SESSION"] = "sso-session";
      IniSectionType2["SERVICES"] = "services";
      return IniSectionType2;
    })(IniSectionType || {});
    var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
      return RequestHandlerProtocol2;
    })(RequestHandlerProtocol || {});
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getSmithyContext: () => getSmithyContext6,
      normalizeProvider: () => normalizeProvider5
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_types5 = require_dist_cjs();
    var getSmithyContext6 = /* @__PURE__ */ __name((context) => context[import_types5.SMITHY_CONTEXT_KEY] || (context[import_types5.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
    var normalizeProvider5 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/AccountIdEndpointModeConstants.js
function validateAccountIdEndpointMode(value) {
  return ACCOUNT_ID_ENDPOINT_MODE_VALUES.includes(value);
}
var DEFAULT_ACCOUNT_ID_ENDPOINT_MODE, ACCOUNT_ID_ENDPOINT_MODE_VALUES;
var init_AccountIdEndpointModeConstants = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/AccountIdEndpointModeConstants.js"() {
    DEFAULT_ACCOUNT_ID_ENDPOINT_MODE = "preferred";
    ACCOUNT_ID_ENDPOINT_MODE_VALUES = ["disabled", "preferred", "required"];
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/AccountIdEndpointModeConfigResolver.js
var import_util_middleware, resolveAccountIdEndpointModeConfig;
var init_AccountIdEndpointModeConfigResolver = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/AccountIdEndpointModeConfigResolver.js"() {
    import_util_middleware = __toESM(require_dist_cjs2());
    init_AccountIdEndpointModeConstants();
    resolveAccountIdEndpointModeConfig = (input) => {
      const { accountIdEndpointMode } = input;
      const accountIdEndpointModeProvider = (0, import_util_middleware.normalizeProvider)(accountIdEndpointMode ?? DEFAULT_ACCOUNT_ID_ENDPOINT_MODE);
      return Object.assign(input, {
        accountIdEndpointMode: async () => {
          const accIdMode = await accountIdEndpointModeProvider();
          if (!validateAccountIdEndpointMode(accIdMode)) {
            throw new Error(`Invalid value for accountIdEndpointMode: ${accIdMode}. Valid values are: "required", "preferred", "disabled".`);
          }
          return accIdMode;
        }
      });
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/NodeAccountIdEndpointModeConfigOptions.js
var err, _throw, ENV_ACCOUNT_ID_ENDPOINT_MODE, CONFIG_ACCOUNT_ID_ENDPOINT_MODE, NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS;
var init_NodeAccountIdEndpointModeConfigOptions = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/NodeAccountIdEndpointModeConfigOptions.js"() {
    init_AccountIdEndpointModeConstants();
    err = "Invalid AccountIdEndpointMode value";
    _throw = (message) => {
      throw new Error(message);
    };
    ENV_ACCOUNT_ID_ENDPOINT_MODE = "AWS_ACCOUNT_ID_ENDPOINT_MODE";
    CONFIG_ACCOUNT_ID_ENDPOINT_MODE = "account_id_endpoint_mode";
    NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[ENV_ACCOUNT_ID_ENDPOINT_MODE];
        if (value && !validateAccountIdEndpointMode(value)) {
          _throw(err);
        }
        return value;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_ACCOUNT_ID_ENDPOINT_MODE];
        if (value && !validateAccountIdEndpointMode(value)) {
          _throw(err);
        }
        return value;
      },
      default: DEFAULT_ACCOUNT_ID_ENDPOINT_MODE
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/index.js
var account_id_endpoint_exports = {};
__export(account_id_endpoint_exports, {
  ACCOUNT_ID_ENDPOINT_MODE_VALUES: () => ACCOUNT_ID_ENDPOINT_MODE_VALUES,
  CONFIG_ACCOUNT_ID_ENDPOINT_MODE: () => CONFIG_ACCOUNT_ID_ENDPOINT_MODE,
  DEFAULT_ACCOUNT_ID_ENDPOINT_MODE: () => DEFAULT_ACCOUNT_ID_ENDPOINT_MODE,
  ENV_ACCOUNT_ID_ENDPOINT_MODE: () => ENV_ACCOUNT_ID_ENDPOINT_MODE,
  NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS: () => NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS,
  resolveAccountIdEndpointModeConfig: () => resolveAccountIdEndpointModeConfig,
  validateAccountIdEndpointMode: () => validateAccountIdEndpointMode
});
var init_account_id_endpoint = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/account-id-endpoint/index.js"() {
    init_AccountIdEndpointModeConfigResolver();
    init_AccountIdEndpointModeConstants();
    init_NodeAccountIdEndpointModeConfigOptions();
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Field: () => Field,
      Fields: () => Fields,
      HttpRequest: () => HttpRequest7,
      HttpResponse: () => HttpResponse2,
      IHttpRequest: () => import_types5.HttpRequest,
      getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration3,
      isValidHostname: () => isValidHostname,
      resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig3
    });
    module2.exports = __toCommonJS2(src_exports);
    var getHttpHandlerExtensionConfiguration3 = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        setHttpHandler(handler2) {
          runtimeConfig.httpHandler = handler2;
        },
        httpHandler() {
          return runtimeConfig.httpHandler;
        },
        updateHttpClientConfig(key, value) {
          runtimeConfig.httpHandler?.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return runtimeConfig.httpHandler.httpHandlerConfigs();
        }
      };
    }, "getHttpHandlerExtensionConfiguration");
    var resolveHttpHandlerRuntimeConfig3 = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    }, "resolveHttpHandlerRuntimeConfig");
    var import_types5 = require_dist_cjs();
    var Field = class {
      static {
        __name(this, "Field");
      }
      constructor({ name, kind = import_types5.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      /**
       * Appends a value to the field.
       *
       * @param value The value to append.
       */
      add(value) {
        this.values.push(value);
      }
      /**
       * Overwrite existing field values.
       *
       * @param values The new field values.
       */
      set(values) {
        this.values = values;
      }
      /**
       * Remove all matching entries from list.
       *
       * @param value Value to remove.
       */
      remove(value) {
        this.values = this.values.filter((v6) => v6 !== value);
      }
      /**
       * Get comma-delimited string.
       *
       * @returns String representation of {@link Field}.
       */
      toString() {
        return this.values.map((v6) => v6.includes(",") || v6.includes(" ") ? `"${v6}"` : v6).join(", ");
      }
      /**
       * Get string values as a list
       *
       * @returns Values in {@link Field} as a list.
       */
      get() {
        return this.values;
      }
    };
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      static {
        __name(this, "Fields");
      }
      /**
       * Set entry for a {@link Field} name. The `name`
       * attribute will be used to key the collection.
       *
       * @param field The {@link Field} to set.
       */
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      /**
       *  Retrieve {@link Field} entry by name.
       *
       * @param name The name of the {@link Field} entry
       *  to retrieve
       * @returns The {@link Field} if it exists.
       */
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      /**
       * Delete entry from collection.
       *
       * @param name Name of the entry to delete.
       */
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      /**
       * Helper function for retrieving specific types of fields.
       * Used to grab all headers or all trailers.
       *
       * @param kind {@link FieldPosition} of entries to retrieve.
       * @returns The {@link Field} entries with the specified
       *  {@link FieldPosition}.
       */
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    var HttpRequest7 = class _HttpRequest {
      static {
        __name(this, "HttpRequest");
      }
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      /**
       * Note: this does not deep-clone the body.
       */
      static clone(request) {
        const cloned = new _HttpRequest({
          ...request,
          headers: { ...request.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
      }
      /**
       * This method only actually asserts that request is the interface {@link IHttpRequest},
       * and not necessarily this concrete class. Left in place for API stability.
       *
       * Do not call instance methods on the input of this function, and
       * do not assume it has the HttpRequest prototype.
       */
      static isInstance(request) {
        if (!request) {
          return false;
        }
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      /**
       * @deprecated use static HttpRequest.clone(request) instead. It's not safe to call
       * this method because {@link HttpRequest.isInstance} incorrectly
       * asserts that IHttpRequest (interface) objects are of type HttpRequest (class).
       */
      clone() {
        return _HttpRequest.clone(this);
      }
    };
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
    __name(cloneQuery, "cloneQuery");
    var HttpResponse2 = class {
      static {
        __name(this, "HttpResponse");
      }
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    __name(isValidHostname, "isValidHostname");
  }
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  "node_modules/obliterator/iterator.js"(exports2, module2) {
    function Iterator2(next) {
      Object.defineProperty(this, "_next", {
        writable: false,
        enumerable: false,
        value: next
      });
      this.done = false;
    }
    Iterator2.prototype.next = function() {
      if (this.done)
        return { done: true };
      var step = this._next();
      if (step.done)
        this.done = true;
      return step;
    };
    if (typeof Symbol !== "undefined")
      Iterator2.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator2.of = function() {
      var args = arguments, l3 = args.length, i3 = 0;
      return new Iterator2(function() {
        if (i3 >= l3)
          return { done: true };
        return { done: false, value: args[i3++] };
      });
    };
    Iterator2.empty = function() {
      var iterator = new Iterator2(null);
      iterator.done = true;
      return iterator;
    };
    Iterator2.is = function(value) {
      if (value instanceof Iterator2)
        return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module2.exports = Iterator2;
  }
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  "node_modules/obliterator/foreach.js"(exports2, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
    var SYMBOL_SUPPORT = typeof Symbol !== "undefined";
    function forEach(iterable, callback) {
      var iterator, k3, i3, l3, s3;
      if (!iterable)
        throw new Error("obliterator/forEach: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEach: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i3 = 0, l3 = iterable.length; i3 < l3; i3++)
          callback(iterable[i3], i3);
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i3 = 0;
        while (s3 = iterator.next(), s3.done !== true) {
          callback(s3.value, i3);
          i3++;
        }
        return;
      }
      for (k3 in iterable) {
        if (iterable.hasOwnProperty(k3)) {
          callback(iterable[k3], k3);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function(iterable, callback) {
      var iterator, k3, i3, l3, s3;
      if (!iterable)
        throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i3 = 0, l3 = iterable.length; i3 < l3; i3++)
          callback(iterable[i3], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function(value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i3 = 0;
        while (s3 = iterator.next(), s3.done !== true) {
          callback(s3.value, null);
          i3++;
        }
        return;
      }
      for (k3 in iterable) {
        if (iterable.hasOwnProperty(k3)) {
          callback(iterable[k3], k3);
        }
      }
      return;
    };
    module2.exports = forEach;
  }
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  "node_modules/mnemonist/utils/typed-arrays.js"(exports2) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports2.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      return Float64Array;
    };
    exports2.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports2.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports2.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p3, t3, v6, i3, l3;
      for (i3 = 0, l3 = array.length; i3 < l3; i3++) {
        v6 = getter ? getter(array[i3]) : array[i3];
        t3 = exports2.getNumberType(v6);
        p3 = TYPE_PRIORITY[t3.name];
        if (p3 > maxPriority) {
          maxPriority = p3;
          maxType = t3;
        }
      }
      return maxType;
    };
    exports2.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports2.concat = function() {
      var length = 0, i3, o3, l3;
      for (i3 = 0, l3 = arguments.length; i3 < l3; i3++)
        length += arguments[i3].length;
      var array = new arguments[0].constructor(length);
      for (i3 = 0, o3 = 0; i3 < l3; i3++) {
        array.set(arguments[i3], o3);
        o3 += arguments[i3].length;
      }
      return array;
    };
    exports2.indices = function(length) {
      var PointerArray = exports2.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i3 = 0; i3 < length; i3++)
        array[i3] = i3;
      return array;
    };
  }
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  "node_modules/mnemonist/utils/iterables.js"(exports2) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === "number")
        return target.length;
      if (typeof target.size === "number")
        return target.size;
      return;
    }
    function toArray(target) {
      var l3 = guessLength(target);
      var array = typeof l3 === "number" ? new Array(l3) : [];
      var i3 = 0;
      forEach(target, function(value) {
        array[i3++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l3 = guessLength(target);
      var IndexArray = typeof l3 === "number" ? typed.getPointerArray(l3) : Array;
      var array = typeof l3 === "number" ? new Array(l3) : [];
      var indices = typeof l3 === "number" ? new IndexArray(l3) : [];
      var i3 = 0;
      forEach(target, function(value) {
        array[i3] = value;
        indices[i3] = i3++;
      });
      return [array, indices];
    }
    exports2.isArrayLike = isArrayLike;
    exports2.guessLength = guessLength;
    exports2.toArray = toArray;
    exports2.toArrayWithIndices = toArrayWithIndices;
  }
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  "node_modules/mnemonist/lru-cache.js"(exports2, module2) {
    var Iterator2 = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-cache: capacity should be positive number.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i3 = 0, l3 = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      while (i3 < l3) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i3++;
      }
    };
    LRUCache.prototype.keys = function() {
      var i3 = 0, l3 = this.size;
      var pointer = this.head, keys = this.K, forward = this.forward;
      return new Iterator2(function() {
        if (i3 >= l3)
          return { done: true };
        var key = keys[pointer];
        i3++;
        if (i3 < l3)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache.prototype.values = function() {
      var i3 = 0, l3 = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator2(function() {
        if (i3 >= l3)
          return { done: true };
        var value = values[pointer];
        i3++;
        if (i3 < l3)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache.prototype.entries = function() {
      var i3 = 0, l3 = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      return new Iterator2(function() {
        if (i3 >= l3)
          return { done: true };
        var key = keys[pointer], value = values[pointer];
        i3++;
        if (i3 < l3)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, "constructor", {
        value: LRUCache,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache.prototype.inspect;
    LRUCache.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache3 = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache3.set(key, value);
      });
      return cache3;
    };
    module2.exports = LRUCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EndpointCache: () => EndpointCache3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_lru_cache = __toESM2(require_lru_cache());
    var EndpointCache3 = class {
      static {
        __name(this, "EndpointCache");
      }
      cache;
      constructor(capacity) {
        this.cache = new import_lru_cache.default(capacity);
      }
      /**
       * Returns an un-expired endpoint for the given key.
       *
       * @param endpointsWithExpiry
       * @returns
       */
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      /**
       * Returns un-expired endpoints for the given key.
       *
       * @param key
       * @returns
       */
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      /**
       * Stores the endpoints passed for the key in cache.
       * If not defined, uses empty string for the Address in endpoint.
       * If not defined, uses one minute for CachePeriodInMinutes in endpoint.
       * Stores milliseconds elapsed since the UNIX epoch in Expires param based
       * on value provided in CachePeriodInMinutes.
       *
       * @param key
       * @param endpoints
       */
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(
          key,
          endpoints.map(({ Address, CachePeriodInMinutes }) => ({
            Address,
            Expires: now + CachePeriodInMinutes * 60 * 1e3
          }))
        );
      }
      /**
       * Deletes the value for the given key in the cache.
       *
       * @param {string} key
       */
      delete(key) {
        this.cache.set(key, []);
      }
      /**
       * Checks whether the key exists in cache.
       *
       * @param {string} key
       * @returns {boolean}
       */
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      /**
       * Clears the cache.
       */
      clear() {
        this.cache.clear();
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS: () => NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS,
      endpointDiscoveryMiddlewareOptions: () => endpointDiscoveryMiddlewareOptions,
      getEndpointDiscoveryOptionalPlugin: () => getEndpointDiscoveryOptionalPlugin,
      getEndpointDiscoveryPlugin: () => getEndpointDiscoveryPlugin,
      getEndpointDiscoveryRequiredPlugin: () => getEndpointDiscoveryRequiredPlugin,
      resolveEndpointDiscoveryConfig: () => resolveEndpointDiscoveryConfig
    });
    module2.exports = __toCommonJS2(index_exports);
    var ENV_ENDPOINT_DISCOVERY = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
    var CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
    var isFalsy = /* @__PURE__ */ __name((value) => ["false", "0"].indexOf(value) >= 0, "isFalsy");
    var NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => {
        for (let i3 = 0; i3 < ENV_ENDPOINT_DISCOVERY.length; i3++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i3];
          if (envKey in env) {
            const value = env[envKey];
            if (value === "") {
              throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
            }
            return !isFalsy(value);
          }
        }
      }, "environmentVariableSelector"),
      configFileSelector: /* @__PURE__ */ __name((profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
          }
          return !isFalsy(value);
        }
      }, "configFileSelector"),
      default: void 0
    };
    var import_protocol_http11 = require_dist_cjs3();
    var getCacheKey = /* @__PURE__ */ __name(async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...accessKeyId && { accessKeyId },
        ...identifiers && {
          commandName,
          identifiers: Object.entries(identifiers).sort().reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})
        }
      });
    }, "getCacheKey");
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = /* @__PURE__ */ __name(async (config, options) => new Promise((resolve, reject) => {
      const { endpointCache } = config;
      const { cacheKey, commandName, identifiers } = options;
      const endpoints = endpointCache.get(cacheKey);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        if (options.isDiscoveredEndpointRequired) {
          if (!requestQueue[cacheKey]) requestQueue[cacheKey] = [];
          requestQueue[cacheKey].push({ resolve, reject });
        } else {
          resolve();
        }
      } else if (endpoints && endpoints.length > 0) {
        resolve();
      } else {
        const placeholderEndpoints = [{ Address: "", CachePeriodInMinutes: 1 }];
        endpointCache.set(cacheKey, placeholderEndpoints);
        const command = new options.endpointDiscoveryCommandCtor({
          Operation: commandName.slice(0, -7),
          // strip "Command"
          Identifiers: identifiers
        });
        const handler2 = command.resolveMiddleware(options.clientStack, config, options.options);
        handler2(command).then((result) => {
          endpointCache.set(cacheKey, result.output.Endpoints);
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
              resolve2();
            });
            delete requestQueue[cacheKey];
          }
          resolve();
        }).catch((error) => {
          endpointCache.delete(cacheKey);
          const errorToThrow = Object.assign(
            new Error(
              `The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`
            ),
            { reason: error }
          );
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
              reject2(errorToThrow);
            });
            delete requestQueue[cacheKey];
          }
          if (options.isDiscoveredEndpointRequired) {
            reject(errorToThrow);
          } else {
            endpointCache.set(cacheKey, placeholderEndpoints);
            resolve();
          }
        });
      }
    }), "updateDiscoveredEndpointInCache");
    var endpointDiscoveryMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {
      if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
          throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
        }
        return next(args);
      }
      const { endpointDiscoveryCommandCtor } = config;
      const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
      const clientName = context.clientName;
      const commandName = context.commandName;
      const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
      const cacheKey = await getCacheKey(commandName, config, { identifiers });
      if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
          throw new Error(
            `Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`
          );
        }
        await updateDiscoveredEndpointInCache(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      } else if (isEndpointDiscoveryEnabled) {
        updateDiscoveredEndpointInCache(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      }
      const { request } = args;
      if (cacheKey && import_protocol_http11.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
          request.hostname = endpoint;
        }
      }
      return next(args);
    }, "endpointDiscoveryMiddleware");
    var endpointDiscoveryMiddlewareOptions = {
      name: "endpointDiscoveryMiddleware",
      step: "build",
      tags: ["ENDPOINT_DISCOVERY"],
      override: true
    };
    var getEndpointDiscoveryPlugin = /* @__PURE__ */ __name((pluginConfig, middlewareConfig) => ({
      applyToStack: /* @__PURE__ */ __name((commandStack) => {
        commandStack.add(endpointDiscoveryMiddleware(pluginConfig, middlewareConfig), endpointDiscoveryMiddlewareOptions);
      }, "applyToStack")
    }), "getEndpointDiscoveryPlugin");
    var getEndpointDiscoveryRequiredPlugin = /* @__PURE__ */ __name((pluginConfig, middlewareConfig) => ({
      applyToStack: /* @__PURE__ */ __name((commandStack) => {
        commandStack.add(
          endpointDiscoveryMiddleware(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: true }),
          endpointDiscoveryMiddlewareOptions
        );
      }, "applyToStack")
    }), "getEndpointDiscoveryRequiredPlugin");
    var getEndpointDiscoveryOptionalPlugin = /* @__PURE__ */ __name((pluginConfig, middlewareConfig) => ({
      applyToStack: /* @__PURE__ */ __name((commandStack) => {
        commandStack.add(
          endpointDiscoveryMiddleware(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: false }),
          endpointDiscoveryMiddlewareOptions
        );
      }, "applyToStack")
    }), "getEndpointDiscoveryOptionalPlugin");
    var import_endpoint_cache = require_dist_cjs4();
    var resolveEndpointDiscoveryConfig = /* @__PURE__ */ __name((input, { endpointDiscoveryCommandCtor }) => {
      const { endpointCacheSize, endpointDiscoveryEnabled, endpointDiscoveryEnabledProvider } = input;
      return Object.assign(input, {
        endpointDiscoveryCommandCtor,
        endpointCache: new import_endpoint_cache.EndpointCache(endpointCacheSize ?? 1e3),
        endpointDiscoveryEnabled: endpointDiscoveryEnabled !== void 0 ? () => Promise.resolve(endpointDiscoveryEnabled) : endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: endpointDiscoveryEnabled !== void 0
      });
    }, "resolveEndpointDiscoveryConfig");
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      getHostHeaderPlugin: () => getHostHeaderPlugin3,
      hostHeaderMiddleware: () => hostHeaderMiddleware,
      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
      resolveHostHeaderConfig: () => resolveHostHeaderConfig3
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_protocol_http11 = require_dist_cjs3();
    function resolveHostHeaderConfig3(input) {
      return input;
    }
    __name(resolveHostHeaderConfig3, "resolveHostHeaderConfig");
    var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      if (!import_protocol_http11.HttpRequest.isInstance(args.request)) return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null) host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    var hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin3 = /* @__PURE__ */ __name((options) => ({
      applyToStack: /* @__PURE__ */ __name((clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }, "applyToStack")
    }), "getHostHeaderPlugin");
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      getLoggerPlugin: () => getLoggerPlugin3,
      loggerMiddleware: () => loggerMiddleware,
      loggerMiddlewareOptions: () => loggerMiddlewareOptions
    });
    module2.exports = __toCommonJS2(index_exports);
    var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger?.info?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger?.error?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    }, "loggerMiddleware");
    var loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin3 = /* @__PURE__ */ __name((options) => ({
      applyToStack: /* @__PURE__ */ __name((clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }, "applyToStack")
    }), "getLoggerPlugin");
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin3,
      recursionDetectionMiddleware: () => recursionDetectionMiddleware
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_protocol_http11 = require_dist_cjs3();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      const { request } = args;
      if (!import_protocol_http11.HttpRequest.isInstance(request) || options.runtime !== "node") {
        return next(args);
      }
      const traceIdHeader = Object.keys(request.headers ?? {}).find((h3) => h3.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()) ?? TRACE_ID_HEADER_NAME;
      if (request.headers.hasOwnProperty(traceIdHeader)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    }, "recursionDetectionMiddleware");
    var addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin3 = /* @__PURE__ */ __name((options) => ({
      applyToStack: /* @__PURE__ */ __name((clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }, "applyToStack")
    }), "getRecursionDetectionPlugin");
  }
});

// node_modules/@smithy/core/dist-es/getSmithyContext.js
var import_types, getSmithyContext;
var init_getSmithyContext = __esm({
  "node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
    import_types = __toESM(require_dist_cjs());
    getSmithyContext = (context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {});
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/resolveAuthOptions.js
var resolveAuthOptions;
var init_resolveAuthOptions = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/resolveAuthOptions.js"() {
    resolveAuthOptions = (candidateAuthOptions, authSchemePreference) => {
      if (!authSchemePreference || authSchemePreference.length === 0) {
        return candidateAuthOptions;
      }
      const preferredAuthOptions = [];
      for (const preferredSchemeName of authSchemePreference) {
        for (const candidateAuthOption of candidateAuthOptions) {
          const candidateAuthSchemeName = candidateAuthOption.schemeId.split("#")[1];
          if (candidateAuthSchemeName === preferredSchemeName) {
            preferredAuthOptions.push(candidateAuthOption);
          }
        }
      }
      for (const candidateAuthOption of candidateAuthOptions) {
        if (!preferredAuthOptions.find(({ schemeId }) => schemeId === candidateAuthOption.schemeId)) {
          preferredAuthOptions.push(candidateAuthOption);
        }
      }
      return preferredAuthOptions;
    };
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map2 = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map2.set(scheme.schemeId, scheme);
  }
  return map2;
}
var import_types2, import_util_middleware2, httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    import_types2 = __toESM(require_dist_cjs());
    import_util_middleware2 = __toESM(require_dist_cjs2());
    init_resolveAuthOptions();
    httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {
      const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
      const authSchemePreference = config.authSchemePreference ? await config.authSchemePreference() : [];
      const resolvedOptions = resolveAuthOptions(options, authSchemePreference);
      const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
      const smithyContext = (0, import_util_middleware2.getSmithyContext)(context);
      const failureReasons = [];
      for (const option of resolvedOptions) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    };
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js
var httpAuthSchemeEndpointRuleSetMiddlewareOptions, getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      deserializerMiddleware: () => deserializerMiddleware,
      deserializerMiddlewareOption: () => deserializerMiddlewareOption,
      getSerdePlugin: () => getSerdePlugin4,
      serializerMiddleware: () => serializerMiddleware,
      serializerMiddlewareOption: () => serializerMiddlewareOption2
    });
    module2.exports = __toCommonJS2(src_exports);
    var deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          try {
            error.message += "\n  " + hint;
          } catch (e3) {
            if (!context.logger || context.logger?.constructor?.name === "NoOpLogger") {
              console.warn(hint);
            } else {
              context.logger?.warn?.(hint);
            }
          }
          if (typeof error.$responseBodyText !== "undefined") {
            if (error.$response) {
              error.$response.body = error.$responseBodyText;
            }
          }
        }
        throw error;
      }
    }, "deserializerMiddleware");
    var serializerMiddleware = /* @__PURE__ */ __name((options, serializer) => (next, context) => async (args) => {
      const endpoint = context.endpointV2?.url && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    }, "serializerMiddleware");
    var deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    var serializerMiddlewareOption2 = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin4(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
          commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption2);
        }
      };
    }
    __name(getSerdePlugin4, "getSerdePlugin");
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js
var import_middleware_serde, httpAuthSchemeMiddlewareOptions, getHttpAuthSchemePlugin;
var init_getHttpAuthSchemePlugin = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    import_middleware_serde = __toESM(require_dist_cjs9());
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
    };
    getHttpAuthSchemePlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js
var init_middleware_http_auth_scheme = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js
var import_protocol_http, import_types3, import_util_middleware3, defaultErrorHandler, defaultSuccessHandler, httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    import_protocol_http = __toESM(require_dist_cjs3());
    import_types3 = __toESM(require_dist_cjs());
    import_util_middleware3 = __toESM(require_dist_cjs2());
    defaultErrorHandler = (signingProperties) => (error) => {
      throw error;
    };
    defaultSuccessHandler = (httpResponse, signingProperties) => {
    };
    httpSigningMiddleware = (config) => (next, context) => async (args) => {
      if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = (0, import_util_middleware3.getSmithyContext)(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    };
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js
var httpSigningMiddlewareOptions, getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: "retryMiddleware"
    };
    getHttpSigningPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
      }
    });
  }
});

// node_modules/@smithy/core/dist-es/middleware-http-signing/index.js
var init_middleware_http_signing = __esm({
  "node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});

// node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider2;
var init_normalizeProvider = __esm({
  "node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    normalizeProvider2 = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// node_modules/@smithy/core/dist-es/pagination/createPaginator.js
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return async function* paginateOperation(config, input, ...additionalArguments) {
    const _input = input;
    let token = config.startingToken ?? _input[inputTokenName];
    let hasNext = true;
    let page;
    while (hasNext) {
      _input[inputTokenName] = token;
      if (pageSizeTokenName) {
        _input[pageSizeTokenName] = _input[pageSizeTokenName] ?? config.pageSize;
      }
      if (config.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config.client, input, config.withCommand, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  };
}
var makePagedClientRequest, get;
var init_createPaginator = __esm({
  "node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    makePagedClientRequest = async (CommandCtor, client2, input, withCommand = (_2) => _2, ...args) => {
      let command = new CommandCtor(input);
      command = withCommand(command) ?? command;
      return await client2.send(command, ...args);
    };
    get = (fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    };
  }
});

// node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isArrayBuffer: () => isArrayBuffer
    });
    module2.exports = __toCommonJS2(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});

// node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_is_array_buffer = require_dist_cjs10();
    var import_buffer = require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, "fromString");
  }
});

// node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs11();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase644 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports2.fromBase64 = fromBase644;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromUtf8: () => fromUtf83,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf83
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs11();
    var fromUtf83 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === "string") {
        return fromUtf83(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
    var toUtf83 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    }, "toUtf8");
  }
});

// node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs12();
    var toBase644 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = (0, util_utf8_1.fromUtf8)(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
    exports2.toBase64 = toBase644;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_fromBase64(), module2.exports);
    __reExport(src_exports, require_toBase64(), module2.exports);
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js
var require_ChecksumStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs13();
    var stream_1 = require("stream");
    var ChecksumStream2 = class extends stream_1.Duplex {
      constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) {
        var _a2, _b;
        super();
        if (typeof source.pipe === "function") {
          this.source = source;
        } else {
          throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a2 = source === null || source === void 0 ? void 0 : source.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);
        }
        this.base64Encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
        this.expectedChecksum = expectedChecksum;
        this.checksum = checksum;
        this.checksumSourceLocation = checksumSourceLocation;
        this.source.pipe(this);
      }
      _read(size) {
      }
      _write(chunk, encoding, callback) {
        try {
          this.checksum.update(chunk);
          this.push(chunk);
        } catch (e3) {
          return callback(e3);
        }
        return callback();
      }
      async _final(callback) {
        try {
          const digest = await this.checksum.digest();
          const received = this.base64Encoder(digest);
          if (this.expectedChecksum !== received) {
            return callback(new Error(`Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}" in response header "${this.checksumSourceLocation}".`));
          }
        } catch (e3) {
          return callback(e3);
        }
        this.push(null);
        return callback();
      }
    };
    exports2.ChecksumStream = ChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js
var require_stream_type_check = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isBlob = exports2.isReadableStream = void 0;
    var isReadableStream2 = (stream) => {
      var _a2;
      return typeof ReadableStream === "function" && (((_a2 = stream === null || stream === void 0 ? void 0 : stream.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === ReadableStream.name || stream instanceof ReadableStream);
    };
    exports2.isReadableStream = isReadableStream2;
    var isBlob2 = (blob) => {
      var _a2;
      return typeof Blob === "function" && (((_a2 = blob === null || blob === void 0 ? void 0 : blob.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === Blob.name || blob instanceof Blob);
    };
    exports2.isBlob = isBlob2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js
var require_ChecksumStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChecksumStream = void 0;
    var ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function() {
    };
    var ChecksumStream2 = class extends ReadableStreamRef {
    };
    exports2.ChecksumStream = ChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js
var require_createChecksumStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs13();
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_browser_1 = require_ChecksumStream_browser();
    var createChecksumStream2 = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
      var _a2, _b;
      if (!(0, stream_type_check_1.isReadableStream)(source)) {
        throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a2 = source === null || source === void 0 ? void 0 : source.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);
      }
      const encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
      if (typeof TransformStream !== "function") {
        throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
      }
      const transform = new TransformStream({
        start() {
        },
        async transform(chunk, controller) {
          checksum.update(chunk);
          controller.enqueue(chunk);
        },
        async flush(controller) {
          const digest = await checksum.digest();
          const received = encoder(digest);
          if (expectedChecksum !== received) {
            const error = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}" in response header "${checksumSourceLocation}".`);
            controller.error(error);
          } else {
            controller.terminate();
          }
        }
      });
      source.pipeThrough(transform);
      const readable = transform.readable;
      Object.setPrototypeOf(readable, ChecksumStream_browser_1.ChecksumStream.prototype);
      return readable;
    };
    exports2.createChecksumStream = createChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js
var require_createChecksumStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createChecksumStream = void 0;
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_1 = require_ChecksumStream();
    var createChecksumStream_browser_1 = require_createChecksumStream_browser();
    function createChecksumStream2(init) {
      if (typeof ReadableStream === "function" && (0, stream_type_check_1.isReadableStream)(init.source)) {
        return (0, createChecksumStream_browser_1.createChecksumStream)(init);
      }
      return new ChecksumStream_1.ChecksumStream(init);
    }
    exports2.createChecksumStream = createChecksumStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js
var require_ByteArrayCollector = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ByteArrayCollector = void 0;
    var ByteArrayCollector = class {
      constructor(allocByteArray) {
        this.allocByteArray = allocByteArray;
        this.byteLength = 0;
        this.byteArrays = [];
      }
      push(byteArray) {
        this.byteArrays.push(byteArray);
        this.byteLength += byteArray.byteLength;
      }
      flush() {
        if (this.byteArrays.length === 1) {
          const bytes = this.byteArrays[0];
          this.reset();
          return bytes;
        }
        const aggregation = this.allocByteArray(this.byteLength);
        let cursor = 0;
        for (let i3 = 0; i3 < this.byteArrays.length; ++i3) {
          const bytes = this.byteArrays[i3];
          aggregation.set(bytes, cursor);
          cursor += bytes.byteLength;
        }
        this.reset();
        return aggregation;
      }
      reset() {
        this.byteArrays = [];
        this.byteLength = 0;
      }
    };
    exports2.ByteArrayCollector = ByteArrayCollector;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js
var require_createBufferedReadableStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.modeOf = exports2.sizeOf = exports2.flush = exports2.merge = exports2.createBufferedReadable = exports2.createBufferedReadableStream = void 0;
    var ByteArrayCollector_1 = require_ByteArrayCollector();
    function createBufferedReadableStream(upstream, size, logger) {
      const reader = upstream.getReader();
      let streamBufferingLoggedWarning = false;
      let bytesSeen = 0;
      const buffers = ["", new ByteArrayCollector_1.ByteArrayCollector((size2) => new Uint8Array(size2))];
      let mode = -1;
      const pull = async (controller) => {
        const { value, done } = await reader.read();
        const chunk = value;
        if (done) {
          if (mode !== -1) {
            const remainder = flush(buffers, mode);
            if (sizeOf(remainder) > 0) {
              controller.enqueue(remainder);
            }
          }
          controller.close();
        } else {
          const chunkMode = modeOf(chunk, false);
          if (mode !== chunkMode) {
            if (mode >= 0) {
              controller.enqueue(flush(buffers, mode));
            }
            mode = chunkMode;
          }
          if (mode === -1) {
            controller.enqueue(chunk);
            return;
          }
          const chunkSize = sizeOf(chunk);
          bytesSeen += chunkSize;
          const bufferSize = sizeOf(buffers[mode]);
          if (chunkSize >= size && bufferSize === 0) {
            controller.enqueue(chunk);
          } else {
            const newSize = merge(buffers, mode, chunk);
            if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
              streamBufferingLoggedWarning = true;
              logger === null || logger === void 0 ? void 0 : logger.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
            }
            if (newSize >= size) {
              controller.enqueue(flush(buffers, mode));
            } else {
              await pull(controller);
            }
          }
        }
      };
      return new ReadableStream({
        pull
      });
    }
    exports2.createBufferedReadableStream = createBufferedReadableStream;
    exports2.createBufferedReadable = createBufferedReadableStream;
    function merge(buffers, mode, chunk) {
      switch (mode) {
        case 0:
          buffers[0] += chunk;
          return sizeOf(buffers[0]);
        case 1:
        case 2:
          buffers[mode].push(chunk);
          return sizeOf(buffers[mode]);
      }
    }
    exports2.merge = merge;
    function flush(buffers, mode) {
      switch (mode) {
        case 0:
          const s3 = buffers[0];
          buffers[0] = "";
          return s3;
        case 1:
        case 2:
          return buffers[mode].flush();
      }
      throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);
    }
    exports2.flush = flush;
    function sizeOf(chunk) {
      var _a2, _b;
      return (_b = (_a2 = chunk === null || chunk === void 0 ? void 0 : chunk.byteLength) !== null && _a2 !== void 0 ? _a2 : chunk === null || chunk === void 0 ? void 0 : chunk.length) !== null && _b !== void 0 ? _b : 0;
    }
    exports2.sizeOf = sizeOf;
    function modeOf(chunk, allowBuffer = true) {
      if (allowBuffer && typeof Buffer !== "undefined" && chunk instanceof Buffer) {
        return 2;
      }
      if (chunk instanceof Uint8Array) {
        return 1;
      }
      if (typeof chunk === "string") {
        return 0;
      }
      return -1;
    }
    exports2.modeOf = modeOf;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js
var require_createBufferedReadable = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createBufferedReadable = void 0;
    var node_stream_1 = require("node:stream");
    var ByteArrayCollector_1 = require_ByteArrayCollector();
    var createBufferedReadableStream_1 = require_createBufferedReadableStream();
    var stream_type_check_1 = require_stream_type_check();
    function createBufferedReadable2(upstream, size, logger) {
      if ((0, stream_type_check_1.isReadableStream)(upstream)) {
        return (0, createBufferedReadableStream_1.createBufferedReadableStream)(upstream, size, logger);
      }
      const downstream = new node_stream_1.Readable({ read() {
      } });
      let streamBufferingLoggedWarning = false;
      let bytesSeen = 0;
      const buffers = [
        "",
        new ByteArrayCollector_1.ByteArrayCollector((size2) => new Uint8Array(size2)),
        new ByteArrayCollector_1.ByteArrayCollector((size2) => Buffer.from(new Uint8Array(size2)))
      ];
      let mode = -1;
      upstream.on("data", (chunk) => {
        const chunkMode = (0, createBufferedReadableStream_1.modeOf)(chunk, true);
        if (mode !== chunkMode) {
          if (mode >= 0) {
            downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));
          }
          mode = chunkMode;
        }
        if (mode === -1) {
          downstream.push(chunk);
          return;
        }
        const chunkSize = (0, createBufferedReadableStream_1.sizeOf)(chunk);
        bytesSeen += chunkSize;
        const bufferSize = (0, createBufferedReadableStream_1.sizeOf)(buffers[mode]);
        if (chunkSize >= size && bufferSize === 0) {
          downstream.push(chunk);
        } else {
          const newSize = (0, createBufferedReadableStream_1.merge)(buffers, mode, chunk);
          if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
            streamBufferingLoggedWarning = true;
            logger === null || logger === void 0 ? void 0 : logger.warn(`@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`);
          }
          if (newSize >= size) {
            downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));
          }
        }
      });
      upstream.on("end", () => {
        if (mode !== -1) {
          const remainder = (0, createBufferedReadableStream_1.flush)(buffers, mode);
          if ((0, createBufferedReadableStream_1.sizeOf)(remainder) > 0) {
            downstream.push(remainder);
          }
        }
        downstream.push(null);
      });
      return downstream;
    }
    exports2.createBufferedReadable = createBufferedReadable2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream2 = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports2.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js
var require_headStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.headStream = void 0;
    async function headStream2(stream, bytes) {
      var _a2;
      let byteLengthCounter = 0;
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          byteLengthCounter += (_a2 = value === null || value === void 0 ? void 0 : value.byteLength) !== null && _a2 !== void 0 ? _a2 : 0;
        }
        if (byteLengthCounter >= bytes) {
          break;
        }
        isDone = done;
      }
      reader.releaseLock();
      const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
      let offset = 0;
      for (const chunk of chunks) {
        if (chunk.byteLength > collected.byteLength - offset) {
          collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
          break;
        } else {
          collected.set(chunk, offset);
        }
        offset += chunk.length;
      }
      return collected;
    }
    exports2.headStream = headStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/headStream.js
var require_headStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/headStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.headStream = void 0;
    var stream_1 = require("stream");
    var headStream_browser_1 = require_headStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    var headStream2 = (stream, bytes) => {
      if ((0, stream_type_check_1.isReadableStream)(stream)) {
        return (0, headStream_browser_1.headStream)(stream, bytes);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        collector.limit = bytes;
        stream.pipe(collector);
        stream.on("error", (err2) => {
          collector.end();
          reject(err2);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes2 = new Uint8Array(Buffer.concat(this.buffers));
          resolve(bytes2);
        });
      });
    };
    exports2.headStream = headStream2;
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.buffers = [];
        this.limit = Infinity;
        this.bytesBuffered = 0;
      }
      _write(chunk, encoding, callback) {
        var _a2;
        this.buffers.push(chunk);
        this.bytesBuffered += (_a2 = chunk.byteLength) !== null && _a2 !== void 0 ? _a2 : 0;
        if (this.bytesBuffered >= this.limit) {
          const excess = this.bytesBuffered - this.limit;
          const tailBuffer = this.buffers[this.buffers.length - 1];
          this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
          this.emit("finish");
        }
        callback();
      }
    };
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      escapeUri: () => escapeUri,
      escapeUriPath: () => escapeUriPath
    });
    module2.exports = __toCommonJS2(src_exports);
    var escapeUri = /* @__PURE__ */ __name((uri) => (
      // AWS percent-encodes some extra non-standard characters in a URI
      encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode)
    ), "escapeUri");
    var hexEncode = /* @__PURE__ */ __name((c3) => `%${c3.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
    var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split("/").map(escapeUri).join("/"), "escapeUriPath");
  }
});

// node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      buildQueryString: () => buildQueryString
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_uri_escape = require_dist_cjs14();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, import_util_uri_escape.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i3 = 0, iLen = value.length; i3 < iLen; i3++) {
            parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i3])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    __name(buildQueryString, "buildQueryString");
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports2, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
      NodeHttp2Handler: () => NodeHttp2Handler,
      NodeHttpHandler: () => NodeHttpHandler,
      streamCollector: () => streamCollector3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http11 = require_dist_cjs3();
    var import_querystring_builder = require_dist_cjs15();
    var import_http = require("http");
    var import_https = require("https");
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    }, "getTransformedHeaders");
    var timing = {
      setTimeout: (cb, ms) => setTimeout(cb, ms),
      clearTimeout: (timeoutId) => clearTimeout(timeoutId)
    };
    var DEFER_EVENT_LISTENER_TIME = 1e3;
    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeoutId = timing.setTimeout(() => {
          request.destroy();
          reject(
            Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            })
          );
        }, timeoutInMs - offset);
        const doWithSocket = /* @__PURE__ */ __name((socket) => {
          if (socket?.connecting) {
            socket.on("connect", () => {
              timing.clearTimeout(timeoutId);
            });
          } else {
            timing.clearTimeout(timeoutId);
          }
        }, "doWithSocket");
        if (request.socket) {
          doWithSocket(request.socket);
        } else {
          request.on("socket", doWithSocket);
        }
      }, "registerTimeout");
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
    }, "setConnectionTimeout");
    var DEFER_EVENT_LISTENER_TIME2 = 3e3;
    var setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2) => {
      if (keepAlive !== true) {
        return -1;
      }
      const registerListener = /* @__PURE__ */ __name(() => {
        if (request.socket) {
          request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        } else {
          request.on("socket", (socket) => {
            socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          });
        }
      }, "registerListener");
      if (deferTimeMs === 0) {
        registerListener();
        return 0;
      }
      return timing.setTimeout(registerListener, deferTimeMs);
    }, "setSocketKeepAlive");
    var DEFER_EVENT_LISTENER_TIME3 = 3e3;
    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT) => {
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = /* @__PURE__ */ __name(() => {
          request.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        }, "onTimeout");
        if (request.socket) {
          request.socket.setTimeout(timeout, onTimeout);
          request.on("close", () => request.socket?.removeListener("timeout", onTimeout));
        } else {
          request.setTimeout(timeout, onTimeout);
        }
      }, "registerTimeout");
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(
        registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3),
        DEFER_EVENT_LISTENER_TIME3
      );
    }, "setSocketTimeout");
    var import_stream = require("stream");
    var MIN_WAIT_TIME = 6e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      const headers = request.headers ?? {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let sendBody = true;
      if (expect === "100-continue") {
        sendBody = await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(timing.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              timing.clearTimeout(timeoutId);
              resolve(true);
            });
            httpRequest.on("response", () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
            httpRequest.on("error", () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
          })
        ]);
      }
      if (sendBody) {
        writeBody(httpRequest, request.body);
      }
    }
    __name(writeRequestBody, "writeRequestBody");
    function writeBody(httpRequest, body) {
      if (body instanceof import_stream.Readable) {
        body.pipe(httpRequest);
        return;
      }
      if (body) {
        if (Buffer.isBuffer(body) || typeof body === "string") {
          httpRequest.end(body);
          return;
        }
        const uint8 = body;
        if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
          httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
          return;
        }
        httpRequest.end(Buffer.from(body));
        return;
      }
      httpRequest.end();
    }
    __name(writeBody, "writeBody");
    var DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class _NodeHttpHandler {
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      static {
        __name(this, "NodeHttpHandler");
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler(instanceOrOptions);
      }
      /**
       * @internal
       *
       * @param agent - http(s) agent in use by the NodeHttpHandler instance.
       * @param socketWarningTimestamp - last socket usage check timestamp.
       * @param logger - channel for the warning.
       * @returns timestamp of last emitted warning.
       */
      static checkSocketUsage(agent, socketWarningTimestamp, logger = console) {
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = sockets[origin]?.length ?? 0;
            const requestsEnqueued = requests[origin]?.length ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              logger?.warn?.(
                `@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`
              );
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, socketAcquisitionWarningTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          socketAcquisitionWarningTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof import_http.Agent || typeof httpAgent?.destroy === "function") {
              return httpAgent;
            }
            return new import_http.Agent({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof import_https.Agent || typeof httpsAgent?.destroy === "function") {
              return httpsAgent;
            }
            return new import_https.Agent({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const timeouts = [];
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _reject(arg);
          }, "reject");
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          timeouts.push(
            timing.setTimeout(
              () => {
                this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(
                  agent,
                  this.socketWarningTimestamp,
                  this.config.logger
                );
              },
              this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)
            )
          );
          const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          let hostname = request.hostname ?? "";
          if (hostname[0] === "[" && hostname.endsWith("]")) {
            hostname = request.hostname.slice(1, -1);
          } else {
            hostname = request.hostname;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: hostname,
            method: request.method,
            path,
            port: request.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? import_https.request : import_http.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new import_protocol_http11.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err2) => {
            if (NODEJS_TIMEOUT_ERROR_CODES.includes(err2.code)) {
              reject(Object.assign(err2, { name: "TimeoutError" }));
            } else {
              reject(err2);
            }
          });
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
          timeouts.push(setSocketTimeout(req, reject, this.config.requestTimeout));
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            timeouts.push(
              setSocketKeepAlive(req, {
                // @ts-expect-error keepAlive is not public on httpAgent.
                keepAlive: httpAgent.keepAlive,
                // @ts-expect-error keepAliveMsecs is not public on httpAgent.
                keepAliveMsecs: httpAgent.keepAliveMsecs
              })
            );
          }
          writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch((e3) => {
            timeouts.forEach(timing.clearTimeout);
            return _reject(e3);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    var import_http22 = require("http2");
    var import_http2 = __toESM2(require("http2"));
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions ?? [];
      }
      static {
        __name(this, "NodeHttp2ConnectionPool");
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s3) => s3 !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      static {
        __name(this, "NodeHttp2ConnectionManager");
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = import_http2.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err2) => {
            if (err2) {
              throw new Error(
                "Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString()
              );
            }
          });
        }
        session.unref();
        const destroySessionCb = /* @__PURE__ */ __name(() => {
          session.destroy();
          this.deleteSession(url, session);
        }, "destroySessionCb");
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      /**
       * Delete a session from the connection pool.
       * @param authority The authority of the session to delete.
       * @param session The session to delete.
       */
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        const cacheKey = this.getUrlString(requestContext);
        this.sessionCache.get(cacheKey)?.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (maxConcurrentStreams && maxConcurrentStreams <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    var NodeHttp2Handler = class _NodeHttp2Handler {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      static {
        __name(this, "NodeHttp2Handler");
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttp2Handler(instanceOrOptions);
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          }, "reject");
          if (abortSignal?.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: this.config?.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = /* @__PURE__ */ __name((err2) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err2);
          }, "rejectWithDestroy");
          const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [import_http22.constants.HTTP2_HEADER_PATH]: path,
            [import_http22.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new import_protocol_http11.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: getTransformedHeaders(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
      /**
       * Destroys a session.
       * @param session - the session to destroy.
       */
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    var Collector = class extends import_stream.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      static {
        __name(this, "Collector");
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    var streamCollector3 = /* @__PURE__ */ __name((stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on("error", (err2) => {
          collector.end();
          reject(err2);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    }, "streamCollector");
    var isReadableStreamInstance = /* @__PURE__ */ __name((stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream, "isReadableStreamInstance");
    async function collectReadableStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectReadableStream, "collectReadableStream");
  }
});

// node_modules/@smithy/fetch-http-handler/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@smithy/fetch-http-handler/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      FetchHttpHandler: () => FetchHttpHandler,
      keepAliveSupport: () => keepAliveSupport,
      streamCollector: () => streamCollector3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http11 = require_dist_cjs3();
    var import_querystring_builder = require_dist_cjs15();
    function createRequest(url, requestOptions) {
      return new Request(url, requestOptions);
    }
    __name(createRequest, "createRequest");
    function requestTimeout(timeoutInMs = 0) {
      return new Promise((resolve, reject) => {
        if (timeoutInMs) {
          setTimeout(() => {
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
          }, timeoutInMs);
        }
      });
    }
    __name(requestTimeout, "requestTimeout");
    var keepAliveSupport = {
      supported: void 0
    };
    var FetchHttpHandler = class _FetchHttpHandler {
      static {
        __name(this, "FetchHttpHandler");
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _FetchHttpHandler(instanceOrOptions);
      }
      constructor(options) {
        if (typeof options === "function") {
          this.configProvider = options().then((opts) => opts || {});
        } else {
          this.config = options ?? {};
          this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === void 0) {
          keepAliveSupport.supported = Boolean(
            typeof Request !== "undefined" && "keepalive" in createRequest("https://[::1]")
          );
        }
      }
      destroy() {
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const requestTimeoutInMs = this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal?.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? void 0 : request.body;
        const requestOptions = {
          body,
          headers: new Headers(request.headers),
          method,
          credentials
        };
        if (this.config?.cache) {
          requestOptions.cache = this.config.cache;
        }
        if (body) {
          requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
          requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
          requestOptions.keepalive = keepAlive;
        }
        if (typeof this.config.requestInit === "function") {
          Object.assign(requestOptions, this.config.requestInit(request));
        }
        let removeSignalEventListener = /* @__PURE__ */ __name(() => {
        }, "removeSignalEventListener");
        const fetchRequest = createRequest(url, requestOptions);
        const raceOfPromises = [
          fetch(fetchRequest).then((response) => {
            const fetchHeaders = response.headers;
            const transformedHeaders = {};
            for (const pair of fetchHeaders.entries()) {
              transformedHeaders[pair[0]] = pair[1];
            }
            const hasReadableStream = response.body != void 0;
            if (!hasReadableStream) {
              return response.blob().then((body2) => ({
                response: new import_protocol_http11.HttpResponse({
                  headers: transformedHeaders,
                  reason: response.statusText,
                  statusCode: response.status,
                  body: body2
                })
              }));
            }
            return {
              response: new import_protocol_http11.HttpResponse({
                headers: transformedHeaders,
                reason: response.statusText,
                statusCode: response.status,
                body: response.body
              })
            };
          }),
          requestTimeout(requestTimeoutInMs)
        ];
        if (abortSignal) {
          raceOfPromises.push(
            new Promise((resolve, reject) => {
              const onAbort = /* @__PURE__ */ __name(() => {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
              }, "onAbort");
              if (typeof abortSignal.addEventListener === "function") {
                const signal = abortSignal;
                signal.addEventListener("abort", onAbort, { once: true });
                removeSignalEventListener = /* @__PURE__ */ __name(() => signal.removeEventListener("abort", onAbort), "removeSignalEventListener");
              } else {
                abortSignal.onabort = onAbort;
              }
            })
          );
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          config[key] = value;
          return config;
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    var import_util_base643 = require_dist_cjs13();
    var streamCollector3 = /* @__PURE__ */ __name(async (stream) => {
      if (typeof Blob === "function" && stream instanceof Blob || stream.constructor?.name === "Blob") {
        if (Blob.prototype.arrayBuffer !== void 0) {
          return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob(stream);
      }
      return collectStream(stream);
    }, "streamCollector");
    async function collectBlob(blob) {
      const base64 = await readToBase64(blob);
      const arrayBuffer = (0, import_util_base643.fromBase64)(base64);
      return new Uint8Array(arrayBuffer);
    }
    __name(collectBlob, "collectBlob");
    async function collectStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectStream, "collectStream");
    function readToBase64(blob) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          if (reader.readyState !== 2) {
            return reject(new Error("Reader aborted too early"));
          }
          const result = reader.result ?? "";
          const commaIndex = result.indexOf(",");
          const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
          resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error("Read aborted"));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
      });
    }
    __name(readToBase64, "readToBase64");
  }
});

// node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromHex: () => fromHex,
      toHex: () => toHex
    });
    module2.exports = __toCommonJS2(src_exports);
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i3 = 0; i3 < 256; i3++) {
      let encodedByte = i3.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i3] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i3;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i3 = 0; i3 < encoded.length; i3 += 2) {
        const encodedByte = encoded.slice(i3, i3 + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i3 / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    __name(fromHex, "fromHex");
    function toHex(bytes) {
      let out = "";
      for (let i3 = 0; i3 < bytes.byteLength; i3++) {
        out += SHORT_TO_HEX[bytes[i3]];
      }
      return out;
    }
    __name(toHex, "toHex");
  }
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js
var require_sdk_stream_mixin_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sdkStreamMixin = void 0;
    var fetch_http_handler_1 = require_dist_cjs17();
    var util_base64_1 = require_dist_cjs13();
    var util_hex_encoding_1 = require_dist_cjs18();
    var util_utf8_1 = require_dist_cjs12();
    var stream_type_check_1 = require_stream_type_check();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a2, _b;
      if (!isBlobInstance(stream) && !(0, stream_type_check_1.isReadableStream)(stream)) {
        const name = ((_b = (_a2 = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a2 === void 0 ? void 0 : _a2.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, fetch_http_handler_1.streamCollector)(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return (0, util_base64_1.toBase64)(buf);
          } else if (encoding === "hex") {
            return (0, util_hex_encoding_1.toHex)(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return (0, util_utf8_1.toUtf8)(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if ((0, stream_type_check_1.isReadableStream)(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    exports2.sdkStreamMixin = sdkStreamMixin2;
    var isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs16();
    var util_buffer_from_1 = require_dist_cjs11();
    var stream_1 = require("stream");
    var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a2, _b;
      if (!(stream instanceof stream_1.Readable)) {
        try {
          return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);
        } catch (e3) {
          const name = ((_b = (_a2 = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a2 === void 0 ? void 0 : _a2.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please ensure a polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports2.sdkStreamMixin = sdkStreamMixin2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js
var require_splitStream_browser = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitStream = void 0;
    async function splitStream2(stream) {
      if (typeof stream.stream === "function") {
        stream = stream.stream();
      }
      const readableStream = stream;
      return readableStream.tee();
    }
    exports2.splitStream = splitStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/splitStream.js
var require_splitStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/splitStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitStream = void 0;
    var stream_1 = require("stream");
    var splitStream_browser_1 = require_splitStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    async function splitStream2(stream) {
      if ((0, stream_type_check_1.isReadableStream)(stream) || (0, stream_type_check_1.isBlob)(stream)) {
        return (0, splitStream_browser_1.splitStream)(stream);
      }
      const stream1 = new stream_1.PassThrough();
      const stream2 = new stream_1.PassThrough();
      stream.pipe(stream1);
      stream.pipe(stream2);
      return [stream1, stream2];
    }
    exports2.splitStream = splitStream2;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_base643 = require_dist_cjs13();
    var import_util_utf83 = require_dist_cjs12();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, import_util_base643.toBase64)(payload);
      }
      return (0, import_util_utf83.toUtf8)(payload);
    }
    __name(transformToString, "transformToString");
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter2.mutate((0, import_util_base643.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter2.mutate((0, import_util_utf83.fromUtf8)(str));
    }
    __name(transformFromString, "transformFromString");
    var Uint8ArrayBlobAdapter2 = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static {
        __name(this, "Uint8ArrayBlobAdapter");
      }
      /**
       * @param source - such as a string or Stream.
       * @returns a new Uint8ArrayBlobAdapter extending Uint8Array.
       */
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      /**
       * @param source - Uint8Array to be mutated.
       * @returns the same Uint8Array but with prototype switched to Uint8ArrayBlobAdapter.
       */
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      /**
       * @param encoding - default 'utf-8'.
       * @returns the blob as string.
       */
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
    __reExport(src_exports, require_ChecksumStream(), module2.exports);
    __reExport(src_exports, require_createChecksumStream(), module2.exports);
    __reExport(src_exports, require_createBufferedReadable(), module2.exports);
    __reExport(src_exports, require_getAwsChunkedEncodingStream(), module2.exports);
    __reExport(src_exports, require_headStream(), module2.exports);
    __reExport(src_exports, require_sdk_stream_mixin(), module2.exports);
    __reExport(src_exports, require_splitStream(), module2.exports);
    __reExport(src_exports, require_stream_type_check(), module2.exports);
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js
var import_util_stream, collectBody2;
var init_collect_stream_body = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js"() {
    import_util_stream = __toESM(require_dist_cjs19());
    collectBody2 = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js
function extendedEncodeURIComponent2(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c3) {
    return "%" + c3.charCodeAt(0).toString(16).toUpperCase();
  });
}
var init_extended_encode_uri_component = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js"() {
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js
var resolvedPath2;
var init_resolve_path = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js"() {
    init_extended_encode_uri_component();
    resolvedPath2 = (resolvedPath3, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath3 = resolvedPath3.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent2(segment)).join("/") : extendedEncodeURIComponent2(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath3;
    };
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
var import_protocol_http2, RequestBuilder;
var init_requestBuilder = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js"() {
    import_protocol_http2 = __toESM(require_dist_cjs3());
    init_resolve_path();
    RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new import_protocol_http2.HttpRequest({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = resolvedPath2(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/submodules/protocols/index.js
var protocols_exports = {};
__export(protocols_exports, {
  RequestBuilder: () => RequestBuilder,
  collectBody: () => collectBody2,
  extendedEncodeURIComponent: () => extendedEncodeURIComponent2,
  requestBuilder: () => requestBuilder,
  resolvedPath: () => resolvedPath2
});
var init_protocols = __esm({
  "node_modules/@smithy/core/dist-es/submodules/protocols/index.js"() {
    init_collect_stream_body();
    init_extended_encode_uri_component();
    init_requestBuilder();
    init_resolve_path();
  }
});

// node_modules/@smithy/core/dist-es/protocols/requestBuilder.js
var init_requestBuilder2 = __esm({
  "node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    init_protocols();
  }
});

// node_modules/@smithy/core/dist-es/setFeature.js
function setFeature(context, feature, value) {
  if (!context.__smithy_context) {
    context.__smithy_context = {
      features: {}
    };
  } else if (!context.__smithy_context.features) {
    context.__smithy_context.features = {};
  }
  context.__smithy_context.features[feature] = value;
}
var init_setFeature = __esm({
  "node_modules/@smithy/core/dist-es/setFeature.js"() {
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    DefaultIdentityProviderConfig = class {
      constructor(config) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js
var import_protocol_http3, import_types4, HttpApiKeyAuthSigner;
var init_httpApiKeyAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
    import_protocol_http3 = __toESM(require_dist_cjs3());
    import_types4 = __toESM(require_dist_cjs());
    HttpApiKeyAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!signingProperties) {
          throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
        }
        if (!signingProperties.name) {
          throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
        }
        if (!signingProperties.in) {
          throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
        }
        if (!identity.apiKey) {
          throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
        }
        const clonedRequest = import_protocol_http3.HttpRequest.clone(httpRequest);
        if (signingProperties.in === import_types4.HttpApiKeyAuthLocation.QUERY) {
          clonedRequest.query[signingProperties.name] = identity.apiKey;
        } else if (signingProperties.in === import_types4.HttpApiKeyAuthLocation.HEADER) {
          clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
        } else {
          throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
        }
        return clonedRequest;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js
var import_protocol_http4, HttpBearerAuthSigner;
var init_httpBearerAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
    import_protocol_http4 = __toESM(require_dist_cjs3());
    HttpBearerAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        const clonedRequest = import_protocol_http4.HttpRequest.clone(httpRequest);
        if (!identity.token) {
          throw new Error("request could not be signed with `token` since the `token` is not defined");
        }
        clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
        return clonedRequest;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js
var NoAuthSigner;
var init_noAuth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    NoAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        return httpRequest;
      }
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js
var init_httpAuthSchemes = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
var createIsIdentityExpiredFunction, EXPIRATION_MS, isIdentityExpired, doesIdentityRequireRefresh, memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = (identity) => identity.expiration !== void 0;
    memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    };
  }
});

// node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js
var init_util_identity_and_auth = __esm({
  "node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});

// node_modules/@smithy/core/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
  EXPIRATION_MS: () => EXPIRATION_MS,
  HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
  HttpBearerAuthSigner: () => HttpBearerAuthSigner,
  NoAuthSigner: () => NoAuthSigner,
  createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
  createPaginator: () => createPaginator,
  doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
  getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
  getHttpSigningPlugin: () => getHttpSigningPlugin,
  getSmithyContext: () => getSmithyContext,
  httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
  httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
  httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
  httpSigningMiddleware: () => httpSigningMiddleware,
  httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
  isIdentityExpired: () => isIdentityExpired,
  memoizeIdentityProvider: () => memoizeIdentityProvider,
  normalizeProvider: () => normalizeProvider2,
  requestBuilder: () => requestBuilder,
  setFeature: () => setFeature
});
var init_dist_es = __esm({
  "node_modules/@smithy/core/dist-es/index.js"() {
    init_getSmithyContext();
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_normalizeProvider();
    init_createPaginator();
    init_requestBuilder2();
    init_setFeature();
    init_util_identity_and_auth();
  }
});

// node_modules/@smithy/util-endpoints/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@smithy/util-endpoints/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EndpointCache: () => EndpointCache3,
      EndpointError: () => EndpointError2,
      customEndpointFunctions: () => customEndpointFunctions3,
      isIpAddress: () => isIpAddress2,
      isValidHostLabel: () => isValidHostLabel,
      resolveEndpoint: () => resolveEndpoint4
    });
    module2.exports = __toCommonJS2(src_exports);
    var EndpointCache3 = class {
      /**
       * @param [size] - desired average maximum capacity. A buffer of 10 additional keys will be allowed
       *                 before keys are dropped.
       * @param [params] - list of params to consider as part of the cache key.
       *
       * If the params list is not populated, no caching will happen.
       * This may be out of order depending on how the object is created and arrives to this class.
       */
      constructor({ size, params }) {
        this.data = /* @__PURE__ */ new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
          this.parameters = params;
        }
      }
      static {
        __name(this, "EndpointCache");
      }
      /**
       * @param endpointParams - query for endpoint.
       * @param resolver - provider of the value if not present.
       * @returns endpoint corresponding to the query.
       */
      get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
          return resolver();
        }
        if (!this.data.has(key)) {
          if (this.data.size > this.capacity + 10) {
            const keys = this.data.keys();
            let i3 = 0;
            while (true) {
              const { value, done } = keys.next();
              this.data.delete(value);
              if (done || ++i3 > 10) {
                break;
              }
            }
          }
          this.data.set(key, resolver());
        }
        return this.data.get(key);
      }
      size() {
        return this.data.size;
      }
      /**
       * @returns cache key or false if not cachable.
       */
      hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
          return false;
        }
        for (const param of parameters) {
          const val2 = String(endpointParams[param] ?? "");
          if (val2.includes("|;")) {
            return false;
          }
          buffer += val2 + "|;";
        }
        return buffer;
      }
    };
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress2 = /* @__PURE__ */ __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    }, "isValidHostLabel");
    var customEndpointFunctions3 = {};
    var debugId = "endpoints";
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    __name(toDebugString, "toDebugString");
    var EndpointError2 = class extends Error {
      static {
        __name(this, "EndpointError");
      }
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "booleanEquals");
    var getAttrPathList = /* @__PURE__ */ __name((path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError2(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, "getAttrPathList");
    var getAttr = /* @__PURE__ */ __name((value, path) => getAttrPathList(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value), "getAttr");
    var isSet = /* @__PURE__ */ __name((value) => value != null, "isSet");
    var not = /* @__PURE__ */ __name((value) => !value, "not");
    var import_types32 = require_dist_cjs();
    var DEFAULT_PORTS = {
      [import_types32.EndpointURLScheme.HTTP]: 80,
      [import_types32.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = /* @__PURE__ */ __name((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k3, v6]) => `${k3}=${v6}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(import_types32.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress2(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    }, "parseURL");
    var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "stringEquals");
    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, "substring");
    var uriEncode = /* @__PURE__ */ __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c3) => `%${c3.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
    var endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode
    };
    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    }, "evaluateTemplate");
    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    }, "getReferenceValue");
    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, "evaluateExpression");
    var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {
      const evaluatedArgs = argv.map(
        (arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options)
      );
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions3 && fnSegments[1] != null) {
        return customEndpointFunctions3[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    }, "callFunction");
    var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    }, "evaluateCondition");
    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, "evaluateConditions");
    var getEndpointHeaders = /* @__PURE__ */ __name((headers, options) => Object.entries(headers).reduce(
      (acc, [headerKey, headerVal]) => ({
        ...acc,
        [headerKey]: headerVal.map((headerValEntry) => {
          const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
          if (typeof processedExpr !== "string") {
            throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
          }
          return processedExpr;
        })
      }),
      {}
    ), "getEndpointHeaders");
    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError2(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, "getEndpointProperty");
    var getEndpointProperties = /* @__PURE__ */ __name((properties, options) => Object.entries(properties).reduce(
      (acc, [propertyKey, propertyVal]) => ({
        ...acc,
        [propertyKey]: getEndpointProperty(propertyVal, options)
      }),
      {}
    ), "getEndpointProperties");
    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
    }, "getEndpointUrl");
    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url, endpointRuleOptions)
      };
    }, "evaluateEndpointRule");
    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError2(
        evaluateExpression(error, "Error", {
          ...options,
          referenceRecord: { ...options.referenceRecord, ...referenceRecord }
        })
      );
    }, "evaluateErrorRule");
    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    }, "evaluateTreeRule");
    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError2(`Rules evaluation failed`);
    }, "evaluateRules");
    var resolveEndpoint4 = /* @__PURE__ */ __name((ruleSetObject, options) => {
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v6]) => v6.default != null).map(([k3, v6]) => [k3, v6.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v6]) => v6.required).map(([k3]) => k3);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });
      options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    }, "resolveEndpoint");
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      ConditionObject: () => import_util_endpoints5.ConditionObject,
      DeprecatedObject: () => import_util_endpoints5.DeprecatedObject,
      EndpointError: () => import_util_endpoints5.EndpointError,
      EndpointObject: () => import_util_endpoints5.EndpointObject,
      EndpointObjectHeaders: () => import_util_endpoints5.EndpointObjectHeaders,
      EndpointObjectProperties: () => import_util_endpoints5.EndpointObjectProperties,
      EndpointParams: () => import_util_endpoints5.EndpointParams,
      EndpointResolverOptions: () => import_util_endpoints5.EndpointResolverOptions,
      EndpointRuleObject: () => import_util_endpoints5.EndpointRuleObject,
      ErrorRuleObject: () => import_util_endpoints5.ErrorRuleObject,
      EvaluateOptions: () => import_util_endpoints5.EvaluateOptions,
      Expression: () => import_util_endpoints5.Expression,
      FunctionArgv: () => import_util_endpoints5.FunctionArgv,
      FunctionObject: () => import_util_endpoints5.FunctionObject,
      FunctionReturn: () => import_util_endpoints5.FunctionReturn,
      ParameterObject: () => import_util_endpoints5.ParameterObject,
      ReferenceObject: () => import_util_endpoints5.ReferenceObject,
      ReferenceRecord: () => import_util_endpoints5.ReferenceRecord,
      RuleSetObject: () => import_util_endpoints5.RuleSetObject,
      RuleSetRules: () => import_util_endpoints5.RuleSetRules,
      TreeRuleObject: () => import_util_endpoints5.TreeRuleObject,
      awsEndpointFunctions: () => awsEndpointFunctions3,
      getUserAgentPrefix: () => getUserAgentPrefix,
      isIpAddress: () => import_util_endpoints5.isIpAddress,
      partition: () => partition,
      resolveEndpoint: () => import_util_endpoints5.resolveEndpoint,
      setPartitionInfo: () => setPartitionInfo,
      useDefaultPartitionInfo: () => useDefaultPartitionInfo
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_util_endpoints5 = require_dist_cjs20();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, import_util_endpoints5.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, import_util_endpoints5.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
    var ARN_DELIMITER = ":";
    var RESOURCE_DELIMITER = "/";
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6) return null;
      const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "") return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId
      };
    }, "parseArn");
    var partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "ap-southeast-7": {
            description: "Asia Pacific (Thailand)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "mx-central-1": {
            description: "Mexico (Central)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-e-global": {
            description: "AWS ISOE (Europe) global region"
          },
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-f-global": {
            description: "AWS ISOF global region"
          },
          "us-isof-east-1": {
            description: "US ISOF EAST"
          },
          "us-isof-south-1": {
            description: "US ISOF SOUTH"
          }
        }
      }, {
        id: "aws-eusc",
        outputs: {
          dnsSuffix: "amazonaws.eu",
          dualStackDnsSuffix: "amazonaws.eu",
          implicitGlobalRegion: "eusc-de-east-1",
          name: "aws-eusc",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eusc\\-(de)\\-\\w+\\-\\d+$",
        regions: {
          "eusc-de-east-1": {
            description: "EU (Germany)"
          }
        }
      }],
      version: "1.1"
    };
    var selectedPartitionsInfo = partitions_default;
    var selectedUserAgentPrefix = "";
    var partition = /* @__PURE__ */ __name((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    }, "setPartitionInfo");
    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
      setPartitionInfo(partitions_default, "");
    }, "useDefaultPartitionInfo");
    var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
    var awsEndpointFunctions3 = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    import_util_endpoints5.customEndpointFunctions.aws = awsEndpointFunctions3;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var state, emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    state = {
      warningEmitted: false
    };
    emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !state.warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 18) {
        state.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}
var init_setCredentialFeature = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js"() {
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature2(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}
var init_setFeature2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js"() {
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/client/index.js
var client_exports = {};
__export(client_exports, {
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  setCredentialFeature: () => setCredentialFeature,
  setFeature: () => setFeature2,
  state: () => state
});
var init_client = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_emitWarningIfUnsupportedVersion();
    init_setCredentialFeature();
    init_setFeature2();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var import_protocol_http5, getDateHeader;
var init_getDateHeader = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    import_protocol_http5 = __toESM(require_dist_cjs3());
    getDateHeader = (response) => import_protocol_http5.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed;
var init_isClockSkewed = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js
var init_utils = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var import_protocol_http6, throwSigningPropertyError, validateSigningProperties, AwsSdkSigV4Signer, AWSSDKSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    import_protocol_http6 = __toESM(require_dist_cjs3());
    init_utils();
    throwSigningPropertyError = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties = async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingRegionSet = signingProperties?.signingRegionSet;
      const signingName = signingProperties?.signingName;
      return {
        config,
        signer,
        signingRegion,
        signingRegionSet,
        signingName
      };
    };
    AwsSdkSigV4Signer = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http6.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
          const [first, second] = handlerExecutionContext.authSchemes;
          if (first?.name === "sigv4a" && second?.name === "sigv4") {
            signingRegion = second?.signingRegion ?? signingRegion;
            signingName = second?.signingName ?? signingName;
          }
        }
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error) => {
          const serverTime = error.ServerTime ?? getDateHeader(error.$response);
          if (serverTime) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config.systemClockOffset;
            config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
            const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error.$metadata) {
              error.$metadata.clockSkewCorrected = true;
            }
          }
          throw error;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config = throwSigningPropertyError("config", signingProperties.config);
          config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
        }
      }
    };
    AWSSDKSigV4Signer = AwsSdkSigV4Signer;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js
var import_protocol_http7, AwsSdkSigV4ASigner;
var init_AwsSdkSigV4ASigner = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"() {
    import_protocol_http7 = __toESM(require_dist_cjs3());
    init_utils();
    init_AwsSdkSigV4Signer();
    AwsSdkSigV4ASigner = class extends AwsSdkSigV4Signer {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http7.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);
        const configResolvedSigningRegionSet = await config.sigv4aSigningRegionSet?.();
        const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config.systemClockOffset),
          signingRegion: multiRegionOverride,
          signingService: signingName
        });
        return signedRequest;
      }
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getArrayForCommaSeparatedString.js
var getArrayForCommaSeparatedString;
var init_getArrayForCommaSeparatedString = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getArrayForCommaSeparatedString.js"() {
    getArrayForCommaSeparatedString = (str) => typeof str === "string" && str.length > 0 ? str.split(",").map((item) => item.trim()) : [];
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js
var NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY, NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY, NODE_AUTH_SCHEME_PREFERENCE_OPTIONS;
var init_NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js"() {
    init_getArrayForCommaSeparatedString();
    NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY = "AWS_AUTH_SCHEME_PREFERENCE";
    NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY = "auth_scheme_preference";
    NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = {
      environmentVariableSelector: (env) => {
        if (!(NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY in env))
          return void 0;
        return getArrayForCommaSeparatedString(env[NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY]);
      },
      configFileSelector: (profile) => {
        if (!(NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY in profile))
          return void 0;
        return getArrayForCommaSeparatedString(profile[NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY]);
      },
      default: []
    };
  }
});

// node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CredentialsProviderError: () => CredentialsProviderError,
      ProviderError: () => ProviderError2,
      TokenProviderError: () => TokenProviderError,
      chain: () => chain,
      fromStatic: () => fromStatic,
      memoize: () => memoize
    });
    module2.exports = __toCommonJS2(src_exports);
    var ProviderError2 = class _ProviderError extends Error {
      constructor(message, options = true) {
        let logger;
        let tryNextLink = true;
        if (typeof options === "boolean") {
          logger = void 0;
          tryNextLink = options;
        } else if (options != null && typeof options === "object") {
          logger = options.logger;
          tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, _ProviderError.prototype);
        logger?.debug?.(`@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
      }
      static {
        __name(this, "ProviderError");
      }
      /**
       * @deprecated use new operator.
       */
      static from(error, options = true) {
        return Object.assign(new this(error.message, options), error);
      }
    };
    var CredentialsProviderError = class _CredentialsProviderError extends ProviderError2 {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
      static {
        __name(this, "CredentialsProviderError");
      }
    };
    var TokenProviderError = class _TokenProviderError extends ProviderError2 {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
      static {
        __name(this, "TokenProviderError");
      }
    };
    var chain = /* @__PURE__ */ __name((...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError2("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err2) {
          lastProviderError = err2;
          if (err2?.tryNextLink) {
            continue;
          }
          throw err2;
        }
      }
      throw lastProviderError;
    }, "chain");
    var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, "memoize");
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js
var import_property_provider, resolveAwsSdkSigV4AConfig, NODE_SIGV4A_CONFIG_OPTIONS;
var init_resolveAwsSdkSigV4AConfig = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js"() {
    init_dist_es();
    import_property_provider = __toESM(require_dist_cjs22());
    resolveAwsSdkSigV4AConfig = (config) => {
      config.sigv4aSigningRegionSet = normalizeProvider2(config.sigv4aSigningRegionSet);
      return config;
    };
    NODE_SIGV4A_CONFIG_OPTIONS = {
      environmentVariableSelector(env) {
        if (env.AWS_SIGV4A_SIGNING_REGION_SET) {
          return env.AWS_SIGV4A_SIGNING_REGION_SET.split(",").map((_2) => _2.trim());
        }
        throw new import_property_provider.ProviderError("AWS_SIGV4A_SIGNING_REGION_SET not set in env.", {
          tryNextLink: true
        });
      },
      configFileSelector(profile) {
        if (profile.sigv4a_signing_region_set) {
          return (profile.sigv4a_signing_region_set ?? "").split(",").map((_2) => _2.trim());
        }
        throw new import_property_provider.ProviderError("sigv4a_signing_region_set not set in profile.", {
          tryNextLink: true
        });
      },
      default: void 0
    };
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      ALGORITHM_IDENTIFIER: () => ALGORITHM_IDENTIFIER,
      ALGORITHM_IDENTIFIER_V4A: () => ALGORITHM_IDENTIFIER_V4A,
      ALGORITHM_QUERY_PARAM: () => ALGORITHM_QUERY_PARAM,
      ALWAYS_UNSIGNABLE_HEADERS: () => ALWAYS_UNSIGNABLE_HEADERS,
      AMZ_DATE_HEADER: () => AMZ_DATE_HEADER,
      AMZ_DATE_QUERY_PARAM: () => AMZ_DATE_QUERY_PARAM,
      AUTH_HEADER: () => AUTH_HEADER,
      CREDENTIAL_QUERY_PARAM: () => CREDENTIAL_QUERY_PARAM,
      DATE_HEADER: () => DATE_HEADER,
      EVENT_ALGORITHM_IDENTIFIER: () => EVENT_ALGORITHM_IDENTIFIER,
      EXPIRES_QUERY_PARAM: () => EXPIRES_QUERY_PARAM,
      GENERATED_HEADERS: () => GENERATED_HEADERS,
      HOST_HEADER: () => HOST_HEADER,
      KEY_TYPE_IDENTIFIER: () => KEY_TYPE_IDENTIFIER,
      MAX_CACHE_SIZE: () => MAX_CACHE_SIZE,
      MAX_PRESIGNED_TTL: () => MAX_PRESIGNED_TTL,
      PROXY_HEADER_PATTERN: () => PROXY_HEADER_PATTERN,
      REGION_SET_PARAM: () => REGION_SET_PARAM,
      SEC_HEADER_PATTERN: () => SEC_HEADER_PATTERN,
      SHA256_HEADER: () => SHA256_HEADER,
      SIGNATURE_HEADER: () => SIGNATURE_HEADER,
      SIGNATURE_QUERY_PARAM: () => SIGNATURE_QUERY_PARAM,
      SIGNED_HEADERS_QUERY_PARAM: () => SIGNED_HEADERS_QUERY_PARAM,
      SignatureV4: () => SignatureV42,
      SignatureV4Base: () => SignatureV4Base,
      TOKEN_HEADER: () => TOKEN_HEADER,
      TOKEN_QUERY_PARAM: () => TOKEN_QUERY_PARAM,
      UNSIGNABLE_PATTERNS: () => UNSIGNABLE_PATTERNS,
      UNSIGNED_PAYLOAD: () => UNSIGNED_PAYLOAD,
      clearCredentialCache: () => clearCredentialCache,
      createScope: () => createScope,
      getCanonicalHeaders: () => getCanonicalHeaders,
      getCanonicalQuery: () => getCanonicalQuery,
      getPayloadHash: () => getPayloadHash,
      getSigningKey: () => getSigningKey,
      hasHeader: () => hasHeader,
      moveHeadersToQuery: () => moveHeadersToQuery,
      prepareRequest: () => prepareRequest,
      signatureV4aContainer: () => signatureV4aContainer
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_utf85 = require_dist_cjs12();
    var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    var REGION_SET_PARAM = "X-Amz-Region-Set";
    var AUTH_HEADER = "authorization";
    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    var DATE_HEADER = "date";
    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    var SHA256_HEADER = "x-amz-content-sha256";
    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    var HOST_HEADER = "host";
    var ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    var PROXY_HEADER_PATTERN = /^proxy-/;
    var SEC_HEADER_PATTERN = /^sec-/;
    var UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    var ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    var MAX_CACHE_SIZE = 50;
    var KEY_TYPE_IDENTIFIER = "aws4_request";
    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
    var import_util_hex_encoding = require_dist_cjs18();
    var import_util_utf83 = require_dist_cjs12();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = /* @__PURE__ */ __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
    var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    }, "getSigningKey");
    var clearCredentialCache = /* @__PURE__ */ __name(() => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    }, "clearCredentialCache");
    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, import_util_utf83.toUint8Array)(data));
      return hash.digest();
    }, "hmac");
    var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    }, "getCanonicalHeaders");
    var import_is_array_buffer = require_dist_cjs10();
    var import_util_utf822 = require_dist_cjs12();
    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, import_util_utf822.toUint8Array)(body));
        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    }, "getPayloadHash");
    var import_util_utf832 = require_dist_cjs12();
    var HeaderFormatter = class {
      static {
        __name(this, "HeaderFormatter");
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = (0, import_util_utf832.fromUtf8)(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([
              header.value ? 0 : 1
              /* boolFalse */
            ]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(
              0,
              3
              /* short */
            );
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(
              0,
              4
              /* integer */
            );
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(
              0,
              6
              /* byteArray */
            );
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = (0, import_util_utf832.fromUtf8)(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(
              0,
              7
              /* string */
            );
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static {
        __name(this, "Int64");
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i3 = 7, remaining = Math.abs(Math.round(number)); i3 > -1 && remaining > 0; i3--, remaining /= 256) {
          bytes[i3] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      /**
       * Called implicitly by infix arithmetic operators.
       */
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    function negate(bytes) {
      for (let i3 = 0; i3 < 8; i3++) {
        bytes[i3] ^= 255;
      }
      for (let i3 = 7; i3 > -1; i3--) {
        bytes[i3]++;
        if (bytes[i3] !== 0)
          break;
      }
    }
    __name(negate, "negate");
    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
    var import_protocol_http11 = require_dist_cjs3();
    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
      const { headers, query = {} } = import_protocol_http11.HttpRequest.clone(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname) || options.hoistableHeaders?.has(lname)) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    }, "moveHeadersToQuery");
    var prepareRequest = /* @__PURE__ */ __name((request) => {
      request = import_protocol_http11.HttpRequest.clone(request);
      for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, "prepareRequest");
    var import_util_middleware6 = require_dist_cjs2();
    var import_util_utf84 = require_dist_cjs12();
    var import_util_uri_escape = require_dist_cjs14();
    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        const encodedKey = (0, import_util_uri_escape.escapeUri)(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
          serialized[encodedKey] = `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[encodedKey] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value2)}`]), []).sort().join("&");
        }
      }
      return keys.sort().map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    }, "getCanonicalQuery");
    var iso8601 = /* @__PURE__ */ __name((time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
    var toDate = /* @__PURE__ */ __name((time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    }, "toDate");
    var SignatureV4Base = class {
      static {
        __name(this, "SignatureV4Base");
      }
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true
      }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, import_util_middleware6.normalizeProvider)(region);
        this.credentialProvider = (0, import_util_middleware6.normalizeProvider)(credentials);
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest, algorithmIdentifier) {
        const hash = new this.sha256();
        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${algorithmIdentifier}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if (pathSegment?.length === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
          const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || // @ts-expect-error: Property 'accessKeyId' does not exist on type 'object'.ts(2339)
        typeof credentials.accessKeyId !== "string" || // @ts-expect-error: Property 'secretAccessKey' does not exist on type 'object'.ts(2339)
        typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
      formatDate(now) {
        const longDate = iso8601(now).replace(/[\-:]/g, "");
        return {
          longDate,
          shortDate: longDate.slice(0, 8)
        };
      }
      getCanonicalHeaderList(headers) {
        return Object.keys(headers).sort().join(";");
      }
    };
    var SignatureV42 = class extends SignatureV4Base {
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true
      }) {
        super({
          applyChecksum,
          credentials,
          region,
          service,
          sha256,
          uriEscapePath
        });
        this.headerFormatter = new HeaderFormatter();
      }
      static {
        __name(this, "SignatureV4");
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = /* @__PURE__ */ new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          hoistableHeaders,
          signingRegion,
          signingService
        } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = this.formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject(
            "Signature version 4 presigned URLs must have an expiration date less than one week in the future"
          );
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
          request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent(
          {
            headers: this.headerFormatter.format(signableMessage.message.headers),
            payload: signableMessage.message.body
          },
          {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
          }
        );
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = this.formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, import_util_utf85.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, {
        signingDate = /* @__PURE__ */ new Date(),
        signableHeaders,
        unsignableHeaders,
        signingRegion,
        signingService
      } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = this.formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(
          longDate,
          credentialScope,
          canonicalRequest,
          ALGORITHM_IDENTIFIER
        );
        const hash = new this.sha256(await keyPromise);
        hash.update((0, import_util_utf85.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
    var signatureV4aContainer = {
      SignatureV4a: null
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
function normalizeCredentialProvider(config, { credentials, credentialDefaultProvider }) {
  let credentialsProvider;
  if (credentials) {
    if (!credentials?.memoized) {
      credentialsProvider = memoizeIdentityProvider(credentials, isIdentityExpired, doesIdentityRequireRefresh);
    } else {
      credentialsProvider = credentials;
    }
  } else {
    if (credentialDefaultProvider) {
      credentialsProvider = normalizeProvider2(credentialDefaultProvider(Object.assign({}, config, {
        parentClientConfig: config
      })));
    } else {
      credentialsProvider = async () => {
        throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.");
      };
    }
  }
  credentialsProvider.memoized = true;
  return credentialsProvider;
}
function bindCallerConfig(config, credentialsProvider) {
  if (credentialsProvider.configBound) {
    return credentialsProvider;
  }
  const fn = async (options) => credentialsProvider({ ...options, callerClientConfig: config });
  fn.memoized = credentialsProvider.memoized;
  fn.configBound = true;
  return fn;
}
var import_signature_v4, resolveAwsSdkSigV4Config, resolveAWSSDKSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_client();
    init_dist_es();
    import_signature_v4 = __toESM(require_dist_cjs23());
    resolveAwsSdkSigV4Config = (config) => {
      let inputCredentials = config.credentials;
      let isUserSupplied = !!config.credentials;
      let resolvedCredentials = void 0;
      Object.defineProperty(config, "credentials", {
        set(credentials) {
          if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
            isUserSupplied = true;
          }
          inputCredentials = credentials;
          const memoizedProvider = normalizeCredentialProvider(config, {
            credentials: inputCredentials,
            credentialDefaultProvider: config.credentialDefaultProvider
          });
          const boundProvider = bindCallerConfig(config, memoizedProvider);
          if (isUserSupplied && !boundProvider.attributed) {
            resolvedCredentials = async (options) => boundProvider(options).then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e"));
            resolvedCredentials.memoized = boundProvider.memoized;
            resolvedCredentials.configBound = boundProvider.configBound;
            resolvedCredentials.attributed = true;
          } else {
            resolvedCredentials = boundProvider;
          }
        },
        get() {
          return resolvedCredentials;
        },
        enumerable: true,
        configurable: true
      });
      config.credentials = inputCredentials;
      const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
      let signer;
      if (config.signer) {
        signer = normalizeProvider2(config.signer);
      } else if (config.regionInfoProvider) {
        signer = () => normalizeProvider2(config.region)().then(async (region) => [
          await config.regionInfoProvider(region, {
            useFipsEndpoint: await config.useFipsEndpoint(),
            useDualstackEndpoint: await config.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config.signingRegion = config.signingRegion || signingRegion || region;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: config.credentials,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config.signingName || config.defaultSigningName,
            signingRegion: await normalizeProvider2(config.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config.signingRegion = config.signingRegion || signingRegion;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: config.credentials,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        };
      }
      const resolvedConfig = Object.assign(config, {
        systemClockOffset,
        signingEscapePath,
        signer
      });
      return resolvedConfig;
    };
    resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js
var init_aws_sdk = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_AwsSdkSigV4Signer();
    init_AwsSdkSigV4ASigner();
    init_NODE_AUTH_SCHEME_PREFERENCE_OPTIONS();
    init_resolveAwsSdkSigV4AConfig();
    init_resolveAwsSdkSigV4Config();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js
var init_httpAuthSchemes2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_aws_sdk();
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js
var _toStr, _toBool, _toNum;
var init_coercing_serializers = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    _toStr = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number" || typeof val2 === "bigint") {
        const warning = new Error(`Received number ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      if (typeof val2 === "boolean") {
        const warning = new Error(`Received boolean ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      return val2;
    };
    _toBool = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number") {
      }
      if (typeof val2 === "string") {
        const lowercase = val2.toLowerCase();
        if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
          const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
          warning.name = "Warning";
          console.warn(warning);
        }
        return val2 !== "" && lowercase !== "false";
      }
      return val2;
    };
    _toNum = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "boolean") {
      }
      if (typeof val2 === "string") {
        const num = Number(val2);
        if (num.toString() !== val2) {
          const warning = new Error(`Received string "${val2}" where a number was expected.`);
          warning.name = "Warning";
          console.warn(warning);
          return val2;
        }
        return num;
      }
      return val2;
    };
  }
});

// node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      constructStack: () => constructStack
    });
    module2.exports = __toCommonJS2(src_exports);
    var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    }, "getAllAliases");
    var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    }, "getMiddlewareNameWithAliases");
    var constructStack = /* @__PURE__ */ __name(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name((entries) => entries.sort(
        (a3, b3) => stepWeights[b3.step] - stepWeights[a3.step] || priorityWeights[b3.priority || "normal"] - priorityWeights[a3.priority || "normal"]
      ), "sort");
      const removeByName = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByName");
      const removeByReference = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByReference");
      const cloneTo = /* @__PURE__ */ __name((toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
      }, "cloneTo");
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, "expandRelativeMiddlewareList");
      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(
          (wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
          },
          []
        );
        return mainChain;
      }, "getMiddlewareList");
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex(
                  (entry2) => entry2.name === alias || entry2.aliases?.some((a3) => a3 === alias)
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`
                  );
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex(
                  (entry2) => entry2.name === alias || entry2.aliases?.some((a3) => a3 === alias)
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                  );
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name((entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          }, "filterCb");
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(
            identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false)
          );
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler2 = middleware(handler2, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler2;
        }
      };
      return stack;
    }, "constructStack");
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Client: () => Client,
      Command: () => Command,
      LazyJsonString: () => LazyJsonString,
      NoOpLogger: () => NoOpLogger3,
      SENSITIVE_STRING: () => SENSITIVE_STRING3,
      ServiceException: () => ServiceException,
      _json: () => _json2,
      collectBody: () => import_protocols2.collectBody,
      convertMap: () => convertMap,
      createAggregatedClient: () => createAggregatedClient3,
      dateToUtcString: () => dateToUtcString,
      decorateServiceException: () => decorateServiceException,
      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion4,
      expectBoolean: () => expectBoolean,
      expectByte: () => expectByte,
      expectFloat32: () => expectFloat32,
      expectInt: () => expectInt,
      expectInt32: () => expectInt32,
      expectLong: () => expectLong,
      expectNonNull: () => expectNonNull,
      expectNumber: () => expectNumber,
      expectObject: () => expectObject,
      expectShort: () => expectShort,
      expectString: () => expectString,
      expectUnion: () => expectUnion2,
      extendedEncodeURIComponent: () => import_protocols2.extendedEncodeURIComponent,
      getArrayIfSingleItem: () => getArrayIfSingleItem,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration3,
      getValueFromTextNode: () => getValueFromTextNode2,
      handleFloat: () => handleFloat,
      isSerializableHeaderValue: () => isSerializableHeaderValue,
      limitedParseDouble: () => limitedParseDouble,
      limitedParseFloat: () => limitedParseFloat,
      limitedParseFloat32: () => limitedParseFloat32,
      loadConfigsForDefaultMode: () => loadConfigsForDefaultMode3,
      logger: () => logger,
      map: () => map2,
      parseBoolean: () => parseBoolean,
      parseEpochTimestamp: () => parseEpochTimestamp,
      parseRfc3339DateTime: () => parseRfc3339DateTime,
      parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,
      parseRfc7231DateTime: () => parseRfc7231DateTime,
      quoteHeader: () => quoteHeader,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig3,
      resolvedPath: () => import_protocols2.resolvedPath,
      serializeDateTime: () => serializeDateTime,
      serializeFloat: () => serializeFloat,
      splitEvery: () => splitEvery,
      splitHeader: () => splitHeader,
      strictParseByte: () => strictParseByte,
      strictParseDouble: () => strictParseDouble,
      strictParseFloat: () => strictParseFloat,
      strictParseFloat32: () => strictParseFloat32,
      strictParseInt: () => strictParseInt,
      strictParseInt32: () => strictParseInt32,
      strictParseLong: () => strictParseLong,
      strictParseShort: () => strictParseShort,
      take: () => take2,
      throwDefaultError: () => throwDefaultError3,
      withBaseException: () => withBaseException3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_middleware_stack = require_dist_cjs24();
    var Client = class {
      constructor(config) {
        this.config = config;
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      static {
        __name(this, "Client");
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
        let handler2;
        if (useHandlerCache) {
          if (!this.handlers) {
            this.handlers = /* @__PURE__ */ new WeakMap();
          }
          const handlers = this.handlers;
          if (handlers.has(command.constructor)) {
            handler2 = handlers.get(command.constructor);
          } else {
            handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
            handlers.set(command.constructor, handler2);
          }
        } else {
          delete this.handlers;
          handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
          handler2(command).then(
            (result) => callback(null, result.output),
            (err2) => callback(err2)
          ).catch(
            // prevent any errors thrown in the callback from triggering an
            // unhandled promise rejection
            () => {
            }
          );
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        this.config?.requestHandler?.destroy?.();
        delete this.handlers;
      }
    };
    var import_protocols2 = (init_protocols(), __toCommonJS(protocols_exports));
    var import_types5 = require_dist_cjs();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      static {
        __name(this, "Command");
      }
      /**
       * Factory for Command ClassBuilder.
       * @internal
       */
      static classBuilder() {
        return new ClassBuilder();
      }
      /**
       * @internal
       */
      resolveMiddlewareWithContext(clientStack, configuration, options, {
        middlewareFn,
        clientName,
        commandName,
        inputFilterSensitiveLog,
        outputFilterSensitiveLog,
        smithyContext,
        additionalContext,
        CommandCtor
      }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [import_types5.SMITHY_CONTEXT_KEY]: {
            commandInstance: this,
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
    };
    var ClassBuilder = class {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_2) => _2;
        this._outputFilterSensitiveLog = (_2) => _2;
        this._serializer = null;
        this._deserializer = null;
      }
      static {
        __name(this, "ClassBuilder");
      }
      /**
       * Optional init callback.
       */
      init(cb) {
        this._init = cb;
      }
      /**
       * Set the endpoint parameter instructions.
       */
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      /**
       * Add any number of middleware.
       */
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      /**
       * Set the initial handler execution context Smithy field.
       */
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      /**
       * Set the initial handler execution context.
       */
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      /**
       * Set constant string identifiers for the operation.
       */
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      /**
       * Set the input and output sensistive log filters.
       */
      f(inputFilter = (_2) => _2, outputFilter = (_2) => _2) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      /**
       * Sets the serializer.
       */
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      /**
       * Sets the deserializer.
       */
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      /**
       * @returns a Command class with the classBuilder properties.
       */
      build() {
        const closure = this;
        let CommandRef;
        return CommandRef = class extends Command {
          /**
           * @public
           */
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
          }
          static {
            __name(this, "CommandRef");
          }
          /**
           * @public
           */
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          /**
           * @internal
           */
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        };
      }
    };
    var SENSITIVE_STRING3 = "***SensitiveInformation***";
    var createAggregatedClient3 = /* @__PURE__ */ __name((commands3, Client2) => {
      for (const command of Object.keys(commands3)) {
        const CommandCtor = commands3[command];
        const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        }, "methodImpl");
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    }, "createAggregatedClient");
    var parseBoolean = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    }, "parseBoolean");
    var expectBoolean = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    }, "expectBoolean");
    var expectNumber = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    }, "expectNumber");
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = /* @__PURE__ */ __name((value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    }, "expectFloat32");
    var expectLong = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    }, "expectLong");
    var expectInt = expectLong;
    var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), "expectInt32");
    var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), "expectShort");
    var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), "expectByte");
    var expectSizedInt = /* @__PURE__ */ __name((value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    }, "expectSizedInt");
    var castInt = /* @__PURE__ */ __name((value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    }, "castInt");
    var expectNonNull = /* @__PURE__ */ __name((value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    }, "expectNonNull");
    var expectObject = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    }, "expectObject");
    var expectString = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    }, "expectString");
    var expectUnion2 = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v6]) => v6 != null).map(([k3]) => k3);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    }, "expectUnion");
    var strictParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectNumber(parseNumber(value));
      }
      return expectNumber(value);
    }, "strictParseDouble");
    var strictParseFloat = strictParseDouble;
    var strictParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    }, "strictParseFloat32");
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = /* @__PURE__ */ __name((value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    }, "parseNumber");
    var limitedParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectNumber(value);
    }, "limitedParseDouble");
    var handleFloat = limitedParseDouble;
    var limitedParseFloat = limitedParseDouble;
    var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectFloat32(value);
    }, "limitedParseFloat32");
    var parseFloatString = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    }, "parseFloatString");
    var strictParseLong = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    }, "strictParseLong");
    var strictParseInt = strictParseLong;
    var strictParseInt32 = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    }, "strictParseInt32");
    var strictParseShort = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    }, "strictParseShort");
    var strictParseByte = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    }, "strictParseByte");
    var stackTraceWarning = /* @__PURE__ */ __name((message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s3) => !s3.includes("stackTraceWarning")).join("\n");
    }, "stackTraceWarning");
    var logger = {
      warn: console.warn
    };
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    __name(dateToUtcString, "dateToUtcString");
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_2, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    }, "parseRfc3339DateTime");
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_2, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    }, "parseRfc3339DateTimeWithOffset");
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_2, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_2, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(
          buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
          })
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_2, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    }, "parseRfc7231DateTime");
    var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
      } else if (typeof value === "object" && value.tag === 1) {
        valueAsDouble = value.value;
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    }, "parseEpochTimestamp");
    var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, "hour", 0, 23),
          parseDateValue(time.minutes, "minute", 0, 59),
          // seconds can go up to 60 for leap seconds
          parseDateValue(time.seconds, "seconds", 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    }, "buildDate");
    var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    }, "parseTwoDigitYear");
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = /* @__PURE__ */ __name((input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    }, "adjustRfc850Year");
    var parseMonthByShortName = /* @__PURE__ */ __name((value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    }, "parseMonthByShortName");
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    }, "validateDayOfMonth");
    var isLeapYear = /* @__PURE__ */ __name((year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }, "isLeapYear");
    var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    }, "parseDateValue");
    var parseMilliseconds = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    }, "parseMilliseconds");
    var parseOffsetToMilliseconds = /* @__PURE__ */ __name((value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    }, "parseOffsetToMilliseconds");
    var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    }, "stripLeadingZeroes");
    var ServiceException = class _ServiceException extends Error {
      static {
        __name(this, "ServiceException");
      }
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
      /**
       * Checks if a value is an instance of ServiceException (duck typed)
       */
      static isInstance(value) {
        if (!value)
          return false;
        const candidate = value;
        return _ServiceException.prototype.isPrototypeOf(candidate) || Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === "client" || candidate.$fault === "server");
      }
      /**
       * Custom instanceof check to support the operator for ServiceException base class
       */
      static [Symbol.hasInstance](instance) {
        if (!instance)
          return false;
        const candidate = instance;
        if (this === _ServiceException) {
          return _ServiceException.isInstance(instance);
        }
        if (_ServiceException.isInstance(instance)) {
          if (candidate.name && this.name) {
            return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
          }
          return this.prototype.isPrototypeOf(instance);
        }
        return false;
      }
    };
    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
      Object.entries(additions).filter(([, v6]) => v6 !== void 0).forEach(([k3, v6]) => {
        if (exception[k3] == void 0 || exception[k3] === "") {
          exception[k3] = v6;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    }, "decorateServiceException");
    var throwDefaultError3 = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata3(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    }, "throwDefaultError");
    var withBaseException3 = /* @__PURE__ */ __name((ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError3({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    }, "withBaseException");
    var deserializeMetadata3 = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var loadConfigsForDefaultMode3 = /* @__PURE__ */ __name((mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    }, "loadConfigsForDefaultMode");
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion4 = /* @__PURE__ */ __name((version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 16) {
        warningEmitted = true;
      }
    }, "emitWarningIfUnsupportedVersion");
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in import_types5.AlgorithmId) {
        const algorithmId = import_types5.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig2) => {
      const runtimeConfig = {};
      clientConfig2.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        setRetryStrategy(retryStrategy) {
          runtimeConfig.retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return runtimeConfig.retryStrategy;
        }
      };
    }, "getRetryConfiguration");
    var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    }, "resolveRetryRuntimeConfig");
    var getDefaultExtensionConfiguration3 = /* @__PURE__ */ __name((runtimeConfig) => {
      return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));
    }, "getDefaultExtensionConfiguration");
    var getDefaultClientConfiguration = getDefaultExtensionConfiguration3;
    var resolveDefaultRuntimeConfig3 = /* @__PURE__ */ __name((config) => {
      return Object.assign(resolveChecksumRuntimeConfig(config), resolveRetryRuntimeConfig(config));
    }, "resolveDefaultRuntimeConfig");
    var getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
    var getValueFromTextNode2 = /* @__PURE__ */ __name((obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode2(obj[key]);
        }
      }
      return obj;
    }, "getValueFromTextNode");
    var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => {
      return value != null;
    }, "isSerializableHeaderValue");
    var LazyJsonString = /* @__PURE__ */ __name(function LazyJsonString2(val2) {
      const str = Object.assign(new String(val2), {
        deserializeJSON() {
          return JSON.parse(String(val2));
        },
        toString() {
          return String(val2);
        },
        toJSON() {
          return String(val2);
        }
      });
      return str;
    }, "LazyJsonString");
    LazyJsonString.from = (object) => {
      if (object && typeof object === "object" && (object instanceof LazyJsonString || "deserializeJSON" in object)) {
        return object;
      } else if (typeof object === "string" || Object.getPrototypeOf(object) === String.prototype) {
        return LazyJsonString(String(object));
      }
      return LazyJsonString(JSON.stringify(object));
    };
    LazyJsonString.fromObject = LazyJsonString.from;
    var NoOpLogger3 = class {
      static {
        __name(this, "NoOpLogger");
      }
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    function map2(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    __name(map2, "map");
    var convertMap = /* @__PURE__ */ __name((target) => {
      const output = {};
      for (const [k3, v6] of Object.entries(target || {})) {
        output[k3] = [, v6];
      }
      return output;
    }, "convertMap");
    var take2 = /* @__PURE__ */ __name((source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    }, "take");
    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
      return map2(
        target,
        Object.entries(instructions).reduce(
          (_instructions, [key, value]) => {
            if (Array.isArray(value)) {
              _instructions[key] = value;
            } else {
              if (typeof value === "function") {
                _instructions[key] = [filter, value()];
              } else {
                _instructions[key] = [filter, value];
              }
            }
            return _instructions;
          },
          {}
        )
      );
    }, "mapWithFilter");
    var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    }, "applyInstruction");
    var nonNullish = /* @__PURE__ */ __name((_2) => _2 != null, "nonNullish");
    var pass = /* @__PURE__ */ __name((_2) => _2, "pass");
    function quoteHeader(part) {
      if (part.includes(",") || part.includes('"')) {
        part = `"${part.replace(/"/g, '\\"')}"`;
      }
      return part;
    }
    __name(quoteHeader, "quoteHeader");
    var serializeFloat = /* @__PURE__ */ __name((value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    }, "serializeFloat");
    var serializeDateTime = /* @__PURE__ */ __name((date) => date.toISOString().replace(".000Z", "Z"), "serializeDateTime");
    var _json2 = /* @__PURE__ */ __name((obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_2) => _2 != null).map(_json2);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json2(obj[key]);
        }
        return target;
      }
      return obj;
    }, "_json");
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i3 = 0; i3 < segments.length; i3++) {
        if (currentSegment === "") {
          currentSegment = segments[i3];
        } else {
          currentSegment += delimiter + segments[i3];
        }
        if ((i3 + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    __name(splitEvery, "splitEvery");
    var splitHeader = /* @__PURE__ */ __name((value) => {
      const z2 = value.length;
      const values = [];
      let withinQuotes = false;
      let prevChar = void 0;
      let anchor = 0;
      for (let i3 = 0; i3 < z2; ++i3) {
        const char = value[i3];
        switch (char) {
          case `"`:
            if (prevChar !== "\\") {
              withinQuotes = !withinQuotes;
            }
            break;
          case ",":
            if (!withinQuotes) {
              values.push(value.slice(anchor, i3));
              anchor = i3 + 1;
            }
            break;
          default:
        }
        prevChar = char;
      }
      values.push(value.slice(anchor));
      return values.map((v6) => {
        v6 = v6.trim();
        const z22 = v6.length;
        if (z22 < 2) {
          return v6;
        }
        if (v6[0] === `"` && v6[z22 - 1] === `"`) {
          v6 = v6.slice(1, z22 - 1);
        }
        return v6.replace(/\\"/g, '"');
      });
    }, "splitHeader");
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var import_smithy_client, awsExpectUnion;
var init_awsExpectUnion = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    import_smithy_client = __toESM(require_dist_cjs25());
    awsExpectUnion = (value) => {
      if (value == null) {
        return void 0;
      }
      if (typeof value === "object" && "__type" in value) {
        delete value.__type;
      }
      return (0, import_smithy_client.expectUnion)(value);
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var import_smithy_client2, collectBodyString;
var init_common = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    import_smithy_client2 = __toESM(require_dist_cjs25());
    collectBodyString = (streamBody, context) => (0, import_smithy_client2.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody, parseJsonErrorBody, loadRestJsonErrorCode;
var init_parseJsonBody = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_common();
    parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e3) {
          if (e3?.name === "SyntaxError") {
            Object.defineProperty(e3, "$responseBodyText", {
              value: encoded
            });
          }
          throw e3;
        }
      }
      return {};
    });
    parseJsonErrorBody = async (errorBody, context) => {
      const value = await parseJsonBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k3) => k3.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v6) {
      return typeof v6 !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a3, arrayMode) {
      if (a3) {
        const keys = Object.keys(a3);
        const len = keys.length;
        for (let i3 = 0; i3 < len; i3++) {
          if (arrayMode === "strict") {
            target[keys[i3]] = [a3[keys[i3]]];
          } else {
            target[keys[i3]] = a3[keys[i3]];
          }
        }
      }
    };
    exports2.getValue = function(v6) {
      if (exports2.isExist(v6)) {
        return v6;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i3 = 0; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === "<" && xmlData[i3 + 1] === "?") {
          i3 += 2;
          i3 = readPI(xmlData, i3);
          if (i3.err) return i3;
        } else if (xmlData[i3] === "<") {
          let tagStartPos = i3;
          i3++;
          if (xmlData[i3] === "!") {
            i3 = readCommentAndCDATA(xmlData, i3);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i3] === "/") {
              closingTag = true;
              i3++;
            }
            let tagName = "";
            for (; i3 < xmlData.length && xmlData[i3] !== ">" && xmlData[i3] !== " " && xmlData[i3] !== "	" && xmlData[i3] !== "\n" && xmlData[i3] !== "\r"; i3++) {
              tagName += xmlData[i3];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i3--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i3));
            }
            const result = readAttributeStr(xmlData, i3);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i3));
            }
            let attrStr = result.value;
            i3 = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i3 - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i3));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else if (tags.length === 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i3 - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i3));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i3++; i3 < xmlData.length; i3++) {
              if (xmlData[i3] === "<") {
                if (xmlData[i3 + 1] === "!") {
                  i3++;
                  i3 = readCommentAndCDATA(xmlData, i3);
                  continue;
                } else if (xmlData[i3 + 1] === "?") {
                  i3 = readPI(xmlData, ++i3);
                  if (i3.err) return i3;
                } else {
                  break;
                }
              } else if (xmlData[i3] === "&") {
                const afterAmp = validateAmpersand(xmlData, i3);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i3));
                i3 = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i3])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i3));
                }
              }
            }
            if (xmlData[i3] === "<") {
              i3--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i3])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i3] + "' is not expected.", getLineNumberForPosition(xmlData, i3));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t3) => t3.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i3) {
      const start = i3;
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] == "?" || xmlData[i3] == " ") {
          const tagname = xmlData.substr(start, i3 - start);
          if (i3 > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i3));
          } else if (xmlData[i3] == "?" && xmlData[i3 + 1] == ">") {
            i3++;
            break;
          } else {
            continue;
          }
        }
      }
      return i3;
    }
    function readCommentAndCDATA(xmlData, i3) {
      if (xmlData.length > i3 + 5 && xmlData[i3 + 1] === "-" && xmlData[i3 + 2] === "-") {
        for (i3 += 3; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "-" && xmlData[i3 + 1] === "-" && xmlData[i3 + 2] === ">") {
            i3 += 2;
            break;
          }
        }
      } else if (xmlData.length > i3 + 8 && xmlData[i3 + 1] === "D" && xmlData[i3 + 2] === "O" && xmlData[i3 + 3] === "C" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "Y" && xmlData[i3 + 6] === "P" && xmlData[i3 + 7] === "E") {
        let angleBracketsCount = 1;
        for (i3 += 8; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i3] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i3 + 9 && xmlData[i3 + 1] === "[" && xmlData[i3 + 2] === "C" && xmlData[i3 + 3] === "D" && xmlData[i3 + 4] === "A" && xmlData[i3 + 5] === "T" && xmlData[i3 + 6] === "A" && xmlData[i3 + 7] === "[") {
        for (i3 += 8; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "]" && xmlData[i3 + 1] === "]" && xmlData[i3 + 2] === ">") {
            i3 += 2;
            break;
          }
        }
      }
      return i3;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i3) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === doubleQuote || xmlData[i3] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i3];
          } else if (startChar !== xmlData[i3]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i3] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i3];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i3,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i3 = 0; i3 < matches.length; i3++) {
        if (matches[i3][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i3][2] + "' has no space in starting.", getPositionFromMatch(matches[i3]));
        } else if (matches[i3][3] !== void 0 && matches[i3][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i3][2] + "' is without value.", getPositionFromMatch(matches[i3]));
        } else if (matches[i3][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i3][2] + "' is not allowed.", getPositionFromMatch(matches[i3]));
        }
        const attrName = matches[i3][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i3]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i3]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i3) {
      let re = /\d/;
      if (xmlData[i3] === "x") {
        i3++;
        re = /[\da-fA-F]/;
      }
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === ";")
          return i3;
        if (!xmlData[i3].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i3) {
      i3++;
      if (xmlData[i3] === ";")
        return -1;
      if (xmlData[i3] === "#") {
        i3++;
        return validateNumberAmpersand(xmlData, i3);
      }
      let count = 0;
      for (; i3 < xmlData.length; i3++, count++) {
        if (xmlData[i3].match(/\w/) && count < 20)
          continue;
        if (xmlData[i3] === ";")
          break;
        return -1;
      }
      return i3;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__") key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__") node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    var util = require_util();
    function readDocType(xmlData, i3) {
      const entities = {};
      if (xmlData[i3 + 3] === "O" && xmlData[i3 + 4] === "C" && xmlData[i3 + 5] === "T" && xmlData[i3 + 6] === "Y" && xmlData[i3 + 7] === "P" && xmlData[i3 + 8] === "E") {
        i3 = i3 + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i3 < xmlData.length; i3++) {
          if (xmlData[i3] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i3)) {
              i3 += 7;
              [entityName, val, i3] = readEntityExp(xmlData, i3 + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i3)) i3 += 8;
            else if (hasBody && isAttlist(xmlData, i3)) i3 += 8;
            else if (hasBody && isNotation(xmlData, i3)) i3 += 9;
            else if (isComment) comment = true;
            else throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i3] === ">") {
            if (comment) {
              if (xmlData[i3 - 1] === "-" && xmlData[i3 - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i3] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i3];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i: i3 };
    }
    function readEntityExp(xmlData, i3) {
      let entityName2 = "";
      for (; i3 < xmlData.length && (xmlData[i3] !== "'" && xmlData[i3] !== '"'); i3++) {
        entityName2 += xmlData[i3];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1) throw new Error("External entites are not supported");
      const startChar = xmlData[i3++];
      let val2 = "";
      for (; i3 < xmlData.length && xmlData[i3] !== startChar; i3++) {
        val2 += xmlData[i3];
      }
      return [entityName2, val2, i3];
    }
    function isComment(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "-" && xmlData[i3 + 3] === "-") return true;
      return false;
    }
    function isEntity(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "E" && xmlData[i3 + 3] === "N" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "I" && xmlData[i3 + 6] === "T" && xmlData[i3 + 7] === "Y") return true;
      return false;
    }
    function isElement(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "E" && xmlData[i3 + 3] === "L" && xmlData[i3 + 4] === "E" && xmlData[i3 + 5] === "M" && xmlData[i3 + 6] === "E" && xmlData[i3 + 7] === "N" && xmlData[i3 + 8] === "T") return true;
      return false;
    }
    function isAttlist(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "A" && xmlData[i3 + 3] === "T" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "L" && xmlData[i3 + 6] === "I" && xmlData[i3 + 7] === "S" && xmlData[i3 + 8] === "T") return true;
      return false;
    }
    function isNotation(xmlData, i3) {
      if (xmlData[i3 + 1] === "!" && xmlData[i3 + 2] === "N" && xmlData[i3 + 3] === "O" && xmlData[i3 + 4] === "T" && xmlData[i3 + 5] === "A" && xmlData[i3 + 6] === "T" && xmlData[i3 + 7] === "I" && xmlData[i3 + 8] === "O" && xmlData[i3 + 9] === "N") return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports2, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/;
    var consider = {
      hex: true,
      // oct: false,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string") return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr)) return str;
      else if (str === "0") return 0;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return parse_int(trimmedStr, 16);
      } else if (trimmedStr.search(/[eE]/) !== -1) {
        const notation = trimmedStr.match(/^([-\+])?(0*)([0-9]*(\.[0-9]*)?[eE][-\+]?[0-9]+)$/);
        if (notation) {
          if (options.leadingZeros) {
            trimmedStr = (notation[1] || "") + notation[3];
          } else {
            if (notation[2] === "0" && notation[3][0] === ".") {
            } else {
              return str;
            }
          }
          return options.eNotation ? Number(trimmedStr) : str;
        } else {
          return str;
        }
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str;
          else if (options.leadingZeros && leadingZeros === str) return 0;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation) return num;
              else return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "") return num;
              else if (numStr === numTrimmedByZeros) return num;
              else if (sign && numStr === "-" + numTrimmedByZeros) return num;
              else return str;
            }
            if (leadingZeros) {
              return numTrimmedByZeros === numStr || sign + numTrimmedByZeros === numStr ? num : str;
            } else {
              return trimmedStr === numStr || trimmedStr === sign + numStr ? num : str;
            }
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".") numStr = "0";
        else if (numStr[0] === ".") numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    function parse_int(numStr, base) {
      if (parseInt) return parseInt(numStr, base);
      else if (Number.parseInt) return Number.parseInt(numStr, base);
      else if (window && window.parseInt) return window.parseInt(numStr, base);
      else throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
    }
    module2.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
          "num_dec": { regex: /&#([0-9]{1,7});/g, val: (_2, str) => String.fromCharCode(Number.parseInt(str, 10)) },
          "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_2, str) => String.fromCharCode(Number.parseInt(str, 16)) }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i3 = 0; i3 < entKeys.length; i3++) {
        const ent = entKeys[i3];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities) val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i3 = 0; i3 < len; i3++) {
          const attrName = this.resolveNameSpace(matches[i3][1]);
          let oldVal = matches[i3][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__") aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i3 = 0; i3 < xmlData.length; i3++) {
        const ch = xmlData[i3];
        if (ch === "<") {
          if (xmlData[i3 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i3, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i3 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i3 = closeIndex;
          } else if (xmlData[i3 + 1] === "?") {
            let tagData = readTagExp(xmlData, i3, false, "?>");
            if (!tagData) throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i3 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i3 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i3 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i3 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i3 = endIndex;
          } else if (xmlData.substr(i3 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i3);
            this.docTypeEntities = result.entities;
            i3 = result.i;
          } else if (xmlData.substr(i3 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i3, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i3 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
            if (val2 == void 0) val2 = "";
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              currentNode.add(this.options.textNodeName, val2);
            }
            i3 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i3, this.options.removeNSPrefix);
            let tagName = result.tagName;
            const rawTagName = result.rawTagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                i3 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i3 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                if (!result2) throw new Error(`Unexpected end of ${rawTagName}`);
                i3 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i3 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i3];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0) isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i3, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i3; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary) attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i3, errMsg) {
      const closingIndex = xmlData.indexOf(str, i3);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i3, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i3 + 1, closingChar);
      if (!result) return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substring(0, separatorIndex);
        tagExp = tagExp.substring(separatorIndex + 1).trimStart();
      }
      const rawTagName = tagName;
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent,
        rawTagName
      };
    }
    function readStopNodeData(xmlData, tagName, i3) {
      const startIndex = i3;
      let openTagCount = 1;
      for (; i3 < xmlData.length; i3++) {
        if (xmlData[i3] === "<") {
          if (xmlData[i3 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i3, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i3 + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i3),
                  i: closeIndex
                };
              }
            }
            i3 = closeIndex;
          } else if (xmlData[i3 + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i3 + 1, "StopNode is not closed.");
            i3 = closeIndex;
          } else if (xmlData.substr(i3 + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i3 + 3, "StopNode is not closed.");
            i3 = closeIndex;
          } else if (xmlData.substr(i3 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i3, "StopNode is not closed.") - 2;
            i3 = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i3, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i3 = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true") return true;
        else if (newval === "false") return false;
        else return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i3 = 0; i3 < arr.length; i3++) {
        const tagObj = arr[i3];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0) newJpath = property;
        else newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0) text = tagObj[property];
          else text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode) val2[options.textNodeName] = "";
            else val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0) compressedObj[options.textNodeName] = text;
      } else if (text !== void 0) compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i3 = 0; i3 < keys.length; i3++) {
        const key = keys[i3];
        if (key !== ":@") return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i3 = 0; i3 < len; i3++) {
          const atrrName = keys[i3];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports2.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser2 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0) return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser2;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i3 = 0; i3 < arr.length; i3++) {
        const tagObj = arr[i3];
        const tagName = propName(tagObj);
        if (tagName === void 0) continue;
        let newJPath = "";
        if (jPath.length === 0) newJPath = tagName;
        else newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode) xmlStr += tagStart + ">";
          else xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i3 = 0; i3 < keys.length; i3++) {
        const key = keys[i3];
        if (!obj.hasOwnProperty(key)) continue;
        if (key !== ":@") return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          if (!attrMap.hasOwnProperty(attr)) continue;
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName) return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i3 = 0; i3 < options.entities.length; i3++) {
          const entity = options.entities[i3];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a3) {
        return a3;
      },
      attributeValueProcessor: function(attrName, a3) {
        return a3;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (!Object.prototype.hasOwnProperty.call(jObj, key)) continue;
        if (typeof jObj[key] === "undefined") {
          if (this.isAttribute(key)) {
            val2 += "";
          }
        } else if (jObj[key] === null) {
          if (this.isAttribute(key)) {
            val2 += "";
          } else if (key[0] === "?") {
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          } else {
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          }
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          let listTagAttr = "";
          for (let j3 = 0; j3 < arrLen; j3++) {
            const item = jObj[key][j3];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?") val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                const result = this.j2x(item, level + 1);
                listTagVal += result.val;
                if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {
                  listTagAttr += result.attrStr;
                }
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              if (this.options.oneListGroup) {
                let textValue = this.options.tagValueProcessor(key, item);
                textValue = this.replaceEntitiesValue(textValue);
                listTagVal += textValue;
              } else {
                listTagVal += this.buildTextValNode(item, key, "", level);
              }
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j3 = 0; j3 < L; j3++) {
              attrStr += this.buildAttrPairStr(Ks[j3], "" + jObj[key][Ks[j3]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?") return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if ((attrStr || attrStr === "") && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i3 = 0; i3 < this.options.entities.length; i3++) {
          const entity = this.options.entities[i3];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser2 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser: XMLParser2,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js
var import_smithy_client3, import_fast_xml_parser, parseXmlBody, parseXmlErrorBody, loadRestXmlErrorCode;
var init_parseXmlBody = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    import_smithy_client3 = __toESM(require_dist_cjs25());
    import_fast_xml_parser = __toESM(require_fxp());
    init_common();
    parseXmlBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_2, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e3) {
          if (e3 && typeof e3 === "object") {
            Object.defineProperty(e3, "$responseBodyText", {
              value: encoded
            });
          }
          throw e3;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, import_smithy_client3.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody = async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    loadRestXmlErrorCode = (output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js
var init_protocols2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_coercing_serializers();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_parseXmlBody();
  }
});

// node_modules/@aws-sdk/core/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
  AwsSdkSigV4ASigner: () => AwsSdkSigV4ASigner,
  AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
  NODE_AUTH_SCHEME_PREFERENCE_OPTIONS: () => NODE_AUTH_SCHEME_PREFERENCE_OPTIONS,
  NODE_SIGV4A_CONFIG_OPTIONS: () => NODE_SIGV4A_CONFIG_OPTIONS,
  _toBool: () => _toBool,
  _toNum: () => _toNum,
  _toStr: () => _toStr,
  awsExpectUnion: () => awsExpectUnion,
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  loadRestJsonErrorCode: () => loadRestJsonErrorCode,
  loadRestXmlErrorCode: () => loadRestXmlErrorCode,
  parseJsonBody: () => parseJsonBody,
  parseJsonErrorBody: () => parseJsonErrorBody,
  parseXmlBody: () => parseXmlBody,
  parseXmlErrorBody: () => parseXmlErrorBody,
  resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
  resolveAwsSdkSigV4AConfig: () => resolveAwsSdkSigV4AConfig,
  resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config,
  setCredentialFeature: () => setCredentialFeature,
  setFeature: () => setFeature2,
  state: () => state,
  validateSigningProperties: () => validateSigningProperties
});
var init_dist_es2 = __esm({
  "node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_client();
    init_httpAuthSchemes2();
    init_protocols2();
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      DEFAULT_UA_APP_ID: () => DEFAULT_UA_APP_ID,
      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
      getUserAgentPlugin: () => getUserAgentPlugin3,
      resolveUserAgentConfig: () => resolveUserAgentConfig3,
      userAgentMiddleware: () => userAgentMiddleware
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_core17 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var DEFAULT_UA_APP_ID = void 0;
    function isValidUserAgentAppId(appId) {
      if (appId === void 0) {
        return true;
      }
      return typeof appId === "string" && appId.length <= 50;
    }
    __name(isValidUserAgentAppId, "isValidUserAgentAppId");
    function resolveUserAgentConfig3(input) {
      const normalizedAppIdProvider = (0, import_core17.normalizeProvider)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
      const { customUserAgent } = input;
      return Object.assign(input, {
        customUserAgent: typeof customUserAgent === "string" ? [[customUserAgent]] : customUserAgent,
        userAgentAppId: /* @__PURE__ */ __name(async () => {
          const appId = await normalizedAppIdProvider();
          if (!isValidUserAgentAppId(appId)) {
            const logger = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
            if (typeof appId !== "string") {
              logger?.warn("userAgentAppId must be a string or undefined.");
            } else if (appId.length > 50) {
              logger?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
            }
          }
          return appId;
        }, "userAgentAppId")
      });
    }
    __name(resolveUserAgentConfig3, "resolveUserAgentConfig");
    var import_util_endpoints5 = require_dist_cjs21();
    var import_protocol_http11 = require_dist_cjs3();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
    async function checkFeatures(context, config, args) {
      const request = args.request;
      if (request?.headers?.["smithy-protocol"] === "rpc-v2-cbor") {
        (0, import_core22.setFeature)(context, "PROTOCOL_RPC_V2_CBOR", "M");
      }
      if (typeof config.retryStrategy === "function") {
        const retryStrategy = await config.retryStrategy();
        if (typeof retryStrategy.acquireInitialRetryToken === "function") {
          if (retryStrategy.constructor?.name?.includes("Adaptive")) {
            (0, import_core22.setFeature)(context, "RETRY_MODE_ADAPTIVE", "F");
          } else {
            (0, import_core22.setFeature)(context, "RETRY_MODE_STANDARD", "E");
          }
        } else {
          (0, import_core22.setFeature)(context, "RETRY_MODE_LEGACY", "D");
        }
      }
      if (typeof config.accountIdEndpointMode === "function") {
        const endpointV2 = context.endpointV2;
        if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
          (0, import_core22.setFeature)(context, "ACCOUNT_ID_ENDPOINT", "O");
        }
        switch (await config.accountIdEndpointMode?.()) {
          case "disabled":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
            break;
          case "preferred":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
            break;
          case "required":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
            break;
        }
      }
      const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;
      if (identity?.$source) {
        const credentials = identity;
        if (credentials.accountId) {
          (0, import_core22.setFeature)(context, "RESOLVED_ACCOUNT_ID", "T");
        }
        for (const [key, value] of Object.entries(credentials.$source ?? {})) {
          (0, import_core22.setFeature)(context, key, value);
        }
      }
    }
    __name(checkFeatures, "checkFeatures");
    var USER_AGENT = "user-agent";
    var X_AMZ_USER_AGENT = "x-amz-user-agent";
    var SPACE = " ";
    var UA_NAME_SEPARATOR = "/";
    var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    var UA_ESCAPE_CHAR = "-";
    var BYTE_LIMIT = 1024;
    function encodeFeatures(features) {
      let buffer = "";
      for (const key in features) {
        const val2 = features[key];
        if (buffer.length + val2.length + 1 <= BYTE_LIMIT) {
          if (buffer.length) {
            buffer += "," + val2;
          } else {
            buffer += val2;
          }
          continue;
        }
        break;
      }
      return buffer;
    }
    __name(encodeFeatures, "encodeFeatures");
    var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      const { request } = args;
      if (!import_protocol_http11.HttpRequest.isInstance(request)) {
        return next(args);
      }
      const { headers } = request;
      const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      await checkFeatures(context, options, args);
      const awsContext = context;
      defaultUserAgent.push(
        `m/${encodeFeatures(
          Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features)
        )}`
      );
      const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
      }
      const prefix = (0, import_util_endpoints5.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version2 = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    }, "escapeUserAgent");
    var getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin3 = /* @__PURE__ */ __name((config) => ({
      applyToStack: /* @__PURE__ */ __name((clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
      }, "applyToStack")
    }), "getUserAgentPlugin");
  }
});

// node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      SelectorType: () => SelectorType,
      booleanSelector: () => booleanSelector,
      numberSelector: () => numberSelector
    });
    module2.exports = __toCommonJS2(src_exports);
    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    }, "booleanSelector");
    var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      const numberValue = parseInt(obj[key], 10);
      if (Number.isNaN(numberValue)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
      }
      return numberValue;
    }, "numberSelector");
    var SelectorType = /* @__PURE__ */ ((SelectorType2) => {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
      return SelectorType2;
    })(SelectorType || {});
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
      CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
      DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
      DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
      ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
      ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS3,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS3,
      NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS3,
      NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS3,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getRegionInfo: () => getRegionInfo,
      resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
      resolveEndpointsConfig: () => resolveEndpointsConfig,
      resolveRegionConfig: () => resolveRegionConfig3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_config_provider = require_dist_cjs27();
    var ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    var CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS3 = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    var CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    var DEFAULT_USE_FIPS_ENDPOINT = false;
    var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS3 = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var import_util_middleware6 = require_dist_cjs2();
    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const { tls, endpoint, urlParser, useDualstackEndpoint } = input;
      return Object.assign(input, {
        tls: tls ?? true,
        endpoint: (0, import_util_middleware6.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, import_util_middleware6.normalizeProvider)(useDualstackEndpoint ?? false)
      });
    }, "resolveCustomEndpointsConfig");
    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) ?? {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    }, "getEndpointFromRegion");
    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const useDualstackEndpoint = (0, import_util_middleware6.normalizeProvider)(input.useDualstackEndpoint ?? false);
      const { endpoint, useFipsEndpoint, urlParser, tls } = input;
      return Object.assign(input, {
        tls: tls ?? true,
        endpoint: endpoint ? (0, import_util_middleware6.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      });
    }, "resolveEndpointsConfig");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS3 = {
      environmentVariableSelector: (env) => env[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS3 = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig3 = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return Object.assign(input, {
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      });
    }, "resolveRegionConfig");
    var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => variants.find(
      ({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack")
    )?.hostname, "getHostnameFromVariants");
    var getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0, "getResolvedHostname");
    var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws", "getResolvedPartition");
    var getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    }, "getResolvedSigningRegion");
    var getRegionInfo = /* @__PURE__ */ __name((region, {
      useFipsEndpoint = false,
      useDualstackEndpoint = false,
      signingService,
      regionHash,
      partitionHash
    }) => {
      const partition = getResolvedPartition(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);
      const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);
      const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = getResolvedSigningRegion(hostname, {
        signingRegion: regionHash[resolvedRegion]?.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...regionHash[resolvedRegion]?.signingService && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    }, "getRegionInfo");
  }
});

// node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      contentLengthMiddleware: () => contentLengthMiddleware,
      contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
      getContentLengthPlugin: () => getContentLengthPlugin3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http11 = require_dist_cjs3();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (import_protocol_http11.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    __name(contentLengthMiddleware, "contentLengthMiddleware");
    var contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin3 = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    }), "getContentLengthPlugin");
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset);
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i3 = 0; i3 < 256; ++i3) {
      byteToHex.push((i3 + 256).toString(16).slice(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i3 = buf && offset || 0;
  const b3 = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b3[i3++] = tl >>> 24 & 255;
  b3[i3++] = tl >>> 16 & 255;
  b3[i3++] = tl >>> 8 & 255;
  b3[i3++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b3[i3++] = tmh >>> 8 & 255;
  b3[i3++] = tmh & 255;
  b3[i3++] = tmh >>> 24 & 15 | 16;
  b3[i3++] = tmh >>> 16 & 255;
  b3[i3++] = clockseq >>> 8 | 128;
  b3[i3++] = clockseq & 255;
  for (let n3 = 0; n3 < 6; ++n3) {
    b3[i3 + n3] = node[n3];
  }
  return buf || unsafeStringify(b3);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v6;
  const arr = new Uint8Array(16);
  arr[0] = (v6 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v6 >>> 16 & 255;
  arr[2] = v6 >>> 8 & 255;
  arr[3] = v6 & 255;
  arr[4] = (v6 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v6 & 255;
  arr[6] = (v6 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v6 & 255;
  arr[8] = (v6 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v6 & 255;
  arr[10] = (v6 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v6 / 4294967296 & 255;
  arr[12] = v6 >>> 24 & 255;
  arr[13] = v6 >>> 16 & 255;
  arr[14] = v6 >>> 8 & 255;
  arr[15] = v6 & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i3 = 0; i3 < str.length; ++i3) {
    bytes.push(str.charCodeAt(i3));
  }
  return bytes;
}
function v35(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i3 = 0; i3 < 16; ++i3) {
        buf[offset + i3] = bytes[i3];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err2) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/native.js
var import_crypto3, native_default;
var init_native = __esm({
  "node_modules/uuid/dist/esm-node/native.js"() {
    import_crypto3 = __toESM(require("crypto"));
    native_default = {
      randomUUID: import_crypto3.default.randomUUID
    };
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i3 = 0; i3 < 16; ++i3) {
      buf[offset + i3] = rnds[i3];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto4.default.createHash("sha1").update(bytes).digest();
}
var import_crypto4, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto4 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.slice(14, 15), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isBrowserNetworkError: () => isBrowserNetworkError,
      isClockSkewCorrectedError: () => isClockSkewCorrectedError,
      isClockSkewError: () => isClockSkewError,
      isRetryableByTrait: () => isRetryableByTrait,
      isServerError: () => isServerError,
      isThrottlingError: () => isThrottlingError,
      isTransientError: () => isTransientError
    });
    module2.exports = __toCommonJS2(src_exports);
    var CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    var THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
      // DynamoDB
    ];
    var TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== void 0, "isRetryableByTrait");
    var isClockSkewError = /* @__PURE__ */ __name((error) => CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
    var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => error.$metadata?.clockSkewCorrected, "isClockSkewCorrectedError");
    var isBrowserNetworkError = /* @__PURE__ */ __name((error) => {
      const errorMessages = /* @__PURE__ */ new Set([
        "Failed to fetch",
        // Chrome
        "NetworkError when attempting to fetch resource",
        // Firefox
        "The Internet connection appears to be offline",
        // Safari 16
        "Load failed",
        // Safari 17+
        "Network request failed"
        // `cross-fetch`
      ]);
      const isValid = error && error instanceof TypeError;
      if (!isValid) {
        return false;
      }
      return errorMessages.has(error.message);
    }, "isBrowserNetworkError");
    var isThrottlingError = /* @__PURE__ */ __name((error) => error.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error.name) || error.$retryable?.throttling == true, "isThrottlingError");
    var isTransientError = /* @__PURE__ */ __name((error, depth = 0) => isClockSkewCorrectedError(error) || TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") || TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0) || isBrowserNetworkError(error) || error.cause !== void 0 && depth <= 10 && isTransientError(error.cause, depth + 1), "isTransientError");
    var isServerError = /* @__PURE__ */ __name((error) => {
      if (error.$metadata?.httpStatusCode !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
          return true;
        }
        return false;
      }
      return false;
    }, "isServerError");
  }
});

// node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
      DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
      DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
      DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE3,
      DefaultRateLimiter: () => DefaultRateLimiter,
      INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
      INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
      MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
      NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
      REQUEST_HEADER: () => REQUEST_HEADER,
      RETRY_COST: () => RETRY_COST,
      RETRY_MODES: () => RETRY_MODES,
      StandardRetryStrategy: () => StandardRetryStrategy,
      THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
      TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST
    });
    module2.exports = __toCommonJS2(src_exports);
    var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
      return RETRY_MODES2;
    })(RETRY_MODES || {});
    var DEFAULT_MAX_ATTEMPTS = 3;
    var DEFAULT_RETRY_MODE3 = "standard";
    var import_service_error_classification = require_dist_cjs30();
    var DefaultRateLimiter = class _DefaultRateLimiter {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      static {
        __name(this, "DefaultRateLimiter");
      }
      static {
        this.setTimeoutFn = setTimeout;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => _DefaultRateLimiter.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, import_service_error_classification.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t3 = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t3 * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    var DEFAULT_RETRY_DELAY_BASE = 100;
    var MAXIMUM_RETRY_DELAY = 20 * 1e3;
    var THROTTLING_RETRY_DELAY_BASE = 500;
    var INITIAL_RETRY_TOKENS = 500;
    var RETRY_COST = 5;
    var TIMEOUT_RETRY_COST = 10;
    var NO_RETRY_INCREMENT = 1;
    var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    var REQUEST_HEADER = "amz-sdk-request";
    var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      }, "computeNextBackoffDelay");
      const setDelayBase = /* @__PURE__ */ __name((delay) => {
        delayBase = delay;
      }, "setDelayBase");
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    }, "getDefaultRetryBackoffStrategy");
    var createDefaultRetryToken = /* @__PURE__ */ __name(({
      retryDelay,
      retryCount,
      retryCost
    }) => {
      const getRetryCount = /* @__PURE__ */ __name(() => retryCount, "getRetryCount");
      const getRetryDelay = /* @__PURE__ */ __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
      const getRetryCost = /* @__PURE__ */ __name(() => retryCost, "getRetryCost");
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    }, "createDefaultRetryToken");
    var StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = "standard";
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      static {
        __name(this, "StandardRetryStrategy");
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(
            errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE
          );
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      /**
       * @returns the current available retry capacity.
       *
       * This number decreases when retries are executed and refills when requests or retries succeed.
       */
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = "adaptive";
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      static {
        __name(this, "AdaptiveRetryStrategy");
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    var ConfiguredRetryStrategy = class extends StandardRetryStrategy {
      static {
        __name(this, "ConfiguredRetryStrategy");
      }
      /**
       * @param maxAttempts - the maximum number of retry attempts allowed.
       *                      e.g., if set to 3, then 4 total requests are possible.
       * @param computeNextBackoffDelay - a millisecond delay for each retry or a function that takes the retry attempt
       *                                  and returns the delay.
       *
       * @example exponential backoff.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, (attempt) => attempt ** 2)
       * });
       * ```
       * @example constant delay.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, 2000)
       * });
       * ```
       */
      constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js
var require_isStreamingPayload = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isStreamingPayload = void 0;
    var stream_1 = require("stream");
    var isStreamingPayload = (request) => (request === null || request === void 0 ? void 0 : request.body) instanceof stream_1.Readable || typeof ReadableStream !== "undefined" && (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream;
    exports2.isStreamingPayload = isStreamingPayload;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
      CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
      ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
      ENV_RETRY_MODE: () => ENV_RETRY_MODE,
      NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS3,
      NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS3,
      StandardRetryStrategy: () => StandardRetryStrategy,
      defaultDelayDecider: () => defaultDelayDecider,
      defaultRetryDecider: () => defaultRetryDecider,
      getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
      getRetryAfterHint: () => getRetryAfterHint,
      getRetryPlugin: () => getRetryPlugin3,
      omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
      omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
      resolveRetryConfig: () => resolveRetryConfig3,
      retryMiddleware: () => retryMiddleware,
      retryMiddlewareOptions: () => retryMiddlewareOptions
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_protocol_http11 = require_dist_cjs3();
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var import_util_retry3 = require_dist_cjs31();
    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = options?.noRetryIncrement ?? import_util_retry3.NO_RETRY_INCREMENT;
      const retryCost = options?.retryCost ?? import_util_retry3.RETRY_COST;
      const timeoutRetryCost = options?.timeoutRetryCost ?? import_util_retry3.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = /* @__PURE__ */ __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
      const hasRetryTokens = /* @__PURE__ */ __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      }, "retrieveRetryTokens");
      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      }, "releaseRetryTokens");
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    }, "getDefaultRetryQuota");
    var defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts) => Math.floor(Math.min(import_util_retry3.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
    var import_service_error_classification = require_dist_cjs30();
    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
      if (!error) {
        return false;
      }
      return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);
    }, "defaultRetryDecider");
    var asSdkError = /* @__PURE__ */ __name((error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    }, "asSdkError");
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = import_util_retry3.RETRY_MODES.STANDARD;
        this.retryDecider = options?.retryDecider ?? defaultRetryDecider;
        this.delayDecider = options?.delayDecider ?? defaultDelayDecider;
        this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(import_util_retry3.INITIAL_RETRY_TOKENS);
      }
      static {
        __name(this, "StandardRetryStrategy");
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = import_util_retry3.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (import_protocol_http11.HttpRequest.isInstance(request)) {
          request.headers[import_util_retry3.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
        }
        while (true) {
          try {
            if (import_protocol_http11.HttpRequest.isInstance(request)) {
              request.headers[import_util_retry3.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options?.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options?.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e3) {
            const err2 = asSdkError(e3);
            attempts++;
            if (this.shouldRetry(err2, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err2);
              const delayFromDecider = this.delayDecider(
                (0, import_service_error_classification.isThrottlingError)(err2) ? import_util_retry3.THROTTLING_RETRY_DELAY_BASE : import_util_retry3.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              const delayFromResponse = getDelayFromRetryAfterHeader(err2.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err2.$metadata) {
              err2.$metadata = {};
            }
            err2.$metadata.attempts = attempts;
            err2.$metadata.totalRetryDelay = totalDelay;
            throw err2;
          }
        }
      }
    };
    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http11.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    }, "getDelayFromRetryAfterHeader");
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy {
      static {
        __name(this, "AdaptiveRetryStrategy");
      }
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new import_util_retry3.DefaultRateLimiter();
        this.mode = import_util_retry3.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    var import_util_middleware6 = require_dist_cjs2();
    var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    var CONFIG_MAX_ATTEMPTS = "max_attempts";
    var NODE_MAX_ATTEMPT_CONFIG_OPTIONS3 = {
      environmentVariableSelector: (env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: import_util_retry3.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig3 = /* @__PURE__ */ __name((input) => {
      const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
      const maxAttempts = (0, import_util_middleware6.normalizeProvider)(_maxAttempts ?? import_util_retry3.DEFAULT_MAX_ATTEMPTS);
      return Object.assign(input, {
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, import_util_middleware6.normalizeProvider)(_retryMode)();
          if (retryMode === import_util_retry3.RETRY_MODES.ADAPTIVE) {
            return new import_util_retry3.AdaptiveRetryStrategy(maxAttempts);
          }
          return new import_util_retry3.StandardRetryStrategy(maxAttempts);
        }
      });
    }, "resolveRetryConfig");
    var ENV_RETRY_MODE = "AWS_RETRY_MODE";
    var CONFIG_RETRY_MODE = "retry_mode";
    var NODE_RETRY_MODE_CONFIG_OPTIONS3 = {
      environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: import_util_retry3.DEFAULT_RETRY_MODE
    };
    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(() => (next) => async (args) => {
      const { request } = args;
      if (import_protocol_http11.HttpRequest.isInstance(request)) {
        delete request.headers[import_util_retry3.INVOCATION_ID_HEADER];
        delete request.headers[import_util_retry3.REQUEST_HEADER];
      }
      return next(args);
    }, "omitRetryHeadersMiddleware");
    var omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
      }
    }), "getOmitRetryHeadersPlugin");
    var import_smithy_client25 = require_dist_cjs25();
    var import_isStreamingPayload = require_isStreamingPayload();
    var retryMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = import_protocol_http11.HttpRequest.isInstance(request);
        if (isRequest) {
          request.headers[import_util_retry3.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
        }
        while (true) {
          try {
            if (isRequest) {
              request.headers[import_util_retry3.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e3) {
            const retryErrorInfo = getRetryErrorInfo(e3);
            lastError = asSdkError(e3);
            if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
              (context.logger instanceof import_smithy_client25.NoOpLogger ? console : context.logger)?.warn(
                "An error was encountered in a non-retryable streaming request."
              );
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    }, "retryMiddleware");
    var isRetryStrategyV2 = /* @__PURE__ */ __name((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
    var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {
      const errorInfo = {
        error,
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = getRetryAfterHint(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    }, "getRetryErrorInfo");
    var getRetryErrorType = /* @__PURE__ */ __name((error) => {
      if ((0, import_service_error_classification.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, import_service_error_classification.isTransientError)(error))
        return "TRANSIENT";
      if ((0, import_service_error_classification.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    }, "getRetryErrorType");
    var retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin3 = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }
    }), "getRetryPlugin");
    var getRetryAfterHint = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http11.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    }, "getRetryAfterHint");
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/auth/httpAuthSchemeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveHttpAuthSchemeConfig = exports2.defaultDynamoDBHttpAuthSchemeProvider = exports2.defaultDynamoDBHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs2();
    var defaultDynamoDBHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports2.defaultDynamoDBHttpAuthSchemeParametersProvider = defaultDynamoDBHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption3(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "dynamodb",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var defaultDynamoDBHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption3(authParameters));
        }
      }
      return options;
    };
    exports2.defaultDynamoDBHttpAuthSchemeProvider = defaultDynamoDBHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig3 = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return Object.assign(config_0, {
        authSchemePreference: (0, util_middleware_1.normalizeProvider)(config.authSchemePreference ?? [])
      });
    };
    exports2.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig3;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir2 = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports2.getHomeDir = getHomeDir2;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath2 = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports2.getSSOTokenFilepath = getSSOTokenFilepath2;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile2 = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports2.getSSOTokenFromFile = getSSOTokenFromFile2;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports2.slurpFile = slurpFile;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
      DEFAULT_PROFILE: () => DEFAULT_PROFILE,
      ENV_PROFILE: () => ENV_PROFILE,
      getProfileName: () => getProfileName,
      loadSharedConfigFiles: () => loadSharedConfigFiles,
      loadSsoSessionData: () => loadSsoSessionData,
      parseKnownFiles: () => parseKnownFiles
    });
    module2.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_getHomeDir(), module2.exports);
    var ENV_PROFILE = "AWS_PROFILE";
    var DEFAULT_PROFILE = "default";
    var getProfileName = /* @__PURE__ */ __name((init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, "getProfileName");
    __reExport(src_exports, require_getSSOTokenFilepath(), module2.exports);
    __reExport(src_exports, require_getSSOTokenFromFile(), module2.exports);
    var import_types5 = require_dist_cjs();
    var getConfigData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(import_types5.IniSectionType).includes(key.substring(0, indexOfSeparator));
    }).reduce(
      (acc, [key, value]) => {
        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
        const updatedKey = key.substring(0, indexOfSeparator) === import_types5.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
        acc[updatedKey] = value;
        return acc;
      },
      {
        // Populate default profile, if present.
        ...data.default && { default: data.default }
      }
    ), "getConfigData");
    var import_path = require("path");
    var import_getHomeDir = require_getHomeDir();
    var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
    var import_getHomeDir2 = require_getHomeDir();
    var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
    var import_getHomeDir3 = require_getHomeDir();
    var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = /* @__PURE__ */ __name((iniData) => {
      const map2 = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(import_types5.IniSectionType).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map2[currentSection] = map2[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map2[currentSection][key] = value;
            }
          }
        }
      }
      return map2;
    }, "parseIni");
    var import_slurpFile = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var CONFIG_PREFIX_SEPARATOR = ".";
    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const homeDir = (0, import_getHomeDir3.getHomeDir)();
      const relativeHomeDirPrefix = "~/";
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getConfigData).catch(swallowError),
        (0, import_slurpFile.slurpFile)(resolvedFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    }, "loadSharedConfigFiles");
    var getSsoSessionData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => key.startsWith(import_types5.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {}), "getSsoSessionData");
    var import_slurpFile2 = require_slurpFile();
    var swallowError2 = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), "loadSsoSessionData");
    var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    }, "mergeConfigFiles");
    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    }, "parseKnownFiles");
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      loadConfig: () => loadConfig
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_property_provider2 = require_dist_cjs22();
    function getSelectorName(functionString) {
      try {
        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
        constants.delete("CONFIG");
        constants.delete("CONFIG_PREFIX_SEPARATOR");
        constants.delete("ENV");
        return [...constants].join(", ");
      } catch (e3) {
        return functionString;
      }
    }
    __name(getSelectorName, "getSelectorName");
    var fromEnv = /* @__PURE__ */ __name((envVarSelector, logger) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e3) {
        throw new import_property_provider2.CredentialsProviderError(
          e3.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`,
          { logger }
        );
      }
    }, "fromEnv");
    var import_shared_ini_file_loader = require_dist_cjs33();
    var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e3) {
        throw new import_property_provider2.CredentialsProviderError(
          e3.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`,
          { logger: init.logger }
        );
      }
    }, "fromSharedConfigFiles");
    var isFunction = /* @__PURE__ */ __name((func) => typeof func === "function", "isFunction");
    var fromStatic = /* @__PURE__ */ __name((defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, import_property_provider2.fromStatic)(defaultValue), "fromStatic");
    var loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, import_property_provider2.memoize)(
      (0, import_property_provider2.chain)(
        fromEnv(environmentVariableSelector),
        fromSharedConfigFiles(configFileSelector, configuration),
        fromStatic(defaultValue)
      )
    ), "loadConfig");
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js
var require_getEndpointUrlConfig = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointUrlConfig = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
    var CONFIG_ENDPOINT_URL = "endpoint_url";
    var getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env) => {
        const serviceSuffixParts = serviceId.split(" ").map((w3) => w3.toUpperCase());
        const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env[ENV_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config) => {
        if (config && profile.services) {
          const servicesSection = config[["services", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w3) => w3.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
    exports2.getEndpointUrlConfig = getEndpointUrlConfig;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js
var require_getEndpointFromConfig = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointFromConfig = void 0;
    var node_config_provider_1 = require_dist_cjs34();
    var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
    var getEndpointFromConfig = async (serviceId) => (0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId !== null && serviceId !== void 0 ? serviceId : ""))();
    exports2.getEndpointFromConfig = getEndpointFromConfig;
  }
});

// node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      parseQueryString: () => parseQueryString
    });
    module2.exports = __toCommonJS2(src_exports);
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    __name(parseQueryString, "parseQueryString");
  }
});

// node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@smithy/url-parser/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      parseUrl: () => parseUrl3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_querystring_parser = require_dist_cjs35();
    var parseUrl3 = /* @__PURE__ */ __name((url) => {
      if (typeof url === "string") {
        return parseUrl3(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, import_querystring_parser.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    }, "parseUrl");
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      endpointMiddleware: () => endpointMiddleware,
      endpointMiddlewareOptions: () => endpointMiddlewareOptions,
      getEndpointFromInstructions: () => getEndpointFromInstructions,
      getEndpointPlugin: () => getEndpointPlugin4,
      resolveEndpointConfig: () => resolveEndpointConfig3,
      resolveParams: () => resolveParams,
      toEndpointV1: () => toEndpointV1
    });
    module2.exports = __toCommonJS2(src_exports);
    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
      const bucket = endpointParams?.Bucket || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, "resolveParamsForS3");
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
      const [arn, partition, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    }, "isArnBucketName");
    var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config) => {
      const configProvider = /* @__PURE__ */ __name(async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      }, "configProvider");
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
          const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
          return configValue;
        };
      }
      if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
          const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
          const configValue = credentials?.accountId ?? credentials?.AccountId;
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, "createConfigValueProvider");
    var import_getEndpointFromConfig = require_getEndpointFromConfig();
    var import_url_parser3 = require_dist_cjs36();
    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, import_url_parser3.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, import_url_parser3.parseUrl)(endpoint);
    }, "toEndpointV1");
    var getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig2, context) => {
      if (!clientConfig2.endpoint) {
        let endpointFromConfig;
        if (clientConfig2.serviceConfiguredEndpoint) {
          endpointFromConfig = await clientConfig2.serviceConfiguredEndpoint();
        } else {
          endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig2.serviceId);
        }
        if (endpointFromConfig) {
          clientConfig2.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig2);
      if (typeof clientConfig2.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig2.endpointProvider(endpointParams, context);
      return endpoint;
    }, "getEndpointFromInstructions");
    var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig2) => {
      const endpointParams = {};
      const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig2)();
            break;
          case "operationContextParams":
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig2);
      }
      if (String(clientConfig2.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    }, "resolveParams");
    var import_core17 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_util_middleware6 = require_dist_cjs2();
    var endpointMiddleware = /* @__PURE__ */ __name(({
      config,
      instructions
    }) => {
      return (next, context) => async (args) => {
        if (config.endpoint) {
          (0, import_core17.setFeature)(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            }
          },
          { ...config },
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = (0, import_util_middleware6.getSmithyContext)(context);
          const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(
              httpAuthOption.signingProperties || {},
              {
                signing_region: authScheme.signingRegion,
                signingRegion: authScheme.signingRegion,
                signing_service: authScheme.signingName,
                signingName: authScheme.signingName,
                signingRegionSet: authScheme.signingRegionSet
              },
              authScheme.properties
            );
          }
        }
        return next({
          ...args
        });
      };
    }, "endpointMiddleware");
    var import_middleware_serde5 = require_dist_cjs9();
    var endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde5.serializerMiddlewareOption.name
    };
    var getEndpointPlugin4 = /* @__PURE__ */ __name((config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          endpointMiddleware({
            config,
            instructions
          }),
          endpointMiddlewareOptions
        );
      }
    }), "getEndpointPlugin");
    var import_getEndpointFromConfig2 = require_getEndpointFromConfig();
    var resolveEndpointConfig3 = /* @__PURE__ */ __name((input) => {
      const tls = input.tls ?? true;
      const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0, import_util_middleware6.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = Object.assign(input, {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, import_util_middleware6.normalizeProvider)(useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, import_util_middleware6.normalizeProvider)(useFipsEndpoint ?? false)
      });
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = (0, import_getEndpointFromConfig2.getEndpointFromConfig)(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    }, "resolveEndpointConfig");
  }
});

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d3, b3) {
  if (typeof b3 !== "function" && b3 !== null)
    throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
  extendStatics(d3, b3);
  function __() {
    this.constructor = d3;
  }
  d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
}
function __rest(s3, e3) {
  var t3 = {};
  for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3) && e3.indexOf(p3) < 0)
    t3[p3] = s3[p3];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
      if (e3.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
        t3[p3[i3]] = s3[p3[i3]];
    }
  return t3;
}
function __decorate(decorators, target, key, desc) {
  var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r3 = Reflect.decorate(decorators, target, key, desc);
  else for (var i3 = decorators.length - 1; i3 >= 0; i3--) if (d3 = decorators[i3]) r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
  return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f3) {
    if (f3 !== void 0 && typeof f3 !== "function") throw new TypeError("Function expected");
    return f3;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _2, done = false;
  for (var i3 = decorators.length - 1; i3 >= 0; i3--) {
    var context = {};
    for (var p3 in contextIn) context[p3] = p3 === "access" ? {} : contextIn[p3];
    for (var p3 in contextIn.access) context.access[p3] = contextIn.access[p3];
    context.addInitializer = function(f3) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f3 || null));
    };
    var result = (0, decorators[i3])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_2 = accept(result.get)) descriptor.get = _2;
      if (_2 = accept(result.set)) descriptor.set = _2;
      if (_2 = accept(result.init)) initializers.unshift(_2);
    } else if (_2 = accept(result)) {
      if (kind === "field") initializers.unshift(_2);
      else descriptor[key] = _2;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i3 = 0; i3 < initializers.length; i3++) {
    value = useValue ? initializers[i3].call(thisArg, value) : initializers[i3].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x3) {
  return typeof x3 === "symbol" ? x3 : "".concat(x3);
}
function __setFunctionName(f3, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f3, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t3[0] & 1) throw t3[1];
    return t3[1];
  }, trys: [], ops: [] }, f3, y2, t3, g3 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g3.next = verb(0), g3["throw"] = verb(1), g3["return"] = verb(2), typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v6) {
      return step([n3, v6]);
    };
  }
  function step(op) {
    if (f3) throw new TypeError("Generator is already executing.");
    while (g3 && (g3 = 0, op[0] && (_2 = 0)), _2) try {
      if (f3 = 1, y2 && (t3 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t3 = y2["return"]) && t3.call(y2), 0) : y2.next) && !(t3 = t3.call(y2, op[1])).done) return t3;
      if (y2 = 0, t3) op = [op[0] & 2, t3.value];
      switch (op[0]) {
        case 0:
        case 1:
          t3 = op;
          break;
        case 4:
          _2.label++;
          return { value: op[1], done: false };
        case 5:
          _2.label++;
          y2 = op[1];
          op = [0];
          continue;
        case 7:
          op = _2.ops.pop();
          _2.trys.pop();
          continue;
        default:
          if (!(t3 = _2.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _2 = 0;
            continue;
          }
          if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
            _2.label = op[1];
            break;
          }
          if (op[0] === 6 && _2.label < t3[1]) {
            _2.label = t3[1];
            t3 = op;
            break;
          }
          if (t3 && _2.label < t3[2]) {
            _2.label = t3[2];
            _2.ops.push(op);
            break;
          }
          if (t3[2]) _2.ops.pop();
          _2.trys.pop();
          continue;
      }
      op = body.call(thisArg, _2);
    } catch (e3) {
      op = [6, e3];
      y2 = 0;
    } finally {
      f3 = t3 = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m3, o3) {
  for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(o3, p3)) __createBinding(o3, m3, p3);
}
function __values(o3) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o3[s3], i3 = 0;
  if (m3) return m3.call(o3);
  if (o3 && typeof o3.length === "number") return {
    next: function() {
      if (o3 && i3 >= o3.length) o3 = void 0;
      return { value: o3 && o3[i3++], done: !o3 };
    }
  };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o3, n3) {
  var m3 = typeof Symbol === "function" && o3[Symbol.iterator];
  if (!m3) return o3;
  var i3 = m3.call(o3), r3, ar = [], e3;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i3.next()).done) ar.push(r3.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i3["return"])) m3.call(i3);
    } finally {
      if (e3) throw e3.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
    ar = ar.concat(__read(arguments[i3]));
  return ar;
}
function __spreadArrays() {
  for (var s3 = 0, i3 = 0, il = arguments.length; i3 < il; i3++) s3 += arguments[i3].length;
  for (var r3 = Array(s3), k3 = 0, i3 = 0; i3 < il; i3++)
    for (var a3 = arguments[i3], j3 = 0, jl = a3.length; j3 < jl; j3++, k3++)
      r3[k3] = a3[j3];
  return r3;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
    if (ar || !(i3 in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i3);
      ar[i3] = from[i3];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v6) {
  return this instanceof __await ? (this.v = v6, this) : new __await(v6);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g3 = generator.apply(thisArg, _arguments || []), i3, q3 = [];
  return i3 = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i3[Symbol.asyncIterator] = function() {
    return this;
  }, i3;
  function awaitReturn(f3) {
    return function(v6) {
      return Promise.resolve(v6).then(f3, reject);
    };
  }
  function verb(n3, f3) {
    if (g3[n3]) {
      i3[n3] = function(v6) {
        return new Promise(function(a3, b3) {
          q3.push([n3, v6, a3, b3]) > 1 || resume(n3, v6);
        });
      };
      if (f3) i3[n3] = f3(i3[n3]);
    }
  }
  function resume(n3, v6) {
    try {
      step(g3[n3](v6));
    } catch (e3) {
      settle(q3[0][3], e3);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f3, v6) {
    if (f3(v6), q3.shift(), q3.length) resume(q3[0][0], q3[0][1]);
  }
}
function __asyncDelegator(o3) {
  var i3, p3;
  return i3 = {}, verb("next"), verb("throw", function(e3) {
    throw e3;
  }), verb("return"), i3[Symbol.iterator] = function() {
    return this;
  }, i3;
  function verb(n3, f3) {
    i3[n3] = o3[n3] ? function(v6) {
      return (p3 = !p3) ? { value: __await(o3[n3](v6)), done: false } : f3 ? f3(v6) : v6;
    } : f3;
  }
}
function __asyncValues(o3) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m3 = o3[Symbol.asyncIterator], i3;
  return m3 ? m3.call(o3) : (o3 = typeof __values === "function" ? __values(o3) : o3[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
    return this;
  }, i3);
  function verb(n3) {
    i3[n3] = o3[n3] && function(v6) {
      return new Promise(function(resolve, reject) {
        v6 = o3[n3](v6), settle(resolve, reject, v6.done, v6.value);
      });
    };
  }
  function settle(resolve, reject, d3, v6) {
    Promise.resolve(v6).then(function(v7) {
      resolve({ value: v7, done: d3 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k3 = ownKeys(mod), i3 = 0; i3 < k3.length; i3++) if (k3[i3] !== "default") __createBinding(result, mod, k3[i3]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state2, kind, f3) {
  if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f3 : !state2.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state2.get(receiver);
}
function __classPrivateFieldSet(receiver, state2, value, kind, f3) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f3) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f3 : !state2.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state2.set(receiver, value), value;
}
function __classPrivateFieldIn(state2, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state2 === "function" ? receiver === state2 : state2.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e3) {
        return Promise.reject(e3);
      }
    };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e3) {
    env.error = env.hasError ? new _SuppressedError(e3, env.error, "An error was suppressed during disposal.") : e3;
    env.hasError = true;
  }
  var r3, s3 = 0;
  function next() {
    while (r3 = env.stack.pop()) {
      try {
        if (!r3.async && s3 === 1) return s3 = 0, env.stack.push(r3), Promise.resolve().then(next);
        if (r3.dispose) {
          var result = r3.dispose.call(r3.value);
          if (r3.async) return s3 |= 2, Promise.resolve(result).then(next, function(e3) {
            fail(e3);
            return next();
          });
        } else s3 |= 1;
      } catch (e3) {
        fail(e3);
      }
    }
    if (s3 === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
    return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m3, tsx, d3, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d3 && (!ext || !cm) ? m3 : d3 + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path;
}
var extendStatics, __assign, __createBinding, __setModuleDefault, ownKeys, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d3, b3) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
        d4.__proto__ = b4;
      } || function(d4, b4) {
        for (var p3 in b4) if (Object.prototype.hasOwnProperty.call(b4, p3)) d4[p3] = b4[p3];
      };
      return extendStatics(d3, b3);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t3) {
        for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s3 = arguments[i3];
          for (var p3 in s3) if (Object.prototype.hasOwnProperty.call(s3, p3)) t3[p3] = s3[p3];
        }
        return t3;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k3];
        } };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    };
    __setModuleDefault = Object.create ? function(o3, v6) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v6 });
    } : function(o3, v6) {
      o3["default"] = v6;
    };
    ownKeys = function(o3) {
      ownKeys = Object.getOwnPropertyNames || function(o4) {
        var ar = [];
        for (var k3 in o4) if (Object.prototype.hasOwnProperty.call(o4, k3)) ar[ar.length] = k3;
        return ar;
      };
      return ownKeys(o3);
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e3 = new Error(message);
      return e3.name = "SuppressedError", e3.error = error, e3.suppressed = suppressed, e3;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension
    };
  }
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-dynamodb",
      description: "AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native",
      version: "3.799.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-dynamodb",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo dynamodb"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.799.0",
        "@aws-sdk/credential-provider-node": "3.799.0",
        "@aws-sdk/middleware-endpoint-discovery": "3.775.0",
        "@aws-sdk/middleware-host-header": "3.775.0",
        "@aws-sdk/middleware-logger": "3.775.0",
        "@aws-sdk/middleware-recursion-detection": "3.775.0",
        "@aws-sdk/middleware-user-agent": "3.799.0",
        "@aws-sdk/region-config-resolver": "3.775.0",
        "@aws-sdk/types": "3.775.0",
        "@aws-sdk/util-endpoints": "3.787.0",
        "@aws-sdk/util-user-agent-browser": "3.775.0",
        "@aws-sdk/util-user-agent-node": "3.799.0",
        "@smithy/config-resolver": "^4.1.0",
        "@smithy/core": "^3.3.0",
        "@smithy/fetch-http-handler": "^5.0.2",
        "@smithy/hash-node": "^4.0.2",
        "@smithy/invalid-dependency": "^4.0.2",
        "@smithy/middleware-content-length": "^4.0.2",
        "@smithy/middleware-endpoint": "^4.1.1",
        "@smithy/middleware-retry": "^4.1.1",
        "@smithy/middleware-serde": "^4.0.3",
        "@smithy/middleware-stack": "^4.0.2",
        "@smithy/node-config-provider": "^4.0.2",
        "@smithy/node-http-handler": "^4.0.4",
        "@smithy/protocol-http": "^5.1.0",
        "@smithy/smithy-client": "^4.2.1",
        "@smithy/types": "^4.2.0",
        "@smithy/url-parser": "^4.0.2",
        "@smithy/util-base64": "^4.0.0",
        "@smithy/util-body-length-browser": "^4.0.0",
        "@smithy/util-body-length-node": "^4.0.0",
        "@smithy/util-defaults-mode-browser": "^4.0.9",
        "@smithy/util-defaults-mode-node": "^4.0.9",
        "@smithy/util-endpoints": "^3.0.2",
        "@smithy/util-middleware": "^4.0.2",
        "@smithy/util-retry": "^4.0.2",
        "@smithy/util-utf8": "^4.0.0",
        "@smithy/util-waiter": "^4.0.3",
        "@types/uuid": "^9.0.1",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@tsconfig/node18": "18.2.4",
        "@types/node": "^18.19.69",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.2.2"
      },
      engines: {
        node: ">=18.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-dynamodb"
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
      ENV_EXPIRATION: () => ENV_EXPIRATION,
      ENV_KEY: () => ENV_KEY,
      ENV_SECRET: () => ENV_SECRET,
      ENV_SESSION: () => ENV_SESSION,
      fromEnv: () => fromEnv
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var import_property_provider2 = require_dist_cjs22();
    var ENV_KEY = "AWS_ACCESS_KEY_ID";
    var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    var ENV_SESSION = "AWS_SESSION_TOKEN";
    var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    var ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
    var fromEnv = /* @__PURE__ */ __name((init) => async () => {
      init?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      const accountId = process.env[ENV_ACCOUNT_ID];
      if (accessKeyId && secretAccessKey) {
        const credentials = {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope },
          ...accountId && { accountId }
        };
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS", "g");
        return credentials;
      }
      throw new import_property_provider2.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init?.logger });
    }, "fromEnv");
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
      DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
      ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
      ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
      ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
      Endpoint: () => Endpoint,
      fromContainerMetadata: () => fromContainerMetadata,
      fromInstanceMetadata: () => fromInstanceMetadata,
      getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
      httpRequest: () => httpRequest,
      providerConfigFromInit: () => providerConfigFromInit
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_url = require("url");
    var import_property_provider2 = require_dist_cjs22();
    var import_buffer = require("buffer");
    var import_http = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        const req = (0, import_http.request)({
          method: "GET",
          ...options,
          // Node.js http module doesn't accept hostname with square brackets
          // Refs: https://github.com/nodejs/node/issues/39738
          hostname: options.hostname?.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err2) => {
          reject(Object.assign(new import_property_provider2.ProviderError("Unable to connect to instance metadata service"), err2));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new import_property_provider2.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(new import_property_provider2.ProviderError("Error response received from instance metadata service"), { statusCode })
            );
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(import_buffer.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    __name(httpRequest, "httpRequest");
    var isImdsCredentials = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
    var fromImdsCredentials = /* @__PURE__ */ __name((creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
      ...creds.AccountId && { accountId: creds.AccountId }
    }), "fromImdsCredentials");
    var DEFAULT_TIMEOUT = 1e3;
    var DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = /* @__PURE__ */ __name(({
      maxRetries = DEFAULT_MAX_RETRIES,
      timeout = DEFAULT_TIMEOUT
    }) => ({ maxRetries, timeout }), "providerConfigFromInit");
    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i3 = 0; i3 < maxRetries; i3++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    }, "retry");
    var ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(async () => {
        const requestOptions = await getCmdsUri({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new import_property_provider2.CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials(credsResponse);
      }, maxRetries);
    }, "fromContainerMetadata");
    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await httpRequest({
        ...options,
        timeout
      });
      return buffer.toString();
    }, "requestFromEcsImds");
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = /* @__PURE__ */ __name(async ({ logger }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new import_property_provider2.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new import_property_provider2.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new import_property_provider2.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`,
        {
          tryNextLink: false,
          logger
        }
      );
    }, "getCmdsUri");
    var InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError extends import_property_provider2.CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError.prototype);
      }
      static {
        __name(this, "InstanceMetadataV1FallbackError");
      }
    };
    var import_node_config_provider3 = require_dist_cjs34();
    var import_url_parser3 = require_dist_cjs36();
    var Endpoint = /* @__PURE__ */ ((Endpoint2) => {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
      return Endpoint2;
    })(Endpoint || {});
    var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    var ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
    var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
      return EndpointMode2;
    })(EndpointMode || {});
    var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    var ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: "IPv4"
      /* IPv4 */
    };
    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async () => (0, import_url_parser3.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
    var getFromEndpointConfig = /* @__PURE__ */ __name(async () => (0, import_node_config_provider3.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
      const endpointMode = await (0, import_node_config_provider3.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case "IPv4":
          return "http://169.254.169.254";
        case "IPv6":
          return "http://[fd00:ec2::254]";
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    }, "getFromEndpointModeConfig");
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        `Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL
      );
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    }, "getExtendedInstanceMetadataCredentials");
    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
      const logger = options?.logger || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger);
          }
        } catch (e3) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e3);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);
          } else {
            throw e3;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    }, "staticStabilityProvider");
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
    var PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
    var X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
    var fromInstanceMetadata = /* @__PURE__ */ __name((init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }), "fromInstanceMetadata");
    var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {
      let disableFetchToken = false;
      const { logger, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await (0, import_node_config_provider3.loadConfig)(
            {
              environmentVariableSelector: (env) => {
                const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
                if (envValue === void 0) {
                  throw new import_property_provider2.CredentialsProviderError(
                    `${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`,
                    { logger: init.logger }
                  );
                }
                return fallbackBlockedFromProcessEnv;
              },
              configFileSelector: (profile2) => {
                const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
                return fallbackBlockedFromProfile;
              },
              default: false
            },
            {
              profile
            }
          )();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(
              `AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(
                ", "
              )}].`
            );
          }
        }
        const imdsProfile = (await retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err2) {
            if (err2.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err2;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err2) {
            if (err2.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err2;
          }
          return creds;
        }, maxRetries2);
      }, "getCredentials");
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if (error?.statusCode === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            logger?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN]: token
            },
            timeout
          });
        }
      };
    }, "getInstanceMetadataProvider");
    var getMetadataToken = /* @__PURE__ */ __name(async (options) => httpRequest({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }), "getMetadataToken");
    var getProfile = /* @__PURE__ */ __name(async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(), "getProfile");
    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {
      const credentialsResponse = JSON.parse(
        (await httpRequest({
          ...options,
          path: IMDS_PATH + profile
        })).toString()
      );
      if (!isImdsCredentials(credentialsResponse)) {
        throw new import_property_provider2.CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credentialsResponse);
    }, "getCredentialsFromProfile");
  }
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js
var require_checkUrl = __commonJS({
  "node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkUrl = void 0;
    var property_provider_1 = require_dist_cjs22();
    var ECS_CONTAINER_HOST = "169.254.170.2";
    var EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";
    var EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";
    var checkUrl = (url, logger) => {
      if (url.protocol === "https:") {
        return;
      }
      if (url.hostname === ECS_CONTAINER_HOST || url.hostname === EKS_CONTAINER_HOST_IPv4 || url.hostname === EKS_CONTAINER_HOST_IPv6) {
        return;
      }
      if (url.hostname.includes("[")) {
        if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {
          return;
        }
      } else {
        if (url.hostname === "localhost") {
          return;
        }
        const ipComponents = url.hostname.split(".");
        const inRange = (component) => {
          const num = parseInt(component, 10);
          return 0 <= num && num <= 255;
        };
        if (ipComponents[0] === "127" && inRange(ipComponents[1]) && inRange(ipComponents[2]) && inRange(ipComponents[3]) && ipComponents.length === 4) {
          return;
        }
      }
      throw new property_provider_1.CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger });
    };
    exports2.checkUrl = checkUrl;
  }
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js
var require_requestHelpers = __commonJS({
  "node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCredentials = exports2.createGetRequest = void 0;
    var property_provider_1 = require_dist_cjs22();
    var protocol_http_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs25();
    var util_stream_1 = require_dist_cjs19();
    function createGetRequest(url) {
      return new protocol_http_1.HttpRequest({
        protocol: url.protocol,
        hostname: url.hostname,
        port: Number(url.port),
        path: url.pathname,
        query: Array.from(url.searchParams.entries()).reduce((acc, [k3, v6]) => {
          acc[k3] = v6;
          return acc;
        }, {}),
        fragment: url.hash
      });
    }
    exports2.createGetRequest = createGetRequest;
    async function getCredentials(response, logger) {
      const stream = (0, util_stream_1.sdkStreamMixin)(response.body);
      const str = await stream.transformToString();
      if (response.statusCode === 200) {
        const parsed = JSON.parse(str);
        if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
          throw new property_provider_1.CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }", { logger });
        }
        return {
          accessKeyId: parsed.AccessKeyId,
          secretAccessKey: parsed.SecretAccessKey,
          sessionToken: parsed.Token,
          expiration: (0, smithy_client_1.parseRfc3339DateTime)(parsed.Expiration)
        };
      }
      if (response.statusCode >= 400 && response.statusCode < 500) {
        let parsedBody = {};
        try {
          parsedBody = JSON.parse(str);
        } catch (e3) {
        }
        throw Object.assign(new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger }), {
          Code: parsedBody.Code,
          Message: parsedBody.Message
        });
      }
      throw new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger });
    }
    exports2.getCredentials = getCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js
var require_retry_wrapper = __commonJS({
  "node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retryWrapper = void 0;
    var retryWrapper = (toRetry, maxRetries, delayMs) => {
      return async () => {
        for (let i3 = 0; i3 < maxRetries; ++i3) {
          try {
            return await toRetry();
          } catch (e3) {
            await new Promise((resolve) => setTimeout(resolve, delayMs));
          }
        }
        return await toRetry();
      };
    };
    exports2.retryWrapper = retryWrapper;
  }
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js
var require_fromHttp = __commonJS({
  "node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromHttp = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var client_1 = (init_client(), __toCommonJS(client_exports));
    var node_http_handler_1 = require_dist_cjs16();
    var property_provider_1 = require_dist_cjs22();
    var promises_1 = tslib_1.__importDefault(require("fs/promises"));
    var checkUrl_1 = require_checkUrl();
    var requestHelpers_1 = require_requestHelpers();
    var retry_wrapper_1 = require_retry_wrapper();
    var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
    var AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
    var AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromHttp = (options = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");
      let host;
      const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
      const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
      const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
      const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
      const warn = options.logger?.constructor?.name === "NoOpLogger" || !options.logger ? console.warn : options.logger.warn;
      if (relative && full) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
        warn("awsContainerCredentialsFullUri will take precedence.");
      }
      if (token && tokenFile) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
        warn("awsContainerAuthorizationToken will take precedence.");
      }
      if (full) {
        host = full;
      } else if (relative) {
        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
      } else {
        throw new property_provider_1.CredentialsProviderError(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });
      }
      const url = new URL(host);
      (0, checkUrl_1.checkUrl)(url, options.logger);
      const requestHandler = new node_http_handler_1.NodeHttpHandler({
        requestTimeout: options.timeout ?? 1e3,
        connectionTimeout: options.timeout ?? 1e3
      });
      return (0, retry_wrapper_1.retryWrapper)(async () => {
        const request = (0, requestHelpers_1.createGetRequest)(url);
        if (token) {
          request.headers.Authorization = token;
        } else if (tokenFile) {
          request.headers.Authorization = (await promises_1.default.readFile(tokenFile)).toString();
        }
        try {
          const result = await requestHandler.handle(request);
          return (0, requestHelpers_1.getCredentials)(result.response).then((creds) => (0, client_1.setCredentialFeature)(creds, "CREDENTIALS_HTTP", "z"));
        } catch (e3) {
          throw new property_provider_1.CredentialsProviderError(String(e3), { logger: options.logger });
        }
      }, options.maxRetries ?? 3, options.timeout ?? 1e3);
    };
    exports2.fromHttp = fromHttp;
  }
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromHttp = void 0;
    var fromHttp_1 = require_fromHttp();
    Object.defineProperty(exports2, "fromHttp", { enumerable: true, get: function() {
      return fromHttp_1.fromHttp;
    } });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider2 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveHttpAuthSchemeConfig = exports2.defaultSSOHttpAuthSchemeProvider = exports2.defaultSSOHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs2();
    var defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports2.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption3(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "awsssoportal",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption3(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption3(authParameters));
        }
      }
      return options;
    };
    exports2.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig3 = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return Object.assign(config_0, {
        authSchemePreference: (0, util_middleware_1.normalizeProvider)(config.authSchemePreference ?? [])
      });
    };
    exports2.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig3;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.799.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.799.0",
        "@aws-sdk/middleware-host-header": "3.775.0",
        "@aws-sdk/middleware-logger": "3.775.0",
        "@aws-sdk/middleware-recursion-detection": "3.775.0",
        "@aws-sdk/middleware-user-agent": "3.799.0",
        "@aws-sdk/region-config-resolver": "3.775.0",
        "@aws-sdk/types": "3.775.0",
        "@aws-sdk/util-endpoints": "3.787.0",
        "@aws-sdk/util-user-agent-browser": "3.775.0",
        "@aws-sdk/util-user-agent-node": "3.799.0",
        "@smithy/config-resolver": "^4.1.0",
        "@smithy/core": "^3.3.0",
        "@smithy/fetch-http-handler": "^5.0.2",
        "@smithy/hash-node": "^4.0.2",
        "@smithy/invalid-dependency": "^4.0.2",
        "@smithy/middleware-content-length": "^4.0.2",
        "@smithy/middleware-endpoint": "^4.1.1",
        "@smithy/middleware-retry": "^4.1.1",
        "@smithy/middleware-serde": "^4.0.3",
        "@smithy/middleware-stack": "^4.0.2",
        "@smithy/node-config-provider": "^4.0.2",
        "@smithy/node-http-handler": "^4.0.4",
        "@smithy/protocol-http": "^5.1.0",
        "@smithy/smithy-client": "^4.2.1",
        "@smithy/types": "^4.2.0",
        "@smithy/url-parser": "^4.0.2",
        "@smithy/util-base64": "^4.0.0",
        "@smithy/util-body-length-browser": "^4.0.0",
        "@smithy/util-body-length-node": "^4.0.0",
        "@smithy/util-defaults-mode-browser": "^4.0.9",
        "@smithy/util-defaults-mode-node": "^4.0.9",
        "@smithy/util-endpoints": "^3.0.2",
        "@smithy/util-middleware": "^4.0.2",
        "@smithy/util-retry": "^4.0.2",
        "@smithy/util-utf8": "^4.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node18": "18.2.4",
        "@types/node": "^18.19.69",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.2.2"
      },
      engines: {
        node: ">=18.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      NODE_APP_ID_CONFIG_OPTIONS: () => NODE_APP_ID_CONFIG_OPTIONS3,
      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
      createDefaultUserAgentProvider: () => createDefaultUserAgentProvider3,
      crtAvailability: () => crtAvailability,
      defaultUserAgent: () => defaultUserAgent
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_os = require("os");
    var import_process = require("process");
    var crtAvailability = {
      isCrtAvailable: false
    };
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    }, "isCrtAvailable");
    var createDefaultUserAgentProvider3 = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      return async (config) => {
        const sections = [
          // sdk-metadata
          ["aws-sdk-js", clientVersion],
          // ua-metadata
          ["ua", "2.1"],
          // os-metadata
          [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
          // language-metadata
          // ECMAScript edition doesn't matter in JS, so no version needed.
          ["lang/js"],
          ["md/nodejs", `${import_process.versions.node}`]
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (import_process.env.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await config?.userAgentAppId?.();
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    }, "createDefaultUserAgentProvider");
    var defaultUserAgent = createDefaultUserAgentProvider3;
    var import_middleware_user_agent3 = require_dist_cjs26();
    var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    var UA_APP_ID_INI_NAME = "sdk_ua_app_id";
    var UA_APP_ID_INI_NAME_DEPRECATED = "sdk-ua-app-id";
    var NODE_APP_ID_CONFIG_OPTIONS3 = {
      environmentVariableSelector: /* @__PURE__ */ __name((env2) => env2[UA_APP_ID_ENV_NAME], "environmentVariableSelector"),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[UA_APP_ID_INI_NAME] ?? profile[UA_APP_ID_INI_NAME_DEPRECATED], "configFileSelector"),
      default: import_middleware_user_agent3.DEFAULT_UA_APP_ID
    };
  }
});

// node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@smithy/hash-node/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Hash: () => Hash3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs11();
    var import_util_utf83 = require_dist_cjs12();
    var import_buffer = require("buffer");
    var import_crypto5 = require("crypto");
    var Hash3 = class {
      static {
        __name(this, "Hash");
      }
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, import_util_utf83.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, import_crypto5.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto5.createHash)(this.algorithmIdentifier);
      }
    };
    function castSourceData(toCast, encoding) {
      if (import_buffer.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, import_util_buffer_from.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
    }
    __name(castSourceData, "castSourceData");
  }
});

// node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      calculateBodyLength: () => calculateBodyLength3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_fs = require("fs");
    var calculateBodyLength3 = /* @__PURE__ */ __name((body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, import_fs.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, import_fs.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, "calculateBodyLength");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var u3 = "required";
    var v6 = "fn";
    var w3 = "argv";
    var x3 = "ref";
    var a3 = true;
    var b3 = "isSet";
    var c3 = "booleanEquals";
    var d3 = "error";
    var e3 = "endpoint";
    var f3 = "tree";
    var g3 = "PartitionResult";
    var h3 = "getAttr";
    var i3 = { [u3]: false, "type": "String" };
    var j3 = { [u3]: true, "default": false, "type": "Boolean" };
    var k3 = { [x3]: "Endpoint" };
    var l3 = { [v6]: c3, [w3]: [{ [x3]: "UseFIPS" }, true] };
    var m3 = { [v6]: c3, [w3]: [{ [x3]: "UseDualStack" }, true] };
    var n3 = {};
    var o3 = { [v6]: h3, [w3]: [{ [x3]: g3 }, "supportsFIPS"] };
    var p3 = { [x3]: g3 };
    var q3 = { [v6]: c3, [w3]: [true, { [v6]: h3, [w3]: [p3, "supportsDualStack"] }] };
    var r3 = [l3];
    var s3 = [m3];
    var t3 = [{ [x3]: "Region" }];
    var _data3 = { version: "1.0", parameters: { Region: i3, UseDualStack: j3, UseFIPS: j3, Endpoint: i3 }, rules: [{ conditions: [{ [v6]: b3, [w3]: [k3] }], rules: [{ conditions: r3, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d3 }, { conditions: s3, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d3 }, { endpoint: { url: k3, properties: n3, headers: n3 }, type: e3 }], type: f3 }, { conditions: [{ [v6]: b3, [w3]: t3 }], rules: [{ conditions: [{ [v6]: "aws.partition", [w3]: t3, assign: g3 }], rules: [{ conditions: [l3, m3], rules: [{ conditions: [{ [v6]: c3, [w3]: [a3, o3] }, q3], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d3 }], type: f3 }, { conditions: r3, rules: [{ conditions: [{ [v6]: c3, [w3]: [o3, a3] }], rules: [{ conditions: [{ [v6]: "stringEquals", [w3]: [{ [v6]: h3, [w3]: [p3, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n3, headers: n3 }, type: e3 }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }, { error: "FIPS is enabled but this partition does not support FIPS", type: d3 }], type: f3 }, { conditions: s3, rules: [{ conditions: [q3], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }, { error: "DualStack is enabled but this partition does not support DualStack", type: d3 }], type: f3 }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n3, headers: n3 }, type: e3 }], type: f3 }], type: f3 }, { error: "Invalid Configuration: Missing Region", type: d3 }] };
    exports2.ruleSet = _data3;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var util_endpoints_2 = require_dist_cjs20();
    var ruleset_1 = require_ruleset();
    var cache3 = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver3 = (endpointParams, context = {}) => {
      return cache3.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver3;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs25();
    var url_parser_1 = require_dist_cjs36();
    var util_base64_1 = require_dist_cjs13();
    var util_utf8_1 = require_dist_cjs12();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig5 = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig5;
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports2, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      resolveDefaultsModeConfig: () => resolveDefaultsModeConfig3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_config_resolver5 = require_dist_cjs28();
    var import_node_config_provider3 = require_dist_cjs34();
    var import_property_provider2 = require_dist_cjs22();
    var AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    var AWS_REGION_ENV = "AWS_REGION";
    var AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    var IMDS_REGION_PATH = "/latest/meta-data/placement/region";
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
    var resolveDefaultsModeConfig3 = /* @__PURE__ */ __name(({
      region = (0, import_node_config_provider3.loadConfig)(import_config_resolver5.NODE_REGION_CONFIG_OPTIONS),
      defaultsMode = (0, import_node_config_provider3.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)
    } = {}) => (0, import_property_provider2.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode?.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode?.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(
            `Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`
          );
      }
    }), "resolveDefaultsModeConfig");
    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    }, "resolveNodeDefaultsModeAuto");
    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED]) {
        try {
          const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() => __toESM2(require_dist_cjs39()));
          const endpoint = await getInstanceMetadataEndpoint();
          return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        } catch (e3) {
        }
      }
    }, "inferPhysicalRegion");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_user_agent_node_1 = require_dist_cjs41();
    var config_resolver_1 = require_dist_cjs28();
    var hash_node_1 = require_dist_cjs42();
    var middleware_retry_1 = require_dist_cjs32();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs16();
    var util_body_length_node_1 = require_dist_cjs43();
    var util_retry_1 = require_dist_cjs31();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs25();
    var util_defaults_mode_node_1 = require_dist_cjs44();
    var smithy_client_2 = require_dist_cjs25();
    var getRuntimeConfig5 = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const profileConfig = { profile: config?.profile };
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config?.authSchemePreference ?? (0, node_config_provider_1.loadConfig)(core_1.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, profileConfig),
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }, config),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig5;
  }
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS3,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS3,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration3,
      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration3,
      resolveRegionConfig: () => resolveRegionConfig3
    });
    module2.exports = __toCommonJS2(index_exports);
    var getAwsRegionExtensionConfiguration3 = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        setRegion(region) {
          runtimeConfig.region = region;
        },
        region() {
          return runtimeConfig.region;
        }
      };
    }, "getAwsRegionExtensionConfiguration");
    var resolveAwsRegionExtensionConfiguration3 = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    }, "resolveAwsRegionExtensionConfiguration");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS3 = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => env[REGION_ENV_NAME], "environmentVariableSelector"),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[REGION_INI_NAME], "configFileSelector"),
      default: /* @__PURE__ */ __name(() => {
        throw new Error("Region is missing");
      }, "default")
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS3 = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig3 = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return Object.assign(input, {
        region: /* @__PURE__ */ __name(async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        }, "region"),
        useFipsEndpoint: /* @__PURE__ */ __name(async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }, "useFipsEndpoint")
      });
    }, "resolveRegionConfig");
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
      GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
      GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
      InvalidRequestException: () => InvalidRequestException2,
      ListAccountRolesCommand: () => ListAccountRolesCommand,
      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
      ListAccountsCommand: () => ListAccountsCommand,
      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
      LogoutCommand: () => LogoutCommand,
      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
      SSO: () => SSO,
      SSOClient: () => SSOClient,
      SSOServiceException: () => SSOServiceException,
      TooManyRequestsException: () => TooManyRequestsException,
      UnauthorizedException: () => UnauthorizedException,
      __Client: () => import_smithy_client25.Client,
      paginateListAccountRoles: () => paginateListAccountRoles,
      paginateListAccounts: () => paginateListAccounts
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_middleware_host_header3 = require_dist_cjs6();
    var import_middleware_logger3 = require_dist_cjs7();
    var import_middleware_recursion_detection3 = require_dist_cjs8();
    var import_middleware_user_agent3 = require_dist_cjs26();
    var import_config_resolver5 = require_dist_cjs28();
    var import_core17 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length3 = require_dist_cjs29();
    var import_middleware_endpoint6 = require_dist_cjs37();
    var import_middleware_retry5 = require_dist_cjs32();
    var import_httpAuthSchemeProvider5 = require_httpAuthSchemeProvider2();
    var resolveClientEndpointParameters3 = /* @__PURE__ */ __name((options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      });
    }, "resolveClientEndpointParameters");
    var commonParams3 = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig5 = require_runtimeConfig();
    var import_region_config_resolver3 = require_dist_cjs45();
    var import_protocol_http11 = require_dist_cjs3();
    var import_smithy_client25 = require_dist_cjs25();
    var getHttpAuthExtensionConfiguration3 = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig3 = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var resolveRuntimeExtensions3 = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(
        (0, import_region_config_resolver3.getAwsRegionExtensionConfiguration)(runtimeConfig),
        (0, import_smithy_client25.getDefaultExtensionConfiguration)(runtimeConfig),
        (0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig),
        getHttpAuthExtensionConfiguration3(runtimeConfig)
      );
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(
        runtimeConfig,
        (0, import_region_config_resolver3.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        (0, import_smithy_client25.resolveDefaultRuntimeConfig)(extensionConfiguration),
        (0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        resolveHttpAuthRuntimeConfig3(extensionConfiguration)
      );
    }, "resolveRuntimeExtensions");
    var SSOClient = class extends import_smithy_client25.Client {
      static {
        __name(this, "SSOClient");
      }
      /**
       * The resolved configuration of SSOClient class. This is resolved and normalized from the {@link SSOClientConfig | constructor configuration interface}.
       */
      config;
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig5.getRuntimeConfig)(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters3(_config_0);
        const _config_2 = (0, import_middleware_user_agent3.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry5.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver5.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header3.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint6.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider5.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions3(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent3.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry5.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length3.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header3.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger3.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection3.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core17.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider5.defaultSSOHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core17.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials
            }), "identityProviderConfigProvider")
          })
        );
        this.middlewareStack.use((0, import_core17.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    var import_middleware_serde5 = require_dist_cjs9();
    var SSOServiceException = class _SSOServiceException extends import_smithy_client25.ServiceException {
      static {
        __name(this, "SSOServiceException");
      }
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
    var InvalidRequestException2 = class _InvalidRequestException extends SSOServiceException {
      static {
        __name(this, "InvalidRequestException");
      }
      name = "InvalidRequestException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException {
      static {
        __name(this, "ResourceNotFoundException");
      }
      name = "ResourceNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException {
      static {
        __name(this, "TooManyRequestsException");
      }
      name = "TooManyRequestsException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    var UnauthorizedException = class _UnauthorizedException extends SSOServiceException {
      static {
        __name(this, "UnauthorizedException");
      }
      name = "UnauthorizedException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client25.SENSITIVE_STRING }
    }), "GetRoleCredentialsRequestFilterSensitiveLog");
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: import_smithy_client25.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: import_smithy_client25.SENSITIVE_STRING }
    }), "RoleCredentialsFilterSensitiveLog");
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    }), "GetRoleCredentialsResponseFilterSensitiveLog");
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client25.SENSITIVE_STRING }
    }), "ListAccountRolesRequestFilterSensitiveLog");
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client25.SENSITIVE_STRING }
    }), "ListAccountsRequestFilterSensitiveLog");
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client25.SENSITIVE_STRING }
    }), "LogoutRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b3 = (0, import_core17.requestBuilder)(input, context);
      const headers = (0, import_smithy_client25.map)({}, import_smithy_client25.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b3.bp("/federation/credentials");
      const query = (0, import_smithy_client25.map)({
        [_rn]: [, (0, import_smithy_client25.expectNonNull)(input[_rN], `roleName`)],
        [_ai]: [, (0, import_smithy_client25.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b3.m("GET").h(headers).q(query).b(body);
      return b3.build();
    }, "se_GetRoleCredentialsCommand");
    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b3 = (0, import_core17.requestBuilder)(input, context);
      const headers = (0, import_smithy_client25.map)({}, import_smithy_client25.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b3.bp("/assignment/roles");
      const query = (0, import_smithy_client25.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, (0, import_smithy_client25.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b3.m("GET").h(headers).q(query).b(body);
      return b3.build();
    }, "se_ListAccountRolesCommand");
    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b3 = (0, import_core17.requestBuilder)(input, context);
      const headers = (0, import_smithy_client25.map)({}, import_smithy_client25.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b3.bp("/assignment/accounts");
      const query = (0, import_smithy_client25.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b3.m("GET").h(headers).q(query).b(body);
      return b3.build();
    }, "se_ListAccountsCommand");
    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b3 = (0, import_core17.requestBuilder)(input, context);
      const headers = (0, import_smithy_client25.map)({}, import_smithy_client25.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b3.bp("/logout");
      let body;
      b3.m("POST").h(headers).b(body);
      return b3.build();
    }, "se_LogoutCommand");
    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = (0, import_smithy_client25.map)({
        $metadata: deserializeMetadata3(output)
      });
      const data = (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client25.take)(data, {
        roleCredentials: import_smithy_client25._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetRoleCredentialsCommand");
    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = (0, import_smithy_client25.map)({
        $metadata: deserializeMetadata3(output)
      });
      const data = (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client25.take)(data, {
        nextToken: import_smithy_client25.expectString,
        roleList: import_smithy_client25._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountRolesCommand");
    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = (0, import_smithy_client25.map)({
        $metadata: deserializeMetadata3(output)
      });
      const data = (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client25.take)(data, {
        accountList: import_smithy_client25._json,
        nextToken: import_smithy_client25.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountsCommand");
    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const contents = (0, import_smithy_client25.map)({
        $metadata: deserializeMetadata3(output)
      });
      await (0, import_smithy_client25.collectBody)(output.body, context);
      return contents;
    }, "de_LogoutCommand");
    var de_CommandError3 = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes2(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError3 = (0, import_smithy_client25.withBaseException)(SSOServiceException);
    var de_InvalidRequestExceptionRes2 = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client25.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client25.take)(data, {
        message: import_smithy_client25.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException2({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client25.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client25.take)(data, {
        message: import_smithy_client25.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client25.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client25.take)(data, {
        message: import_smithy_client25.expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyRequestsExceptionRes");
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client25.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client25.take)(data, {
        message: import_smithy_client25.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedExceptionRes");
    var deserializeMetadata3 = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _aI = "accountId";
    var _aT = "accessToken";
    var _ai = "account_id";
    var _mR = "maxResults";
    var _mr = "max_result";
    var _nT = "nextToken";
    var _nt = "next_token";
    var _rN = "roleName";
    var _rn = "role_name";
    var _xasbt = "x-amz-sso_bearer_token";
    var GetRoleCredentialsCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
      static {
        __name(this, "GetRoleCredentialsCommand");
      }
    };
    var ListAccountRolesCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
      static {
        __name(this, "ListAccountRolesCommand");
      }
    };
    var ListAccountsCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
      static {
        __name(this, "ListAccountsCommand");
      }
    };
    var LogoutCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
      static {
        __name(this, "LogoutCommand");
      }
    };
    var commands3 = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    var SSO = class extends SSOClient {
      static {
        __name(this, "SSO");
      }
    };
    (0, import_smithy_client25.createAggregatedClient)(commands3, SSO);
    var paginateListAccountRoles = (0, import_core17.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
    var paginateListAccounts = (0, import_core17.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/auth/httpAuthSchemeProvider.js
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "sso-oauth",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var import_util_middleware4, defaultSSOOIDCHttpAuthSchemeParametersProvider, defaultSSOOIDCHttpAuthSchemeProvider, resolveHttpAuthSchemeConfig;
var init_httpAuthSchemeProvider = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/auth/httpAuthSchemeProvider.js"() {
    init_dist_es2();
    import_util_middleware4 = __toESM(require_dist_cjs2());
    defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, import_util_middleware4.getSmithyContext)(context).operation,
        region: await (0, import_util_middleware4.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = resolveAwsSdkSigV4Config(config);
      return Object.assign(config_0, {
        authSchemePreference: (0, import_util_middleware4.normalizeProvider)(config.authSchemePreference ?? [])
      });
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/EndpointParameters.js
var resolveClientEndpointParameters, commonParams;
var init_EndpointParameters = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/EndpointParameters.js"() {
    resolveClientEndpointParameters = (options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      });
    };
    commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/package.json
var package_default;
var init_package = __esm({
  "node_modules/@aws-sdk/nested-clients/package.json"() {
    package_default = {
      name: "@aws-sdk/nested-clients",
      version: "3.799.0",
      description: "Nested clients for AWS SDK packages.",
      main: "./dist-cjs/index.js",
      module: "./dist-es/index.js",
      types: "./dist-types/index.d.ts",
      scripts: {
        build: "yarn lint && concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline nested-clients",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        lint: "node ../../scripts/validation/submodules-linter.js --pkg nested-clients",
        test: "yarn g:vitest run",
        "test:watch": "yarn g:vitest watch"
      },
      engines: {
        node: ">=18.0.0"
      },
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.799.0",
        "@aws-sdk/middleware-host-header": "3.775.0",
        "@aws-sdk/middleware-logger": "3.775.0",
        "@aws-sdk/middleware-recursion-detection": "3.775.0",
        "@aws-sdk/middleware-user-agent": "3.799.0",
        "@aws-sdk/region-config-resolver": "3.775.0",
        "@aws-sdk/types": "3.775.0",
        "@aws-sdk/util-endpoints": "3.787.0",
        "@aws-sdk/util-user-agent-browser": "3.775.0",
        "@aws-sdk/util-user-agent-node": "3.799.0",
        "@smithy/config-resolver": "^4.1.0",
        "@smithy/core": "^3.3.0",
        "@smithy/fetch-http-handler": "^5.0.2",
        "@smithy/hash-node": "^4.0.2",
        "@smithy/invalid-dependency": "^4.0.2",
        "@smithy/middleware-content-length": "^4.0.2",
        "@smithy/middleware-endpoint": "^4.1.1",
        "@smithy/middleware-retry": "^4.1.1",
        "@smithy/middleware-serde": "^4.0.3",
        "@smithy/middleware-stack": "^4.0.2",
        "@smithy/node-config-provider": "^4.0.2",
        "@smithy/node-http-handler": "^4.0.4",
        "@smithy/protocol-http": "^5.1.0",
        "@smithy/smithy-client": "^4.2.1",
        "@smithy/types": "^4.2.0",
        "@smithy/url-parser": "^4.0.2",
        "@smithy/util-base64": "^4.0.0",
        "@smithy/util-body-length-browser": "^4.0.0",
        "@smithy/util-body-length-node": "^4.0.0",
        "@smithy/util-defaults-mode-browser": "^4.0.9",
        "@smithy/util-defaults-mode-node": "^4.0.9",
        "@smithy/util-endpoints": "^3.0.2",
        "@smithy/util-middleware": "^4.0.2",
        "@smithy/util-retry": "^4.0.2",
        "@smithy/util-utf8": "^4.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~5.2.2"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "./sso-oidc.d.ts",
        "./sso-oidc.js",
        "./sts.d.ts",
        "./sts.js",
        "dist-*/**"
      ],
      browser: {
        "./dist-es/submodules/sso-oidc/runtimeConfig": "./dist-es/submodules/sso-oidc/runtimeConfig.browser",
        "./dist-es/submodules/sts/runtimeConfig": "./dist-es/submodules/sts/runtimeConfig.browser"
      },
      "react-native": {},
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/packages/nested-clients",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "packages/nested-clients"
      },
      exports: {
        "./sso-oidc": {
          types: "./dist-types/submodules/sso-oidc/index.d.ts",
          module: "./dist-es/submodules/sso-oidc/index.js",
          node: "./dist-cjs/submodules/sso-oidc/index.js",
          import: "./dist-es/submodules/sso-oidc/index.js",
          require: "./dist-cjs/submodules/sso-oidc/index.js"
        },
        "./sts": {
          types: "./dist-types/submodules/sts/index.d.ts",
          module: "./dist-es/submodules/sts/index.js",
          node: "./dist-cjs/submodules/sts/index.js",
          import: "./dist-es/submodules/sts/index.js",
          require: "./dist-cjs/submodules/sts/index.js"
        }
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/ruleset.js
var u, v, w, x, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, _data, ruleSet;
var init_ruleset = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/ruleset.js"() {
    u = "required";
    v = "fn";
    w = "argv";
    x = "ref";
    a = true;
    b = "isSet";
    c = "booleanEquals";
    d = "error";
    e = "endpoint";
    f = "tree";
    g = "PartitionResult";
    h = "getAttr";
    i = { [u]: false, "type": "String" };
    j = { [u]: true, "default": false, "type": "Boolean" };
    k = { [x]: "Endpoint" };
    l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    n = {};
    o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    p = { [x]: g };
    q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    r = [l];
    s = [m];
    t = [{ [x]: "Region" }];
    _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    ruleSet = _data;
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/endpointResolver.js
var import_util_endpoints, import_util_endpoints2, cache, defaultEndpointResolver;
var init_endpointResolver = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/endpoint/endpointResolver.js"() {
    import_util_endpoints = __toESM(require_dist_cjs21());
    import_util_endpoints2 = __toESM(require_dist_cjs20());
    init_ruleset();
    cache = new import_util_endpoints2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, import_util_endpoints2.resolveEndpoint)(ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    import_util_endpoints2.customEndpointFunctions.aws = import_util_endpoints.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeConfig.shared.js
var import_smithy_client4, import_url_parser, import_util_base64, import_util_utf8, getRuntimeConfig;
var init_runtimeConfig_shared = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeConfig.shared.js"() {
    init_dist_es2();
    init_dist_es();
    import_smithy_client4 = __toESM(require_dist_cjs25());
    import_url_parser = __toESM(require_dist_cjs36());
    import_util_base64 = __toESM(require_dist_cjs13());
    import_util_utf8 = __toESM(require_dist_cjs12());
    init_httpAuthSchemeProvider();
    init_endpointResolver();
    getRuntimeConfig = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? import_util_base64.fromBase64,
        base64Encoder: config?.base64Encoder ?? import_util_base64.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new import_smithy_client4.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO OIDC",
        urlParser: config?.urlParser ?? import_url_parser.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? import_util_utf8.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? import_util_utf8.toUtf8
      };
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeConfig.js
var import_util_user_agent_node, import_config_resolver, import_hash_node, import_middleware_retry, import_node_config_provider, import_node_http_handler, import_util_body_length_node, import_util_retry, import_smithy_client5, import_util_defaults_mode_node, import_smithy_client6, getRuntimeConfig2;
var init_runtimeConfig = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeConfig.js"() {
    init_package();
    init_dist_es2();
    import_util_user_agent_node = __toESM(require_dist_cjs41());
    import_config_resolver = __toESM(require_dist_cjs28());
    import_hash_node = __toESM(require_dist_cjs42());
    import_middleware_retry = __toESM(require_dist_cjs32());
    import_node_config_provider = __toESM(require_dist_cjs34());
    import_node_http_handler = __toESM(require_dist_cjs16());
    import_util_body_length_node = __toESM(require_dist_cjs43());
    import_util_retry = __toESM(require_dist_cjs31());
    init_runtimeConfig_shared();
    import_smithy_client5 = __toESM(require_dist_cjs25());
    import_util_defaults_mode_node = __toESM(require_dist_cjs44());
    import_smithy_client6 = __toESM(require_dist_cjs25());
    getRuntimeConfig2 = (config) => {
      (0, import_smithy_client6.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, import_util_defaults_mode_node.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(import_smithy_client5.loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig(config);
      emitWarningIfUnsupportedVersion(process.version);
      const profileConfig = { profile: config?.profile };
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config?.authSchemePreference ?? (0, import_node_config_provider.loadConfig)(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, profileConfig),
        bodyLengthChecker: config?.bodyLengthChecker ?? import_util_body_length_node.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, import_util_user_agent_node.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        maxAttempts: config?.maxAttempts ?? (0, import_node_config_provider.loadConfig)(import_middleware_retry.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region: config?.region ?? (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS, { ...import_config_resolver.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: import_node_http_handler.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, import_node_config_provider.loadConfig)({
          ...import_middleware_retry.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || import_util_retry.DEFAULT_RETRY_MODE
        }, config),
        sha256: config?.sha256 ?? import_hash_node.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? import_node_http_handler.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config?.userAgentAppId ?? (0, import_node_config_provider.loadConfig)(import_util_user_agent_node.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration, resolveHttpAuthRuntimeConfig;
var init_httpAuthExtensionConfiguration = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/auth/httpAuthExtensionConfiguration.js"() {
    getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeExtensions.js
var import_region_config_resolver, import_protocol_http8, import_smithy_client7, resolveRuntimeExtensions;
var init_runtimeExtensions = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/runtimeExtensions.js"() {
    import_region_config_resolver = __toESM(require_dist_cjs45());
    import_protocol_http8 = __toESM(require_dist_cjs3());
    import_smithy_client7 = __toESM(require_dist_cjs25());
    init_httpAuthExtensionConfiguration();
    resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client7.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http8.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client7.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http8.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/SSOOIDCClient.js
var import_middleware_host_header, import_middleware_logger, import_middleware_recursion_detection, import_middleware_user_agent, import_config_resolver2, import_middleware_content_length, import_middleware_endpoint, import_middleware_retry2, import_smithy_client8, SSOOIDCClient;
var init_SSOOIDCClient = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/SSOOIDCClient.js"() {
    import_middleware_host_header = __toESM(require_dist_cjs6());
    import_middleware_logger = __toESM(require_dist_cjs7());
    import_middleware_recursion_detection = __toESM(require_dist_cjs8());
    import_middleware_user_agent = __toESM(require_dist_cjs26());
    import_config_resolver2 = __toESM(require_dist_cjs28());
    init_dist_es();
    import_middleware_content_length = __toESM(require_dist_cjs29());
    import_middleware_endpoint = __toESM(require_dist_cjs37());
    import_middleware_retry2 = __toESM(require_dist_cjs32());
    import_smithy_client8 = __toESM(require_dist_cjs25());
    init_httpAuthSchemeProvider();
    init_EndpointParameters();
    init_runtimeConfig();
    init_runtimeExtensions();
    SSOOIDCClient = class extends import_smithy_client8.Client {
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry2.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver2.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry2.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultSSOOIDCHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config.credentials
          })
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/SSOOIDCServiceException.js
var import_smithy_client9, SSOOIDCServiceException;
var init_SSOOIDCServiceException = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/SSOOIDCServiceException.js"() {
    import_smithy_client9 = __toESM(require_dist_cjs25());
    SSOOIDCServiceException = class _SSOOIDCServiceException extends import_smithy_client9.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/models_0.js
var import_smithy_client10, AccessDeniedException, AuthorizationPendingException, CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog, ExpiredTokenException, InternalServerException, InvalidClientException, InvalidGrantException, InvalidRequestException, InvalidScopeException, SlowDownException, UnauthorizedClientException, UnsupportedGrantTypeException;
var init_models_0 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/models_0.js"() {
    import_smithy_client10 = __toESM(require_dist_cjs25());
    init_SSOOIDCServiceException();
    AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      name = "AccessDeniedException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      name = "AuthorizationPendingException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client10.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client10.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client10.SENSITIVE_STRING }
    });
    CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client10.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client10.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client10.SENSITIVE_STRING }
    });
    ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
      name = "ExpiredTokenException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      name = "InternalServerException";
      $fault = "server";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      name = "InvalidClientException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      name = "InvalidGrantException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
      name = "InvalidRequestException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      name = "InvalidScopeException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      name = "SlowDownException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      name = "UnauthorizedClientException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      name = "UnsupportedGrantTypeException";
      $fault = "client";
      error;
      error_description;
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/protocols/Aws_restJson1.js
var import_smithy_client11, se_CreateTokenCommand, de_CreateTokenCommand, de_CommandError, throwDefaultError, de_AccessDeniedExceptionRes, de_AuthorizationPendingExceptionRes, de_ExpiredTokenExceptionRes, de_InternalServerExceptionRes, de_InvalidClientExceptionRes, de_InvalidGrantExceptionRes, de_InvalidRequestExceptionRes, de_InvalidScopeExceptionRes, de_SlowDownExceptionRes, de_UnauthorizedClientExceptionRes, de_UnsupportedGrantTypeExceptionRes, deserializeMetadata;
var init_Aws_restJson1 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/protocols/Aws_restJson1.js"() {
    init_dist_es2();
    init_dist_es();
    import_smithy_client11 = __toESM(require_dist_cjs25());
    init_models_0();
    init_SSOOIDCServiceException();
    se_CreateTokenCommand = async (input, context) => {
      const b3 = requestBuilder(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b3.bp("/token");
      let body;
      body = JSON.stringify((0, import_smithy_client11.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        codeVerifier: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_2) => (0, import_smithy_client11._json)(_2)
      }));
      b3.m("POST").h(headers).b(body);
      return b3.build();
    };
    de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client11.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client11.expectNonNull)((0, import_smithy_client11.expectObject)(await parseJsonBody(output.body, context)), "body");
      const doc = (0, import_smithy_client11.take)(data, {
        accessToken: import_smithy_client11.expectString,
        expiresIn: import_smithy_client11.expectInt32,
        idToken: import_smithy_client11.expectString,
        refreshToken: import_smithy_client11.expectString,
        tokenType: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_CommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    throwDefaultError = (0, import_smithy_client11.withBaseException)(SSOOIDCServiceException);
    de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, import_smithy_client11.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client11.take)(data, {
        error: import_smithy_client11.expectString,
        error_description: import_smithy_client11.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client11.decorateServiceException)(exception, parsedOutput.body);
    };
    deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/commands/CreateTokenCommand.js
var import_middleware_endpoint2, import_middleware_serde2, import_smithy_client12, CreateTokenCommand;
var init_CreateTokenCommand = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/commands/CreateTokenCommand.js"() {
    import_middleware_endpoint2 = __toESM(require_dist_cjs37());
    import_middleware_serde2 = __toESM(require_dist_cjs9());
    import_smithy_client12 = __toESM(require_dist_cjs25());
    init_EndpointParameters();
    init_models_0();
    init_Aws_restJson1();
    CreateTokenCommand = class extends import_smithy_client12.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/SSOOIDC.js
var import_smithy_client13, commands, SSOOIDC;
var init_SSOOIDC = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/SSOOIDC.js"() {
    import_smithy_client13 = __toESM(require_dist_cjs25());
    init_CreateTokenCommand();
    init_SSOOIDCClient();
    commands = {
      CreateTokenCommand
    };
    SSOOIDC = class extends SSOOIDCClient {
    };
    (0, import_smithy_client13.createAggregatedClient)(commands, SSOOIDC);
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/commands/index.js
var init_commands = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/commands/index.js"() {
    init_CreateTokenCommand();
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/index.js
var init_models = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/models/index.js"() {
    init_models_0();
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/index.js
var sso_oidc_exports = {};
__export(sso_oidc_exports, {
  $Command: () => import_smithy_client12.Command,
  AccessDeniedException: () => AccessDeniedException,
  AuthorizationPendingException: () => AuthorizationPendingException,
  CreateTokenCommand: () => CreateTokenCommand,
  CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
  CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
  ExpiredTokenException: () => ExpiredTokenException,
  InternalServerException: () => InternalServerException,
  InvalidClientException: () => InvalidClientException,
  InvalidGrantException: () => InvalidGrantException,
  InvalidRequestException: () => InvalidRequestException,
  InvalidScopeException: () => InvalidScopeException,
  SSOOIDC: () => SSOOIDC,
  SSOOIDCClient: () => SSOOIDCClient,
  SSOOIDCServiceException: () => SSOOIDCServiceException,
  SlowDownException: () => SlowDownException,
  UnauthorizedClientException: () => UnauthorizedClientException,
  UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
  __Client: () => import_smithy_client8.Client
});
var init_sso_oidc = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sso-oidc/index.js"() {
    init_SSOOIDCClient();
    init_SSOOIDC();
    init_commands();
    init_models();
    init_SSOOIDCServiceException();
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      fromSso: () => fromSso,
      fromStatic: () => fromStatic,
      nodeProvider: () => nodeProvider
    });
    module2.exports = __toCommonJS2(index_exports);
    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion, init = {}) => {
      const { SSOOIDCClient: SSOOIDCClient2 } = await Promise.resolve().then(() => __toESM2((init_sso_oidc(), __toCommonJS(sso_oidc_exports))));
      const ssoOidcClient = new SSOOIDCClient2(
        Object.assign({}, init.clientConfig ?? {}, {
          region: ssoRegion ?? init.clientConfig?.region,
          logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger
        })
      );
      return ssoOidcClient;
    }, "getSsoOidcClient");
    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion, init = {}) => {
      const { CreateTokenCommand: CreateTokenCommand2 } = await Promise.resolve().then(() => __toESM2((init_sso_oidc(), __toCommonJS(sso_oidc_exports))));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
      return ssoOidcClient.send(
        new CreateTokenCommand2({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: "refresh_token"
        })
      );
    }, "getNewSsoOidcToken");
    var import_property_provider2 = require_dist_cjs22();
    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new import_property_provider2.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    }, "validateTokenExpiry");
    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new import_property_provider2.TokenProviderError(
          `Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`,
          false
        );
      }
    }, "validateTokenKey");
    var import_shared_ini_file_loader = require_dist_cjs33();
    var import_fs = require("fs");
    var { writeFile } = import_fs.promises;
    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    }, "writeSSOTokenToFile");
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = /* @__PURE__ */ __name((_init = {}) => async ({ callerClientConfig } = {}) => {
      const init = {
        ..._init,
        parentClientConfig: {
          ...callerClientConfig,
          ..._init.parentClientConfig
        }
      };
      init.logger?.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profileName = (0, import_shared_ini_file_loader.getProfileName)({
        profile: init.profile ?? callerClientConfig?.profile
      });
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider2.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new import_property_provider2.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new import_property_provider2.TokenProviderError(
          `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
          false
        );
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new import_property_provider2.TokenProviderError(
            `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
            false
          );
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
      } catch (e3) {
        throw new import_property_provider2.TokenProviderError(
          `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,
          false
        );
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    }, "fromSso");
    var fromStatic = /* @__PURE__ */ __name(({ token, logger }) => async () => {
      logger?.debug("@aws-sdk/token-providers - fromStatic");
      if (!token || !token.token) {
        throw new import_property_provider2.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    }, "fromStatic");
    var nodeProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider2.memoize)(
      (0, import_property_provider2.chain)(fromSso(init), async () => {
        throw new import_property_provider2.TokenProviderError("Could not load token from any providers", false);
      }),
      (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,
      (token) => token.expiration !== void 0
    ), "nodeProvider");
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __esm2 = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var loadSso_exports = {};
    __export2(loadSso_exports, {
      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
      SSOClient: () => import_client_sso.SSOClient
    });
    var import_client_sso;
    var init_loadSso = __esm2({
      "src/loadSso.ts"() {
        "use strict";
        import_client_sso = require_dist_cjs46();
      }
    });
    var index_exports = {};
    __export2(index_exports, {
      fromSSO: () => fromSSO,
      isSsoProfile: () => isSsoProfile,
      validateSsoProfile: () => validateSsoProfile
    });
    module2.exports = __toCommonJS2(index_exports);
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var import_token_providers = require_dist_cjs47();
    var import_property_provider2 = require_dist_cjs22();
    var import_shared_ini_file_loader = require_dist_cjs33();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      clientConfig: clientConfig2,
      parentClientConfig,
      profile,
      logger
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, import_token_providers.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e3) {
          throw new import_property_provider2.CredentialsProviderError(e3.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger
          });
        }
      } else {
        try {
          token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e3) {
          throw new import_property_provider2.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new import_property_provider2.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(
        Object.assign({}, clientConfig2 ?? {}, {
          logger: clientConfig2?.logger ?? parentClientConfig?.logger,
          region: clientConfig2?.region ?? ssoRegion
        })
      );
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new GetRoleCredentialsCommand2({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
          })
        );
      } catch (e3) {
        throw new import_property_provider2.CredentialsProviderError(e3, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const {
        roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}
      } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new import_property_provider2.CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger
        });
      }
      const credentials = {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
        ...credentialScope && { credentialScope },
        ...accountId && { accountId }
      };
      if (ssoSession) {
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_SSO", "s");
      } else {
        (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_SSO_LEGACY", "u");
      }
      return credentials;
    }, "resolveSSOCredentials");
    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new import_property_provider2.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(
            ", "
          )}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          { tryNextLink: false, logger }
        );
      }
      return profile;
    }, "validateSsoProfile");
    var fromSSO = /* @__PURE__ */ __name((init = {}) => async ({ callerClientConfig } = {}) => {
      init.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = (0, import_shared_ini_file_loader.getProfileName)({
        profile: init.profile ?? callerClientConfig?.profile
      });
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile?.sso_session) {
          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new import_property_provider2.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new import_property_provider2.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(
          profile,
          init.logger
        );
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new import_property_provider2.CredentialsProviderError(
          'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',
          { tryNextLink: false, logger: init.logger }
        );
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      }
    }, "fromSSO");
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/auth/httpAuthSchemeProvider.js
function createAwsAuthSigv4HttpAuthOption2(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "sts",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption2(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var import_util_middleware5, defaultSTSHttpAuthSchemeParametersProvider, defaultSTSHttpAuthSchemeProvider, resolveStsAuthConfig, resolveHttpAuthSchemeConfig2;
var init_httpAuthSchemeProvider2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/auth/httpAuthSchemeProvider.js"() {
    init_dist_es2();
    import_util_middleware5 = __toESM(require_dist_cjs2());
    init_STSClient();
    defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, import_util_middleware5.getSmithyContext)(context).operation,
        region: await (0, import_util_middleware5.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption2(authParameters));
        }
      }
      return options;
    };
    resolveStsAuthConfig = (input) => Object.assign(input, {
      stsClientCtor: STSClient
    });
    resolveHttpAuthSchemeConfig2 = (config) => {
      const config_0 = resolveStsAuthConfig(config);
      const config_1 = resolveAwsSdkSigV4Config(config_0);
      return Object.assign(config_1, {
        authSchemePreference: (0, import_util_middleware5.normalizeProvider)(config.authSchemePreference ?? [])
      });
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/EndpointParameters.js
var resolveClientEndpointParameters2, commonParams2;
var init_EndpointParameters2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/EndpointParameters.js"() {
    resolveClientEndpointParameters2 = (options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      });
    };
    commonParams2 = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/ruleset.js
var F, G, H, I, J, a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y, z, A, B, C, D, E, _data2, ruleSet2;
var init_ruleset2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/ruleset.js"() {
    F = "required";
    G = "type";
    H = "fn";
    I = "argv";
    J = "ref";
    a2 = false;
    b2 = true;
    c2 = "booleanEquals";
    d2 = "stringEquals";
    e2 = "sigv4";
    f2 = "sts";
    g2 = "us-east-1";
    h2 = "endpoint";
    i2 = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    j2 = "tree";
    k2 = "error";
    l2 = "getAttr";
    m2 = { [F]: false, [G]: "String" };
    n2 = { [F]: true, "default": false, [G]: "Boolean" };
    o2 = { [J]: "Endpoint" };
    p2 = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    q2 = { [J]: "Region" };
    r2 = { [H]: "aws.partition", [I]: [q2], "assign": "PartitionResult" };
    s2 = { [J]: "UseFIPS" };
    t2 = { [J]: "UseDualStack" };
    u2 = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e2, "signingName": f2, "signingRegion": g2 }] }, "headers": {} };
    v2 = {};
    w2 = { "conditions": [{ [H]: d2, [I]: [q2, "aws-global"] }], [h2]: u2, [G]: h2 };
    x2 = { [H]: c2, [I]: [s2, true] };
    y = { [H]: c2, [I]: [t2, true] };
    z = { [H]: l2, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
    A = { [J]: "PartitionResult" };
    B = { [H]: c2, [I]: [true, { [H]: l2, [I]: [A, "supportsDualStack"] }] };
    C = [{ [H]: "isSet", [I]: [o2] }];
    D = [x2];
    E = [y];
    _data2 = { version: "1.0", parameters: { Region: m2, UseDualStack: n2, UseFIPS: n2, Endpoint: m2, UseGlobalEndpoint: n2 }, rules: [{ conditions: [{ [H]: c2, [I]: [{ [J]: "UseGlobalEndpoint" }, b2] }, { [H]: "not", [I]: C }, p2, r2, { [H]: c2, [I]: [s2, a2] }, { [H]: c2, [I]: [t2, a2] }], rules: [{ conditions: [{ [H]: d2, [I]: [q2, "ap-northeast-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "ap-south-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "ap-southeast-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "ap-southeast-2"] }], endpoint: u2, [G]: h2 }, w2, { conditions: [{ [H]: d2, [I]: [q2, "ca-central-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "eu-central-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "eu-north-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "eu-west-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "eu-west-2"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "eu-west-3"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "sa-east-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, g2] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "us-east-2"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "us-west-1"] }], endpoint: u2, [G]: h2 }, { conditions: [{ [H]: d2, [I]: [q2, "us-west-2"] }], endpoint: u2, [G]: h2 }, { endpoint: { url: i2, properties: { authSchemes: [{ name: e2, signingName: f2, signingRegion: "{Region}" }] }, headers: v2 }, [G]: h2 }], [G]: j2 }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k2 }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k2 }, { endpoint: { url: o2, properties: v2, headers: v2 }, [G]: h2 }], [G]: j2 }, { conditions: [p2], rules: [{ conditions: [r2], rules: [{ conditions: [x2, y], rules: [{ conditions: [{ [H]: c2, [I]: [b2, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v2, headers: v2 }, [G]: h2 }], [G]: j2 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k2 }], [G]: j2 }, { conditions: D, rules: [{ conditions: [{ [H]: c2, [I]: [z, b2] }], rules: [{ conditions: [{ [H]: d2, [I]: [{ [H]: l2, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v2, headers: v2 }, [G]: h2 }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v2, headers: v2 }, [G]: h2 }], [G]: j2 }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k2 }], [G]: j2 }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v2, headers: v2 }, [G]: h2 }], [G]: j2 }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k2 }], [G]: j2 }, w2, { endpoint: { url: i2, properties: v2, headers: v2 }, [G]: h2 }], [G]: j2 }], [G]: j2 }, { error: "Invalid Configuration: Missing Region", [G]: k2 }] };
    ruleSet2 = _data2;
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/endpointResolver.js
var import_util_endpoints3, import_util_endpoints4, cache2, defaultEndpointResolver2;
var init_endpointResolver2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/endpoint/endpointResolver.js"() {
    import_util_endpoints3 = __toESM(require_dist_cjs21());
    import_util_endpoints4 = __toESM(require_dist_cjs20());
    init_ruleset2();
    cache2 = new import_util_endpoints4.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
    });
    defaultEndpointResolver2 = (endpointParams, context = {}) => {
      return cache2.get(endpointParams, () => (0, import_util_endpoints4.resolveEndpoint)(ruleSet2, {
        endpointParams,
        logger: context.logger
      }));
    };
    import_util_endpoints4.customEndpointFunctions.aws = import_util_endpoints3.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeConfig.shared.js
var import_smithy_client14, import_url_parser2, import_util_base642, import_util_utf82, getRuntimeConfig3;
var init_runtimeConfig_shared2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeConfig.shared.js"() {
    init_dist_es2();
    init_dist_es();
    import_smithy_client14 = __toESM(require_dist_cjs25());
    import_url_parser2 = __toESM(require_dist_cjs36());
    import_util_base642 = __toESM(require_dist_cjs13());
    import_util_utf82 = __toESM(require_dist_cjs12());
    init_httpAuthSchemeProvider2();
    init_endpointResolver2();
    getRuntimeConfig3 = (config) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config?.base64Decoder ?? import_util_base642.fromBase64,
        base64Encoder: config?.base64Encoder ?? import_util_base642.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver2,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new import_smithy_client14.NoOpLogger(),
        serviceId: config?.serviceId ?? "STS",
        urlParser: config?.urlParser ?? import_url_parser2.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? import_util_utf82.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? import_util_utf82.toUtf8
      };
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeConfig.js
var import_util_user_agent_node2, import_config_resolver3, import_hash_node2, import_middleware_retry3, import_node_config_provider2, import_node_http_handler2, import_util_body_length_node2, import_util_retry2, import_smithy_client15, import_util_defaults_mode_node2, import_smithy_client16, getRuntimeConfig4;
var init_runtimeConfig2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeConfig.js"() {
    init_package();
    init_dist_es2();
    import_util_user_agent_node2 = __toESM(require_dist_cjs41());
    import_config_resolver3 = __toESM(require_dist_cjs28());
    init_dist_es();
    import_hash_node2 = __toESM(require_dist_cjs42());
    import_middleware_retry3 = __toESM(require_dist_cjs32());
    import_node_config_provider2 = __toESM(require_dist_cjs34());
    import_node_http_handler2 = __toESM(require_dist_cjs16());
    import_util_body_length_node2 = __toESM(require_dist_cjs43());
    import_util_retry2 = __toESM(require_dist_cjs31());
    init_runtimeConfig_shared2();
    import_smithy_client15 = __toESM(require_dist_cjs25());
    import_util_defaults_mode_node2 = __toESM(require_dist_cjs44());
    import_smithy_client16 = __toESM(require_dist_cjs25());
    getRuntimeConfig4 = (config) => {
      (0, import_smithy_client16.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, import_util_defaults_mode_node2.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(import_smithy_client15.loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig3(config);
      emitWarningIfUnsupportedVersion(process.version);
      const profileConfig = { profile: config?.profile };
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        authSchemePreference: config?.authSchemePreference ?? (0, import_node_config_provider2.loadConfig)(NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, profileConfig),
        bodyLengthChecker: config?.bodyLengthChecker ?? import_util_body_length_node2.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, import_util_user_agent_node2.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await config.credentialDefaultProvider(idProps?.__config || {})()),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        maxAttempts: config?.maxAttempts ?? (0, import_node_config_provider2.loadConfig)(import_middleware_retry3.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region: config?.region ?? (0, import_node_config_provider2.loadConfig)(import_config_resolver3.NODE_REGION_CONFIG_OPTIONS, { ...import_config_resolver3.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: import_node_http_handler2.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, import_node_config_provider2.loadConfig)({
          ...import_middleware_retry3.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || import_util_retry2.DEFAULT_RETRY_MODE
        }, config),
        sha256: config?.sha256 ?? import_hash_node2.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? import_node_http_handler2.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, import_node_config_provider2.loadConfig)(import_config_resolver3.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, import_node_config_provider2.loadConfig)(import_config_resolver3.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config?.userAgentAppId ?? (0, import_node_config_provider2.loadConfig)(import_util_user_agent_node2.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration2, resolveHttpAuthRuntimeConfig2;
var init_httpAuthExtensionConfiguration2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/auth/httpAuthExtensionConfiguration.js"() {
    getHttpAuthExtensionConfiguration2 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig2 = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeExtensions.js
var import_region_config_resolver2, import_protocol_http9, import_smithy_client17, resolveRuntimeExtensions2;
var init_runtimeExtensions2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/runtimeExtensions.js"() {
    import_region_config_resolver2 = __toESM(require_dist_cjs45());
    import_protocol_http9 = __toESM(require_dist_cjs3());
    import_smithy_client17 = __toESM(require_dist_cjs25());
    init_httpAuthExtensionConfiguration2();
    resolveRuntimeExtensions2 = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign((0, import_region_config_resolver2.getAwsRegionExtensionConfiguration)(runtimeConfig), (0, import_smithy_client17.getDefaultExtensionConfiguration)(runtimeConfig), (0, import_protocol_http9.getHttpHandlerExtensionConfiguration)(runtimeConfig), getHttpAuthExtensionConfiguration2(runtimeConfig));
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(runtimeConfig, (0, import_region_config_resolver2.resolveAwsRegionExtensionConfiguration)(extensionConfiguration), (0, import_smithy_client17.resolveDefaultRuntimeConfig)(extensionConfiguration), (0, import_protocol_http9.resolveHttpHandlerRuntimeConfig)(extensionConfiguration), resolveHttpAuthRuntimeConfig2(extensionConfiguration));
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/STSClient.js
var import_middleware_host_header2, import_middleware_logger2, import_middleware_recursion_detection2, import_middleware_user_agent2, import_config_resolver4, import_middleware_content_length2, import_middleware_endpoint3, import_middleware_retry4, import_smithy_client18, STSClient;
var init_STSClient = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/STSClient.js"() {
    import_middleware_host_header2 = __toESM(require_dist_cjs6());
    import_middleware_logger2 = __toESM(require_dist_cjs7());
    import_middleware_recursion_detection2 = __toESM(require_dist_cjs8());
    import_middleware_user_agent2 = __toESM(require_dist_cjs26());
    import_config_resolver4 = __toESM(require_dist_cjs28());
    init_dist_es();
    import_middleware_content_length2 = __toESM(require_dist_cjs29());
    import_middleware_endpoint3 = __toESM(require_dist_cjs37());
    import_middleware_retry4 = __toESM(require_dist_cjs32());
    import_smithy_client18 = __toESM(require_dist_cjs25());
    init_httpAuthSchemeProvider2();
    init_EndpointParameters2();
    init_runtimeConfig2();
    init_runtimeExtensions2();
    STSClient = class extends import_smithy_client18.Client {
      config;
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig4(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters2(_config_0);
        const _config_2 = (0, import_middleware_user_agent2.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry4.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver4.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header2.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint3.resolveEndpointConfig)(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig2(_config_6);
        const _config_8 = resolveRuntimeExtensions2(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent2.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry4.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length2.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header2.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger2.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection2.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: defaultSTSHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config.credentials
          })
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/STSServiceException.js
var import_smithy_client19, STSServiceException;
var init_STSServiceException = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/STSServiceException.js"() {
    import_smithy_client19 = __toESM(require_dist_cjs25());
    STSServiceException = class _STSServiceException extends import_smithy_client19.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/models_0.js
var import_smithy_client20, CredentialsFilterSensitiveLog, AssumeRoleResponseFilterSensitiveLog, ExpiredTokenException2, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, IDPRejectedClaimException, InvalidIdentityTokenException, AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, IDPCommunicationErrorException;
var init_models_02 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/models_0.js"() {
    import_smithy_client20 = __toESM(require_dist_cjs25());
    init_STSServiceException();
    CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client20.SENSITIVE_STRING }
    });
    AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    ExpiredTokenException2 = class _ExpiredTokenException extends STSServiceException {
      name = "ExpiredTokenException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException {
      name = "MalformedPolicyDocumentException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException {
      name = "PackedPolicyTooLargeException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    RegionDisabledException = class _RegionDisabledException extends STSServiceException {
      name = "RegionDisabledException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException {
      name = "IDPRejectedClaimException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException {
      name = "InvalidIdentityTokenException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client20.SENSITIVE_STRING }
    });
    AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException {
      name = "IDPCommunicationErrorException";
      $fault = "client";
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/protocols/Aws_query.js
var import_protocol_http10, import_smithy_client21, se_AssumeRoleCommand, se_AssumeRoleWithWebIdentityCommand, de_AssumeRoleCommand, de_AssumeRoleWithWebIdentityCommand, de_CommandError2, de_ExpiredTokenExceptionRes2, de_IDPCommunicationErrorExceptionRes, de_IDPRejectedClaimExceptionRes, de_InvalidIdentityTokenExceptionRes, de_MalformedPolicyDocumentExceptionRes, de_PackedPolicyTooLargeExceptionRes, de_RegionDisabledExceptionRes, se_AssumeRoleRequest, se_AssumeRoleWithWebIdentityRequest, se_policyDescriptorListType, se_PolicyDescriptorType, se_ProvidedContext, se_ProvidedContextsListType, se_Tag, se_tagKeyListType, se_tagListType, de_AssumedRoleUser, de_AssumeRoleResponse, de_AssumeRoleWithWebIdentityResponse, de_Credentials, de_ExpiredTokenException, de_IDPCommunicationErrorException, de_IDPRejectedClaimException, de_InvalidIdentityTokenException, de_MalformedPolicyDocumentException, de_PackedPolicyTooLargeException, de_RegionDisabledException, deserializeMetadata2, throwDefaultError2, buildHttpRpcRequest, SHARED_HEADERS, _, _A, _AKI, _AR, _ARI, _ARU, _ARWWI, _Ar, _Au, _C, _CA, _DS, _E, _EI, _K, _P, _PA, _PAr, _PC, _PI, _PPS, _Pr, _RA, _RSN, _SAK, _SFWIT, _SI, _SN, _ST, _T, _TC, _TTK, _V, _Va, _WIT, _a, _m, buildFormUrlencodedString, loadQueryErrorCode;
var init_Aws_query = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/protocols/Aws_query.js"() {
    init_dist_es2();
    import_protocol_http10 = __toESM(require_dist_cjs3());
    import_smithy_client21 = __toESM(require_dist_cjs25());
    init_models_02();
    init_STSServiceException();
    se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata2(output),
        ...contents
      };
      return response;
    };
    de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata2(output),
        ...contents
      };
      return response;
    };
    de_CommandError2 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseXmlErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes2(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    de_ExpiredTokenExceptionRes2 = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException2({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client21.decorateServiceException)(exception, body);
    };
    se_AssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (input[_T]?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (input[_TTK]?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (input[_PC]?.length === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    };
    se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    };
    se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    };
    se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_Tag = (input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    };
    se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = (0, import_smithy_client21.expectString)(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client21.expectString)(output[_Ar]);
      }
      return contents;
    };
    de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client21.strictParseInt32)(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client21.expectString)(output[_SI]);
      }
      return contents;
    };
    de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = (0, import_smithy_client21.expectString)(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client21.strictParseInt32)(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client21.expectString)(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client21.expectString)(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client21.expectString)(output[_SI]);
      }
      return contents;
    };
    de_Credentials = (output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client21.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client21.expectString)(output[_SAK]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client21.expectString)(output[_ST]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client21.expectNonNull)((0, import_smithy_client21.parseRfc3339DateTimeWithOffset)(output[_E]));
      }
      return contents;
    };
    de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client21.expectString)(output[_m]);
      }
      return contents;
    };
    deserializeMetadata2 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    throwDefaultError2 = (0, import_smithy_client21.withBaseException)(STSServiceException);
    buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http10.HttpRequest(contents);
    };
    SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    _ = "2011-06-15";
    _A = "Action";
    _AKI = "AccessKeyId";
    _AR = "AssumeRole";
    _ARI = "AssumedRoleId";
    _ARU = "AssumedRoleUser";
    _ARWWI = "AssumeRoleWithWebIdentity";
    _Ar = "Arn";
    _Au = "Audience";
    _C = "Credentials";
    _CA = "ContextAssertion";
    _DS = "DurationSeconds";
    _E = "Expiration";
    _EI = "ExternalId";
    _K = "Key";
    _P = "Policy";
    _PA = "PolicyArns";
    _PAr = "ProviderArn";
    _PC = "ProvidedContexts";
    _PI = "ProviderId";
    _PPS = "PackedPolicySize";
    _Pr = "Provider";
    _RA = "RoleArn";
    _RSN = "RoleSessionName";
    _SAK = "SecretAccessKey";
    _SFWIT = "SubjectFromWebIdentityToken";
    _SI = "SourceIdentity";
    _SN = "SerialNumber";
    _ST = "SessionToken";
    _T = "Tags";
    _TC = "TokenCode";
    _TTK = "TransitiveTagKeys";
    _V = "Version";
    _Va = "Value";
    _WIT = "WebIdentityToken";
    _a = "arn";
    _m = "message";
    buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client21.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client21.extendedEncodeURIComponent)(value)).join("&");
    loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/AssumeRoleCommand.js
var import_middleware_endpoint4, import_middleware_serde3, import_smithy_client22, AssumeRoleCommand;
var init_AssumeRoleCommand = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/AssumeRoleCommand.js"() {
    import_middleware_endpoint4 = __toESM(require_dist_cjs37());
    import_middleware_serde3 = __toESM(require_dist_cjs9());
    import_smithy_client22 = __toESM(require_dist_cjs25());
    init_EndpointParameters2();
    init_models_02();
    init_Aws_query();
    AssumeRoleCommand = class extends import_smithy_client22.Command.classBuilder().ep(commonParams2).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde3.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint4.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/AssumeRoleWithWebIdentityCommand.js
var import_middleware_endpoint5, import_middleware_serde4, import_smithy_client23, AssumeRoleWithWebIdentityCommand;
var init_AssumeRoleWithWebIdentityCommand = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/AssumeRoleWithWebIdentityCommand.js"() {
    import_middleware_endpoint5 = __toESM(require_dist_cjs37());
    import_middleware_serde4 = __toESM(require_dist_cjs9());
    import_smithy_client23 = __toESM(require_dist_cjs25());
    init_EndpointParameters2();
    init_models_02();
    init_Aws_query();
    AssumeRoleWithWebIdentityCommand = class extends import_smithy_client23.Command.classBuilder().ep(commonParams2).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde4.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint5.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/STS.js
var import_smithy_client24, commands2, STS;
var init_STS = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/STS.js"() {
    import_smithy_client24 = __toESM(require_dist_cjs25());
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
    init_STSClient();
    commands2 = {
      AssumeRoleCommand,
      AssumeRoleWithWebIdentityCommand
    };
    STS = class extends STSClient {
    };
    (0, import_smithy_client24.createAggregatedClient)(commands2, STS);
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/index.js
var init_commands2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/commands/index.js"() {
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/index.js
var init_models2 = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/models/index.js"() {
    init_models_02();
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultStsRoleAssumers.js
var ASSUME_ROLE_DEFAULT_REGION, getAccountIdFromAssumedRoleUser, resolveRegion, getDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity, isH2;
var init_defaultStsRoleAssumers = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultStsRoleAssumers.js"() {
    init_client();
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
    ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    getAccountIdFromAssumedRoleUser = (assumedRoleUser) => {
      if (typeof assumedRoleUser?.Arn === "string") {
        const arnComponents = assumedRoleUser.Arn.split(":");
        if (arnComponents.length > 4 && arnComponents[4] !== "") {
          return arnComponents[4];
        }
      }
      return void 0;
    };
    resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      credentialProviderLogger?.debug?.("@aws-sdk/client-sts::resolveRegion", "accepting first of:", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    };
    getDefaultRoleAssumer = (stsOptions, STSClient2) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger } = stsOptions;
          const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new STSClient2({
            profile: stsOptions?.parentClientConfig?.profile,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger
          });
        }
        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);
        const credentials = {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          ...Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope },
          ...accountId && { accountId }
        };
        setCredentialFeature(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
        return credentials;
      };
    };
    getDefaultRoleAssumerWithWebIdentity = (stsOptions, STSClient2) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger } = stsOptions;
          const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new STSClient2({
            profile: stsOptions?.parentClientConfig?.profile,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger
          });
        }
        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);
        const credentials = {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          ...Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope },
          ...accountId && { accountId }
        };
        if (accountId) {
          setCredentialFeature(credentials, "RESOLVED_ACCOUNT_ID", "T");
        }
        setCredentialFeature(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
        return credentials;
      };
    };
    isH2 = (requestHandler) => {
      return requestHandler?.metadata?.handlerProtocol === "h2";
    };
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultRoleAssumers.js
var getCustomizableStsClientCtor, getDefaultRoleAssumer2, getDefaultRoleAssumerWithWebIdentity2, decorateDefaultCredentialProvider;
var init_defaultRoleAssumers = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultRoleAssumers.js"() {
    init_defaultStsRoleAssumers();
    init_STSClient();
    getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    getDefaultRoleAssumer2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    getDefaultRoleAssumerWithWebIdentity2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    });
  }
});

// node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/index.js
var sts_exports = {};
__export(sts_exports, {
  AssumeRoleCommand: () => AssumeRoleCommand,
  AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
  AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
  AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
  AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
  CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
  ExpiredTokenException: () => ExpiredTokenException2,
  IDPCommunicationErrorException: () => IDPCommunicationErrorException,
  IDPRejectedClaimException: () => IDPRejectedClaimException,
  InvalidIdentityTokenException: () => InvalidIdentityTokenException,
  MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
  PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
  RegionDisabledException: () => RegionDisabledException,
  STS: () => STS,
  STSClient: () => STSClient,
  STSServiceException: () => STSServiceException,
  __Client: () => import_smithy_client18.Client,
  decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
  getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
  getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
});
var init_sts = __esm({
  "node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/index.js"() {
    init_STSClient();
    init_STS();
    init_commands2();
    init_models2();
    init_defaultRoleAssumers();
    init_STSServiceException();
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      fromProcess: () => fromProcess
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_shared_ini_file_loader = require_dist_cjs33();
    var import_property_provider2 = require_dist_cjs22();
    var import_child_process = require("child_process");
    var import_util = require("util");
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data, profiles) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      let accountId = data.AccountId;
      if (!accountId && profiles?.[profileName]?.aws_account_id) {
        accountId = profiles[profileName].aws_account_id;
      }
      const credentials = {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope },
        ...accountId && { accountId }
      };
      (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_PROCESS", "w");
      return credentials;
    }, "getValidatedProcessCredentials");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util.promisify)(import_child_process.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data, profiles);
          } catch (error) {
            throw new import_property_provider2.CredentialsProviderError(error.message, { logger });
          }
        } else {
          throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });
        }
      } else {
        throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger
        });
      }
    }, "resolveProcessCredentials");
    var fromProcess = /* @__PURE__ */ __name((init = {}) => async ({ callerClientConfig } = {}) => {
      init.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProcessCredentials(
        (0, import_shared_ini_file_loader.getProfileName)({
          profile: init.profile ?? callerClientConfig?.profile
        }),
        profiles,
        init.logger
      );
    }, "fromProcess");
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m3, k3);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k3];
        } };
      }
      Object.defineProperty(o3, k22, desc);
    } : function(o3, m3, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o3[k22] = m3[k3];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v6) {
      Object.defineProperty(o3, "default", { enumerable: true, value: v6 });
    } : function(o3, v6) {
      o3["default"] = v6;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding2(result, mod, k3);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromWebToken = void 0;
    var fromWebToken2 = (init) => async (awsIdentityProperties) => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity3 } = await Promise.resolve().then(() => __importStar2((init_sts(), __toCommonJS(sts_exports))));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity3({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: {
            ...awsIdentityProperties?.callerClientConfig,
            ...init.parentClientConfig
          }
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken2;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromTokenFile = void 0;
    var client_1 = (init_client(), __toCommonJS(client_exports));
    var property_provider_1 = require_dist_cjs22();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile2 = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      const credentials = await (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
      if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
        (0, client_1.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN", "h");
      }
      return credentials;
    };
    exports2.fromTokenFile = fromTokenFile2;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    module2.exports = __toCommonJS2(index_exports);
    __reExport(index_exports, require_fromTokenFile(), module2.exports);
    __reExport(index_exports, require_fromWebToken(), module2.exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      fromIni: () => fromIni
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_shared_ini_file_loader = require_dist_cjs33();
    var import_client3 = (init_client(), __toCommonJS(client_exports));
    var import_property_provider2 = require_dist_cjs22();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger) => {
      const sourceProvidersMap = {
        EcsContainer: /* @__PURE__ */ __name(async (options) => {
          const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));
          const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs39()));
          logger?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return async () => (0, import_property_provider2.chain)(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);
        }, "EcsContainer"),
        Ec2InstanceMetadata: /* @__PURE__ */ __name(async (options) => {
          logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs39()));
          return async () => fromInstanceMetadata(options)().then(setNamedProvider);
        }, "Ec2InstanceMetadata"),
        Environment: /* @__PURE__ */ __name(async (options) => {
          logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs38()));
          return async () => fromEnv(options)().then(setNamedProvider);
        }, "Environment")
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new import_property_provider2.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,
          { logger }
        );
      }
    }, "resolveCredentialSource");
    var setNamedProvider = /* @__PURE__ */ __name((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_NAMED_PROVIDER", "p"), "setNamedProvider");
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = "default", logger } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger }));
    }, "isAssumeRoleProfile");
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    }, "isAssumeRoleWithSourceProfile");
    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger }) => {
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    }, "isCredentialSourceProfile");
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const profileData = profiles[profileName];
      const { source_profile, region } = profileData;
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer: getDefaultRoleAssumer3 } = await Promise.resolve().then(() => __toESM2((init_sts(), __toCommonJS(sts_exports))));
        options.roleAssumer = getDefaultRoleAssumer3(
          {
            ...options.clientConfig,
            credentialProviderLogger: options.logger,
            parentClientConfig: {
              ...options?.parentClientConfig,
              region: region ?? options?.parentClientConfig?.region
            }
          },
          options.clientPlugins
        );
      }
      if (source_profile && source_profile in visitedProfiles) {
        throw new import_property_provider2.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "),
          { logger: options.logger }
        );
      }
      options.logger?.debug(
        `@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`
      );
      const sourceCredsProvider = source_profile ? resolveProfileData(
        source_profile,
        profiles,
        options,
        {
          ...visitedProfiles,
          [source_profile]: true
        },
        isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {})
      ) : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();
      if (isCredentialSourceWithoutRoleArn(profileData)) {
        return sourceCredsProvider.then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
      } else {
        const params = {
          RoleArn: profileData.role_arn,
          RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,
          ExternalId: profileData.external_id,
          DurationSeconds: parseInt(profileData.duration_seconds || "3600", 10)
        };
        const { mfa_serial } = profileData;
        if (mfa_serial) {
          if (!options.mfaCodeProvider) {
            throw new import_property_provider2.CredentialsProviderError(
              `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
              { logger: options.logger, tryNextLink: false }
            );
          }
          params.SerialNumber = mfa_serial;
          params.TokenCode = await options.mfaCodeProvider(mfa_serial);
        }
        const sourceCreds = await sourceCredsProvider;
        return options.roleAssumer(sourceCreds, params).then(
          (creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o")
        );
      }
    }, "resolveAssumeRoleCredentials");
    var isCredentialSourceWithoutRoleArn = /* @__PURE__ */ __name((section) => {
      return !section.role_arn && !!section.credential_source;
    }, "isCredentialSourceWithoutRoleArn");
    var isProcessProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (options, profile) => Promise.resolve().then(() => __toESM2(require_dist_cjs49())).then(
      ({ fromProcess }) => fromProcess({
        ...options,
        profile
      })().then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_PROCESS", "v"))
    ), "resolveProcessCredentials");
    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, profileData, options = {}) => {
      const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs48()));
      return fromSSO({
        profile,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig,
        clientConfig: options.clientConfig
      })().then((creds) => {
        if (profileData.sso_session) {
          return (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO", "r");
        } else {
          return (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO_LEGACY", "t");
        }
      });
    }, "resolveSsoCredentials");
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 && ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1, "isStaticCredsProfile");
    var resolveStaticCredentials = /* @__PURE__ */ __name(async (profile, options) => {
      options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      const credentials = {
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        ...profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope },
        ...profile.aws_account_id && { accountId: profile.aws_account_id }
      };
      return (0, import_client3.setCredentialFeature)(credentials, "CREDENTIALS_PROFILE", "n");
    }, "resolveStaticCredentials");
    var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => Promise.resolve().then(() => __toESM2(require_dist_cjs50())).then(
      ({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig
      })().then((creds) => (0, import_client3.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN", "q"))
    ), "resolveWebIdentityCredentials");
    var resolveProfileData = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
      }
      if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, data, options);
      }
      throw new import_property_provider2.CredentialsProviderError(
        `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,
        { logger: options.logger }
      );
    }, "resolveProfileData");
    var fromIni = /* @__PURE__ */ __name((_init = {}) => async ({ callerClientConfig } = {}) => {
      const init = {
        ..._init,
        parentClientConfig: {
          ...callerClientConfig,
          ..._init.parentClientConfig
        }
      };
      init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProfileData(
        (0, import_shared_ini_file_loader.getProfileName)({
          profile: _init.profile ?? callerClientConfig?.profile
        }),
        profiles,
        init
      );
    }, "fromIni");
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
      defaultProvider: () => defaultProvider
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_credential_provider_env = require_dist_cjs38();
    var import_shared_ini_file_loader = require_dist_cjs33();
    var import_property_provider2 = require_dist_cjs22();
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = /* @__PURE__ */ __name(async (init) => {
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs39()));
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs40()));
        return (0, import_property_provider2.chain)(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED] && process.env[ENV_IMDS_DISABLED] !== "false") {
        return async () => {
          throw new import_property_provider2.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata(init);
    }, "remoteProvider");
    var multipleCredentialSourceWarningEmitted = false;
    var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider2.memoize)(
      (0, import_property_provider2.chain)(
        async () => {
          const profile = init.profile ?? process.env[import_shared_ini_file_loader.ENV_PROFILE];
          if (profile) {
            const envStaticCredentialsAreSet = process.env[import_credential_provider_env.ENV_KEY] && process.env[import_credential_provider_env.ENV_SECRET];
            if (envStaticCredentialsAreSet) {
              if (!multipleCredentialSourceWarningEmitted) {
                const warnFn = init.logger?.warn && init.logger?.constructor?.name !== "NoOpLogger" ? init.logger.warn : console.warn;
                warnFn(
                  `@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`
                );
                multipleCredentialSourceWarningEmitted = true;
              }
            }
            throw new import_property_provider2.CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
              logger: init.logger,
              tryNextLink: true
            });
          }
          init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
          return (0, import_credential_provider_env.fromEnv)(init)();
        },
        async () => {
          init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            throw new import_property_provider2.CredentialsProviderError(
              "Skipping SSO provider in default chain (inputs do not include SSO fields).",
              { logger: init.logger }
            );
          }
          const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs48()));
          return fromSSO(init)();
        },
        async () => {
          init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
          const { fromIni } = await Promise.resolve().then(() => __toESM2(require_dist_cjs51()));
          return fromIni(init)();
        },
        async () => {
          init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
          const { fromProcess } = await Promise.resolve().then(() => __toESM2(require_dist_cjs49()));
          return fromProcess(init)();
        },
        async () => {
          init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
          const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM2(require_dist_cjs50()));
          return fromTokenFile2(init)();
        },
        async () => {
          init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
          return (await remoteProvider(init))();
        },
        async () => {
          throw new import_property_provider2.CredentialsProviderError("Could not load credentials from any providers", {
            tryNextLink: false,
            logger: init.logger
          });
        }
      ),
      credentialsTreatedAsExpired,
      credentialsWillNeedRefresh
    ), "defaultProvider");
    var credentialsWillNeedRefresh = /* @__PURE__ */ __name((credentials) => credentials?.expiration !== void 0, "credentialsWillNeedRefresh");
    var credentialsTreatedAsExpired = /* @__PURE__ */ __name((credentials) => credentials?.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, "credentialsTreatedAsExpired");
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var S = "required";
    var T = "type";
    var U = "fn";
    var V = "argv";
    var W = "ref";
    var X = "properties";
    var Y = "headers";
    var a3 = false;
    var b3 = "isSet";
    var c3 = "error";
    var d3 = "endpoint";
    var e3 = "tree";
    var f3 = "PartitionResult";
    var g3 = "stringEquals";
    var h3 = "dynamodb";
    var i3 = "getAttr";
    var j3 = "aws.parseArn";
    var k3 = "ParsedArn";
    var l3 = "isValidHostLabel";
    var m3 = "FirstArn";
    var n3 = { [S]: false, [T]: "String" };
    var o3 = { [S]: true, "default": false, [T]: "Boolean" };
    var p3 = { [U]: "booleanEquals", [V]: [{ [W]: "UseFIPS" }, true] };
    var q3 = { [U]: "booleanEquals", [V]: [{ [W]: "UseDualStack" }, true] };
    var r3 = {};
    var s3 = { [W]: "Region" };
    var t3 = { [U]: "booleanEquals", [V]: [{ [U]: i3, [V]: [{ [W]: f3 }, "supportsFIPS"] }, true] };
    var u3 = { [U]: "booleanEquals", [V]: [{ [U]: i3, [V]: [{ [W]: f3 }, "supportsDualStack"] }, true] };
    var v6 = { "conditions": [{ [U]: b3, [V]: [{ [W]: "AccountIdEndpointMode" }] }, { [U]: g3, [V]: [{ [W]: "AccountIdEndpointMode" }, "required"] }], "rules": [{ [c3]: "Invalid Configuration: AccountIdEndpointMode is required and FIPS is enabled, but FIPS account endpoints are not supported", [T]: c3 }], [T]: e3 };
    var w3 = { [U]: b3, [V]: [{ [W]: "AccountIdEndpointMode" }] };
    var x3 = { [c3]: "Invalid Configuration: AccountIdEndpointMode is required and FIPS is enabled, but FIPS account endpoints are not supported", [T]: c3 };
    var y2 = { [U]: i3, [V]: [{ [W]: f3 }, "name"] };
    var z2 = { [d3]: { "url": "https://dynamodb.{Region}.{PartitionResult#dnsSuffix}", [X]: {}, [Y]: {} }, [T]: d3 };
    var A2 = { [U]: "not", [V]: [p3] };
    var B2 = { [c3]: "Invalid Configuration: AccountIdEndpointMode is required and DualStack is enabled, but DualStack account endpoints are not supported", [T]: c3 };
    var C2 = { [U]: "not", [V]: [{ [U]: g3, [V]: [{ [W]: "AccountIdEndpointMode" }, "disabled"] }] };
    var D2 = { [U]: g3, [V]: [y2, "aws"] };
    var E2 = { [U]: "not", [V]: [q3] };
    var F2 = { [U]: g3, [V]: [{ [U]: i3, [V]: [{ [W]: k3 }, "service"] }, h3] };
    var G2 = { [U]: l3, [V]: [{ [U]: i3, [V]: [{ [W]: k3 }, "region"] }, false] };
    var H2 = { [U]: g3, [V]: [{ [U]: i3, [V]: [{ [W]: k3 }, "region"] }, "{Region}"] };
    var I2 = { [U]: l3, [V]: [{ [U]: i3, [V]: [{ [W]: k3 }, "accountId"] }, false] };
    var J2 = { "url": "https://{ParsedArn#accountId}.ddb.{Region}.{PartitionResult#dnsSuffix}", [X]: {}, [Y]: {} };
    var K = { [W]: "ResourceArnList" };
    var L = { [W]: "AccountId" };
    var M = [p3];
    var N = [q3];
    var O = [s3];
    var P = [w3, { [U]: g3, [V]: [{ [W]: "AccountIdEndpointMode" }, "required"] }];
    var Q = [A2];
    var R = [{ [W]: "ResourceArn" }];
    var _data3 = { version: "1.0", parameters: { Region: n3, UseDualStack: o3, UseFIPS: o3, Endpoint: n3, AccountId: n3, AccountIdEndpointMode: n3, ResourceArn: n3, ResourceArnList: { [S]: a3, [T]: "stringArray" } }, rules: [{ conditions: [{ [U]: b3, [V]: [{ [W]: "Endpoint" }] }], rules: [{ conditions: M, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [T]: c3 }, { conditions: N, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [T]: c3 }, { endpoint: { url: "{Endpoint}", [X]: r3, [Y]: r3 }, [T]: d3 }], [T]: e3 }, { conditions: [{ [U]: b3, [V]: O }], rules: [{ conditions: [{ [U]: "aws.partition", [V]: O, assign: f3 }], rules: [{ conditions: [{ [U]: g3, [V]: [s3, "local"] }], rules: [{ conditions: M, error: "Invalid Configuration: FIPS and local endpoint are not supported", [T]: c3 }, { conditions: N, error: "Invalid Configuration: Dualstack and local endpoint are not supported", [T]: c3 }, { endpoint: { url: "http://localhost:8000", [X]: { authSchemes: [{ signingRegion: "us-east-1", name: "sigv4", signingName: h3 }] }, [Y]: r3 }, [T]: d3 }], [T]: e3 }, { conditions: [p3, q3], rules: [{ conditions: [t3, u3], rules: [v6, { endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [X]: r3, [Y]: r3 }, [T]: d3 }], [T]: e3 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [T]: c3 }], [T]: e3 }, { conditions: M, rules: [{ conditions: [t3], rules: [{ conditions: [{ [U]: g3, [V]: [y2, "aws-us-gov"] }], rules: [v6, z2], [T]: e3 }, v6, { endpoint: { url: "https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}", [X]: r3, [Y]: r3 }, [T]: d3 }], [T]: e3 }, { error: "FIPS is enabled but this partition does not support FIPS", [T]: c3 }], [T]: e3 }, { conditions: N, rules: [{ conditions: [u3], rules: [{ conditions: P, rules: [{ conditions: Q, rules: [B2], [T]: e3 }, x3], [T]: e3 }, { endpoint: { url: "https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}", [X]: r3, [Y]: r3 }, [T]: d3 }], [T]: e3 }, { error: "DualStack is enabled but this partition does not support DualStack", [T]: c3 }], [T]: e3 }, { conditions: [w3, C2, D2, A2, E2, { [U]: b3, [V]: R }, { [U]: j3, [V]: R, assign: k3 }, F2, G2, H2, I2], endpoint: J2, [T]: d3 }, { conditions: [w3, C2, D2, A2, E2, { [U]: b3, [V]: [K] }, { [U]: i3, [V]: [K, "[0]"], assign: m3 }, { [U]: j3, [V]: [{ [W]: m3 }], assign: k3 }, F2, G2, H2, I2], endpoint: J2, [T]: d3 }, { conditions: [w3, C2, D2, A2, E2, { [U]: b3, [V]: [L] }], rules: [{ conditions: [{ [U]: l3, [V]: [L, a3] }], rules: [{ endpoint: { url: "https://{AccountId}.ddb.{Region}.{PartitionResult#dnsSuffix}", [X]: r3, [Y]: r3 }, [T]: d3 }], [T]: e3 }, { error: "Credentials-sourced account ID parameter is invalid", [T]: c3 }], [T]: e3 }, { conditions: P, rules: [{ conditions: Q, rules: [{ conditions: [E2], rules: [{ conditions: [D2], rules: [{ error: "AccountIdEndpointMode is required but no AccountID was provided or able to be loaded", [T]: c3 }], [T]: e3 }, { error: "Invalid Configuration: AccountIdEndpointMode is required but account endpoints are not supported in this partition", [T]: c3 }], [T]: e3 }, B2], [T]: e3 }, x3], [T]: e3 }, z2], [T]: e3 }], [T]: e3 }, { error: "Invalid Configuration: Missing Region", [T]: c3 }] };
    exports2.ruleSet = _data3;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs21();
    var util_endpoints_2 = require_dist_cjs20();
    var ruleset_1 = require_ruleset2();
    var cache3 = new util_endpoints_2.EndpointCache({
      size: 50,
      params: [
        "AccountId",
        "AccountIdEndpointMode",
        "Endpoint",
        "Region",
        "ResourceArn",
        "ResourceArnList",
        "UseDualStack",
        "UseFIPS"
      ]
    });
    var defaultEndpointResolver3 = (endpointParams, context = {}) => {
      return cache3.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver3;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs25();
    var url_parser_1 = require_dist_cjs36();
    var util_base64_1 = require_dist_cjs13();
    var util_utf8_1 = require_dist_cjs12();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig5 = (config) => {
      return {
        apiVersion: "2012-08-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultDynamoDBHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "DynamoDB",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig5;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var account_id_endpoint_1 = (init_account_id_endpoint(), __toCommonJS(account_id_endpoint_exports));
    var credential_provider_node_1 = require_dist_cjs52();
    var middleware_endpoint_discovery_1 = require_dist_cjs5();
    var util_user_agent_node_1 = require_dist_cjs41();
    var config_resolver_1 = require_dist_cjs28();
    var hash_node_1 = require_dist_cjs42();
    var middleware_retry_1 = require_dist_cjs32();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs16();
    var util_body_length_node_1 = require_dist_cjs43();
    var util_retry_1 = require_dist_cjs31();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs25();
    var util_defaults_mode_node_1 = require_dist_cjs44();
    var smithy_client_2 = require_dist_cjs25();
    var getRuntimeConfig5 = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const profileConfig = { profile: config?.profile };
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        accountIdEndpointMode: config?.accountIdEndpointMode ?? (0, node_config_provider_1.loadConfig)(account_id_endpoint_1.NODE_ACCOUNT_ID_ENDPOINT_MODE_CONFIG_OPTIONS, profileConfig),
        authSchemePreference: config?.authSchemePreference ?? (0, node_config_provider_1.loadConfig)(core_1.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, profileConfig),
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        endpointDiscoveryEnabledProvider: config?.endpointDiscoveryEnabledProvider ?? (0, node_config_provider_1.loadConfig)(middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS, profileConfig),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, { ...config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS, ...profileConfig }),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }, config),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, profileConfig),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, profileConfig)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig5;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports2, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      WaiterState: () => WaiterState,
      checkExceptions: () => checkExceptions,
      createWaiter: () => createWaiter,
      waiterServiceDefaults: () => waiterServiceDefaults
    });
    module2.exports = __toCommonJS2(src_exports);
    var sleep = /* @__PURE__ */ __name((seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    }, "sleep");
    var waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState = /* @__PURE__ */ ((WaiterState2) => {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
      return WaiterState2;
    })(WaiterState || {});
    var checkExceptions = /* @__PURE__ */ __name((result) => {
      if (result.state === "ABORTED") {
        const abortError = new Error(
          `${JSON.stringify({
            ...result,
            reason: "Request was aborted"
          })}`
        );
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === "TIMEOUT") {
        const timeoutError = new Error(
          `${JSON.stringify({
            ...result,
            reason: "Waiter has timed out"
          })}`
        );
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== "SUCCESS") {
        throw new Error(`${JSON.stringify(result)}`);
      }
      return result;
    }, "checkExceptions");
    var exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    }, "exponentialBackoffWithJitter");
    var randomInRange = /* @__PURE__ */ __name((min, max) => min + Math.random() * (max - min), "randomInRange");
    var runPolling = /* @__PURE__ */ __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client: client2, abortSignal }, input, acceptorChecks) => {
      const observedResponses = {};
      const { state: state2, reason } = await acceptorChecks(client2, input);
      if (reason) {
        const message = createMessageFromResponse(reason);
        observedResponses[message] |= 0;
        observedResponses[message] += 1;
      }
      if (state2 !== "RETRY") {
        return { state: state2, reason, observedResponses };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (abortController?.signal?.aborted || abortSignal?.aborted) {
          const message = "AbortController signal aborted.";
          observedResponses[message] |= 0;
          observedResponses[message] += 1;
          return { state: "ABORTED", observedResponses };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: "TIMEOUT", observedResponses };
        }
        await sleep(delay);
        const { state: state22, reason: reason2 } = await acceptorChecks(client2, input);
        if (reason2) {
          const message = createMessageFromResponse(reason2);
          observedResponses[message] |= 0;
          observedResponses[message] += 1;
        }
        if (state22 !== "RETRY") {
          return { state: state22, reason: reason2, observedResponses };
        }
        currentAttempt += 1;
      }
    }, "runPolling");
    var createMessageFromResponse = /* @__PURE__ */ __name((reason) => {
      if (reason?.$responseBodyText) {
        return `Deserialization error for body: ${reason.$responseBodyText}`;
      }
      if (reason?.$metadata?.httpStatusCode) {
        if (reason.$response || reason.message) {
          return `${reason.$response.statusCode ?? reason.$metadata.httpStatusCode ?? "Unknown"}: ${reason.message}`;
        }
        return `${reason.$metadata.httpStatusCode}: OK`;
      }
      return String(reason?.message ?? JSON.stringify(reason) ?? "Unknown");
    }, "createMessageFromResponse");
    var validateWaiterOptions = /* @__PURE__ */ __name((options) => {
      if (options.maxWaitTime <= 0) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay <= 0) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay <= 0) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    }, "validateWaiterOptions");
    var abortTimeout = /* @__PURE__ */ __name(async (abortSignal) => {
      return new Promise((resolve) => {
        const onAbort = /* @__PURE__ */ __name(() => resolve({
          state: "ABORTED"
          /* ABORTED */
        }), "onAbort");
        if (typeof abortSignal.addEventListener === "function") {
          abortSignal.addEventListener("abort", onAbort);
        } else {
          abortSignal.onabort = onAbort;
        }
      });
    }, "abortTimeout");
    var createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks) => {
      const params = {
        ...waiterServiceDefaults,
        ...options
      };
      validateWaiterOptions(params);
      const exitConditions = [runPolling(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    }, "createWaiter");
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      ApproximateCreationDateTimePrecision: () => ApproximateCreationDateTimePrecision,
      AttributeAction: () => AttributeAction,
      AttributeValue: () => AttributeValue,
      BackupInUseException: () => BackupInUseException,
      BackupNotFoundException: () => BackupNotFoundException,
      BackupStatus: () => BackupStatus,
      BackupType: () => BackupType,
      BackupTypeFilter: () => BackupTypeFilter,
      BatchExecuteStatementCommand: () => BatchExecuteStatementCommand,
      BatchGetItemCommand: () => BatchGetItemCommand,
      BatchStatementErrorCodeEnum: () => BatchStatementErrorCodeEnum,
      BatchWriteItemCommand: () => BatchWriteItemCommand,
      BillingMode: () => BillingMode,
      ComparisonOperator: () => ComparisonOperator,
      ConditionalCheckFailedException: () => ConditionalCheckFailedException,
      ConditionalOperator: () => ConditionalOperator,
      ContinuousBackupsStatus: () => ContinuousBackupsStatus,
      ContinuousBackupsUnavailableException: () => ContinuousBackupsUnavailableException,
      ContributorInsightsAction: () => ContributorInsightsAction,
      ContributorInsightsStatus: () => ContributorInsightsStatus,
      CreateBackupCommand: () => CreateBackupCommand,
      CreateGlobalTableCommand: () => CreateGlobalTableCommand,
      CreateTableCommand: () => CreateTableCommand,
      DeleteBackupCommand: () => DeleteBackupCommand,
      DeleteItemCommand: () => DeleteItemCommand,
      DeleteResourcePolicyCommand: () => DeleteResourcePolicyCommand,
      DeleteTableCommand: () => DeleteTableCommand,
      DescribeBackupCommand: () => DescribeBackupCommand,
      DescribeContinuousBackupsCommand: () => DescribeContinuousBackupsCommand,
      DescribeContributorInsightsCommand: () => DescribeContributorInsightsCommand,
      DescribeEndpointsCommand: () => DescribeEndpointsCommand,
      DescribeExportCommand: () => DescribeExportCommand,
      DescribeGlobalTableCommand: () => DescribeGlobalTableCommand,
      DescribeGlobalTableSettingsCommand: () => DescribeGlobalTableSettingsCommand,
      DescribeImportCommand: () => DescribeImportCommand,
      DescribeKinesisStreamingDestinationCommand: () => DescribeKinesisStreamingDestinationCommand,
      DescribeLimitsCommand: () => DescribeLimitsCommand,
      DescribeTableCommand: () => DescribeTableCommand,
      DescribeTableReplicaAutoScalingCommand: () => DescribeTableReplicaAutoScalingCommand,
      DescribeTimeToLiveCommand: () => DescribeTimeToLiveCommand,
      DestinationStatus: () => DestinationStatus,
      DisableKinesisStreamingDestinationCommand: () => DisableKinesisStreamingDestinationCommand,
      DuplicateItemException: () => DuplicateItemException,
      DynamoDB: () => DynamoDB,
      DynamoDBClient: () => DynamoDBClient2,
      DynamoDBServiceException: () => DynamoDBServiceException,
      EnableKinesisStreamingDestinationCommand: () => EnableKinesisStreamingDestinationCommand,
      ExecuteStatementCommand: () => ExecuteStatementCommand,
      ExecuteTransactionCommand: () => ExecuteTransactionCommand,
      ExportConflictException: () => ExportConflictException,
      ExportFormat: () => ExportFormat,
      ExportNotFoundException: () => ExportNotFoundException,
      ExportStatus: () => ExportStatus,
      ExportTableToPointInTimeCommand: () => ExportTableToPointInTimeCommand,
      ExportType: () => ExportType,
      ExportViewType: () => ExportViewType,
      GetItemCommand: () => GetItemCommand,
      GetResourcePolicyCommand: () => GetResourcePolicyCommand,
      GlobalTableAlreadyExistsException: () => GlobalTableAlreadyExistsException,
      GlobalTableNotFoundException: () => GlobalTableNotFoundException,
      GlobalTableStatus: () => GlobalTableStatus,
      IdempotentParameterMismatchException: () => IdempotentParameterMismatchException,
      ImportConflictException: () => ImportConflictException,
      ImportNotFoundException: () => ImportNotFoundException,
      ImportStatus: () => ImportStatus,
      ImportTableCommand: () => ImportTableCommand,
      IndexNotFoundException: () => IndexNotFoundException,
      IndexStatus: () => IndexStatus,
      InputCompressionType: () => InputCompressionType,
      InputFormat: () => InputFormat,
      InternalServerError: () => InternalServerError,
      InvalidEndpointException: () => InvalidEndpointException,
      InvalidExportTimeException: () => InvalidExportTimeException,
      InvalidRestoreTimeException: () => InvalidRestoreTimeException,
      ItemCollectionSizeLimitExceededException: () => ItemCollectionSizeLimitExceededException,
      KeyType: () => KeyType,
      LimitExceededException: () => LimitExceededException,
      ListBackupsCommand: () => ListBackupsCommand,
      ListContributorInsightsCommand: () => ListContributorInsightsCommand,
      ListExportsCommand: () => ListExportsCommand,
      ListGlobalTablesCommand: () => ListGlobalTablesCommand,
      ListImportsCommand: () => ListImportsCommand,
      ListTablesCommand: () => ListTablesCommand,
      ListTagsOfResourceCommand: () => ListTagsOfResourceCommand,
      MultiRegionConsistency: () => MultiRegionConsistency,
      PointInTimeRecoveryStatus: () => PointInTimeRecoveryStatus,
      PointInTimeRecoveryUnavailableException: () => PointInTimeRecoveryUnavailableException,
      PolicyNotFoundException: () => PolicyNotFoundException,
      ProjectionType: () => ProjectionType,
      ProvisionedThroughputExceededException: () => ProvisionedThroughputExceededException,
      PutItemCommand: () => PutItemCommand,
      PutResourcePolicyCommand: () => PutResourcePolicyCommand,
      QueryCommand: () => QueryCommand2,
      ReplicaAlreadyExistsException: () => ReplicaAlreadyExistsException,
      ReplicaNotFoundException: () => ReplicaNotFoundException,
      ReplicaStatus: () => ReplicaStatus,
      ReplicatedWriteConflictException: () => ReplicatedWriteConflictException,
      RequestLimitExceeded: () => RequestLimitExceeded,
      ResourceInUseException: () => ResourceInUseException,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RestoreTableFromBackupCommand: () => RestoreTableFromBackupCommand,
      RestoreTableToPointInTimeCommand: () => RestoreTableToPointInTimeCommand,
      ReturnConsumedCapacity: () => ReturnConsumedCapacity,
      ReturnItemCollectionMetrics: () => ReturnItemCollectionMetrics,
      ReturnValue: () => ReturnValue,
      ReturnValuesOnConditionCheckFailure: () => ReturnValuesOnConditionCheckFailure,
      S3SseAlgorithm: () => S3SseAlgorithm,
      SSEStatus: () => SSEStatus,
      SSEType: () => SSEType,
      ScalarAttributeType: () => ScalarAttributeType,
      ScanCommand: () => ScanCommand,
      Select: () => Select,
      StreamViewType: () => StreamViewType,
      TableAlreadyExistsException: () => TableAlreadyExistsException,
      TableClass: () => TableClass,
      TableInUseException: () => TableInUseException,
      TableNotFoundException: () => TableNotFoundException,
      TableStatus: () => TableStatus,
      TagResourceCommand: () => TagResourceCommand,
      TimeToLiveStatus: () => TimeToLiveStatus,
      TransactGetItemsCommand: () => TransactGetItemsCommand,
      TransactWriteItemsCommand: () => TransactWriteItemsCommand,
      TransactionCanceledException: () => TransactionCanceledException,
      TransactionConflictException: () => TransactionConflictException,
      TransactionInProgressException: () => TransactionInProgressException,
      UntagResourceCommand: () => UntagResourceCommand,
      UpdateContinuousBackupsCommand: () => UpdateContinuousBackupsCommand,
      UpdateContributorInsightsCommand: () => UpdateContributorInsightsCommand,
      UpdateGlobalTableCommand: () => UpdateGlobalTableCommand,
      UpdateGlobalTableSettingsCommand: () => UpdateGlobalTableSettingsCommand,
      UpdateItemCommand: () => UpdateItemCommand,
      UpdateKinesisStreamingDestinationCommand: () => UpdateKinesisStreamingDestinationCommand,
      UpdateTableCommand: () => UpdateTableCommand,
      UpdateTableReplicaAutoScalingCommand: () => UpdateTableReplicaAutoScalingCommand,
      UpdateTimeToLiveCommand: () => UpdateTimeToLiveCommand,
      __Client: () => import_smithy_client25.Client,
      paginateListContributorInsights: () => paginateListContributorInsights,
      paginateListExports: () => paginateListExports,
      paginateListImports: () => paginateListImports,
      paginateListTables: () => paginateListTables,
      paginateQuery: () => paginateQuery,
      paginateScan: () => paginateScan,
      waitForTableExists: () => waitForTableExists,
      waitForTableNotExists: () => waitForTableNotExists,
      waitUntilTableExists: () => waitUntilTableExists,
      waitUntilTableNotExists: () => waitUntilTableNotExists
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_account_id_endpoint = (init_account_id_endpoint(), __toCommonJS(account_id_endpoint_exports));
    var import_middleware_endpoint_discovery = require_dist_cjs5();
    var import_middleware_host_header3 = require_dist_cjs6();
    var import_middleware_logger3 = require_dist_cjs7();
    var import_middleware_recursion_detection3 = require_dist_cjs8();
    var import_middleware_user_agent3 = require_dist_cjs26();
    var import_config_resolver5 = require_dist_cjs28();
    var import_core22 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length3 = require_dist_cjs29();
    var import_middleware_retry5 = require_dist_cjs32();
    var import_httpAuthSchemeProvider5 = require_httpAuthSchemeProvider();
    var import_middleware_endpoint6 = require_dist_cjs37();
    var import_middleware_serde5 = require_dist_cjs9();
    var resolveClientEndpointParameters3 = /* @__PURE__ */ __name((options) => {
      return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "dynamodb"
      });
    }, "resolveClientEndpointParameters");
    var commonParams3 = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      AccountId: { type: "builtInParams", name: "accountId" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
      AccountIdEndpointMode: { type: "builtInParams", name: "accountIdEndpointMode" }
    };
    var import_core17 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_protocol_http11 = require_dist_cjs3();
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var import_smithy_client25 = require_dist_cjs25();
    var DynamoDBServiceException = class _DynamoDBServiceException extends import_smithy_client25.ServiceException {
      static {
        __name(this, "DynamoDBServiceException");
      }
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _DynamoDBServiceException.prototype);
      }
    };
    var ApproximateCreationDateTimePrecision = {
      MICROSECOND: "MICROSECOND",
      MILLISECOND: "MILLISECOND"
    };
    var AttributeAction = {
      ADD: "ADD",
      DELETE: "DELETE",
      PUT: "PUT"
    };
    var ScalarAttributeType = {
      B: "B",
      N: "N",
      S: "S"
    };
    var BackupStatus = {
      AVAILABLE: "AVAILABLE",
      CREATING: "CREATING",
      DELETED: "DELETED"
    };
    var BackupType = {
      AWS_BACKUP: "AWS_BACKUP",
      SYSTEM: "SYSTEM",
      USER: "USER"
    };
    var BillingMode = {
      PAY_PER_REQUEST: "PAY_PER_REQUEST",
      PROVISIONED: "PROVISIONED"
    };
    var KeyType = {
      HASH: "HASH",
      RANGE: "RANGE"
    };
    var ProjectionType = {
      ALL: "ALL",
      INCLUDE: "INCLUDE",
      KEYS_ONLY: "KEYS_ONLY"
    };
    var SSEType = {
      AES256: "AES256",
      KMS: "KMS"
    };
    var SSEStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING",
      UPDATING: "UPDATING"
    };
    var StreamViewType = {
      KEYS_ONLY: "KEYS_ONLY",
      NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
      NEW_IMAGE: "NEW_IMAGE",
      OLD_IMAGE: "OLD_IMAGE"
    };
    var TimeToLiveStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING"
    };
    var BackupInUseException = class _BackupInUseException extends DynamoDBServiceException {
      static {
        __name(this, "BackupInUseException");
      }
      name = "BackupInUseException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BackupInUseException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _BackupInUseException.prototype);
      }
    };
    var BackupNotFoundException = class _BackupNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "BackupNotFoundException");
      }
      name = "BackupNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BackupNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _BackupNotFoundException.prototype);
      }
    };
    var BackupTypeFilter = {
      ALL: "ALL",
      AWS_BACKUP: "AWS_BACKUP",
      SYSTEM: "SYSTEM",
      USER: "USER"
    };
    var ReturnConsumedCapacity = {
      INDEXES: "INDEXES",
      NONE: "NONE",
      TOTAL: "TOTAL"
    };
    var ReturnValuesOnConditionCheckFailure = {
      ALL_OLD: "ALL_OLD",
      NONE: "NONE"
    };
    var BatchStatementErrorCodeEnum = {
      AccessDenied: "AccessDenied",
      ConditionalCheckFailed: "ConditionalCheckFailed",
      DuplicateItem: "DuplicateItem",
      InternalServerError: "InternalServerError",
      ItemCollectionSizeLimitExceeded: "ItemCollectionSizeLimitExceeded",
      ProvisionedThroughputExceeded: "ProvisionedThroughputExceeded",
      RequestLimitExceeded: "RequestLimitExceeded",
      ResourceNotFound: "ResourceNotFound",
      ThrottlingError: "ThrottlingError",
      TransactionConflict: "TransactionConflict",
      ValidationError: "ValidationError"
    };
    var InternalServerError = class _InternalServerError extends DynamoDBServiceException {
      static {
        __name(this, "InternalServerError");
      }
      name = "InternalServerError";
      $fault = "server";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        Object.setPrototypeOf(this, _InternalServerError.prototype);
      }
    };
    var RequestLimitExceeded = class _RequestLimitExceeded extends DynamoDBServiceException {
      static {
        __name(this, "RequestLimitExceeded");
      }
      name = "RequestLimitExceeded";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "RequestLimitExceeded",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _RequestLimitExceeded.prototype);
      }
    };
    var InvalidEndpointException = class _InvalidEndpointException extends DynamoDBServiceException {
      static {
        __name(this, "InvalidEndpointException");
      }
      name = "InvalidEndpointException";
      $fault = "client";
      Message;
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidEndpointException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    var ProvisionedThroughputExceededException = class _ProvisionedThroughputExceededException extends DynamoDBServiceException {
      static {
        __name(this, "ProvisionedThroughputExceededException");
      }
      name = "ProvisionedThroughputExceededException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ProvisionedThroughputExceededException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ProvisionedThroughputExceededException.prototype);
      }
    };
    var ResourceNotFoundException = class _ResourceNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "ResourceNotFoundException");
      }
      name = "ResourceNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    var ReturnItemCollectionMetrics = {
      NONE: "NONE",
      SIZE: "SIZE"
    };
    var ItemCollectionSizeLimitExceededException = class _ItemCollectionSizeLimitExceededException extends DynamoDBServiceException {
      static {
        __name(this, "ItemCollectionSizeLimitExceededException");
      }
      name = "ItemCollectionSizeLimitExceededException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ItemCollectionSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ItemCollectionSizeLimitExceededException.prototype);
      }
    };
    var ComparisonOperator = {
      BEGINS_WITH: "BEGINS_WITH",
      BETWEEN: "BETWEEN",
      CONTAINS: "CONTAINS",
      EQ: "EQ",
      GE: "GE",
      GT: "GT",
      IN: "IN",
      LE: "LE",
      LT: "LT",
      NE: "NE",
      NOT_CONTAINS: "NOT_CONTAINS",
      NOT_NULL: "NOT_NULL",
      NULL: "NULL"
    };
    var ConditionalOperator = {
      AND: "AND",
      OR: "OR"
    };
    var ContinuousBackupsStatus = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    var PointInTimeRecoveryStatus = {
      DISABLED: "DISABLED",
      ENABLED: "ENABLED"
    };
    var ContinuousBackupsUnavailableException = class _ContinuousBackupsUnavailableException extends DynamoDBServiceException {
      static {
        __name(this, "ContinuousBackupsUnavailableException");
      }
      name = "ContinuousBackupsUnavailableException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ContinuousBackupsUnavailableException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ContinuousBackupsUnavailableException.prototype);
      }
    };
    var ContributorInsightsAction = {
      DISABLE: "DISABLE",
      ENABLE: "ENABLE"
    };
    var ContributorInsightsStatus = {
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLED: "ENABLED",
      ENABLING: "ENABLING",
      FAILED: "FAILED"
    };
    var LimitExceededException = class _LimitExceededException extends DynamoDBServiceException {
      static {
        __name(this, "LimitExceededException");
      }
      name = "LimitExceededException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _LimitExceededException.prototype);
      }
    };
    var TableInUseException = class _TableInUseException extends DynamoDBServiceException {
      static {
        __name(this, "TableInUseException");
      }
      name = "TableInUseException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TableInUseException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TableInUseException.prototype);
      }
    };
    var TableNotFoundException = class _TableNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "TableNotFoundException");
      }
      name = "TableNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TableNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TableNotFoundException.prototype);
      }
    };
    var GlobalTableStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      DELETING: "DELETING",
      UPDATING: "UPDATING"
    };
    var IndexStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      DELETING: "DELETING",
      UPDATING: "UPDATING"
    };
    var ReplicaStatus = {
      ACTIVE: "ACTIVE",
      CREATING: "CREATING",
      CREATION_FAILED: "CREATION_FAILED",
      DELETING: "DELETING",
      INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
      REGION_DISABLED: "REGION_DISABLED",
      UPDATING: "UPDATING"
    };
    var TableClass = {
      STANDARD: "STANDARD",
      STANDARD_INFREQUENT_ACCESS: "STANDARD_INFREQUENT_ACCESS"
    };
    var TableStatus = {
      ACTIVE: "ACTIVE",
      ARCHIVED: "ARCHIVED",
      ARCHIVING: "ARCHIVING",
      CREATING: "CREATING",
      DELETING: "DELETING",
      INACCESSIBLE_ENCRYPTION_CREDENTIALS: "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
      UPDATING: "UPDATING"
    };
    var GlobalTableAlreadyExistsException = class _GlobalTableAlreadyExistsException extends DynamoDBServiceException {
      static {
        __name(this, "GlobalTableAlreadyExistsException");
      }
      name = "GlobalTableAlreadyExistsException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "GlobalTableAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _GlobalTableAlreadyExistsException.prototype);
      }
    };
    var MultiRegionConsistency = {
      EVENTUAL: "EVENTUAL",
      STRONG: "STRONG"
    };
    var ResourceInUseException = class _ResourceInUseException extends DynamoDBServiceException {
      static {
        __name(this, "ResourceInUseException");
      }
      name = "ResourceInUseException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ResourceInUseException.prototype);
      }
    };
    var ReturnValue = {
      ALL_NEW: "ALL_NEW",
      ALL_OLD: "ALL_OLD",
      NONE: "NONE",
      UPDATED_NEW: "UPDATED_NEW",
      UPDATED_OLD: "UPDATED_OLD"
    };
    var ReplicatedWriteConflictException = class _ReplicatedWriteConflictException extends DynamoDBServiceException {
      static {
        __name(this, "ReplicatedWriteConflictException");
      }
      name = "ReplicatedWriteConflictException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ReplicatedWriteConflictException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ReplicatedWriteConflictException.prototype);
      }
    };
    var TransactionConflictException = class _TransactionConflictException extends DynamoDBServiceException {
      static {
        __name(this, "TransactionConflictException");
      }
      name = "TransactionConflictException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TransactionConflictException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TransactionConflictException.prototype);
      }
    };
    var PolicyNotFoundException = class _PolicyNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "PolicyNotFoundException");
      }
      name = "PolicyNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PolicyNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _PolicyNotFoundException.prototype);
      }
    };
    var ExportFormat = {
      DYNAMODB_JSON: "DYNAMODB_JSON",
      ION: "ION"
    };
    var ExportStatus = {
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    var ExportType = {
      FULL_EXPORT: "FULL_EXPORT",
      INCREMENTAL_EXPORT: "INCREMENTAL_EXPORT"
    };
    var ExportViewType = {
      NEW_AND_OLD_IMAGES: "NEW_AND_OLD_IMAGES",
      NEW_IMAGE: "NEW_IMAGE"
    };
    var S3SseAlgorithm = {
      AES256: "AES256",
      KMS: "KMS"
    };
    var ExportNotFoundException = class _ExportNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "ExportNotFoundException");
      }
      name = "ExportNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExportNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ExportNotFoundException.prototype);
      }
    };
    var GlobalTableNotFoundException = class _GlobalTableNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "GlobalTableNotFoundException");
      }
      name = "GlobalTableNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "GlobalTableNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _GlobalTableNotFoundException.prototype);
      }
    };
    var ImportStatus = {
      CANCELLED: "CANCELLED",
      CANCELLING: "CANCELLING",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    var InputCompressionType = {
      GZIP: "GZIP",
      NONE: "NONE",
      ZSTD: "ZSTD"
    };
    var InputFormat = {
      CSV: "CSV",
      DYNAMODB_JSON: "DYNAMODB_JSON",
      ION: "ION"
    };
    var ImportNotFoundException = class _ImportNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "ImportNotFoundException");
      }
      name = "ImportNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ImportNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ImportNotFoundException.prototype);
      }
    };
    var DestinationStatus = {
      ACTIVE: "ACTIVE",
      DISABLED: "DISABLED",
      DISABLING: "DISABLING",
      ENABLE_FAILED: "ENABLE_FAILED",
      ENABLING: "ENABLING",
      UPDATING: "UPDATING"
    };
    var DuplicateItemException = class _DuplicateItemException extends DynamoDBServiceException {
      static {
        __name(this, "DuplicateItemException");
      }
      name = "DuplicateItemException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "DuplicateItemException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _DuplicateItemException.prototype);
      }
    };
    var IdempotentParameterMismatchException = class _IdempotentParameterMismatchException extends DynamoDBServiceException {
      static {
        __name(this, "IdempotentParameterMismatchException");
      }
      name = "IdempotentParameterMismatchException";
      $fault = "client";
      Message;
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatchException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
      }
    };
    var TransactionInProgressException = class _TransactionInProgressException extends DynamoDBServiceException {
      static {
        __name(this, "TransactionInProgressException");
      }
      name = "TransactionInProgressException";
      $fault = "client";
      Message;
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TransactionInProgressException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    var ExportConflictException = class _ExportConflictException extends DynamoDBServiceException {
      static {
        __name(this, "ExportConflictException");
      }
      name = "ExportConflictException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExportConflictException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ExportConflictException.prototype);
      }
    };
    var InvalidExportTimeException = class _InvalidExportTimeException extends DynamoDBServiceException {
      static {
        __name(this, "InvalidExportTimeException");
      }
      name = "InvalidExportTimeException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidExportTimeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidExportTimeException.prototype);
      }
    };
    var PointInTimeRecoveryUnavailableException = class _PointInTimeRecoveryUnavailableException extends DynamoDBServiceException {
      static {
        __name(this, "PointInTimeRecoveryUnavailableException");
      }
      name = "PointInTimeRecoveryUnavailableException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PointInTimeRecoveryUnavailableException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _PointInTimeRecoveryUnavailableException.prototype);
      }
    };
    var ImportConflictException = class _ImportConflictException extends DynamoDBServiceException {
      static {
        __name(this, "ImportConflictException");
      }
      name = "ImportConflictException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ImportConflictException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ImportConflictException.prototype);
      }
    };
    var Select = {
      ALL_ATTRIBUTES: "ALL_ATTRIBUTES",
      ALL_PROJECTED_ATTRIBUTES: "ALL_PROJECTED_ATTRIBUTES",
      COUNT: "COUNT",
      SPECIFIC_ATTRIBUTES: "SPECIFIC_ATTRIBUTES"
    };
    var TableAlreadyExistsException = class _TableAlreadyExistsException extends DynamoDBServiceException {
      static {
        __name(this, "TableAlreadyExistsException");
      }
      name = "TableAlreadyExistsException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TableAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TableAlreadyExistsException.prototype);
      }
    };
    var InvalidRestoreTimeException = class _InvalidRestoreTimeException extends DynamoDBServiceException {
      static {
        __name(this, "InvalidRestoreTimeException");
      }
      name = "InvalidRestoreTimeException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRestoreTimeException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _InvalidRestoreTimeException.prototype);
      }
    };
    var ReplicaAlreadyExistsException = class _ReplicaAlreadyExistsException extends DynamoDBServiceException {
      static {
        __name(this, "ReplicaAlreadyExistsException");
      }
      name = "ReplicaAlreadyExistsException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ReplicaAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ReplicaAlreadyExistsException.prototype);
      }
    };
    var ReplicaNotFoundException = class _ReplicaNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "ReplicaNotFoundException");
      }
      name = "ReplicaNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ReplicaNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ReplicaNotFoundException.prototype);
      }
    };
    var IndexNotFoundException = class _IndexNotFoundException extends DynamoDBServiceException {
      static {
        __name(this, "IndexNotFoundException");
      }
      name = "IndexNotFoundException";
      $fault = "client";
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IndexNotFoundException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _IndexNotFoundException.prototype);
      }
    };
    var AttributeValue;
    ((AttributeValue2) => {
      AttributeValue2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.S !== void 0) return visitor.S(value.S);
        if (value.N !== void 0) return visitor.N(value.N);
        if (value.B !== void 0) return visitor.B(value.B);
        if (value.SS !== void 0) return visitor.SS(value.SS);
        if (value.NS !== void 0) return visitor.NS(value.NS);
        if (value.BS !== void 0) return visitor.BS(value.BS);
        if (value.M !== void 0) return visitor.M(value.M);
        if (value.L !== void 0) return visitor.L(value.L);
        if (value.NULL !== void 0) return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0) return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(AttributeValue || (AttributeValue = {}));
    var ConditionalCheckFailedException = class _ConditionalCheckFailedException extends DynamoDBServiceException {
      static {
        __name(this, "ConditionalCheckFailedException");
      }
      name = "ConditionalCheckFailedException";
      $fault = "client";
      /**
       * <p>Item which caused the <code>ConditionalCheckFailedException</code>.</p>
       * @public
       */
      Item;
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ConditionalCheckFailedException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _ConditionalCheckFailedException.prototype);
        this.Item = opts.Item;
      }
    };
    var TransactionCanceledException = class _TransactionCanceledException extends DynamoDBServiceException {
      static {
        __name(this, "TransactionCanceledException");
      }
      name = "TransactionCanceledException";
      $fault = "client";
      Message;
      /**
       * <p>A list of cancellation reasons.</p>
       * @public
       */
      CancellationReasons;
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TransactionCanceledException",
          $fault: "client",
          ...opts
        });
        Object.setPrototypeOf(this, _TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    var se_BatchExecuteStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("BatchExecuteStatement");
      let body;
      body = JSON.stringify(se_BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_BatchExecuteStatementCommand");
    var se_BatchGetItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("BatchGetItem");
      let body;
      body = JSON.stringify(se_BatchGetItemInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_BatchGetItemCommand");
    var se_BatchWriteItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("BatchWriteItem");
      let body;
      body = JSON.stringify(se_BatchWriteItemInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_BatchWriteItemCommand");
    var se_CreateBackupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateBackup");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_CreateBackupCommand");
    var se_CreateGlobalTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateGlobalTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_CreateGlobalTableCommand");
    var se_CreateTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("CreateTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_CreateTableCommand");
    var se_DeleteBackupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteBackup");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DeleteBackupCommand");
    var se_DeleteItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteItem");
      let body;
      body = JSON.stringify(se_DeleteItemInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DeleteItemCommand");
    var se_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteResourcePolicy");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DeleteResourcePolicyCommand");
    var se_DeleteTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DeleteTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DeleteTableCommand");
    var se_DescribeBackupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeBackup");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeBackupCommand");
    var se_DescribeContinuousBackupsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeContinuousBackups");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeContinuousBackupsCommand");
    var se_DescribeContributorInsightsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeContributorInsights");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeContributorInsightsCommand");
    var se_DescribeEndpointsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeEndpoints");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeEndpointsCommand");
    var se_DescribeExportCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeExport");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeExportCommand");
    var se_DescribeGlobalTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeGlobalTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeGlobalTableCommand");
    var se_DescribeGlobalTableSettingsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeGlobalTableSettings");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeGlobalTableSettingsCommand");
    var se_DescribeImportCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeImport");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeImportCommand");
    var se_DescribeKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeKinesisStreamingDestinationCommand");
    var se_DescribeLimitsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeLimits");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeLimitsCommand");
    var se_DescribeTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeTableCommand");
    var se_DescribeTableReplicaAutoScalingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeTableReplicaAutoScaling");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeTableReplicaAutoScalingCommand");
    var se_DescribeTimeToLiveCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DescribeTimeToLive");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DescribeTimeToLiveCommand");
    var se_DisableKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("DisableKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_DisableKinesisStreamingDestinationCommand");
    var se_EnableKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("EnableKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_EnableKinesisStreamingDestinationCommand");
    var se_ExecuteStatementCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ExecuteStatement");
      let body;
      body = JSON.stringify(se_ExecuteStatementInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ExecuteStatementCommand");
    var se_ExecuteTransactionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ExecuteTransaction");
      let body;
      body = JSON.stringify(se_ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ExecuteTransactionCommand");
    var se_ExportTableToPointInTimeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ExportTableToPointInTime");
      let body;
      body = JSON.stringify(se_ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ExportTableToPointInTimeCommand");
    var se_GetItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetItem");
      let body;
      body = JSON.stringify(se_GetItemInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_GetItemCommand");
    var se_GetResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("GetResourcePolicy");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_GetResourcePolicyCommand");
    var se_ImportTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ImportTable");
      let body;
      body = JSON.stringify(se_ImportTableInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ImportTableCommand");
    var se_ListBackupsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListBackups");
      let body;
      body = JSON.stringify(se_ListBackupsInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListBackupsCommand");
    var se_ListContributorInsightsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListContributorInsights");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListContributorInsightsCommand");
    var se_ListExportsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListExports");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListExportsCommand");
    var se_ListGlobalTablesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListGlobalTables");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListGlobalTablesCommand");
    var se_ListImportsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListImports");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListImportsCommand");
    var se_ListTablesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListTables");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListTablesCommand");
    var se_ListTagsOfResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("ListTagsOfResource");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ListTagsOfResourceCommand");
    var se_PutItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("PutItem");
      let body;
      body = JSON.stringify(se_PutItemInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_PutItemCommand");
    var se_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("PutResourcePolicy");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_PutResourcePolicyCommand");
    var se_QueryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("Query");
      let body;
      body = JSON.stringify(se_QueryInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_QueryCommand");
    var se_RestoreTableFromBackupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RestoreTableFromBackup");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_RestoreTableFromBackupCommand");
    var se_RestoreTableToPointInTimeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("RestoreTableToPointInTime");
      let body;
      body = JSON.stringify(se_RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_RestoreTableToPointInTimeCommand");
    var se_ScanCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("Scan");
      let body;
      body = JSON.stringify(se_ScanInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_ScanCommand");
    var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("TagResource");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_TagResourceCommand");
    var se_TransactGetItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("TransactGetItems");
      let body;
      body = JSON.stringify(se_TransactGetItemsInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_TransactGetItemsCommand");
    var se_TransactWriteItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("TransactWriteItems");
      let body;
      body = JSON.stringify(se_TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_TransactWriteItemsCommand");
    var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UntagResource");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UntagResourceCommand");
    var se_UpdateContinuousBackupsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateContinuousBackups");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateContinuousBackupsCommand");
    var se_UpdateContributorInsightsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateContributorInsights");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateContributorInsightsCommand");
    var se_UpdateGlobalTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateGlobalTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateGlobalTableCommand");
    var se_UpdateGlobalTableSettingsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateGlobalTableSettings");
      let body;
      body = JSON.stringify(se_UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateGlobalTableSettingsCommand");
    var se_UpdateItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateItem");
      let body;
      body = JSON.stringify(se_UpdateItemInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateItemCommand");
    var se_UpdateKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateKinesisStreamingDestination");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateKinesisStreamingDestinationCommand");
    var se_UpdateTableCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateTable");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateTableCommand");
    var se_UpdateTableReplicaAutoScalingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateTableReplicaAutoScaling");
      let body;
      body = JSON.stringify(se_UpdateTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateTableReplicaAutoScalingCommand");
    var se_UpdateTimeToLiveCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = sharedHeaders("UpdateTimeToLive");
      let body;
      body = JSON.stringify((0, import_smithy_client25._json)(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    }, "se_UpdateTimeToLiveCommand");
    var de_BatchExecuteStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_BatchExecuteStatementCommand");
    var de_BatchGetItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_BatchGetItemCommand");
    var de_BatchWriteItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_BatchWriteItemCommand");
    var de_CreateBackupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_CreateBackupCommand");
    var de_CreateGlobalTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_CreateGlobalTableCommand");
    var de_CreateTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_CreateTableCommand");
    var de_DeleteBackupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DeleteBackupCommand");
    var de_DeleteItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DeleteItemCommand");
    var de_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DeleteResourcePolicyCommand");
    var de_DeleteTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DeleteTableCommand");
    var de_DescribeBackupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeBackupCommand");
    var de_DescribeContinuousBackupsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeContinuousBackupsCommand");
    var de_DescribeContributorInsightsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeContributorInsightsCommand");
    var de_DescribeEndpointsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeEndpointsCommand");
    var de_DescribeExportCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeExportCommand");
    var de_DescribeGlobalTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeGlobalTableCommand");
    var de_DescribeGlobalTableSettingsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeGlobalTableSettingsCommand");
    var de_DescribeImportCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeImportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeImportCommand");
    var de_DescribeKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeKinesisStreamingDestinationCommand");
    var de_DescribeLimitsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeLimitsCommand");
    var de_DescribeTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeTableCommand");
    var de_DescribeTableReplicaAutoScalingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeTableReplicaAutoScalingCommand");
    var de_DescribeTimeToLiveCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DescribeTimeToLiveCommand");
    var de_DisableKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_DisableKinesisStreamingDestinationCommand");
    var de_EnableKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_EnableKinesisStreamingDestinationCommand");
    var de_ExecuteStatementCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ExecuteStatementCommand");
    var de_ExecuteTransactionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ExecuteTransactionCommand");
    var de_ExportTableToPointInTimeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ExportTableToPointInTimeCommand");
    var de_GetItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_GetItemCommand");
    var de_GetResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_GetResourcePolicyCommand");
    var de_ImportTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ImportTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ImportTableCommand");
    var de_ListBackupsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListBackupsCommand");
    var de_ListContributorInsightsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListContributorInsightsCommand");
    var de_ListExportsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListExportsCommand");
    var de_ListGlobalTablesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListGlobalTablesCommand");
    var de_ListImportsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ListImportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListImportsCommand");
    var de_ListTablesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListTablesCommand");
    var de_ListTagsOfResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ListTagsOfResourceCommand");
    var de_PutItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_PutItemCommand");
    var de_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_PutResourcePolicyCommand");
    var de_QueryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_QueryCommand");
    var de_RestoreTableFromBackupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_RestoreTableFromBackupCommand");
    var de_RestoreTableToPointInTimeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_RestoreTableToPointInTimeCommand");
    var de_ScanCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_ScanCommand");
    var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      await (0, import_smithy_client25.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata3(output)
      };
      return response;
    }, "de_TagResourceCommand");
    var de_TransactGetItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_TransactGetItemsCommand");
    var de_TransactWriteItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_TransactWriteItemsCommand");
    var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      await (0, import_smithy_client25.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata3(output)
      };
      return response;
    }, "de_UntagResourceCommand");
    var de_UpdateContinuousBackupsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateContinuousBackupsCommand");
    var de_UpdateContributorInsightsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateContributorInsightsCommand");
    var de_UpdateGlobalTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateGlobalTableCommand");
    var de_UpdateGlobalTableSettingsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateGlobalTableSettingsCommand");
    var de_UpdateItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateItemCommand");
    var de_UpdateKinesisStreamingDestinationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateKinesisStreamingDestinationCommand");
    var de_UpdateTableCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateTableCommand");
    var de_UpdateTableReplicaAutoScalingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = de_UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateTableReplicaAutoScalingCommand");
    var de_UpdateTimeToLiveCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await (0, import_core17.parseJsonBody)(output.body, context);
      let contents = {};
      contents = (0, import_smithy_client25._json)(data);
      const response = {
        $metadata: deserializeMetadata3(output),
        ...contents
      };
      return response;
    }, "de_UpdateTimeToLiveCommand");
    var de_CommandError3 = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core17.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core17.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(parsedOutput, context);
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await de_ContinuousBackupsUnavailableExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        case "GlobalTableAlreadyExistsException":
        case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
          throw await de_GlobalTableAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await de_ConditionalCheckFailedExceptionRes(parsedOutput, context);
        case "ReplicatedWriteConflictException":
        case "com.amazonaws.dynamodb#ReplicatedWriteConflictException":
          throw await de_ReplicatedWriteConflictExceptionRes(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        case "PolicyNotFoundException":
        case "com.amazonaws.dynamodb#PolicyNotFoundException":
          throw await de_PolicyNotFoundExceptionRes(parsedOutput, context);
        case "ExportNotFoundException":
        case "com.amazonaws.dynamodb#ExportNotFoundException":
          throw await de_ExportNotFoundExceptionRes(parsedOutput, context);
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case "ImportNotFoundException":
        case "com.amazonaws.dynamodb#ImportNotFoundException":
          throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        case "DuplicateItemException":
        case "com.amazonaws.dynamodb#DuplicateItemException":
          throw await de_DuplicateItemExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        case "ExportConflictException":
        case "com.amazonaws.dynamodb#ExportConflictException":
          throw await de_ExportConflictExceptionRes(parsedOutput, context);
        case "InvalidExportTimeException":
        case "com.amazonaws.dynamodb#InvalidExportTimeException":
          throw await de_InvalidExportTimeExceptionRes(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(parsedOutput, context);
        case "ImportConflictException":
        case "com.amazonaws.dynamodb#ImportConflictException":
          throw await de_ImportConflictExceptionRes(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidRestoreTimeException":
        case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
          throw await de_InvalidRestoreTimeExceptionRes(parsedOutput, context);
        case "ReplicaAlreadyExistsException":
        case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
          throw await de_ReplicaAlreadyExistsExceptionRes(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case "IndexNotFoundException":
        case "com.amazonaws.dynamodb#IndexNotFoundException":
          throw await de_IndexNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_BackupInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new BackupInUseException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_BackupInUseExceptionRes");
    var de_BackupNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new BackupNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_BackupNotFoundExceptionRes");
    var de_ConditionalCheckFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ConditionalCheckFailedException(body, context);
      const exception = new ConditionalCheckFailedException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ConditionalCheckFailedExceptionRes");
    var de_ContinuousBackupsUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ContinuousBackupsUnavailableExceptionRes");
    var de_DuplicateItemExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new DuplicateItemException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_DuplicateItemExceptionRes");
    var de_ExportConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ExportConflictException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ExportConflictExceptionRes");
    var de_ExportNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ExportNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ExportNotFoundExceptionRes");
    var de_GlobalTableAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_GlobalTableAlreadyExistsExceptionRes");
    var de_GlobalTableNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new GlobalTableNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_GlobalTableNotFoundExceptionRes");
    var de_IdempotentParameterMismatchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_IdempotentParameterMismatchExceptionRes");
    var de_ImportConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ImportConflictException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ImportConflictExceptionRes");
    var de_ImportNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ImportNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ImportNotFoundExceptionRes");
    var de_IndexNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new IndexNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_IndexNotFoundExceptionRes");
    var de_InternalServerErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new InternalServerError({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_InternalServerErrorRes");
    var de_InvalidEndpointExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new InvalidEndpointException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_InvalidEndpointExceptionRes");
    var de_InvalidExportTimeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new InvalidExportTimeException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_InvalidExportTimeExceptionRes");
    var de_InvalidRestoreTimeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new InvalidRestoreTimeException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_InvalidRestoreTimeExceptionRes");
    var de_ItemCollectionSizeLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ItemCollectionSizeLimitExceededException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ItemCollectionSizeLimitExceededExceptionRes");
    var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new LimitExceededException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_LimitExceededExceptionRes");
    var de_PointInTimeRecoveryUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_PointInTimeRecoveryUnavailableExceptionRes");
    var de_PolicyNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new PolicyNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_PolicyNotFoundExceptionRes");
    var de_ProvisionedThroughputExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ProvisionedThroughputExceededExceptionRes");
    var de_ReplicaAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ReplicaAlreadyExistsExceptionRes");
    var de_ReplicaNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ReplicaNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ReplicaNotFoundExceptionRes");
    var de_ReplicatedWriteConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ReplicatedWriteConflictException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ReplicatedWriteConflictExceptionRes");
    var de_RequestLimitExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new RequestLimitExceeded({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_RequestLimitExceededRes");
    var de_ResourceInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ResourceInUseException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ResourceInUseExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_TableAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new TableAlreadyExistsException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_TableAlreadyExistsExceptionRes");
    var de_TableInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new TableInUseException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_TableInUseExceptionRes");
    var de_TableNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new TableNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_TableNotFoundExceptionRes");
    var de_TransactionCanceledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TransactionCanceledException(body, context);
      const exception = new TransactionCanceledException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_TransactionCanceledExceptionRes");
    var de_TransactionConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new TransactionConflictException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_TransactionConflictExceptionRes");
    var de_TransactionInProgressExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, import_smithy_client25._json)(body);
      const exception = new TransactionInProgressException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client25.decorateServiceException)(exception, body);
    }, "de_TransactionInProgressExceptionRes");
    var se_AttributeUpdates = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValueUpdate(value, context);
        return acc;
      }, {});
    }, "se_AttributeUpdates");
    var se_AttributeValue = /* @__PURE__ */ __name((input, context) => {
      return AttributeValue.visit(input, {
        B: /* @__PURE__ */ __name((value) => ({ B: context.base64Encoder(value) }), "B"),
        BOOL: /* @__PURE__ */ __name((value) => ({ BOOL: value }), "BOOL"),
        BS: /* @__PURE__ */ __name((value) => ({ BS: se_BinarySetAttributeValue(value, context) }), "BS"),
        L: /* @__PURE__ */ __name((value) => ({ L: se_ListAttributeValue(value, context) }), "L"),
        M: /* @__PURE__ */ __name((value) => ({ M: se_MapAttributeValue(value, context) }), "M"),
        N: /* @__PURE__ */ __name((value) => ({ N: value }), "N"),
        NS: /* @__PURE__ */ __name((value) => ({ NS: (0, import_smithy_client25._json)(value) }), "NS"),
        NULL: /* @__PURE__ */ __name((value) => ({ NULL: value }), "NULL"),
        S: /* @__PURE__ */ __name((value) => ({ S: value }), "S"),
        SS: /* @__PURE__ */ __name((value) => ({ SS: (0, import_smithy_client25._json)(value) }), "SS"),
        _: /* @__PURE__ */ __name((name, value) => ({ [name]: value }), "_")
      });
    }, "se_AttributeValue");
    var se_AttributeValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    }, "se_AttributeValueList");
    var se_AttributeValueUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        Action: [],
        Value: /* @__PURE__ */ __name((_2) => se_AttributeValue(_2, context), "Value")
      });
    }, "se_AttributeValueUpdate");
    var se_AutoScalingPolicyUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        PolicyName: [],
        TargetTrackingScalingPolicyConfiguration: /* @__PURE__ */ __name((_2) => se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(_2, context), "TargetTrackingScalingPolicyConfiguration")
      });
    }, "se_AutoScalingPolicyUpdate");
    var se_AutoScalingSettingsUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AutoScalingDisabled: [],
        AutoScalingRoleArn: [],
        MaximumUnits: [],
        MinimumUnits: [],
        ScalingPolicyUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingPolicyUpdate(_2, context), "ScalingPolicyUpdate")
      });
    }, "se_AutoScalingSettingsUpdate");
    var se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        DisableScaleIn: [],
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: import_smithy_client25.serializeFloat
      });
    }, "se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate");
    var se_BatchExecuteStatementInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ReturnConsumedCapacity: [],
        Statements: /* @__PURE__ */ __name((_2) => se_PartiQLBatchRequest(_2, context), "Statements")
      });
    }, "se_BatchExecuteStatementInput");
    var se_BatchGetItemInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        RequestItems: /* @__PURE__ */ __name((_2) => se_BatchGetRequestMap(_2, context), "RequestItems"),
        ReturnConsumedCapacity: []
      });
    }, "se_BatchGetItemInput");
    var se_BatchGetRequestMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_KeysAndAttributes(value, context);
        return acc;
      }, {});
    }, "se_BatchGetRequestMap");
    var se_BatchStatementRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConsistentRead: [],
        Parameters: /* @__PURE__ */ __name((_2) => se_PreparedStatementParameters(_2, context), "Parameters"),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    }, "se_BatchStatementRequest");
    var se_BatchWriteItemInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        RequestItems: /* @__PURE__ */ __name((_2) => se_BatchWriteItemRequestMap(_2, context), "RequestItems"),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: []
      });
    }, "se_BatchWriteItemInput");
    var se_BatchWriteItemRequestMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_WriteRequests(value, context);
        return acc;
      }, {});
    }, "se_BatchWriteItemRequestMap");
    var se_BinarySetAttributeValue = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return context.base64Encoder(entry);
      });
    }, "se_BinarySetAttributeValue");
    var se_Condition = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributeValueList: /* @__PURE__ */ __name((_2) => se_AttributeValueList(_2, context), "AttributeValueList"),
        ComparisonOperator: []
      });
    }, "se_Condition");
    var se_ConditionCheck = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    }, "se_ConditionCheck");
    var se_Delete = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    }, "se_Delete");
    var se_DeleteItemInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: /* @__PURE__ */ __name((_2) => se_ExpectedAttributeMap(_2, context), "Expected"),
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    }, "se_DeleteItemInput");
    var se_DeleteRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key")
      });
    }, "se_DeleteRequest");
    var se_ExecuteStatementInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConsistentRead: [],
        Limit: [],
        NextToken: [],
        Parameters: /* @__PURE__ */ __name((_2) => se_PreparedStatementParameters(_2, context), "Parameters"),
        ReturnConsumedCapacity: [],
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    }, "se_ExecuteStatementInput");
    var se_ExecuteTransactionInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ClientRequestToken: [true, (_2) => _2 ?? (0, import_uuid.v4)()],
        ReturnConsumedCapacity: [],
        TransactStatements: /* @__PURE__ */ __name((_2) => se_ParameterizedStatements(_2, context), "TransactStatements")
      });
    }, "se_ExecuteTransactionInput");
    var se_ExpectedAttributeMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_ExpectedAttributeValue(value, context);
        return acc;
      }, {});
    }, "se_ExpectedAttributeMap");
    var se_ExpectedAttributeValue = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributeValueList: /* @__PURE__ */ __name((_2) => se_AttributeValueList(_2, context), "AttributeValueList"),
        ComparisonOperator: [],
        Exists: [],
        Value: /* @__PURE__ */ __name((_2) => se_AttributeValue(_2, context), "Value")
      });
    }, "se_ExpectedAttributeValue");
    var se_ExportTableToPointInTimeInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ClientToken: [true, (_2) => _2 ?? (0, import_uuid.v4)()],
        ExportFormat: [],
        ExportTime: /* @__PURE__ */ __name((_2) => _2.getTime() / 1e3, "ExportTime"),
        ExportType: [],
        IncrementalExportSpecification: /* @__PURE__ */ __name((_2) => se_IncrementalExportSpecification(_2, context), "IncrementalExportSpecification"),
        S3Bucket: [],
        S3BucketOwner: [],
        S3Prefix: [],
        S3SseAlgorithm: [],
        S3SseKmsKeyId: [],
        TableArn: []
      });
    }, "se_ExportTableToPointInTimeInput");
    var se_ExpressionAttributeValueMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    }, "se_ExpressionAttributeValueMap");
    var se_FilterConditionMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    }, "se_FilterConditionMap");
    var se_Get = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ExpressionAttributeNames: import_smithy_client25._json,
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ProjectionExpression: [],
        TableName: []
      });
    }, "se_Get");
    var se_GetItemInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributesToGet: import_smithy_client25._json,
        ConsistentRead: [],
        ExpressionAttributeNames: import_smithy_client25._json,
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        TableName: []
      });
    }, "se_GetItemInput");
    var se_GlobalSecondaryIndexAutoScalingUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ProvisionedWriteCapacityAutoScalingUpdate")
      });
    }, "se_GlobalSecondaryIndexAutoScalingUpdate");
    var se_GlobalSecondaryIndexAutoScalingUpdateList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_GlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    }, "se_GlobalSecondaryIndexAutoScalingUpdateList");
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ProvisionedWriteCapacityAutoScalingSettingsUpdate"),
        ProvisionedWriteCapacityUnits: []
      });
    }, "se_GlobalTableGlobalSecondaryIndexSettingsUpdate");
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdateList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    }, "se_GlobalTableGlobalSecondaryIndexSettingsUpdateList");
    var se_ImportTableInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ClientToken: [true, (_2) => _2 ?? (0, import_uuid.v4)()],
        InputCompressionType: [],
        InputFormat: [],
        InputFormatOptions: import_smithy_client25._json,
        S3BucketSource: import_smithy_client25._json,
        TableCreationParameters: import_smithy_client25._json
      });
    }, "se_ImportTableInput");
    var se_IncrementalExportSpecification = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ExportFromTime: /* @__PURE__ */ __name((_2) => _2.getTime() / 1e3, "ExportFromTime"),
        ExportToTime: /* @__PURE__ */ __name((_2) => _2.getTime() / 1e3, "ExportToTime"),
        ExportViewType: []
      });
    }, "se_IncrementalExportSpecification");
    var se_Key = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    }, "se_Key");
    var se_KeyConditions = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    }, "se_KeyConditions");
    var se_KeyList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_Key(entry, context);
      });
    }, "se_KeyList");
    var se_KeysAndAttributes = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributesToGet: import_smithy_client25._json,
        ConsistentRead: [],
        ExpressionAttributeNames: import_smithy_client25._json,
        Keys: /* @__PURE__ */ __name((_2) => se_KeyList(_2, context), "Keys"),
        ProjectionExpression: []
      });
    }, "se_KeysAndAttributes");
    var se_ListAttributeValue = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    }, "se_ListAttributeValue");
    var se_ListBackupsInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        BackupType: [],
        ExclusiveStartBackupArn: [],
        Limit: [],
        TableName: [],
        TimeRangeLowerBound: /* @__PURE__ */ __name((_2) => _2.getTime() / 1e3, "TimeRangeLowerBound"),
        TimeRangeUpperBound: /* @__PURE__ */ __name((_2) => _2.getTime() / 1e3, "TimeRangeUpperBound")
      });
    }, "se_ListBackupsInput");
    var se_MapAttributeValue = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    }, "se_MapAttributeValue");
    var se_ParameterizedStatement = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        Parameters: /* @__PURE__ */ __name((_2) => se_PreparedStatementParameters(_2, context), "Parameters"),
        ReturnValuesOnConditionCheckFailure: [],
        Statement: []
      });
    }, "se_ParameterizedStatement");
    var se_ParameterizedStatements = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_ParameterizedStatement(entry, context);
      });
    }, "se_ParameterizedStatements");
    var se_PartiQLBatchRequest = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_BatchStatementRequest(entry, context);
      });
    }, "se_PartiQLBatchRequest");
    var se_PreparedStatementParameters = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_AttributeValue(entry, context);
      });
    }, "se_PreparedStatementParameters");
    var se_Put = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Item: /* @__PURE__ */ __name((_2) => se_PutItemInputAttributeMap(_2, context), "Item"),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    }, "se_Put");
    var se_PutItemInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: /* @__PURE__ */ __name((_2) => se_ExpectedAttributeMap(_2, context), "Expected"),
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Item: /* @__PURE__ */ __name((_2) => se_PutItemInputAttributeMap(_2, context), "Item"),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: []
      });
    }, "se_PutItemInput");
    var se_PutItemInputAttributeMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    }, "se_PutItemInputAttributeMap");
    var se_PutRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        Item: /* @__PURE__ */ __name((_2) => se_PutItemInputAttributeMap(_2, context), "Item")
      });
    }, "se_PutRequest");
    var se_QueryInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributesToGet: import_smithy_client25._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "ExclusiveStartKey"),
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        FilterExpression: [],
        IndexName: [],
        KeyConditionExpression: [],
        KeyConditions: /* @__PURE__ */ __name((_2) => se_KeyConditions(_2, context), "KeyConditions"),
        Limit: [],
        ProjectionExpression: [],
        QueryFilter: /* @__PURE__ */ __name((_2) => se_FilterConditionMap(_2, context), "QueryFilter"),
        ReturnConsumedCapacity: [],
        ScanIndexForward: [],
        Select: [],
        TableName: []
      });
    }, "se_QueryInput");
    var se_ReplicaAutoScalingUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexUpdates: /* @__PURE__ */ __name((_2) => se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList(_2, context), "ReplicaGlobalSecondaryIndexUpdates"),
        ReplicaProvisionedReadCapacityAutoScalingUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ReplicaProvisionedReadCapacityAutoScalingUpdate")
      });
    }, "se_ReplicaAutoScalingUpdate");
    var se_ReplicaAutoScalingUpdateList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_ReplicaAutoScalingUpdate(entry, context);
      });
    }, "se_ReplicaAutoScalingUpdateList");
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ProvisionedReadCapacityAutoScalingUpdate")
      });
    }, "se_ReplicaGlobalSecondaryIndexAutoScalingUpdate");
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    }, "se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList");
    var se_ReplicaGlobalSecondaryIndexSettingsUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingSettingsUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ProvisionedReadCapacityAutoScalingSettingsUpdate"),
        ProvisionedReadCapacityUnits: []
      });
    }, "se_ReplicaGlobalSecondaryIndexSettingsUpdate");
    var se_ReplicaGlobalSecondaryIndexSettingsUpdateList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    }, "se_ReplicaGlobalSecondaryIndexSettingsUpdateList");
    var se_ReplicaSettingsUpdate = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexSettingsUpdate: /* @__PURE__ */ __name((_2) => se_ReplicaGlobalSecondaryIndexSettingsUpdateList(_2, context), "ReplicaGlobalSecondaryIndexSettingsUpdate"),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"),
        ReplicaProvisionedReadCapacityUnits: [],
        ReplicaTableClass: []
      });
    }, "se_ReplicaSettingsUpdate");
    var se_ReplicaSettingsUpdateList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_ReplicaSettingsUpdate(entry, context);
      });
    }, "se_ReplicaSettingsUpdateList");
    var se_RestoreTableToPointInTimeInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        BillingModeOverride: [],
        GlobalSecondaryIndexOverride: import_smithy_client25._json,
        LocalSecondaryIndexOverride: import_smithy_client25._json,
        OnDemandThroughputOverride: import_smithy_client25._json,
        ProvisionedThroughputOverride: import_smithy_client25._json,
        RestoreDateTime: /* @__PURE__ */ __name((_2) => _2.getTime() / 1e3, "RestoreDateTime"),
        SSESpecificationOverride: import_smithy_client25._json,
        SourceTableArn: [],
        SourceTableName: [],
        TargetTableName: [],
        UseLatestRestorableTime: []
      });
    }, "se_RestoreTableToPointInTimeInput");
    var se_ScanInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributesToGet: import_smithy_client25._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "ExclusiveStartKey"),
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        FilterExpression: [],
        IndexName: [],
        Limit: [],
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        ScanFilter: /* @__PURE__ */ __name((_2) => se_FilterConditionMap(_2, context), "ScanFilter"),
        Segment: [],
        Select: [],
        TableName: [],
        TotalSegments: []
      });
    }, "se_ScanInput");
    var se_TransactGetItem = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        Get: /* @__PURE__ */ __name((_2) => se_Get(_2, context), "Get")
      });
    }, "se_TransactGetItem");
    var se_TransactGetItemList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_TransactGetItem(entry, context);
      });
    }, "se_TransactGetItemList");
    var se_TransactGetItemsInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ReturnConsumedCapacity: [],
        TransactItems: /* @__PURE__ */ __name((_2) => se_TransactGetItemList(_2, context), "TransactItems")
      });
    }, "se_TransactGetItemsInput");
    var se_TransactWriteItem = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionCheck: /* @__PURE__ */ __name((_2) => se_ConditionCheck(_2, context), "ConditionCheck"),
        Delete: /* @__PURE__ */ __name((_2) => se_Delete(_2, context), "Delete"),
        Put: /* @__PURE__ */ __name((_2) => se_Put(_2, context), "Put"),
        Update: /* @__PURE__ */ __name((_2) => se_Update(_2, context), "Update")
      });
    }, "se_TransactWriteItem");
    var se_TransactWriteItemList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_TransactWriteItem(entry, context);
      });
    }, "se_TransactWriteItemList");
    var se_TransactWriteItemsInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ClientRequestToken: [true, (_2) => _2 ?? (0, import_uuid.v4)()],
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        TransactItems: /* @__PURE__ */ __name((_2) => se_TransactWriteItemList(_2, context), "TransactItems")
      });
    }, "se_TransactWriteItemsInput");
    var se_Update = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: []
      });
    }, "se_Update");
    var se_UpdateGlobalTableSettingsInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        GlobalTableBillingMode: [],
        GlobalTableGlobalSecondaryIndexSettingsUpdate: /* @__PURE__ */ __name((_2) => se_GlobalTableGlobalSecondaryIndexSettingsUpdateList(_2, context), "GlobalTableGlobalSecondaryIndexSettingsUpdate"),
        GlobalTableName: [],
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"),
        GlobalTableProvisionedWriteCapacityUnits: [],
        ReplicaSettingsUpdate: /* @__PURE__ */ __name((_2) => se_ReplicaSettingsUpdateList(_2, context), "ReplicaSettingsUpdate")
      });
    }, "se_UpdateGlobalTableSettingsInput");
    var se_UpdateItemInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        AttributeUpdates: /* @__PURE__ */ __name((_2) => se_AttributeUpdates(_2, context), "AttributeUpdates"),
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: /* @__PURE__ */ __name((_2) => se_ExpectedAttributeMap(_2, context), "Expected"),
        ExpressionAttributeNames: import_smithy_client25._json,
        ExpressionAttributeValues: /* @__PURE__ */ __name((_2) => se_ExpressionAttributeValueMap(_2, context), "ExpressionAttributeValues"),
        Key: /* @__PURE__ */ __name((_2) => se_Key(_2, context), "Key"),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: []
      });
    }, "se_UpdateItemInput");
    var se_UpdateTableReplicaAutoScalingInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        GlobalSecondaryIndexUpdates: /* @__PURE__ */ __name((_2) => se_GlobalSecondaryIndexAutoScalingUpdateList(_2, context), "GlobalSecondaryIndexUpdates"),
        ProvisionedWriteCapacityAutoScalingUpdate: /* @__PURE__ */ __name((_2) => se_AutoScalingSettingsUpdate(_2, context), "ProvisionedWriteCapacityAutoScalingUpdate"),
        ReplicaUpdates: /* @__PURE__ */ __name((_2) => se_ReplicaAutoScalingUpdateList(_2, context), "ReplicaUpdates"),
        TableName: []
      });
    }, "se_UpdateTableReplicaAutoScalingInput");
    var se_WriteRequest = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client25.take)(input, {
        DeleteRequest: /* @__PURE__ */ __name((_2) => se_DeleteRequest(_2, context), "DeleteRequest"),
        PutRequest: /* @__PURE__ */ __name((_2) => se_PutRequest(_2, context), "PutRequest")
      });
    }, "se_WriteRequest");
    var se_WriteRequests = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e3) => e3 != null).map((entry) => {
        return se_WriteRequest(entry, context);
      });
    }, "se_WriteRequests");
    var de_ArchivalSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ArchivalBackupArn: import_smithy_client25.expectString,
        ArchivalDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "ArchivalDateTime"),
        ArchivalReason: import_smithy_client25.expectString
      });
    }, "de_ArchivalSummary");
    var de_AttributeMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, import_core17.awsExpectUnion)(value), context);
        return acc;
      }, {});
    }, "de_AttributeMap");
    var de_AttributeValue = /* @__PURE__ */ __name((output, context) => {
      if (output.B != null) {
        return {
          B: context.base64Decoder(output.B)
        };
      }
      if ((0, import_smithy_client25.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, import_smithy_client25.expectBoolean)(output.BOOL) };
      }
      if (output.BS != null) {
        return {
          BS: de_BinarySetAttributeValue(output.BS, context)
        };
      }
      if (output.L != null) {
        return {
          L: de_ListAttributeValue(output.L, context)
        };
      }
      if (output.M != null) {
        return {
          M: de_MapAttributeValue(output.M, context)
        };
      }
      if ((0, import_smithy_client25.expectString)(output.N) !== void 0) {
        return { N: (0, import_smithy_client25.expectString)(output.N) };
      }
      if (output.NS != null) {
        return {
          NS: (0, import_smithy_client25._json)(output.NS)
        };
      }
      if ((0, import_smithy_client25.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, import_smithy_client25.expectBoolean)(output.NULL) };
      }
      if ((0, import_smithy_client25.expectString)(output.S) !== void 0) {
        return { S: (0, import_smithy_client25.expectString)(output.S) };
      }
      if (output.SS != null) {
        return {
          SS: (0, import_smithy_client25._json)(output.SS)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_AttributeValue");
    var de_AutoScalingPolicyDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        PolicyName: import_smithy_client25.expectString,
        TargetTrackingScalingPolicyConfiguration: /* @__PURE__ */ __name((_2) => de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(_2, context), "TargetTrackingScalingPolicyConfiguration")
      });
    }, "de_AutoScalingPolicyDescription");
    var de_AutoScalingPolicyDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_AutoScalingPolicyDescription(entry, context);
      });
      return retVal;
    }, "de_AutoScalingPolicyDescriptionList");
    var de_AutoScalingSettingsDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        AutoScalingDisabled: import_smithy_client25.expectBoolean,
        AutoScalingRoleArn: import_smithy_client25.expectString,
        MaximumUnits: import_smithy_client25.expectLong,
        MinimumUnits: import_smithy_client25.expectLong,
        ScalingPolicies: /* @__PURE__ */ __name((_2) => de_AutoScalingPolicyDescriptionList(_2, context), "ScalingPolicies")
      });
    }, "de_AutoScalingSettingsDescription");
    var de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        DisableScaleIn: import_smithy_client25.expectBoolean,
        ScaleInCooldown: import_smithy_client25.expectInt32,
        ScaleOutCooldown: import_smithy_client25.expectInt32,
        TargetValue: import_smithy_client25.limitedParseDouble
      });
    }, "de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription");
    var de_BackupDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupDetails: /* @__PURE__ */ __name((_2) => de_BackupDetails(_2, context), "BackupDetails"),
        SourceTableDetails: /* @__PURE__ */ __name((_2) => de_SourceTableDetails(_2, context), "SourceTableDetails"),
        SourceTableFeatureDetails: /* @__PURE__ */ __name((_2) => de_SourceTableFeatureDetails(_2, context), "SourceTableFeatureDetails")
      });
    }, "de_BackupDescription");
    var de_BackupDetails = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupArn: import_smithy_client25.expectString,
        BackupCreationDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "BackupCreationDateTime"),
        BackupExpiryDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "BackupExpiryDateTime"),
        BackupName: import_smithy_client25.expectString,
        BackupSizeBytes: import_smithy_client25.expectLong,
        BackupStatus: import_smithy_client25.expectString,
        BackupType: import_smithy_client25.expectString
      });
    }, "de_BackupDetails");
    var de_BackupSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_BackupSummary(entry, context);
      });
      return retVal;
    }, "de_BackupSummaries");
    var de_BackupSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupArn: import_smithy_client25.expectString,
        BackupCreationDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "BackupCreationDateTime"),
        BackupExpiryDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "BackupExpiryDateTime"),
        BackupName: import_smithy_client25.expectString,
        BackupSizeBytes: import_smithy_client25.expectLong,
        BackupStatus: import_smithy_client25.expectString,
        BackupType: import_smithy_client25.expectString,
        TableArn: import_smithy_client25.expectString,
        TableId: import_smithy_client25.expectString,
        TableName: import_smithy_client25.expectString
      });
    }, "de_BackupSummary");
    var de_BatchExecuteStatementOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacityMultiple(_2, context), "ConsumedCapacity"),
        Responses: /* @__PURE__ */ __name((_2) => de_PartiQLBatchResponse(_2, context), "Responses")
      });
    }, "de_BatchExecuteStatementOutput");
    var de_BatchGetItemOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacityMultiple(_2, context), "ConsumedCapacity"),
        Responses: /* @__PURE__ */ __name((_2) => de_BatchGetResponseMap(_2, context), "Responses"),
        UnprocessedKeys: /* @__PURE__ */ __name((_2) => de_BatchGetRequestMap(_2, context), "UnprocessedKeys")
      });
    }, "de_BatchGetItemOutput");
    var de_BatchGetRequestMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_KeysAndAttributes(value, context);
        return acc;
      }, {});
    }, "de_BatchGetRequestMap");
    var de_BatchGetResponseMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce(
        (acc, [key, value]) => {
          if (value === null) {
            return acc;
          }
          acc[key] = de_ItemList(value, context);
          return acc;
        },
        {}
      );
    }, "de_BatchGetResponseMap");
    var de_BatchStatementError = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Code: import_smithy_client25.expectString,
        Item: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Item"),
        Message: import_smithy_client25.expectString
      });
    }, "de_BatchStatementError");
    var de_BatchStatementResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Error: /* @__PURE__ */ __name((_2) => de_BatchStatementError(_2, context), "Error"),
        Item: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Item"),
        TableName: import_smithy_client25.expectString
      });
    }, "de_BatchStatementResponse");
    var de_BatchWriteItemOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacityMultiple(_2, context), "ConsumedCapacity"),
        ItemCollectionMetrics: /* @__PURE__ */ __name((_2) => de_ItemCollectionMetricsPerTable(_2, context), "ItemCollectionMetrics"),
        UnprocessedItems: /* @__PURE__ */ __name((_2) => de_BatchWriteItemRequestMap(_2, context), "UnprocessedItems")
      });
    }, "de_BatchWriteItemOutput");
    var de_BatchWriteItemRequestMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_WriteRequests(value, context);
        return acc;
      }, {});
    }, "de_BatchWriteItemRequestMap");
    var de_BillingModeSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BillingMode: import_smithy_client25.expectString,
        LastUpdateToPayPerRequestDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "LastUpdateToPayPerRequestDateTime")
      });
    }, "de_BillingModeSummary");
    var de_BinarySetAttributeValue = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return context.base64Decoder(entry);
      });
      return retVal;
    }, "de_BinarySetAttributeValue");
    var de_CancellationReason = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Code: import_smithy_client25.expectString,
        Item: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Item"),
        Message: import_smithy_client25.expectString
      });
    }, "de_CancellationReason");
    var de_CancellationReasonList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_CancellationReason(entry, context);
      });
      return retVal;
    }, "de_CancellationReasonList");
    var de_Capacity = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        CapacityUnits: import_smithy_client25.limitedParseDouble,
        ReadCapacityUnits: import_smithy_client25.limitedParseDouble,
        WriteCapacityUnits: import_smithy_client25.limitedParseDouble
      });
    }, "de_Capacity");
    var de_ConditionalCheckFailedException = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Item: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Item"),
        message: import_smithy_client25.expectString
      });
    }, "de_ConditionalCheckFailedException");
    var de_ConsumedCapacity = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        CapacityUnits: import_smithy_client25.limitedParseDouble,
        GlobalSecondaryIndexes: /* @__PURE__ */ __name((_2) => de_SecondaryIndexesCapacityMap(_2, context), "GlobalSecondaryIndexes"),
        LocalSecondaryIndexes: /* @__PURE__ */ __name((_2) => de_SecondaryIndexesCapacityMap(_2, context), "LocalSecondaryIndexes"),
        ReadCapacityUnits: import_smithy_client25.limitedParseDouble,
        Table: /* @__PURE__ */ __name((_2) => de_Capacity(_2, context), "Table"),
        TableName: import_smithy_client25.expectString,
        WriteCapacityUnits: import_smithy_client25.limitedParseDouble
      });
    }, "de_ConsumedCapacity");
    var de_ConsumedCapacityMultiple = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ConsumedCapacity(entry, context);
      });
      return retVal;
    }, "de_ConsumedCapacityMultiple");
    var de_ContinuousBackupsDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ContinuousBackupsStatus: import_smithy_client25.expectString,
        PointInTimeRecoveryDescription: /* @__PURE__ */ __name((_2) => de_PointInTimeRecoveryDescription(_2, context), "PointInTimeRecoveryDescription")
      });
    }, "de_ContinuousBackupsDescription");
    var de_CreateBackupOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupDetails: /* @__PURE__ */ __name((_2) => de_BackupDetails(_2, context), "BackupDetails")
      });
    }, "de_CreateBackupOutput");
    var de_CreateGlobalTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalTableDescription: /* @__PURE__ */ __name((_2) => de_GlobalTableDescription(_2, context), "GlobalTableDescription")
      });
    }, "de_CreateGlobalTableOutput");
    var de_CreateTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableDescription: /* @__PURE__ */ __name((_2) => de_TableDescription(_2, context), "TableDescription")
      });
    }, "de_CreateTableOutput");
    var de_DeleteBackupOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupDescription: /* @__PURE__ */ __name((_2) => de_BackupDescription(_2, context), "BackupDescription")
      });
    }, "de_DeleteBackupOutput");
    var de_DeleteItemOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Attributes: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Attributes"),
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        ItemCollectionMetrics: /* @__PURE__ */ __name((_2) => de_ItemCollectionMetrics(_2, context), "ItemCollectionMetrics")
      });
    }, "de_DeleteItemOutput");
    var de_DeleteRequest = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Key: /* @__PURE__ */ __name((_2) => de_Key(_2, context), "Key")
      });
    }, "de_DeleteRequest");
    var de_DeleteTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableDescription: /* @__PURE__ */ __name((_2) => de_TableDescription(_2, context), "TableDescription")
      });
    }, "de_DeleteTableOutput");
    var de_DescribeBackupOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupDescription: /* @__PURE__ */ __name((_2) => de_BackupDescription(_2, context), "BackupDescription")
      });
    }, "de_DescribeBackupOutput");
    var de_DescribeContinuousBackupsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ContinuousBackupsDescription: /* @__PURE__ */ __name((_2) => de_ContinuousBackupsDescription(_2, context), "ContinuousBackupsDescription")
      });
    }, "de_DescribeContinuousBackupsOutput");
    var de_DescribeContributorInsightsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ContributorInsightsRuleList: import_smithy_client25._json,
        ContributorInsightsStatus: import_smithy_client25.expectString,
        FailureException: import_smithy_client25._json,
        IndexName: import_smithy_client25.expectString,
        LastUpdateDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "LastUpdateDateTime"),
        TableName: import_smithy_client25.expectString
      });
    }, "de_DescribeContributorInsightsOutput");
    var de_DescribeExportOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ExportDescription: /* @__PURE__ */ __name((_2) => de_ExportDescription(_2, context), "ExportDescription")
      });
    }, "de_DescribeExportOutput");
    var de_DescribeGlobalTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalTableDescription: /* @__PURE__ */ __name((_2) => de_GlobalTableDescription(_2, context), "GlobalTableDescription")
      });
    }, "de_DescribeGlobalTableOutput");
    var de_DescribeGlobalTableSettingsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalTableName: import_smithy_client25.expectString,
        ReplicaSettings: /* @__PURE__ */ __name((_2) => de_ReplicaSettingsDescriptionList(_2, context), "ReplicaSettings")
      });
    }, "de_DescribeGlobalTableSettingsOutput");
    var de_DescribeImportOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ImportTableDescription: /* @__PURE__ */ __name((_2) => de_ImportTableDescription(_2, context), "ImportTableDescription")
      });
    }, "de_DescribeImportOutput");
    var de_DescribeTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Table: /* @__PURE__ */ __name((_2) => de_TableDescription(_2, context), "Table")
      });
    }, "de_DescribeTableOutput");
    var de_DescribeTableReplicaAutoScalingOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableAutoScalingDescription: /* @__PURE__ */ __name((_2) => de_TableAutoScalingDescription(_2, context), "TableAutoScalingDescription")
      });
    }, "de_DescribeTableReplicaAutoScalingOutput");
    var de_ExecuteStatementOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        Items: /* @__PURE__ */ __name((_2) => de_ItemList(_2, context), "Items"),
        LastEvaluatedKey: /* @__PURE__ */ __name((_2) => de_Key(_2, context), "LastEvaluatedKey"),
        NextToken: import_smithy_client25.expectString
      });
    }, "de_ExecuteStatementOutput");
    var de_ExecuteTransactionOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacityMultiple(_2, context), "ConsumedCapacity"),
        Responses: /* @__PURE__ */ __name((_2) => de_ItemResponseList(_2, context), "Responses")
      });
    }, "de_ExecuteTransactionOutput");
    var de_ExportDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BilledSizeBytes: import_smithy_client25.expectLong,
        ClientToken: import_smithy_client25.expectString,
        EndTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "EndTime"),
        ExportArn: import_smithy_client25.expectString,
        ExportFormat: import_smithy_client25.expectString,
        ExportManifest: import_smithy_client25.expectString,
        ExportStatus: import_smithy_client25.expectString,
        ExportTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "ExportTime"),
        ExportType: import_smithy_client25.expectString,
        FailureCode: import_smithy_client25.expectString,
        FailureMessage: import_smithy_client25.expectString,
        IncrementalExportSpecification: /* @__PURE__ */ __name((_2) => de_IncrementalExportSpecification(_2, context), "IncrementalExportSpecification"),
        ItemCount: import_smithy_client25.expectLong,
        S3Bucket: import_smithy_client25.expectString,
        S3BucketOwner: import_smithy_client25.expectString,
        S3Prefix: import_smithy_client25.expectString,
        S3SseAlgorithm: import_smithy_client25.expectString,
        S3SseKmsKeyId: import_smithy_client25.expectString,
        StartTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "StartTime"),
        TableArn: import_smithy_client25.expectString,
        TableId: import_smithy_client25.expectString
      });
    }, "de_ExportDescription");
    var de_ExportTableToPointInTimeOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ExportDescription: /* @__PURE__ */ __name((_2) => de_ExportDescription(_2, context), "ExportDescription")
      });
    }, "de_ExportTableToPointInTimeOutput");
    var de_GetItemOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        Item: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Item")
      });
    }, "de_GetItemOutput");
    var de_GlobalSecondaryIndexDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Backfilling: import_smithy_client25.expectBoolean,
        IndexArn: import_smithy_client25.expectString,
        IndexName: import_smithy_client25.expectString,
        IndexSizeBytes: import_smithy_client25.expectLong,
        IndexStatus: import_smithy_client25.expectString,
        ItemCount: import_smithy_client25.expectLong,
        KeySchema: import_smithy_client25._json,
        OnDemandThroughput: import_smithy_client25._json,
        Projection: import_smithy_client25._json,
        ProvisionedThroughput: /* @__PURE__ */ __name((_2) => de_ProvisionedThroughputDescription(_2, context), "ProvisionedThroughput"),
        WarmThroughput: import_smithy_client25._json
      });
    }, "de_GlobalSecondaryIndexDescription");
    var de_GlobalSecondaryIndexDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_GlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    }, "de_GlobalSecondaryIndexDescriptionList");
    var de_GlobalTableDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        CreationDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "CreationDateTime"),
        GlobalTableArn: import_smithy_client25.expectString,
        GlobalTableName: import_smithy_client25.expectString,
        GlobalTableStatus: import_smithy_client25.expectString,
        ReplicationGroup: /* @__PURE__ */ __name((_2) => de_ReplicaDescriptionList(_2, context), "ReplicationGroup")
      });
    }, "de_GlobalTableDescription");
    var de_ImportSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        CloudWatchLogGroupArn: import_smithy_client25.expectString,
        EndTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "EndTime"),
        ImportArn: import_smithy_client25.expectString,
        ImportStatus: import_smithy_client25.expectString,
        InputFormat: import_smithy_client25.expectString,
        S3BucketSource: import_smithy_client25._json,
        StartTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "StartTime"),
        TableArn: import_smithy_client25.expectString
      });
    }, "de_ImportSummary");
    var de_ImportSummaryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ImportSummary(entry, context);
      });
      return retVal;
    }, "de_ImportSummaryList");
    var de_ImportTableDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ClientToken: import_smithy_client25.expectString,
        CloudWatchLogGroupArn: import_smithy_client25.expectString,
        EndTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "EndTime"),
        ErrorCount: import_smithy_client25.expectLong,
        FailureCode: import_smithy_client25.expectString,
        FailureMessage: import_smithy_client25.expectString,
        ImportArn: import_smithy_client25.expectString,
        ImportStatus: import_smithy_client25.expectString,
        ImportedItemCount: import_smithy_client25.expectLong,
        InputCompressionType: import_smithy_client25.expectString,
        InputFormat: import_smithy_client25.expectString,
        InputFormatOptions: import_smithy_client25._json,
        ProcessedItemCount: import_smithy_client25.expectLong,
        ProcessedSizeBytes: import_smithy_client25.expectLong,
        S3BucketSource: import_smithy_client25._json,
        StartTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "StartTime"),
        TableArn: import_smithy_client25.expectString,
        TableCreationParameters: import_smithy_client25._json,
        TableId: import_smithy_client25.expectString
      });
    }, "de_ImportTableDescription");
    var de_ImportTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ImportTableDescription: /* @__PURE__ */ __name((_2) => de_ImportTableDescription(_2, context), "ImportTableDescription")
      });
    }, "de_ImportTableOutput");
    var de_IncrementalExportSpecification = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ExportFromTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "ExportFromTime"),
        ExportToTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "ExportToTime"),
        ExportViewType: import_smithy_client25.expectString
      });
    }, "de_IncrementalExportSpecification");
    var de_ItemCollectionKeyAttributeMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, import_core17.awsExpectUnion)(value), context);
        return acc;
      }, {});
    }, "de_ItemCollectionKeyAttributeMap");
    var de_ItemCollectionMetrics = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ItemCollectionKey: /* @__PURE__ */ __name((_2) => de_ItemCollectionKeyAttributeMap(_2, context), "ItemCollectionKey"),
        SizeEstimateRangeGB: /* @__PURE__ */ __name((_2) => de_ItemCollectionSizeEstimateRange(_2, context), "SizeEstimateRangeGB")
      });
    }, "de_ItemCollectionMetrics");
    var de_ItemCollectionMetricsMultiple = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ItemCollectionMetrics(entry, context);
      });
      return retVal;
    }, "de_ItemCollectionMetricsMultiple");
    var de_ItemCollectionMetricsPerTable = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemCollectionMetricsMultiple(value, context);
        return acc;
      }, {});
    }, "de_ItemCollectionMetricsPerTable");
    var de_ItemCollectionSizeEstimateRange = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return (0, import_smithy_client25.limitedParseDouble)(entry);
      });
      return retVal;
    }, "de_ItemCollectionSizeEstimateRange");
    var de_ItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_AttributeMap(entry, context);
      });
      return retVal;
    }, "de_ItemList");
    var de_ItemResponse = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Item: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Item")
      });
    }, "de_ItemResponse");
    var de_ItemResponseList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ItemResponse(entry, context);
      });
      return retVal;
    }, "de_ItemResponseList");
    var de_Key = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, import_core17.awsExpectUnion)(value), context);
        return acc;
      }, {});
    }, "de_Key");
    var de_KeyList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_Key(entry, context);
      });
      return retVal;
    }, "de_KeyList");
    var de_KeysAndAttributes = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        AttributesToGet: import_smithy_client25._json,
        ConsistentRead: import_smithy_client25.expectBoolean,
        ExpressionAttributeNames: import_smithy_client25._json,
        Keys: /* @__PURE__ */ __name((_2) => de_KeyList(_2, context), "Keys"),
        ProjectionExpression: import_smithy_client25.expectString
      });
    }, "de_KeysAndAttributes");
    var de_ListAttributeValue = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_AttributeValue((0, import_core17.awsExpectUnion)(entry), context);
      });
      return retVal;
    }, "de_ListAttributeValue");
    var de_ListBackupsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BackupSummaries: /* @__PURE__ */ __name((_2) => de_BackupSummaries(_2, context), "BackupSummaries"),
        LastEvaluatedBackupArn: import_smithy_client25.expectString
      });
    }, "de_ListBackupsOutput");
    var de_ListImportsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ImportSummaryList: /* @__PURE__ */ __name((_2) => de_ImportSummaryList(_2, context), "ImportSummaryList"),
        NextToken: import_smithy_client25.expectString
      });
    }, "de_ListImportsOutput");
    var de_MapAttributeValue = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, import_core17.awsExpectUnion)(value), context);
        return acc;
      }, {});
    }, "de_MapAttributeValue");
    var de_PartiQLBatchResponse = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_BatchStatementResponse(entry, context);
      });
      return retVal;
    }, "de_PartiQLBatchResponse");
    var de_PointInTimeRecoveryDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        EarliestRestorableDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "EarliestRestorableDateTime"),
        LatestRestorableDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "LatestRestorableDateTime"),
        PointInTimeRecoveryStatus: import_smithy_client25.expectString,
        RecoveryPeriodInDays: import_smithy_client25.expectInt32
      });
    }, "de_PointInTimeRecoveryDescription");
    var de_ProvisionedThroughputDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        LastDecreaseDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "LastDecreaseDateTime"),
        LastIncreaseDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "LastIncreaseDateTime"),
        NumberOfDecreasesToday: import_smithy_client25.expectLong,
        ReadCapacityUnits: import_smithy_client25.expectLong,
        WriteCapacityUnits: import_smithy_client25.expectLong
      });
    }, "de_ProvisionedThroughputDescription");
    var de_PutItemInputAttributeMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue((0, import_core17.awsExpectUnion)(value), context);
        return acc;
      }, {});
    }, "de_PutItemInputAttributeMap");
    var de_PutItemOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Attributes: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Attributes"),
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        ItemCollectionMetrics: /* @__PURE__ */ __name((_2) => de_ItemCollectionMetrics(_2, context), "ItemCollectionMetrics")
      });
    }, "de_PutItemOutput");
    var de_PutRequest = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Item: /* @__PURE__ */ __name((_2) => de_PutItemInputAttributeMap(_2, context), "Item")
      });
    }, "de_PutRequest");
    var de_QueryOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        Count: import_smithy_client25.expectInt32,
        Items: /* @__PURE__ */ __name((_2) => de_ItemList(_2, context), "Items"),
        LastEvaluatedKey: /* @__PURE__ */ __name((_2) => de_Key(_2, context), "LastEvaluatedKey"),
        ScannedCount: import_smithy_client25.expectInt32
      });
    }, "de_QueryOutput");
    var de_ReplicaAutoScalingDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalSecondaryIndexes: /* @__PURE__ */ __name((_2) => de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(_2, context), "GlobalSecondaryIndexes"),
        RegionName: import_smithy_client25.expectString,
        ReplicaProvisionedReadCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ReplicaProvisionedReadCapacityAutoScalingSettings"),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ReplicaProvisionedWriteCapacityAutoScalingSettings"),
        ReplicaStatus: import_smithy_client25.expectString
      });
    }, "de_ReplicaAutoScalingDescription");
    var de_ReplicaAutoScalingDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ReplicaAutoScalingDescription(entry, context);
      });
      return retVal;
    }, "de_ReplicaAutoScalingDescriptionList");
    var de_ReplicaDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalSecondaryIndexes: import_smithy_client25._json,
        KMSMasterKeyId: import_smithy_client25.expectString,
        OnDemandThroughputOverride: import_smithy_client25._json,
        ProvisionedThroughputOverride: import_smithy_client25._json,
        RegionName: import_smithy_client25.expectString,
        ReplicaInaccessibleDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "ReplicaInaccessibleDateTime"),
        ReplicaStatus: import_smithy_client25.expectString,
        ReplicaStatusDescription: import_smithy_client25.expectString,
        ReplicaStatusPercentProgress: import_smithy_client25.expectString,
        ReplicaTableClassSummary: /* @__PURE__ */ __name((_2) => de_TableClassSummary(_2, context), "ReplicaTableClassSummary"),
        WarmThroughput: import_smithy_client25._json
      });
    }, "de_ReplicaDescription");
    var de_ReplicaDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ReplicaDescription(entry, context);
      });
      return retVal;
    }, "de_ReplicaDescriptionList");
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        IndexName: import_smithy_client25.expectString,
        IndexStatus: import_smithy_client25.expectString,
        ProvisionedReadCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ProvisionedReadCapacityAutoScalingSettings"),
        ProvisionedWriteCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ProvisionedWriteCapacityAutoScalingSettings")
      });
    }, "de_ReplicaGlobalSecondaryIndexAutoScalingDescription");
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
      });
      return retVal;
    }, "de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList");
    var de_ReplicaGlobalSecondaryIndexSettingsDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        IndexName: import_smithy_client25.expectString,
        IndexStatus: import_smithy_client25.expectString,
        ProvisionedReadCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ProvisionedReadCapacityAutoScalingSettings"),
        ProvisionedReadCapacityUnits: import_smithy_client25.expectLong,
        ProvisionedWriteCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ProvisionedWriteCapacityAutoScalingSettings"),
        ProvisionedWriteCapacityUnits: import_smithy_client25.expectLong
      });
    }, "de_ReplicaGlobalSecondaryIndexSettingsDescription");
    var de_ReplicaGlobalSecondaryIndexSettingsDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
      });
      return retVal;
    }, "de_ReplicaGlobalSecondaryIndexSettingsDescriptionList");
    var de_ReplicaSettingsDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        RegionName: import_smithy_client25.expectString,
        ReplicaBillingModeSummary: /* @__PURE__ */ __name((_2) => de_BillingModeSummary(_2, context), "ReplicaBillingModeSummary"),
        ReplicaGlobalSecondaryIndexSettings: /* @__PURE__ */ __name((_2) => de_ReplicaGlobalSecondaryIndexSettingsDescriptionList(_2, context), "ReplicaGlobalSecondaryIndexSettings"),
        ReplicaProvisionedReadCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ReplicaProvisionedReadCapacityAutoScalingSettings"),
        ReplicaProvisionedReadCapacityUnits: import_smithy_client25.expectLong,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: /* @__PURE__ */ __name((_2) => de_AutoScalingSettingsDescription(_2, context), "ReplicaProvisionedWriteCapacityAutoScalingSettings"),
        ReplicaProvisionedWriteCapacityUnits: import_smithy_client25.expectLong,
        ReplicaStatus: import_smithy_client25.expectString,
        ReplicaTableClassSummary: /* @__PURE__ */ __name((_2) => de_TableClassSummary(_2, context), "ReplicaTableClassSummary")
      });
    }, "de_ReplicaSettingsDescription");
    var de_ReplicaSettingsDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_ReplicaSettingsDescription(entry, context);
      });
      return retVal;
    }, "de_ReplicaSettingsDescriptionList");
    var de_RestoreSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        RestoreDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "RestoreDateTime"),
        RestoreInProgress: import_smithy_client25.expectBoolean,
        SourceBackupArn: import_smithy_client25.expectString,
        SourceTableArn: import_smithy_client25.expectString
      });
    }, "de_RestoreSummary");
    var de_RestoreTableFromBackupOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableDescription: /* @__PURE__ */ __name((_2) => de_TableDescription(_2, context), "TableDescription")
      });
    }, "de_RestoreTableFromBackupOutput");
    var de_RestoreTableToPointInTimeOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableDescription: /* @__PURE__ */ __name((_2) => de_TableDescription(_2, context), "TableDescription")
      });
    }, "de_RestoreTableToPointInTimeOutput");
    var de_ScanOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        Count: import_smithy_client25.expectInt32,
        Items: /* @__PURE__ */ __name((_2) => de_ItemList(_2, context), "Items"),
        LastEvaluatedKey: /* @__PURE__ */ __name((_2) => de_Key(_2, context), "LastEvaluatedKey"),
        ScannedCount: import_smithy_client25.expectInt32
      });
    }, "de_ScanOutput");
    var de_SecondaryIndexesCapacityMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_Capacity(value, context);
        return acc;
      }, {});
    }, "de_SecondaryIndexesCapacityMap");
    var de_SourceTableDetails = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        BillingMode: import_smithy_client25.expectString,
        ItemCount: import_smithy_client25.expectLong,
        KeySchema: import_smithy_client25._json,
        OnDemandThroughput: import_smithy_client25._json,
        ProvisionedThroughput: import_smithy_client25._json,
        TableArn: import_smithy_client25.expectString,
        TableCreationDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "TableCreationDateTime"),
        TableId: import_smithy_client25.expectString,
        TableName: import_smithy_client25.expectString,
        TableSizeBytes: import_smithy_client25.expectLong
      });
    }, "de_SourceTableDetails");
    var de_SourceTableFeatureDetails = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalSecondaryIndexes: import_smithy_client25._json,
        LocalSecondaryIndexes: import_smithy_client25._json,
        SSEDescription: /* @__PURE__ */ __name((_2) => de_SSEDescription(_2, context), "SSEDescription"),
        StreamDescription: import_smithy_client25._json,
        TimeToLiveDescription: import_smithy_client25._json
      });
    }, "de_SourceTableFeatureDetails");
    var de_SSEDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        InaccessibleEncryptionDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "InaccessibleEncryptionDateTime"),
        KMSMasterKeyArn: import_smithy_client25.expectString,
        SSEType: import_smithy_client25.expectString,
        Status: import_smithy_client25.expectString
      });
    }, "de_SSEDescription");
    var de_TableAutoScalingDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Replicas: /* @__PURE__ */ __name((_2) => de_ReplicaAutoScalingDescriptionList(_2, context), "Replicas"),
        TableName: import_smithy_client25.expectString,
        TableStatus: import_smithy_client25.expectString
      });
    }, "de_TableAutoScalingDescription");
    var de_TableClassSummary = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        LastUpdateDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "LastUpdateDateTime"),
        TableClass: import_smithy_client25.expectString
      });
    }, "de_TableClassSummary");
    var de_TableDescription = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ArchivalSummary: /* @__PURE__ */ __name((_2) => de_ArchivalSummary(_2, context), "ArchivalSummary"),
        AttributeDefinitions: import_smithy_client25._json,
        BillingModeSummary: /* @__PURE__ */ __name((_2) => de_BillingModeSummary(_2, context), "BillingModeSummary"),
        CreationDateTime: /* @__PURE__ */ __name((_2) => (0, import_smithy_client25.expectNonNull)((0, import_smithy_client25.parseEpochTimestamp)((0, import_smithy_client25.expectNumber)(_2))), "CreationDateTime"),
        DeletionProtectionEnabled: import_smithy_client25.expectBoolean,
        GlobalSecondaryIndexes: /* @__PURE__ */ __name((_2) => de_GlobalSecondaryIndexDescriptionList(_2, context), "GlobalSecondaryIndexes"),
        GlobalTableVersion: import_smithy_client25.expectString,
        ItemCount: import_smithy_client25.expectLong,
        KeySchema: import_smithy_client25._json,
        LatestStreamArn: import_smithy_client25.expectString,
        LatestStreamLabel: import_smithy_client25.expectString,
        LocalSecondaryIndexes: import_smithy_client25._json,
        MultiRegionConsistency: import_smithy_client25.expectString,
        OnDemandThroughput: import_smithy_client25._json,
        ProvisionedThroughput: /* @__PURE__ */ __name((_2) => de_ProvisionedThroughputDescription(_2, context), "ProvisionedThroughput"),
        Replicas: /* @__PURE__ */ __name((_2) => de_ReplicaDescriptionList(_2, context), "Replicas"),
        RestoreSummary: /* @__PURE__ */ __name((_2) => de_RestoreSummary(_2, context), "RestoreSummary"),
        SSEDescription: /* @__PURE__ */ __name((_2) => de_SSEDescription(_2, context), "SSEDescription"),
        StreamSpecification: import_smithy_client25._json,
        TableArn: import_smithy_client25.expectString,
        TableClassSummary: /* @__PURE__ */ __name((_2) => de_TableClassSummary(_2, context), "TableClassSummary"),
        TableId: import_smithy_client25.expectString,
        TableName: import_smithy_client25.expectString,
        TableSizeBytes: import_smithy_client25.expectLong,
        TableStatus: import_smithy_client25.expectString,
        WarmThroughput: import_smithy_client25._json
      });
    }, "de_TableDescription");
    var de_TransactGetItemsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacityMultiple(_2, context), "ConsumedCapacity"),
        Responses: /* @__PURE__ */ __name((_2) => de_ItemResponseList(_2, context), "Responses")
      });
    }, "de_TransactGetItemsOutput");
    var de_TransactionCanceledException = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        CancellationReasons: /* @__PURE__ */ __name((_2) => de_CancellationReasonList(_2, context), "CancellationReasons"),
        Message: import_smithy_client25.expectString
      });
    }, "de_TransactionCanceledException");
    var de_TransactWriteItemsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacityMultiple(_2, context), "ConsumedCapacity"),
        ItemCollectionMetrics: /* @__PURE__ */ __name((_2) => de_ItemCollectionMetricsPerTable(_2, context), "ItemCollectionMetrics")
      });
    }, "de_TransactWriteItemsOutput");
    var de_UpdateContinuousBackupsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        ContinuousBackupsDescription: /* @__PURE__ */ __name((_2) => de_ContinuousBackupsDescription(_2, context), "ContinuousBackupsDescription")
      });
    }, "de_UpdateContinuousBackupsOutput");
    var de_UpdateGlobalTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalTableDescription: /* @__PURE__ */ __name((_2) => de_GlobalTableDescription(_2, context), "GlobalTableDescription")
      });
    }, "de_UpdateGlobalTableOutput");
    var de_UpdateGlobalTableSettingsOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        GlobalTableName: import_smithy_client25.expectString,
        ReplicaSettings: /* @__PURE__ */ __name((_2) => de_ReplicaSettingsDescriptionList(_2, context), "ReplicaSettings")
      });
    }, "de_UpdateGlobalTableSettingsOutput");
    var de_UpdateItemOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        Attributes: /* @__PURE__ */ __name((_2) => de_AttributeMap(_2, context), "Attributes"),
        ConsumedCapacity: /* @__PURE__ */ __name((_2) => de_ConsumedCapacity(_2, context), "ConsumedCapacity"),
        ItemCollectionMetrics: /* @__PURE__ */ __name((_2) => de_ItemCollectionMetrics(_2, context), "ItemCollectionMetrics")
      });
    }, "de_UpdateItemOutput");
    var de_UpdateTableOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableDescription: /* @__PURE__ */ __name((_2) => de_TableDescription(_2, context), "TableDescription")
      });
    }, "de_UpdateTableOutput");
    var de_UpdateTableReplicaAutoScalingOutput = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        TableAutoScalingDescription: /* @__PURE__ */ __name((_2) => de_TableAutoScalingDescription(_2, context), "TableAutoScalingDescription")
      });
    }, "de_UpdateTableReplicaAutoScalingOutput");
    var de_WriteRequest = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client25.take)(output, {
        DeleteRequest: /* @__PURE__ */ __name((_2) => de_DeleteRequest(_2, context), "DeleteRequest"),
        PutRequest: /* @__PURE__ */ __name((_2) => de_PutRequest(_2, context), "PutRequest")
      });
    }, "de_WriteRequest");
    var de_WriteRequests = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e3) => e3 != null).map((entry) => {
        return de_WriteRequest(entry, context);
      });
      return retVal;
    }, "de_WriteRequests");
    var deserializeMetadata3 = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError3 = (0, import_smithy_client25.withBaseException)(DynamoDBServiceException);
    var buildHttpRpcRequest2 = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http11.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    function sharedHeaders(operation) {
      return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `DynamoDB_20120810.${operation}`
      };
    }
    __name(sharedHeaders, "sharedHeaders");
    var DescribeEndpointsCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeEndpoints", {}).n("DynamoDBClient", "DescribeEndpointsCommand").f(void 0, void 0).ser(se_DescribeEndpointsCommand).de(de_DescribeEndpointsCommand).build() {
      static {
        __name(this, "DescribeEndpointsCommand");
      }
    };
    var import_runtimeConfig5 = require_runtimeConfig2();
    var import_region_config_resolver3 = require_dist_cjs45();
    var getHttpAuthExtensionConfiguration3 = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig3 = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var resolveRuntimeExtensions3 = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(
        (0, import_region_config_resolver3.getAwsRegionExtensionConfiguration)(runtimeConfig),
        (0, import_smithy_client25.getDefaultExtensionConfiguration)(runtimeConfig),
        (0, import_protocol_http11.getHttpHandlerExtensionConfiguration)(runtimeConfig),
        getHttpAuthExtensionConfiguration3(runtimeConfig)
      );
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(
        runtimeConfig,
        (0, import_region_config_resolver3.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        (0, import_smithy_client25.resolveDefaultRuntimeConfig)(extensionConfiguration),
        (0, import_protocol_http11.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        resolveHttpAuthRuntimeConfig3(extensionConfiguration)
      );
    }, "resolveRuntimeExtensions");
    var DynamoDBClient2 = class extends import_smithy_client25.Client {
      static {
        __name(this, "DynamoDBClient");
      }
      /**
       * The resolved configuration of DynamoDBClient class. This is resolved and normalized from the {@link DynamoDBClientConfig | constructor configuration interface}.
       */
      config;
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig5.getRuntimeConfig)(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters3(_config_0);
        const _config_2 = (0, import_account_id_endpoint.resolveAccountIdEndpointModeConfig)(_config_1);
        const _config_3 = (0, import_middleware_user_agent3.resolveUserAgentConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry5.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_config_resolver5.resolveRegionConfig)(_config_4);
        const _config_6 = (0, import_middleware_host_header3.resolveHostHeaderConfig)(_config_5);
        const _config_7 = (0, import_middleware_endpoint6.resolveEndpointConfig)(_config_6);
        const _config_8 = (0, import_httpAuthSchemeProvider5.resolveHttpAuthSchemeConfig)(_config_7);
        const _config_9 = (0, import_middleware_endpoint_discovery.resolveEndpointDiscoveryConfig)(_config_8, {
          endpointDiscoveryCommandCtor: DescribeEndpointsCommand
        });
        const _config_10 = resolveRuntimeExtensions3(_config_9, configuration?.extensions || []);
        this.config = _config_10;
        this.middlewareStack.use((0, import_middleware_user_agent3.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry5.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length3.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header3.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger3.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection3.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core22.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider5.defaultDynamoDBHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core22.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials
            }), "identityProviderConfigProvider")
          })
        );
        this.middlewareStack.use((0, import_core22.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    var BatchExecuteStatementCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "BatchExecuteStatement", {}).n("DynamoDBClient", "BatchExecuteStatementCommand").f(void 0, void 0).ser(se_BatchExecuteStatementCommand).de(de_BatchExecuteStatementCommand).build() {
      static {
        __name(this, "BatchExecuteStatementCommand");
      }
    };
    var BatchGetItemCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArnList: { type: "operationContextParams", get: /* @__PURE__ */ __name((input) => Object.keys(input?.RequestItems ?? {}), "get") }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "BatchGetItem", {}).n("DynamoDBClient", "BatchGetItemCommand").f(void 0, void 0).ser(se_BatchGetItemCommand).de(de_BatchGetItemCommand).build() {
      static {
        __name(this, "BatchGetItemCommand");
      }
    };
    var BatchWriteItemCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArnList: { type: "operationContextParams", get: /* @__PURE__ */ __name((input) => Object.keys(input?.RequestItems ?? {}), "get") }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "BatchWriteItem", {}).n("DynamoDBClient", "BatchWriteItemCommand").f(void 0, void 0).ser(se_BatchWriteItemCommand).de(de_BatchWriteItemCommand).build() {
      static {
        __name(this, "BatchWriteItemCommand");
      }
    };
    var CreateBackupCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "CreateBackup", {}).n("DynamoDBClient", "CreateBackupCommand").f(void 0, void 0).ser(se_CreateBackupCommand).de(de_CreateBackupCommand).build() {
      static {
        __name(this, "CreateBackupCommand");
      }
    };
    var CreateGlobalTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "GlobalTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "CreateGlobalTable", {}).n("DynamoDBClient", "CreateGlobalTableCommand").f(void 0, void 0).ser(se_CreateGlobalTableCommand).de(de_CreateGlobalTableCommand).build() {
      static {
        __name(this, "CreateGlobalTableCommand");
      }
    };
    var CreateTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "CreateTable", {}).n("DynamoDBClient", "CreateTableCommand").f(void 0, void 0).ser(se_CreateTableCommand).de(de_CreateTableCommand).build() {
      static {
        __name(this, "CreateTableCommand");
      }
    };
    var DeleteBackupCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "BackupArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DeleteBackup", {}).n("DynamoDBClient", "DeleteBackupCommand").f(void 0, void 0).ser(se_DeleteBackupCommand).de(de_DeleteBackupCommand).build() {
      static {
        __name(this, "DeleteBackupCommand");
      }
    };
    var DeleteItemCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DeleteItem", {}).n("DynamoDBClient", "DeleteItemCommand").f(void 0, void 0).ser(se_DeleteItemCommand).de(de_DeleteItemCommand).build() {
      static {
        __name(this, "DeleteItemCommand");
      }
    };
    var DeleteResourcePolicyCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ResourceArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DeleteResourcePolicy", {}).n("DynamoDBClient", "DeleteResourcePolicyCommand").f(void 0, void 0).ser(se_DeleteResourcePolicyCommand).de(de_DeleteResourcePolicyCommand).build() {
      static {
        __name(this, "DeleteResourcePolicyCommand");
      }
    };
    var DeleteTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DeleteTable", {}).n("DynamoDBClient", "DeleteTableCommand").f(void 0, void 0).ser(se_DeleteTableCommand).de(de_DeleteTableCommand).build() {
      static {
        __name(this, "DeleteTableCommand");
      }
    };
    var DescribeBackupCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "BackupArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeBackup", {}).n("DynamoDBClient", "DescribeBackupCommand").f(void 0, void 0).ser(se_DescribeBackupCommand).de(de_DescribeBackupCommand).build() {
      static {
        __name(this, "DescribeBackupCommand");
      }
    };
    var DescribeContinuousBackupsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeContinuousBackups", {}).n("DynamoDBClient", "DescribeContinuousBackupsCommand").f(void 0, void 0).ser(se_DescribeContinuousBackupsCommand).de(de_DescribeContinuousBackupsCommand).build() {
      static {
        __name(this, "DescribeContinuousBackupsCommand");
      }
    };
    var DescribeContributorInsightsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeContributorInsights", {}).n("DynamoDBClient", "DescribeContributorInsightsCommand").f(void 0, void 0).ser(se_DescribeContributorInsightsCommand).de(de_DescribeContributorInsightsCommand).build() {
      static {
        __name(this, "DescribeContributorInsightsCommand");
      }
    };
    var DescribeExportCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ExportArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeExport", {}).n("DynamoDBClient", "DescribeExportCommand").f(void 0, void 0).ser(se_DescribeExportCommand).de(de_DescribeExportCommand).build() {
      static {
        __name(this, "DescribeExportCommand");
      }
    };
    var DescribeGlobalTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "GlobalTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeGlobalTable", {}).n("DynamoDBClient", "DescribeGlobalTableCommand").f(void 0, void 0).ser(se_DescribeGlobalTableCommand).de(de_DescribeGlobalTableCommand).build() {
      static {
        __name(this, "DescribeGlobalTableCommand");
      }
    };
    var DescribeGlobalTableSettingsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "GlobalTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeGlobalTableSettings", {}).n("DynamoDBClient", "DescribeGlobalTableSettingsCommand").f(void 0, void 0).ser(se_DescribeGlobalTableSettingsCommand).de(de_DescribeGlobalTableSettingsCommand).build() {
      static {
        __name(this, "DescribeGlobalTableSettingsCommand");
      }
    };
    var DescribeImportCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ImportArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeImport", {}).n("DynamoDBClient", "DescribeImportCommand").f(void 0, void 0).ser(se_DescribeImportCommand).de(de_DescribeImportCommand).build() {
      static {
        __name(this, "DescribeImportCommand");
      }
    };
    var DescribeKinesisStreamingDestinationCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeKinesisStreamingDestination", {}).n("DynamoDBClient", "DescribeKinesisStreamingDestinationCommand").f(void 0, void 0).ser(se_DescribeKinesisStreamingDestinationCommand).de(de_DescribeKinesisStreamingDestinationCommand).build() {
      static {
        __name(this, "DescribeKinesisStreamingDestinationCommand");
      }
    };
    var DescribeLimitsCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeLimits", {}).n("DynamoDBClient", "DescribeLimitsCommand").f(void 0, void 0).ser(se_DescribeLimitsCommand).de(de_DescribeLimitsCommand).build() {
      static {
        __name(this, "DescribeLimitsCommand");
      }
    };
    var DescribeTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeTable", {}).n("DynamoDBClient", "DescribeTableCommand").f(void 0, void 0).ser(se_DescribeTableCommand).de(de_DescribeTableCommand).build() {
      static {
        __name(this, "DescribeTableCommand");
      }
    };
    var DescribeTableReplicaAutoScalingCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeTableReplicaAutoScaling", {}).n("DynamoDBClient", "DescribeTableReplicaAutoScalingCommand").f(void 0, void 0).ser(se_DescribeTableReplicaAutoScalingCommand).de(de_DescribeTableReplicaAutoScalingCommand).build() {
      static {
        __name(this, "DescribeTableReplicaAutoScalingCommand");
      }
    };
    var DescribeTimeToLiveCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DescribeTimeToLive", {}).n("DynamoDBClient", "DescribeTimeToLiveCommand").f(void 0, void 0).ser(se_DescribeTimeToLiveCommand).de(de_DescribeTimeToLiveCommand).build() {
      static {
        __name(this, "DescribeTimeToLiveCommand");
      }
    };
    var DisableKinesisStreamingDestinationCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "DisableKinesisStreamingDestination", {}).n("DynamoDBClient", "DisableKinesisStreamingDestinationCommand").f(void 0, void 0).ser(se_DisableKinesisStreamingDestinationCommand).de(de_DisableKinesisStreamingDestinationCommand).build() {
      static {
        __name(this, "DisableKinesisStreamingDestinationCommand");
      }
    };
    var EnableKinesisStreamingDestinationCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "EnableKinesisStreamingDestination", {}).n("DynamoDBClient", "EnableKinesisStreamingDestinationCommand").f(void 0, void 0).ser(se_EnableKinesisStreamingDestinationCommand).de(de_EnableKinesisStreamingDestinationCommand).build() {
      static {
        __name(this, "EnableKinesisStreamingDestinationCommand");
      }
    };
    var ExecuteStatementCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ExecuteStatement", {}).n("DynamoDBClient", "ExecuteStatementCommand").f(void 0, void 0).ser(se_ExecuteStatementCommand).de(de_ExecuteStatementCommand).build() {
      static {
        __name(this, "ExecuteStatementCommand");
      }
    };
    var ExecuteTransactionCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ExecuteTransaction", {}).n("DynamoDBClient", "ExecuteTransactionCommand").f(void 0, void 0).ser(se_ExecuteTransactionCommand).de(de_ExecuteTransactionCommand).build() {
      static {
        __name(this, "ExecuteTransactionCommand");
      }
    };
    var ExportTableToPointInTimeCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ExportTableToPointInTime", {}).n("DynamoDBClient", "ExportTableToPointInTimeCommand").f(void 0, void 0).ser(se_ExportTableToPointInTimeCommand).de(de_ExportTableToPointInTimeCommand).build() {
      static {
        __name(this, "ExportTableToPointInTimeCommand");
      }
    };
    var GetItemCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "GetItem", {}).n("DynamoDBClient", "GetItemCommand").f(void 0, void 0).ser(se_GetItemCommand).de(de_GetItemCommand).build() {
      static {
        __name(this, "GetItemCommand");
      }
    };
    var GetResourcePolicyCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ResourceArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "GetResourcePolicy", {}).n("DynamoDBClient", "GetResourcePolicyCommand").f(void 0, void 0).ser(se_GetResourcePolicyCommand).de(de_GetResourcePolicyCommand).build() {
      static {
        __name(this, "GetResourcePolicyCommand");
      }
    };
    var ImportTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "operationContextParams", get: /* @__PURE__ */ __name((input) => input?.TableCreationParameters?.TableName, "get") }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ImportTable", {}).n("DynamoDBClient", "ImportTableCommand").f(void 0, void 0).ser(se_ImportTableCommand).de(de_ImportTableCommand).build() {
      static {
        __name(this, "ImportTableCommand");
      }
    };
    var ListBackupsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListBackups", {}).n("DynamoDBClient", "ListBackupsCommand").f(void 0, void 0).ser(se_ListBackupsCommand).de(de_ListBackupsCommand).build() {
      static {
        __name(this, "ListBackupsCommand");
      }
    };
    var ListContributorInsightsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListContributorInsights", {}).n("DynamoDBClient", "ListContributorInsightsCommand").f(void 0, void 0).ser(se_ListContributorInsightsCommand).de(de_ListContributorInsightsCommand).build() {
      static {
        __name(this, "ListContributorInsightsCommand");
      }
    };
    var ListExportsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListExports", {}).n("DynamoDBClient", "ListExportsCommand").f(void 0, void 0).ser(se_ListExportsCommand).de(de_ListExportsCommand).build() {
      static {
        __name(this, "ListExportsCommand");
      }
    };
    var ListGlobalTablesCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListGlobalTables", {}).n("DynamoDBClient", "ListGlobalTablesCommand").f(void 0, void 0).ser(se_ListGlobalTablesCommand).de(de_ListGlobalTablesCommand).build() {
      static {
        __name(this, "ListGlobalTablesCommand");
      }
    };
    var ListImportsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListImports", {}).n("DynamoDBClient", "ListImportsCommand").f(void 0, void 0).ser(se_ListImportsCommand).de(de_ListImportsCommand).build() {
      static {
        __name(this, "ListImportsCommand");
      }
    };
    var ListTablesCommand = class extends import_smithy_client25.Command.classBuilder().ep(commonParams3).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListTables", {}).n("DynamoDBClient", "ListTablesCommand").f(void 0, void 0).ser(se_ListTablesCommand).de(de_ListTablesCommand).build() {
      static {
        __name(this, "ListTablesCommand");
      }
    };
    var ListTagsOfResourceCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ResourceArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "ListTagsOfResource", {}).n("DynamoDBClient", "ListTagsOfResourceCommand").f(void 0, void 0).ser(se_ListTagsOfResourceCommand).de(de_ListTagsOfResourceCommand).build() {
      static {
        __name(this, "ListTagsOfResourceCommand");
      }
    };
    var PutItemCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "PutItem", {}).n("DynamoDBClient", "PutItemCommand").f(void 0, void 0).ser(se_PutItemCommand).de(de_PutItemCommand).build() {
      static {
        __name(this, "PutItemCommand");
      }
    };
    var PutResourcePolicyCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ResourceArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "PutResourcePolicy", {}).n("DynamoDBClient", "PutResourcePolicyCommand").f(void 0, void 0).ser(se_PutResourcePolicyCommand).de(de_PutResourcePolicyCommand).build() {
      static {
        __name(this, "PutResourcePolicyCommand");
      }
    };
    var QueryCommand2 = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "Query", {}).n("DynamoDBClient", "QueryCommand").f(void 0, void 0).ser(se_QueryCommand).de(de_QueryCommand).build() {
      static {
        __name(this, "QueryCommand");
      }
    };
    var RestoreTableFromBackupCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TargetTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "RestoreTableFromBackup", {}).n("DynamoDBClient", "RestoreTableFromBackupCommand").f(void 0, void 0).ser(se_RestoreTableFromBackupCommand).de(de_RestoreTableFromBackupCommand).build() {
      static {
        __name(this, "RestoreTableFromBackupCommand");
      }
    };
    var RestoreTableToPointInTimeCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TargetTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "RestoreTableToPointInTime", {}).n("DynamoDBClient", "RestoreTableToPointInTimeCommand").f(void 0, void 0).ser(se_RestoreTableToPointInTimeCommand).de(de_RestoreTableToPointInTimeCommand).build() {
      static {
        __name(this, "RestoreTableToPointInTimeCommand");
      }
    };
    var ScanCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "Scan", {}).n("DynamoDBClient", "ScanCommand").f(void 0, void 0).ser(se_ScanCommand).de(de_ScanCommand).build() {
      static {
        __name(this, "ScanCommand");
      }
    };
    var TagResourceCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ResourceArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "TagResource", {}).n("DynamoDBClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
      static {
        __name(this, "TagResourceCommand");
      }
    };
    var TransactGetItemsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArnList: {
        type: "operationContextParams",
        get: /* @__PURE__ */ __name((input) => input?.TransactItems?.map((obj) => obj?.Get?.TableName), "get")
      }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "TransactGetItems", {}).n("DynamoDBClient", "TransactGetItemsCommand").f(void 0, void 0).ser(se_TransactGetItemsCommand).de(de_TransactGetItemsCommand).build() {
      static {
        __name(this, "TransactGetItemsCommand");
      }
    };
    var TransactWriteItemsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArnList: {
        type: "operationContextParams",
        get: /* @__PURE__ */ __name((input) => input?.TransactItems?.map(
          (obj) => [obj?.ConditionCheck?.TableName, obj?.Put?.TableName, obj?.Delete?.TableName, obj?.Update?.TableName].filter(
            (i3) => i3
          )
        ).flat(), "get")
      }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "TransactWriteItems", {}).n("DynamoDBClient", "TransactWriteItemsCommand").f(void 0, void 0).ser(se_TransactWriteItemsCommand).de(de_TransactWriteItemsCommand).build() {
      static {
        __name(this, "TransactWriteItemsCommand");
      }
    };
    var UntagResourceCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "ResourceArn" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UntagResource", {}).n("DynamoDBClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
      static {
        __name(this, "UntagResourceCommand");
      }
    };
    var UpdateContinuousBackupsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateContinuousBackups", {}).n("DynamoDBClient", "UpdateContinuousBackupsCommand").f(void 0, void 0).ser(se_UpdateContinuousBackupsCommand).de(de_UpdateContinuousBackupsCommand).build() {
      static {
        __name(this, "UpdateContinuousBackupsCommand");
      }
    };
    var UpdateContributorInsightsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateContributorInsights", {}).n("DynamoDBClient", "UpdateContributorInsightsCommand").f(void 0, void 0).ser(se_UpdateContributorInsightsCommand).de(de_UpdateContributorInsightsCommand).build() {
      static {
        __name(this, "UpdateContributorInsightsCommand");
      }
    };
    var UpdateGlobalTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "GlobalTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateGlobalTable", {}).n("DynamoDBClient", "UpdateGlobalTableCommand").f(void 0, void 0).ser(se_UpdateGlobalTableCommand).de(de_UpdateGlobalTableCommand).build() {
      static {
        __name(this, "UpdateGlobalTableCommand");
      }
    };
    var UpdateGlobalTableSettingsCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "GlobalTableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateGlobalTableSettings", {}).n("DynamoDBClient", "UpdateGlobalTableSettingsCommand").f(void 0, void 0).ser(se_UpdateGlobalTableSettingsCommand).de(de_UpdateGlobalTableSettingsCommand).build() {
      static {
        __name(this, "UpdateGlobalTableSettingsCommand");
      }
    };
    var UpdateItemCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateItem", {}).n("DynamoDBClient", "UpdateItemCommand").f(void 0, void 0).ser(se_UpdateItemCommand).de(de_UpdateItemCommand).build() {
      static {
        __name(this, "UpdateItemCommand");
      }
    };
    var UpdateKinesisStreamingDestinationCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateKinesisStreamingDestination", {}).n("DynamoDBClient", "UpdateKinesisStreamingDestinationCommand").f(void 0, void 0).ser(se_UpdateKinesisStreamingDestinationCommand).de(de_UpdateKinesisStreamingDestinationCommand).build() {
      static {
        __name(this, "UpdateKinesisStreamingDestinationCommand");
      }
    };
    var UpdateTableCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateTable", {}).n("DynamoDBClient", "UpdateTableCommand").f(void 0, void 0).ser(se_UpdateTableCommand).de(de_UpdateTableCommand).build() {
      static {
        __name(this, "UpdateTableCommand");
      }
    };
    var UpdateTableReplicaAutoScalingCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateTableReplicaAutoScaling", {}).n("DynamoDBClient", "UpdateTableReplicaAutoScalingCommand").f(void 0, void 0).ser(se_UpdateTableReplicaAutoScalingCommand).de(de_UpdateTableReplicaAutoScalingCommand).build() {
      static {
        __name(this, "UpdateTableReplicaAutoScalingCommand");
      }
    };
    var UpdateTimeToLiveCommand = class extends import_smithy_client25.Command.classBuilder().ep({
      ...commonParams3,
      ResourceArn: { type: "contextParams", name: "TableName" }
    }).m(function(Command, cs, config, o3) {
      return [
        (0, import_middleware_serde5.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint6.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("DynamoDB_20120810", "UpdateTimeToLive", {}).n("DynamoDBClient", "UpdateTimeToLiveCommand").f(void 0, void 0).ser(se_UpdateTimeToLiveCommand).de(de_UpdateTimeToLiveCommand).build() {
      static {
        __name(this, "UpdateTimeToLiveCommand");
      }
    };
    var commands3 = {
      BatchExecuteStatementCommand,
      BatchGetItemCommand,
      BatchWriteItemCommand,
      CreateBackupCommand,
      CreateGlobalTableCommand,
      CreateTableCommand,
      DeleteBackupCommand,
      DeleteItemCommand,
      DeleteResourcePolicyCommand,
      DeleteTableCommand,
      DescribeBackupCommand,
      DescribeContinuousBackupsCommand,
      DescribeContributorInsightsCommand,
      DescribeEndpointsCommand,
      DescribeExportCommand,
      DescribeGlobalTableCommand,
      DescribeGlobalTableSettingsCommand,
      DescribeImportCommand,
      DescribeKinesisStreamingDestinationCommand,
      DescribeLimitsCommand,
      DescribeTableCommand,
      DescribeTableReplicaAutoScalingCommand,
      DescribeTimeToLiveCommand,
      DisableKinesisStreamingDestinationCommand,
      EnableKinesisStreamingDestinationCommand,
      ExecuteStatementCommand,
      ExecuteTransactionCommand,
      ExportTableToPointInTimeCommand,
      GetItemCommand,
      GetResourcePolicyCommand,
      ImportTableCommand,
      ListBackupsCommand,
      ListContributorInsightsCommand,
      ListExportsCommand,
      ListGlobalTablesCommand,
      ListImportsCommand,
      ListTablesCommand,
      ListTagsOfResourceCommand,
      PutItemCommand,
      PutResourcePolicyCommand,
      QueryCommand: QueryCommand2,
      RestoreTableFromBackupCommand,
      RestoreTableToPointInTimeCommand,
      ScanCommand,
      TagResourceCommand,
      TransactGetItemsCommand,
      TransactWriteItemsCommand,
      UntagResourceCommand,
      UpdateContinuousBackupsCommand,
      UpdateContributorInsightsCommand,
      UpdateGlobalTableCommand,
      UpdateGlobalTableSettingsCommand,
      UpdateItemCommand,
      UpdateKinesisStreamingDestinationCommand,
      UpdateTableCommand,
      UpdateTableReplicaAutoScalingCommand,
      UpdateTimeToLiveCommand
    };
    var DynamoDB = class extends DynamoDBClient2 {
      static {
        __name(this, "DynamoDB");
      }
    };
    (0, import_smithy_client25.createAggregatedClient)(commands3, DynamoDB);
    var import_core32 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListContributorInsights = (0, import_core32.createPaginator)(DynamoDBClient2, ListContributorInsightsCommand, "NextToken", "NextToken", "MaxResults");
    var import_core42 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListExports = (0, import_core42.createPaginator)(DynamoDBClient2, ListExportsCommand, "NextToken", "NextToken", "MaxResults");
    var import_core52 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListImports = (0, import_core52.createPaginator)(DynamoDBClient2, ListImportsCommand, "NextToken", "NextToken", "PageSize");
    var import_core62 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListTables = (0, import_core62.createPaginator)(DynamoDBClient2, ListTablesCommand, "ExclusiveStartTableName", "LastEvaluatedTableName", "Limit");
    var import_core72 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateQuery = (0, import_core72.createPaginator)(DynamoDBClient2, QueryCommand2, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");
    var import_core82 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateScan = (0, import_core82.createPaginator)(DynamoDBClient2, ScanCommand, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");
    var import_util_waiter = require_dist_cjs53();
    var checkState = /* @__PURE__ */ __name(async (client2, input) => {
      let reason;
      try {
        const result = await client2.send(new DescribeTableCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Table.TableStatus;
          }, "returnComparator");
          if (returnComparator() === "ACTIVE") {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e3) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForTableExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    }, "waitForTableExists");
    var waitUntilTableExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilTableExists");
    var checkState2 = /* @__PURE__ */ __name(async (client2, input) => {
      let reason;
      try {
        const result = await client2.send(new DescribeTableCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForTableNotExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    }, "waitForTableNotExists");
    var waitUntilTableNotExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilTableNotExists");
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      NumberValueImpl: () => NumberValue2,
      convertToAttr: () => convertToAttr,
      convertToNative: () => convertToNative,
      marshall: () => marshall,
      unmarshall: () => unmarshall
    });
    module2.exports = __toCommonJS2(index_exports);
    var NumberValue2 = class _NumberValue {
      static {
        __name(this, "NumberValue");
      }
      value;
      /**
       * This class does not validate that your string input is a valid number.
       *
       * @param value - a precise number, or any BigInt or string, or AttributeValue.
       */
      constructor(value) {
        if (typeof value === "object" && "N" in value) {
          this.value = String(value.N);
        } else {
          this.value = String(value);
        }
        const valueOf = typeof value.valueOf() === "number" ? value.valueOf() : 0;
        const imprecise = valueOf > Number.MAX_SAFE_INTEGER || valueOf < Number.MIN_SAFE_INTEGER || Math.abs(valueOf) === Infinity || Number.isNaN(valueOf);
        if (imprecise) {
          throw new Error(
            `NumberValue should not be initialized with an imprecise number=${valueOf}. Use a string instead.`
          );
        }
      }
      /**
       * This class does not validate that your string input is a valid number.
       *
       * @param value - a precise number, or any BigInt or string, or AttributeValue.
       */
      static from(value) {
        return new _NumberValue(value);
      }
      /**
       * @returns the AttributeValue form for DynamoDB.
       */
      toAttributeValue() {
        return {
          N: this.toString()
        };
      }
      /**
       * @returns BigInt representation.
       *
       * @throws SyntaxError if the string representation is not convertable to a BigInt.
       */
      toBigInt() {
        const stringValue = this.toString();
        return BigInt(stringValue);
      }
      /**
       * @override
       *
       * @returns string representation. This is the canonical format in DynamoDB.
       */
      toString() {
        return String(this.value);
      }
      /**
       * @override
       */
      valueOf() {
        return this.toString();
      }
    };
    var convertToAttr = /* @__PURE__ */ __name((data, options) => {
      if (data === void 0) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      } else if (data === null && typeof data === "object") {
        return convertToNullAttr();
      } else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
      } else if (data?.constructor?.name === "Set") {
        return convertToSetAttr(data, options);
      } else if (data?.constructor?.name === "Map") {
        return convertToMapAttrFromIterable(data, options);
      } else if (data?.constructor?.name === "Object" || // for object which is result of Object.create(null), which doesn't have constructor defined
      !data.constructor && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
      } else if (isBinary(data)) {
        if (data.length === 0 && options?.convertEmptyValues) {
          return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
      } else if (typeof data === "boolean" || data?.constructor?.name === "Boolean") {
        return { BOOL: data.valueOf() };
      } else if (typeof data === "number" || data?.constructor?.name === "Number") {
        return convertToNumberAttr(data, options);
      } else if (data instanceof NumberValue2) {
        return data.toAttributeValue();
      } else if (typeof data === "bigint") {
        return convertToBigIntAttr(data);
      } else if (typeof data === "string" || data?.constructor?.name === "String") {
        if (data.length === 0 && options?.convertEmptyValues) {
          return convertToNullAttr();
        }
        return convertToStringAttr(data);
      } else if (options?.convertClassInstanceToMap && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
      }
      throw new Error(
        `Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`
      );
    }, "convertToAttr");
    var convertToListAttr = /* @__PURE__ */ __name((data, options) => ({
      L: data.filter(
        (item) => typeof item !== "function" && (!options?.removeUndefinedValues || options?.removeUndefinedValues && item !== void 0)
      ).map((item) => convertToAttr(item, options))
    }), "convertToListAttr");
    var convertToSetAttr = /* @__PURE__ */ __name((set, options) => {
      const setToOperate = options?.removeUndefinedValues ? new Set([...set].filter((value) => value !== void 0)) : set;
      if (!options?.removeUndefinedValues && setToOperate.has(void 0)) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      }
      if (setToOperate.size === 0) {
        if (options?.convertEmptyValues) {
          return convertToNullAttr();
        }
        throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);
      }
      const item = setToOperate.values().next().value;
      if (item instanceof NumberValue2) {
        return {
          NS: Array.from(setToOperate).map((_2) => _2.toString())
        };
      } else if (typeof item === "number") {
        return {
          NS: Array.from(setToOperate).map((num) => convertToNumberAttr(num, options)).map((item2) => item2.N)
        };
      } else if (typeof item === "bigint") {
        return {
          NS: Array.from(setToOperate).map(convertToBigIntAttr).map((item2) => item2.N)
        };
      } else if (typeof item === "string") {
        return {
          SS: Array.from(setToOperate).map(convertToStringAttr).map((item2) => item2.S)
        };
      } else if (isBinary(item)) {
        return {
          // Do not alter binary data passed https://github.com/aws/aws-sdk-js-v3/issues/1530
          // @ts-expect-error Type 'ArrayBuffer' is not assignable to type 'Uint8Array'
          BS: Array.from(setToOperate).map(convertToBinaryAttr).map((item2) => item2.B)
        };
      } else {
        throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);
      }
    }, "convertToSetAttr");
    var convertToMapAttrFromIterable = /* @__PURE__ */ __name((data, options) => ({
      M: ((data2) => {
        const map2 = {};
        for (const [key, value] of data2) {
          if (typeof value !== "function" && (value !== void 0 || !options?.removeUndefinedValues)) {
            map2[key] = convertToAttr(value, options);
          }
        }
        return map2;
      })(data)
    }), "convertToMapAttrFromIterable");
    var convertToMapAttrFromEnumerableProps = /* @__PURE__ */ __name((data, options) => ({
      M: ((data2) => {
        const map2 = {};
        for (const key in data2) {
          const value = data2[key];
          if (typeof value !== "function" && (value !== void 0 || !options?.removeUndefinedValues)) {
            map2[key] = convertToAttr(value, options);
          }
        }
        return map2;
      })(data)
    }), "convertToMapAttrFromEnumerableProps");
    var convertToNullAttr = /* @__PURE__ */ __name(() => ({ NULL: true }), "convertToNullAttr");
    var convertToBinaryAttr = /* @__PURE__ */ __name((data) => ({ B: data }), "convertToBinaryAttr");
    var convertToStringAttr = /* @__PURE__ */ __name((data) => ({ S: data.toString() }), "convertToStringAttr");
    var convertToBigIntAttr = /* @__PURE__ */ __name((data) => ({ N: data.toString() }), "convertToBigIntAttr");
    var validateBigIntAndThrow = /* @__PURE__ */ __name((errorPrefix) => {
      throw new Error(`${errorPrefix} Use NumberValue from @aws-sdk/lib-dynamodb.`);
    }, "validateBigIntAndThrow");
    var convertToNumberAttr = /* @__PURE__ */ __name((num, options) => {
      if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].map((val2) => val2.toString()).includes(num.toString())) {
        throw new Error(`Special numeric value ${num.toString()} is not allowed`);
      } else if (!options?.allowImpreciseNumbers) {
        if (Number(num) > Number.MAX_SAFE_INTEGER) {
          validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);
        } else if (Number(num) < Number.MIN_SAFE_INTEGER) {
          validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);
        }
      }
      return { N: num.toString() };
    }, "convertToNumberAttr");
    var isBinary = /* @__PURE__ */ __name((data) => {
      const binaryTypes = [
        "ArrayBuffer",
        "Blob",
        "Buffer",
        "DataView",
        "File",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
      if (data?.constructor) {
        return binaryTypes.includes(data.constructor.name);
      }
      return false;
    }, "isBinary");
    var convertToNative = /* @__PURE__ */ __name((data, options) => {
      for (const [key, value] of Object.entries(data)) {
        if (value !== void 0) {
          switch (key) {
            case "NULL":
              return null;
            case "BOOL":
              return Boolean(value);
            case "N":
              return convertNumber(value, options);
            case "B":
              return convertBinary(value);
            case "S":
              return convertString(value);
            case "L":
              return convertList(value, options);
            case "M":
              return convertMap(value, options);
            case "NS":
              return new Set(value.map((item) => convertNumber(item, options)));
            case "BS":
              return new Set(value.map(convertBinary));
            case "SS":
              return new Set(value.map(convertString));
            default:
              throw new Error(`Unsupported type passed: ${key}`);
          }
        }
      }
      throw new Error(`No value defined: ${JSON.stringify(data)}`);
    }, "convertToNative");
    var convertNumber = /* @__PURE__ */ __name((numString, options) => {
      if (typeof options?.wrapNumbers === "function") {
        return options?.wrapNumbers(numString);
      }
      if (options?.wrapNumbers) {
        return NumberValue2.from(numString);
      }
      const num = Number(numString);
      const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
      const isLargeFiniteNumber = (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num);
      if (isLargeFiniteNumber) {
        if (typeof BigInt === "function") {
          try {
            return BigInt(numString);
          } catch (error) {
            throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);
          }
        } else {
          throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);
        }
      }
      return num;
    }, "convertNumber");
    var convertString = /* @__PURE__ */ __name((stringValue) => stringValue, "convertString");
    var convertBinary = /* @__PURE__ */ __name((binaryValue) => binaryValue, "convertBinary");
    var convertList = /* @__PURE__ */ __name((list, options) => list.map((item) => convertToNative(item, options)), "convertList");
    var convertMap = /* @__PURE__ */ __name((map2, options) => Object.entries(map2).reduce(
      (acc, [key, value]) => (acc[key] = convertToNative(value, options), acc),
      {}
    ), "convertMap");
    function marshall(data, options) {
      const attributeValue = convertToAttr(data, options);
      const [key, value] = Object.entries(attributeValue)[0];
      switch (key) {
        case "M":
        case "L":
          return options?.convertTopLevelContainer ? attributeValue : value;
        case "SS":
        case "NS":
        case "BS":
        case "S":
        case "N":
        case "B":
        case "NULL":
        case "BOOL":
        case "$unknown":
        default:
          return attributeValue;
      }
    }
    __name(marshall, "marshall");
    var unmarshall = /* @__PURE__ */ __name((data, options) => {
      if (options?.convertWithoutMapWrapper) {
        return convertToNative(data, options);
      }
      return convertToNative({ M: data }, options);
    }, "unmarshall");
  }
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  "node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      BatchExecuteStatementCommand: () => BatchExecuteStatementCommand,
      BatchGetCommand: () => BatchGetCommand,
      BatchWriteCommand: () => BatchWriteCommand,
      DeleteCommand: () => DeleteCommand2,
      DynamoDBDocument: () => DynamoDBDocument,
      DynamoDBDocumentClient: () => DynamoDBDocumentClient2,
      DynamoDBDocumentClientCommand: () => DynamoDBDocumentClientCommand,
      ExecuteStatementCommand: () => ExecuteStatementCommand,
      ExecuteTransactionCommand: () => ExecuteTransactionCommand,
      GetCommand: () => GetCommand2,
      NativeAttributeBinary: () => import_util_dynamodb.NativeAttributeBinary,
      NativeAttributeValue: () => import_util_dynamodb.NativeAttributeValue,
      NativeScalarAttributeValue: () => import_util_dynamodb.NativeScalarAttributeValue,
      NumberValue: () => import_util_dynamodb.NumberValueImpl,
      PaginationConfiguration: () => import_types5.PaginationConfiguration,
      PutCommand: () => PutCommand2,
      QueryCommand: () => QueryCommand2,
      ScanCommand: () => ScanCommand,
      TransactGetCommand: () => TransactGetCommand,
      TransactWriteCommand: () => TransactWriteCommand,
      UpdateCommand: () => UpdateCommand2,
      __Client: () => import_smithy_client25.Client,
      marshallOptions: () => import_util_dynamodb.marshallOptions,
      paginateQuery: () => paginateQuery,
      paginateScan: () => paginateScan,
      unmarshallOptions: () => import_util_dynamodb.unmarshallOptions
    });
    module2.exports = __toCommonJS2(index_exports);
    var import_client_dynamodb2 = require_dist_cjs54();
    var import_core17 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_smithy_client25 = require_dist_cjs25();
    var import_util_dynamodb = require_dist_cjs55();
    var SELF = null;
    var ALL_VALUES = {};
    var ALL_MEMBERS = [];
    var NEXT_LEVEL = "*";
    var processObj = /* @__PURE__ */ __name((obj, processFunc, keyNodes) => {
      if (obj !== void 0) {
        if (keyNodes == null) {
          return processFunc(obj);
        } else {
          const keys = Object.keys(keyNodes);
          const goToNextLevel = keys.length === 1 && keys[0] === NEXT_LEVEL;
          const someChildren = keys.length >= 1 && !goToNextLevel;
          const allChildren = keys.length === 0;
          if (someChildren) {
            return processKeysInObj(obj, processFunc, keyNodes);
          } else if (allChildren) {
            return processAllKeysInObj(obj, processFunc, SELF);
          } else if (goToNextLevel) {
            return Object.entries(obj ?? {}).reduce((acc, [k3, v6]) => {
              if (typeof v6 !== "function") {
                acc[k3] = processObj(v6, processFunc, keyNodes[NEXT_LEVEL]);
              }
              return acc;
            }, Array.isArray(obj) ? [] : {});
          }
        }
      }
      return void 0;
    }, "processObj");
    var processKeysInObj = /* @__PURE__ */ __name((obj, processFunc, keyNodes) => {
      let accumulator;
      if (Array.isArray(obj)) {
        accumulator = obj.filter((item) => typeof item !== "function");
      } else {
        accumulator = {};
        for (const [k3, v6] of Object.entries(obj)) {
          if (typeof v6 !== "function") {
            accumulator[k3] = v6;
          }
        }
      }
      for (const [nodeKey, nodes] of Object.entries(keyNodes)) {
        if (typeof obj[nodeKey] === "function") {
          continue;
        }
        const processedValue = processObj(obj[nodeKey], processFunc, nodes);
        if (processedValue !== void 0 && typeof processedValue !== "function") {
          accumulator[nodeKey] = processedValue;
        }
      }
      return accumulator;
    }, "processKeysInObj");
    var processAllKeysInObj = /* @__PURE__ */ __name((obj, processFunc, keyNodes) => {
      if (Array.isArray(obj)) {
        return obj.filter((item) => typeof item !== "function").map((item) => processObj(item, processFunc, keyNodes));
      }
      return Object.entries(obj).reduce((acc, [key, value]) => {
        if (typeof value === "function") {
          return acc;
        }
        const processedValue = processObj(value, processFunc, keyNodes);
        if (processedValue !== void 0 && typeof processedValue !== "function") {
          acc[key] = processedValue;
        }
        return acc;
      }, {});
    }, "processAllKeysInObj");
    var marshallInput = /* @__PURE__ */ __name((obj, keyNodes, options) => {
      const marshallFunc = /* @__PURE__ */ __name((toMarshall) => (0, import_util_dynamodb.marshall)(toMarshall, options), "marshallFunc");
      return processKeysInObj(obj, marshallFunc, keyNodes);
    }, "marshallInput");
    var unmarshallOutput = /* @__PURE__ */ __name((obj, keyNodes, options) => {
      const unmarshallFunc = /* @__PURE__ */ __name((toMarshall) => (0, import_util_dynamodb.unmarshall)(toMarshall, options), "unmarshallFunc");
      return processKeysInObj(obj, unmarshallFunc, keyNodes);
    }, "unmarshallOutput");
    var DynamoDBDocumentClientCommand = class extends import_smithy_client25.Command {
      static {
        __name(this, "DynamoDBDocumentClientCommand");
      }
      addMarshallingMiddleware(configuration) {
        const { marshallOptions: marshallOptions3 = {}, unmarshallOptions: unmarshallOptions3 = {} } = configuration.translateConfig || {};
        marshallOptions3.convertTopLevelContainer = marshallOptions3.convertTopLevelContainer ?? true;
        unmarshallOptions3.convertWithoutMapWrapper = unmarshallOptions3.convertWithoutMapWrapper ?? true;
        this.clientCommand.middlewareStack.addRelativeTo(
          (next, context) => async (args) => {
            (0, import_core17.setFeature)(context, "DDB_MAPPER", "d");
            args.input = marshallInput(args.input, this.inputKeyNodes, marshallOptions3);
            return next(args);
          },
          {
            name: "DocumentMarshall",
            relation: "before",
            toMiddleware: "serializerMiddleware",
            override: true
          }
        );
        this.clientCommand.middlewareStack.addRelativeTo(
          (next, context) => async (args) => {
            const deserialized = await next(args);
            deserialized.output = unmarshallOutput(deserialized.output, this.outputKeyNodes, unmarshallOptions3);
            return deserialized;
          },
          {
            name: "DocumentUnmarshall",
            relation: "before",
            toMiddleware: "deserializerMiddleware",
            override: true
          }
        );
      }
    };
    var BatchExecuteStatementCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.BatchExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "BatchExecuteStatementCommand");
      }
      inputKeyNodes = {
        Statements: {
          "*": {
            Parameters: ALL_MEMBERS
            // set/list of AttributeValue
          }
        }
      };
      outputKeyNodes = {
        Responses: {
          "*": {
            Error: {
              Item: ALL_VALUES
              // map with AttributeValue
            },
            Item: ALL_VALUES
            // map with AttributeValue
          }
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var BatchGetCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.BatchGetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "BatchGetCommand");
      }
      inputKeyNodes = {
        RequestItems: {
          "*": {
            Keys: {
              "*": ALL_VALUES
              // map with AttributeValue
            }
          }
        }
      };
      outputKeyNodes = {
        Responses: {
          "*": {
            "*": ALL_VALUES
            // map with AttributeValue
          }
        },
        UnprocessedKeys: {
          "*": {
            Keys: {
              "*": ALL_VALUES
              // map with AttributeValue
            }
          }
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var BatchWriteCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.BatchWriteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "BatchWriteCommand");
      }
      inputKeyNodes = {
        RequestItems: {
          "*": {
            "*": {
              PutRequest: {
                Item: ALL_VALUES
                // map with AttributeValue
              },
              DeleteRequest: {
                Key: ALL_VALUES
                // map with AttributeValue
              }
            }
          }
        }
      };
      outputKeyNodes = {
        UnprocessedItems: {
          "*": {
            "*": {
              PutRequest: {
                Item: ALL_VALUES
                // map with AttributeValue
              },
              DeleteRequest: {
                Key: ALL_VALUES
                // map with AttributeValue
              }
            }
          }
        },
        ItemCollectionMetrics: {
          "*": {
            "*": {
              ItemCollectionKey: ALL_VALUES
              // map with AttributeValue
            }
          }
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var DeleteCommand2 = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.DeleteItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "DeleteCommand");
      }
      inputKeyNodes = {
        Key: ALL_VALUES,
        // map with AttributeValue
        Expected: {
          "*": {
            Value: SELF,
            AttributeValueList: ALL_MEMBERS
            // set/list of AttributeValue
          }
        },
        ExpressionAttributeValues: ALL_VALUES
        // map with AttributeValue
      };
      outputKeyNodes = {
        Attributes: ALL_VALUES,
        // map with AttributeValue
        ItemCollectionMetrics: {
          ItemCollectionKey: ALL_VALUES
          // map with AttributeValue
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var ExecuteStatementCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.ExecuteStatementCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "ExecuteStatementCommand");
      }
      inputKeyNodes = {
        Parameters: ALL_MEMBERS
        // set/list of AttributeValue
      };
      outputKeyNodes = {
        Items: {
          "*": ALL_VALUES
          // map with AttributeValue
        },
        LastEvaluatedKey: ALL_VALUES
        // map with AttributeValue
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var ExecuteTransactionCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.ExecuteTransactionCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "ExecuteTransactionCommand");
      }
      inputKeyNodes = {
        TransactStatements: {
          "*": {
            Parameters: ALL_MEMBERS
            // set/list of AttributeValue
          }
        }
      };
      outputKeyNodes = {
        Responses: {
          "*": {
            Item: ALL_VALUES
            // map with AttributeValue
          }
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var GetCommand2 = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.GetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "GetCommand");
      }
      inputKeyNodes = {
        Key: ALL_VALUES
        // map with AttributeValue
      };
      outputKeyNodes = {
        Item: ALL_VALUES
        // map with AttributeValue
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var PutCommand2 = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.PutItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "PutCommand");
      }
      inputKeyNodes = {
        Item: ALL_VALUES,
        // map with AttributeValue
        Expected: {
          "*": {
            Value: SELF,
            AttributeValueList: ALL_MEMBERS
            // set/list of AttributeValue
          }
        },
        ExpressionAttributeValues: ALL_VALUES
        // map with AttributeValue
      };
      outputKeyNodes = {
        Attributes: ALL_VALUES,
        // map with AttributeValue
        ItemCollectionMetrics: {
          ItemCollectionKey: ALL_VALUES
          // map with AttributeValue
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var QueryCommand2 = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.QueryCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "QueryCommand");
      }
      inputKeyNodes = {
        KeyConditions: {
          "*": {
            AttributeValueList: ALL_MEMBERS
            // set/list of AttributeValue
          }
        },
        QueryFilter: {
          "*": {
            AttributeValueList: ALL_MEMBERS
            // set/list of AttributeValue
          }
        },
        ExclusiveStartKey: ALL_VALUES,
        // map with AttributeValue
        ExpressionAttributeValues: ALL_VALUES
        // map with AttributeValue
      };
      outputKeyNodes = {
        Items: {
          "*": ALL_VALUES
          // map with AttributeValue
        },
        LastEvaluatedKey: ALL_VALUES
        // map with AttributeValue
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var ScanCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.ScanCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "ScanCommand");
      }
      inputKeyNodes = {
        ScanFilter: {
          "*": {
            AttributeValueList: ALL_MEMBERS
            // set/list of AttributeValue
          }
        },
        ExclusiveStartKey: ALL_VALUES,
        // map with AttributeValue
        ExpressionAttributeValues: ALL_VALUES
        // map with AttributeValue
      };
      outputKeyNodes = {
        Items: {
          "*": ALL_VALUES
          // map with AttributeValue
        },
        LastEvaluatedKey: ALL_VALUES
        // map with AttributeValue
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var TransactGetCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.TransactGetItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "TransactGetCommand");
      }
      inputKeyNodes = {
        TransactItems: {
          "*": {
            Get: {
              Key: ALL_VALUES
              // map with AttributeValue
            }
          }
        }
      };
      outputKeyNodes = {
        Responses: {
          "*": {
            Item: ALL_VALUES
            // map with AttributeValue
          }
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var TransactWriteCommand = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.TransactWriteItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "TransactWriteCommand");
      }
      inputKeyNodes = {
        TransactItems: {
          "*": {
            ConditionCheck: {
              Key: ALL_VALUES,
              // map with AttributeValue
              ExpressionAttributeValues: ALL_VALUES
              // map with AttributeValue
            },
            Put: {
              Item: ALL_VALUES,
              // map with AttributeValue
              ExpressionAttributeValues: ALL_VALUES
              // map with AttributeValue
            },
            Delete: {
              Key: ALL_VALUES,
              // map with AttributeValue
              ExpressionAttributeValues: ALL_VALUES
              // map with AttributeValue
            },
            Update: {
              Key: ALL_VALUES,
              // map with AttributeValue
              ExpressionAttributeValues: ALL_VALUES
              // map with AttributeValue
            }
          }
        }
      };
      outputKeyNodes = {
        ItemCollectionMetrics: {
          "*": {
            "*": {
              ItemCollectionKey: ALL_VALUES
              // map with AttributeValue
            }
          }
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var UpdateCommand2 = class extends DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.clientCommand = new import_client_dynamodb2.UpdateItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      static {
        __name(this, "UpdateCommand");
      }
      inputKeyNodes = {
        Key: ALL_VALUES,
        // map with AttributeValue
        AttributeUpdates: {
          "*": {
            Value: SELF
          }
        },
        Expected: {
          "*": {
            Value: SELF,
            AttributeValueList: ALL_MEMBERS
            // set/list of AttributeValue
          }
        },
        ExpressionAttributeValues: ALL_VALUES
        // map with AttributeValue
      };
      outputKeyNodes = {
        Attributes: ALL_VALUES,
        // map with AttributeValue
        ItemCollectionMetrics: {
          ItemCollectionKey: ALL_VALUES
          // map with AttributeValue
        }
      };
      clientCommand;
      middlewareStack;
      /**
       * @internal
       */
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler2(this.clientCommand);
      }
    };
    var DynamoDBDocumentClient2 = class _DynamoDBDocumentClient extends import_smithy_client25.Client {
      static {
        __name(this, "DynamoDBDocumentClient");
      }
      config;
      constructor(client2, translateConfig) {
        super(client2.config);
        this.config = client2.config;
        this.config.translateConfig = translateConfig;
        this.middlewareStack = client2.middlewareStack;
        if (this.config?.cacheMiddleware) {
          throw new Error(
            "@aws-sdk/lib-dynamodb - cacheMiddleware=true is not compatible with the DynamoDBDocumentClient. This option must be set to false."
          );
        }
      }
      static from(client2, translateConfig) {
        return new _DynamoDBDocumentClient(client2, translateConfig);
      }
      destroy() {
      }
    };
    var DynamoDBDocument = class _DynamoDBDocument extends DynamoDBDocumentClient2 {
      static {
        __name(this, "DynamoDBDocument");
      }
      static from(client2, translateConfig) {
        return new _DynamoDBDocument(client2, translateConfig);
      }
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGet(args, optionsOrCb, cb) {
        const command = new BatchGetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWrite(args, optionsOrCb, cb) {
        const command = new BatchWriteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      delete(args, optionsOrCb, cb) {
        const command = new DeleteCommand2(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      get(args, optionsOrCb, cb) {
        const command = new GetCommand2(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      put(args, optionsOrCb, cb) {
        const command = new PutCommand2(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand2(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGet(args, optionsOrCb, cb) {
        const command = new TransactGetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWrite(args, optionsOrCb, cb) {
        const command = new TransactWriteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      update(args, optionsOrCb, cb) {
        const command = new UpdateCommand2(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") {
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          }
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    var import_types5 = require_dist_cjs();
    var import_core22 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateQuery = (0, import_core22.createPaginator)(DynamoDBDocumentClient2, QueryCommand2, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");
    var import_core32 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateScan = (0, import_core32.createPaginator)(DynamoDBDocumentClient2, ScanCommand, "ExclusiveStartKey", "LastEvaluatedKey", "Limit");
  }
});

// src/handlers/summary.ts
var summary_exports = {};
__export(summary_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(summary_exports);

// src/lib/dynamo.ts
var import_client_dynamodb = __toESM(require_dist_cjs54());
var import_lib_dynamodb = __toESM(require_dist_cjs56());
var IS_OFFLINE = process.env.IS_OFFLINE === "true";
var DYNAMODB_ENDPOINT = process.env.DYNAMODB_ENDPOINT || "http://localhost:8000";
console.log(`[DynamoDB Lib] Initializing DynamoDB Client. IS_OFFLINE=${IS_OFFLINE}, Endpoint=${IS_OFFLINE ? DYNAMODB_ENDPOINT : "AWS Default"}`);
var clientConfig = IS_OFFLINE ? {
  // Configuration for DynamoDB Local
  endpoint: DYNAMODB_ENDPOINT,
  region: "localhost",
  // Use a placeholder region for local
  credentials: {
    accessKeyId: "dummyKeyId",
    // Value doesn't matter for local
    secretAccessKey: "dummySecretKey"
    // Value doesn't matter for local
  }
} : {
  // Configuration for deployed environment (uses default SDK credential chain)
  // region: process.env.AWS_REGION // Optionally set region from env
};
var client = new import_client_dynamodb.DynamoDBClient(clientConfig);
var ddb = import_lib_dynamodb.DynamoDBDocumentClient.from(client);
async function queryRolesByParent(parentId) {
  const tableName = process.env.ROLES_TABLE;
  if (!tableName) throw new Error("ROLES_TABLE environment variable is not set.");
  const TOP_LEVEL_PARENT_ID = "ROOT";
  const effectiveParentId = parentId === null ? TOP_LEVEL_PARENT_ID : parentId;
  const command = new import_lib_dynamodb.QueryCommand({
    TableName: tableName,
    IndexName: "ParentIndex",
    // Assumes GSI is named 'ParentIndex'
    KeyConditionExpression: "parentId = :pid",
    ExpressionAttributeValues: {
      ":pid": effectiveParentId
    }
  });
  console.log(`[queryRolesByParent] Querying roles with parentId: ${effectiveParentId} on index ParentIndex`);
  try {
    const res = await ddb.send(command);
    return res.Items ?? [];
  } catch (error) {
    console.error(`[queryRolesByParent] Error querying roles for parent ${effectiveParentId}:`, error);
    throw error;
  }
}

// node_modules/jwt-decode/build/esm/index.js
var InvalidTokenError = class extends Error {
};
InvalidTokenError.prototype.name = "InvalidTokenError";
function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).replace(/(.)/g, (m3, p3) => {
    let code = p3.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = "0" + code;
    }
    return "%" + code;
  }));
}
function base64UrlDecode(str) {
  let output = str.replace(/-/g, "+").replace(/_/g, "/");
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw new Error("base64 string is not of the correct length");
  }
  try {
    return b64DecodeUnicode(output);
  } catch (err2) {
    return atob(output);
  }
}
function jwtDecode(token, options) {
  if (typeof token !== "string") {
    throw new InvalidTokenError("Invalid token specified: must be a string");
  }
  options || (options = {});
  const pos = options.header === true ? 0 : 1;
  const part = token.split(".")[pos];
  if (typeof part !== "string") {
    throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
  }
  let decoded;
  try {
    decoded = base64UrlDecode(part);
  } catch (e3) {
    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e3.message})`);
  }
  try {
    return JSON.parse(decoded);
  } catch (e3) {
    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e3.message})`);
  }
}

// src/lib/authUtils.ts
var IS_OFFLINE2 = process.env.IS_OFFLINE === "true";
function getCallerDetails(event) {
  let email = void 0;
  let roles = [];
  let isRootAdmin = false;
  let isAuthenticated = false;
  let error = void 0;
  if (IS_OFFLINE2) {
    const authHeader = event.headers?.Authorization || event.headers?.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.warn("[AuthUtils - Local] Missing or invalid Authorization header.");
      error = "Missing or invalid Authorization header";
    } else {
      const dummyToken = authHeader.split(" ")[1];
      try {
        const decoded = jwtDecode(dummyToken);
        email = decoded.email || decoded.sub;
        isRootAdmin = decoded["custom:isRootAdmin"] === "true";
        try {
          const rolesClaim = decoded["custom:roles"];
          if (rolesClaim) {
            const parsedRoles = JSON.parse(rolesClaim);
            if (Array.isArray(parsedRoles)) {
              roles = parsedRoles.filter((r3) => typeof r3 === "string");
            } else {
              console.warn("[AuthUtils - Local] 'custom:roles' claim is not a valid JSON array:", rolesClaim);
            }
          }
        } catch (parseError) {
          console.error("[AuthUtils - Local] Error parsing custom:roles from dummy token:", parseError);
        }
        isAuthenticated = true;
        console.log(`[AuthUtils - Local] Decoded User: ${email}, IsRoot: ${isRootAdmin}, Roles: ${JSON.stringify(roles)}`);
      } catch (decodeError) {
        console.error("[AuthUtils - Local] Error decoding dummy token:", decodeError);
        error = "Invalid dummy token format";
      }
    }
  } else {
    const claims = event.requestContext.authorizer?.claims;
    if (!claims) {
      console.error("[AuthUtils - Prod] Claims missing from authorizer context!");
      error = "Unauthorized: Missing claims";
    } else {
      email = claims.email || claims.sub;
      isRootAdmin = claims["custom:isRootAdmin"] === "true";
      try {
        const rolesClaim = claims["custom:roles"];
        if (rolesClaim) {
          const parsedRoles = JSON.parse(rolesClaim);
          if (Array.isArray(parsedRoles)) {
            roles = parsedRoles.filter((r3) => typeof r3 === "string");
          } else {
            console.warn("[AuthUtils - Prod] 'custom:roles' claim is not a valid JSON array:", rolesClaim);
          }
        }
      } catch (parseError) {
        console.error("[AuthUtils - Prod] Error parsing custom:roles claim:", parseError);
      }
      isAuthenticated = true;
      console.log(`[AuthUtils - Prod] Claims User: ${email}, IsRoot: ${isRootAdmin}, Roles: ${JSON.stringify(roles)}`);
    }
  }
  return { email, roles, isRootAdmin, isAuthenticated, error };
}

// src/handlers/summary.ts
var respond = (statusCode, payload) => ({
  statusCode,
  headers: {
    // Add CORS headers
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Credentials": true
  },
  body: JSON.stringify(payload)
});
var handler = async (event) => {
  try {
    const caller = getCallerDetails(event);
    if (!caller.isAuthenticated) {
      return respond(401, { error: caller.error || "Unauthorized" });
    }
    const { roles: callerRoles, isRootAdmin: isCallerRootAdmin } = caller;
    console.log(`[getAssignableRoles] Caller: ${caller.email}, IsRoot: ${isCallerRootAdmin}, Roles: ${JSON.stringify(callerRoles)}`);
    const assignable = [];
    const visited = /* @__PURE__ */ new Set();
    const findDownstreamRoles = async (roleId) => {
      if (!roleId || visited.has(roleId)) return;
      visited.add(roleId);
      const children = await queryRolesByParent(roleId);
      for (const child of children) {
        if (!assignable.some((r3) => r3.id === child.id)) {
          assignable.push(child);
        }
        await findDownstreamRoles(child.id);
      }
    };
    if (isCallerRootAdmin) {
      console.log("[getAssignableRoles] Root admin: Fetching all roles starting from root.");
      await findDownstreamRoles("ROOT");
    } else {
      console.log(`[getAssignableRoles] Non-root admin: Fetching roles downstream from ${JSON.stringify(callerRoles)}`);
      for (const userRoleId of callerRoles) {
        await findDownstreamRoles(userRoleId);
      }
    }
    console.log(`[getAssignableRoles] Found ${assignable.length} assignable roles.`);
    return respond(200, { roles: assignable });
  } catch (err2) {
    console.error("[getAssignableRoles] Unhandled error:", err2);
    return respond(500, { error: "Internal server error retrieving assignable roles" });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdHlwZXMvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1taWRkbGV3YXJlL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9hY2NvdW50LWlkLWVuZHBvaW50L0FjY291bnRJZEVuZHBvaW50TW9kZUNvbnN0YW50cy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvYWNjb3VudC1pZC1lbmRwb2ludC9BY2NvdW50SWRFbmRwb2ludE1vZGVDb25maWdSZXNvbHZlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvYWNjb3VudC1pZC1lbmRwb2ludC9Ob2RlQWNjb3VudElkRW5kcG9pbnRNb2RlQ29uZmlnT3B0aW9ucy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvYWNjb3VudC1pZC1lbmRwb2ludC9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm90b2NvbC1odHRwL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vYmxpdGVyYXRvci9pdGVyYXRvci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb2JsaXRlcmF0b3IvZm9yZWFjaC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW5lbW9uaXN0L3V0aWxzL3R5cGVkLWFycmF5cy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW5lbW9uaXN0L3V0aWxzL2l0ZXJhYmxlcy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW5lbW9uaXN0L2xydS1jYWNoZS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvZW5kcG9pbnQtY2FjaGUvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtZW5kcG9pbnQtZGlzY292ZXJ5L2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9taWRkbGV3YXJlLWhvc3QtaGVhZGVyL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9nZXRTbWl0aHlDb250ZXh0LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvcmVzb2x2ZUF1dGhPcHRpb25zLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4uanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1zZXJkZS9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2dldEh0dHBBdXRoU2NoZW1lUGx1Z2luLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtYXV0aC1zY2hlbWUvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1zaWduaW5nL2h0dHBTaWduaW5nTWlkZGxld2FyZS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvZ2V0SHR0cFNpZ25pbmdNaWRkbGV3YXJlLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9taWRkbGV3YXJlLWh0dHAtc2lnbmluZy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbm9ybWFsaXplUHJvdmlkZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3BhZ2luYXRpb24vY3JlYXRlUGFnaW5hdG9yLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2lzLWFycmF5LWJ1ZmZlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtY2pzL2Zyb21CYXNlNjQuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC11dGY4L2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtY2pzL3RvQmFzZTY0LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2NoZWNrc3VtL0NoZWNrc3VtU3RyZWFtLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL3N0cmVhbS10eXBlLWNoZWNrLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2NoZWNrc3VtL0NoZWNrc3VtU3RyZWFtLmJyb3dzZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvY2hlY2tzdW0vY3JlYXRlQ2hlY2tzdW1TdHJlYW0uYnJvd3Nlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jaGVja3N1bS9jcmVhdGVDaGVja3N1bVN0cmVhbS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9CeXRlQXJyYXlDb2xsZWN0b3IuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9jcmVhdGVCdWZmZXJlZFJlYWRhYmxlLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL2dldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9oZWFkU3RyZWFtLmJyb3dzZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvaGVhZFN0cmVhbS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXVyaS1lc2NhcGUvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcXVlcnlzdHJpbmctYnVpbGRlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9mZXRjaC1odHRwLWhhbmRsZXIvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1oZXgtZW5jb2RpbmcvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvc2RrLXN0cmVhbS1taXhpbi5icm93c2VyLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtY2pzL3Nkay1zdHJlYW0tbWl4aW4uanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1zdHJlYW0vZGlzdC1janMvc3BsaXRTdHJlYW0uYnJvd3Nlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9zcGxpdFN0cmVhbS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXN0cmVhbS9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvY29sbGVjdC1zdHJlYW0tYm9keS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnQuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvcHJvdG9jb2xzL3Jlc29sdmUtcGF0aC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvcHJvdG9jb2xzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3NldEZlYXR1cmUuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3V0aWwtaWRlbnRpdHktYW5kLWF1dGgvRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3V0aWwtaWRlbnRpdHktYW5kLWF1dGgvaHR0cEF1dGhTY2hlbWVzL2h0dHBBcGlLZXlBdXRoLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL2h0dHBBdXRoU2NoZW1lcy9odHRwQmVhcmVyQXV0aC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9odHRwQXV0aFNjaGVtZXMvbm9BdXRoLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL2h0dHBBdXRoU2NoZW1lcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9tZW1vaXplSWRlbnRpdHlQcm92aWRlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9jbGllbnQvZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbi5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvY2xpZW50L3NldENyZWRlbnRpYWxGZWF0dXJlLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9jbGllbnQvc2V0RmVhdHVyZS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvY2xpZW50L2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvdXRpbHMvZ2V0RGF0ZUhlYWRlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2dldFNrZXdDb3JyZWN0ZWREYXRlLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvdXRpbHMvaXNDbG9ja1NrZXdlZC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2dldFVwZGF0ZWRTeXN0ZW1DbG9ja09mZnNldC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvYXdzX3Nkay9Bd3NTZGtTaWdWNFNpZ25lci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL2F3c19zZGsvQXdzU2RrU2lnVjRBU2lnbmVyLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvdXRpbHMvZ2V0QXJyYXlGb3JDb21tYVNlcGFyYXRlZFN0cmluZy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL2F3c19zZGsvTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX09QVElPTlMuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL2h0dHBBdXRoU2NoZW1lcy9hd3Nfc2RrL3Jlc29sdmVBd3NTZGtTaWdWNEFDb25maWcuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvYXdzX3Nkay9yZXNvbHZlQXdzU2RrU2lnVjRDb25maWcuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL2h0dHBBdXRoU2NoZW1lcy9hd3Nfc2RrL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9jb2VyY2luZy1zZXJpYWxpemVycy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXN0YWNrL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9qc29uL2F3c0V4cGVjdFVuaW9uLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvY29tbW9uLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvanNvbi9wYXJzZUpzb25Cb2R5LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3V0aWwuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvdmFsaWRhdG9yLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcHRpb25zQnVpbGRlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIveG1sTm9kZS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvRG9jVHlwZVJlYWRlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3RybnVtL3N0cm51bS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvT3JkZXJlZE9ialBhcnNlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvbm9kZTJqc29uLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9YTUxQYXJzZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1sYnVpbGRlci9vcmRlcmVkSnMyWG1sLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbGJ1aWxkZXIvanNvbjJ4bWwuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvZnhwLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMveG1sL3BhcnNlWG1sQm9keS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvcHJvdG9jb2xzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudC9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWNvbmZpZy1wcm92aWRlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb25maWctcmVzb2x2ZXIvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aC9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92MS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9uYXRpdmUuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtcmV0cnkvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1yZXRyeS9kaXN0LWNqcy9pc1N0cmVhbWluZ1BheWxvYWQvaXNTdHJlYW1pbmdQYXlsb2FkLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYi9kaXN0LWNqcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWNqcy9nZXRIb21lRGlyLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1janMvZ2V0U1NPVG9rZW5GaWxlcGF0aC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtY2pzL2dldFNTT1Rva2VuRnJvbUZpbGUuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWNqcy9zbHVycEZpbGUuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtY2pzL2FkYXB0b3JzL2dldEVuZHBvaW50VXJsQ29uZmlnLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1janMvYWRhcHRvcnMvZ2V0RW5kcG9pbnRGcm9tQ29uZmlnLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlci9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91cmwtcGFyc2VyL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYi9wYWNrYWdlLmpzb24iLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItZW52L2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NyZWRlbnRpYWwtcHJvdmlkZXItaW1kcy9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1odHRwL2Rpc3QtY2pzL2Zyb21IdHRwL2NoZWNrVXJsLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWh0dHAvZGlzdC1janMvZnJvbUh0dHAvcmVxdWVzdEhlbHBlcnMuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaHR0cC9kaXN0LWNqcy9mcm9tSHR0cC9yZXRyeS13cmFwcGVyLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWh0dHAvZGlzdC1janMvZnJvbUh0dHAvZnJvbUh0dHAuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaHR0cC9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNzby9kaXN0LWNqcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zc28vcGFja2FnZS5qc29uIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay91dGlsLXVzZXItYWdlbnQtbm9kZS9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9oYXNoLW5vZGUvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc3NvL2Rpc3QtY2pzL2VuZHBvaW50L3J1bGVzZXQuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zc28vZGlzdC1janMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNzby9kaXN0LWNqcy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZS9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNzby9kaXN0LWNqcy9ydW50aW1lQ29uZmlnLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9yZWdpb24tY29uZmlnLXJlc29sdmVyL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc3NvL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvYXV0aC9odHRwQXV0aFNjaGVtZVByb3ZpZGVyLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9wYWNrYWdlLmpzb24iLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zc28tb2lkYy9lbmRwb2ludC9ydWxlc2V0LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3Nzby1vaWRjL3J1bnRpbWVDb25maWcuc2hhcmVkLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvcnVudGltZUNvbmZpZy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3Nzby1vaWRjL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvcnVudGltZUV4dGVuc2lvbnMuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zc28tb2lkYy9TU09PSURDQ2xpZW50LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvbW9kZWxzL1NTT09JRENTZXJ2aWNlRXhjZXB0aW9uLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvbW9kZWxzL21vZGVsc18wLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvcHJvdG9jb2xzL0F3c19yZXN0SnNvbjEuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zc28tb2lkYy9jb21tYW5kcy9DcmVhdGVUb2tlbkNvbW1hbmQuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zc28tb2lkYy9TU09PSURDLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvY29tbWFuZHMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zc28tb2lkYy9tb2RlbHMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zc28tb2lkYy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdG9rZW4tcHJvdmlkZXJzL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXNzby9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL2VuZHBvaW50L3J1bGVzZXQuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlci5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9ydW50aW1lQ29uZmlnLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL3J1bnRpbWVFeHRlbnNpb25zLmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL1NUU0NsaWVudC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9tb2RlbHMvU1RTU2VydmljZUV4Y2VwdGlvbi5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9tb2RlbHMvbW9kZWxzXzAuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvcHJvdG9jb2xzL0F3c19xdWVyeS5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9jb21tYW5kcy9Bc3N1bWVSb2xlQ29tbWFuZC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9jb21tYW5kcy9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9TVFMuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvY29tbWFuZHMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvbW9kZWxzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL2RlZmF1bHRTdHNSb2xlQXNzdW1lcnMuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL25lc3RlZC1jbGllbnRzL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvZGVmYXVsdFJvbGVBc3N1bWVycy5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbmVzdGVkLWNsaWVudHMvZGlzdC1lcy9zdWJtb2R1bGVzL3N0cy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1wcm9jZXNzL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXdlYi1pZGVudGl0eS9kaXN0LWNqcy9mcm9tV2ViVG9rZW4uanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItd2ViLWlkZW50aXR5L2Rpc3QtY2pzL2Zyb21Ub2tlbkZpbGUuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItd2ViLWlkZW50aXR5L2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWluaS9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtZHluYW1vZGIvZGlzdC1janMvZW5kcG9pbnQvcnVsZXNldC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiL2Rpc3QtY2pzL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXIuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYi9kaXN0LWNqcy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiL2Rpc3QtY2pzL3J1bnRpbWVDb25maWcuanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC13YWl0ZXIvZGlzdC1janMvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYi9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC1keW5hbW9kYi9kaXN0LWNqcy9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbGliLWR5bmFtb2RiL2Rpc3QtY2pzL2luZGV4LmpzIiwgIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9zdW1tYXJ5LnRzIiwgIi4uLy4uLy4uLy4uL3NyYy9saWIvZHluYW1vLnRzIiwgIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9qd3QtZGVjb2RlL2J1aWxkL2VzbS9pbmRleC5qcyIsICIuLi8uLi8uLi8uLi9zcmMvbGliL2F1dGhVdGlscy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEFsZ29yaXRobUlkOiAoKSA9PiBBbGdvcml0aG1JZCxcbiAgRW5kcG9pbnRVUkxTY2hlbWU6ICgpID0+IEVuZHBvaW50VVJMU2NoZW1lLFxuICBGaWVsZFBvc2l0aW9uOiAoKSA9PiBGaWVsZFBvc2l0aW9uLFxuICBIdHRwQXBpS2V5QXV0aExvY2F0aW9uOiAoKSA9PiBIdHRwQXBpS2V5QXV0aExvY2F0aW9uLFxuICBIdHRwQXV0aExvY2F0aW9uOiAoKSA9PiBIdHRwQXV0aExvY2F0aW9uLFxuICBJbmlTZWN0aW9uVHlwZTogKCkgPT4gSW5pU2VjdGlvblR5cGUsXG4gIFJlcXVlc3RIYW5kbGVyUHJvdG9jb2w6ICgpID0+IFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wsXG4gIFNNSVRIWV9DT05URVhUX0tFWTogKCkgPT4gU01JVEhZX0NPTlRFWFRfS0VZLFxuICBnZXREZWZhdWx0Q2xpZW50Q29uZmlndXJhdGlvbjogKCkgPT4gZ2V0RGVmYXVsdENsaWVudENvbmZpZ3VyYXRpb24sXG4gIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZzogKCkgPT4gcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2F1dGgvYXV0aC50c1xudmFyIEh0dHBBdXRoTG9jYXRpb24gPSAvKiBAX19QVVJFX18gKi8gKChIdHRwQXV0aExvY2F0aW9uMikgPT4ge1xuICBIdHRwQXV0aExvY2F0aW9uMltcIkhFQURFUlwiXSA9IFwiaGVhZGVyXCI7XG4gIEh0dHBBdXRoTG9jYXRpb24yW1wiUVVFUllcIl0gPSBcInF1ZXJ5XCI7XG4gIHJldHVybiBIdHRwQXV0aExvY2F0aW9uMjtcbn0pKEh0dHBBdXRoTG9jYXRpb24gfHwge30pO1xuXG4vLyBzcmMvYXV0aC9IdHRwQXBpS2V5QXV0aC50c1xudmFyIEh0dHBBcGlLZXlBdXRoTG9jYXRpb24gPSAvKiBAX19QVVJFX18gKi8gKChIdHRwQXBpS2V5QXV0aExvY2F0aW9uMikgPT4ge1xuICBIdHRwQXBpS2V5QXV0aExvY2F0aW9uMltcIkhFQURFUlwiXSA9IFwiaGVhZGVyXCI7XG4gIEh0dHBBcGlLZXlBdXRoTG9jYXRpb24yW1wiUVVFUllcIl0gPSBcInF1ZXJ5XCI7XG4gIHJldHVybiBIdHRwQXBpS2V5QXV0aExvY2F0aW9uMjtcbn0pKEh0dHBBcGlLZXlBdXRoTG9jYXRpb24gfHwge30pO1xuXG4vLyBzcmMvZW5kcG9pbnQudHNcbnZhciBFbmRwb2ludFVSTFNjaGVtZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEVuZHBvaW50VVJMU2NoZW1lMikgPT4ge1xuICBFbmRwb2ludFVSTFNjaGVtZTJbXCJIVFRQXCJdID0gXCJodHRwXCI7XG4gIEVuZHBvaW50VVJMU2NoZW1lMltcIkhUVFBTXCJdID0gXCJodHRwc1wiO1xuICByZXR1cm4gRW5kcG9pbnRVUkxTY2hlbWUyO1xufSkoRW5kcG9pbnRVUkxTY2hlbWUgfHwge30pO1xuXG4vLyBzcmMvZXh0ZW5zaW9ucy9jaGVja3N1bS50c1xudmFyIEFsZ29yaXRobUlkID0gLyogQF9fUFVSRV9fICovICgoQWxnb3JpdGhtSWQyKSA9PiB7XG4gIEFsZ29yaXRobUlkMltcIk1ENVwiXSA9IFwibWQ1XCI7XG4gIEFsZ29yaXRobUlkMltcIkNSQzMyXCJdID0gXCJjcmMzMlwiO1xuICBBbGdvcml0aG1JZDJbXCJDUkMzMkNcIl0gPSBcImNyYzMyY1wiO1xuICBBbGdvcml0aG1JZDJbXCJTSEExXCJdID0gXCJzaGExXCI7XG4gIEFsZ29yaXRobUlkMltcIlNIQTI1NlwiXSA9IFwic2hhMjU2XCI7XG4gIHJldHVybiBBbGdvcml0aG1JZDI7XG59KShBbGdvcml0aG1JZCB8fCB7fSk7XG52YXIgZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocnVudGltZUNvbmZpZykgPT4ge1xuICBjb25zdCBjaGVja3N1bUFsZ29yaXRobXMgPSBbXTtcbiAgaWYgKHJ1bnRpbWVDb25maWcuc2hhMjU2ICE9PSB2b2lkIDApIHtcbiAgICBjaGVja3N1bUFsZ29yaXRobXMucHVzaCh7XG4gICAgICBhbGdvcml0aG1JZDogKCkgPT4gXCJzaGEyNTZcIiAvKiBTSEEyNTYgKi8sXG4gICAgICBjaGVja3N1bUNvbnN0cnVjdG9yOiAoKSA9PiBydW50aW1lQ29uZmlnLnNoYTI1NlxuICAgIH0pO1xuICB9XG4gIGlmIChydW50aW1lQ29uZmlnLm1kNSAhPSB2b2lkIDApIHtcbiAgICBjaGVja3N1bUFsZ29yaXRobXMucHVzaCh7XG4gICAgICBhbGdvcml0aG1JZDogKCkgPT4gXCJtZDVcIiAvKiBNRDUgKi8sXG4gICAgICBjaGVja3N1bUNvbnN0cnVjdG9yOiAoKSA9PiBydW50aW1lQ29uZmlnLm1kNVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWRkQ2hlY2tzdW1BbGdvcml0aG0oYWxnbykge1xuICAgICAgY2hlY2tzdW1BbGdvcml0aG1zLnB1c2goYWxnbyk7XG4gICAgfSxcbiAgICBjaGVja3N1bUFsZ29yaXRobXMoKSB7XG4gICAgICByZXR1cm4gY2hlY2tzdW1BbGdvcml0aG1zO1xuICAgIH1cbiAgfTtcbn0sIFwiZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uXCIpO1xudmFyIHJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjbGllbnRDb25maWcpID0+IHtcbiAgY29uc3QgcnVudGltZUNvbmZpZyA9IHt9O1xuICBjbGllbnRDb25maWcuY2hlY2tzdW1BbGdvcml0aG1zKCkuZm9yRWFjaCgoY2hlY2tzdW1BbGdvcml0aG0pID0+IHtcbiAgICBydW50aW1lQ29uZmlnW2NoZWNrc3VtQWxnb3JpdGhtLmFsZ29yaXRobUlkKCldID0gY2hlY2tzdW1BbGdvcml0aG0uY2hlY2tzdW1Db25zdHJ1Y3RvcigpO1xuICB9KTtcbiAgcmV0dXJuIHJ1bnRpbWVDb25maWc7XG59LCBcInJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWdcIik7XG5cbi8vIHNyYy9leHRlbnNpb25zL2RlZmF1bHRDbGllbnRDb25maWd1cmF0aW9uLnRzXG52YXIgZ2V0RGVmYXVsdENsaWVudENvbmZpZ3VyYXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChydW50aW1lQ29uZmlnKSA9PiB7XG4gIHJldHVybiBnZXRDaGVja3N1bUNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyk7XG59LCBcImdldERlZmF1bHRDbGllbnRDb25maWd1cmF0aW9uXCIpO1xudmFyIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbmZpZykgPT4ge1xuICByZXR1cm4gcmVzb2x2ZUNoZWNrc3VtUnVudGltZUNvbmZpZyhjb25maWcpO1xufSwgXCJyZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWdcIik7XG5cbi8vIHNyYy9odHRwLnRzXG52YXIgRmllbGRQb3NpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyAoKEZpZWxkUG9zaXRpb24yKSA9PiB7XG4gIEZpZWxkUG9zaXRpb24yW0ZpZWxkUG9zaXRpb24yW1wiSEVBREVSXCJdID0gMF0gPSBcIkhFQURFUlwiO1xuICBGaWVsZFBvc2l0aW9uMltGaWVsZFBvc2l0aW9uMltcIlRSQUlMRVJcIl0gPSAxXSA9IFwiVFJBSUxFUlwiO1xuICByZXR1cm4gRmllbGRQb3NpdGlvbjI7XG59KShGaWVsZFBvc2l0aW9uIHx8IHt9KTtcblxuLy8gc3JjL21pZGRsZXdhcmUudHNcbnZhciBTTUlUSFlfQ09OVEVYVF9LRVkgPSBcIl9fc21pdGh5X2NvbnRleHRcIjtcblxuLy8gc3JjL3Byb2ZpbGUudHNcbnZhciBJbmlTZWN0aW9uVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEluaVNlY3Rpb25UeXBlMikgPT4ge1xuICBJbmlTZWN0aW9uVHlwZTJbXCJQUk9GSUxFXCJdID0gXCJwcm9maWxlXCI7XG4gIEluaVNlY3Rpb25UeXBlMltcIlNTT19TRVNTSU9OXCJdID0gXCJzc28tc2Vzc2lvblwiO1xuICBJbmlTZWN0aW9uVHlwZTJbXCJTRVJWSUNFU1wiXSA9IFwic2VydmljZXNcIjtcbiAgcmV0dXJuIEluaVNlY3Rpb25UeXBlMjtcbn0pKEluaVNlY3Rpb25UeXBlIHx8IHt9KTtcblxuLy8gc3JjL3RyYW5zZmVyLnRzXG52YXIgUmVxdWVzdEhhbmRsZXJQcm90b2NvbCA9IC8qIEBfX1BVUkVfXyAqLyAoKFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wyKSA9PiB7XG4gIFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wyW1wiSFRUUF8wXzlcIl0gPSBcImh0dHAvMC45XCI7XG4gIFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wyW1wiSFRUUF8xXzBcIl0gPSBcImh0dHAvMS4wXCI7XG4gIFJlcXVlc3RIYW5kbGVyUHJvdG9jb2wyW1wiVERTXzhfMFwiXSA9IFwidGRzLzguMFwiO1xuICByZXR1cm4gUmVxdWVzdEhhbmRsZXJQcm90b2NvbDI7XG59KShSZXF1ZXN0SGFuZGxlclByb3RvY29sIHx8IHt9KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEh0dHBBdXRoTG9jYXRpb24sXG4gIEh0dHBBcGlLZXlBdXRoTG9jYXRpb24sXG4gIEVuZHBvaW50VVJMU2NoZW1lLFxuICBBbGdvcml0aG1JZCxcbiAgZ2V0RGVmYXVsdENsaWVudENvbmZpZ3VyYXRpb24sXG4gIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyxcbiAgRmllbGRQb3NpdGlvbixcbiAgU01JVEhZX0NPTlRFWFRfS0VZLFxuICBJbmlTZWN0aW9uVHlwZSxcbiAgUmVxdWVzdEhhbmRsZXJQcm90b2NvbFxufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZ2V0U21pdGh5Q29udGV4dDogKCkgPT4gZ2V0U21pdGh5Q29udGV4dCxcbiAgbm9ybWFsaXplUHJvdmlkZXI6ICgpID0+IG5vcm1hbGl6ZVByb3ZpZGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2dldFNtaXRoeUNvbnRleHQudHNcbnZhciBpbXBvcnRfdHlwZXMgPSByZXF1aXJlKFwiQHNtaXRoeS90eXBlc1wiKTtcbnZhciBnZXRTbWl0aHlDb250ZXh0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29udGV4dCkgPT4gY29udGV4dFtpbXBvcnRfdHlwZXMuU01JVEhZX0NPTlRFWFRfS0VZXSB8fCAoY29udGV4dFtpbXBvcnRfdHlwZXMuU01JVEhZX0NPTlRFWFRfS0VZXSA9IHt9KSwgXCJnZXRTbWl0aHlDb250ZXh0XCIpO1xuXG4vLyBzcmMvbm9ybWFsaXplUHJvdmlkZXIudHNcbnZhciBub3JtYWxpemVQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09IFwiZnVuY3Rpb25cIilcbiAgICByZXR1cm4gaW5wdXQ7XG4gIGNvbnN0IHByb21pc2lmaWVkID0gUHJvbWlzZS5yZXNvbHZlKGlucHV0KTtcbiAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xufSwgXCJub3JtYWxpemVQcm92aWRlclwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFNtaXRoeUNvbnRleHQsXG4gIG5vcm1hbGl6ZVByb3ZpZGVyXG59KTtcblxuIiwgImV4cG9ydCBjb25zdCBERUZBVUxUX0FDQ09VTlRfSURfRU5EUE9JTlRfTU9ERSA9IFwicHJlZmVycmVkXCI7XG5leHBvcnQgY29uc3QgQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFX1ZBTFVFUyA9IFtcImRpc2FibGVkXCIsIFwicHJlZmVycmVkXCIsIFwicmVxdWlyZWRcIl07XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBY2NvdW50SWRFbmRwb2ludE1vZGUodmFsdWUpIHtcbiAgICByZXR1cm4gQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFX1ZBTFVFUy5pbmNsdWRlcyh2YWx1ZSk7XG59XG4iLCAiaW1wb3J0IHsgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IERFRkFVTFRfQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFLCB2YWxpZGF0ZUFjY291bnRJZEVuZHBvaW50TW9kZSwgfSBmcm9tIFwiLi9BY2NvdW50SWRFbmRwb2ludE1vZGVDb25zdGFudHNcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlQWNjb3VudElkRW5kcG9pbnRNb2RlQ29uZmlnID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBhY2NvdW50SWRFbmRwb2ludE1vZGUgfSA9IGlucHV0O1xuICAgIGNvbnN0IGFjY291bnRJZEVuZHBvaW50TW9kZVByb3ZpZGVyID0gbm9ybWFsaXplUHJvdmlkZXIoYWNjb3VudElkRW5kcG9pbnRNb2RlID8/IERFRkFVTFRfQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbnB1dCwge1xuICAgICAgICBhY2NvdW50SWRFbmRwb2ludE1vZGU6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFjY0lkTW9kZSA9IGF3YWl0IGFjY291bnRJZEVuZHBvaW50TW9kZVByb3ZpZGVyKCk7XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRlQWNjb3VudElkRW5kcG9pbnRNb2RlKGFjY0lkTW9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIGFjY291bnRJZEVuZHBvaW50TW9kZTogJHthY2NJZE1vZGV9LiBWYWxpZCB2YWx1ZXMgYXJlOiBcInJlcXVpcmVkXCIsIFwicHJlZmVycmVkXCIsIFwiZGlzYWJsZWRcIi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2NJZE1vZGU7XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuIiwgImltcG9ydCB7IERFRkFVTFRfQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFLCB2YWxpZGF0ZUFjY291bnRJZEVuZHBvaW50TW9kZSwgfSBmcm9tIFwiLi9BY2NvdW50SWRFbmRwb2ludE1vZGVDb25zdGFudHNcIjtcbmNvbnN0IGVyciA9IFwiSW52YWxpZCBBY2NvdW50SWRFbmRwb2ludE1vZGUgdmFsdWVcIjtcbmNvbnN0IF90aHJvdyA9IChtZXNzYWdlKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufTtcbmV4cG9ydCBjb25zdCBFTlZfQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFID0gXCJBV1NfQUNDT1VOVF9JRF9FTkRQT0lOVF9NT0RFXCI7XG5leHBvcnQgY29uc3QgQ09ORklHX0FDQ09VTlRfSURfRU5EUE9JTlRfTU9ERSA9IFwiYWNjb3VudF9pZF9lbmRwb2ludF9tb2RlXCI7XG5leHBvcnQgY29uc3QgTk9ERV9BQ0NPVU5UX0lEX0VORFBPSU5UX01PREVfQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZW52W0VOVl9BQ0NPVU5UX0lEX0VORFBPSU5UX01PREVdO1xuICAgICAgICBpZiAodmFsdWUgJiYgIXZhbGlkYXRlQWNjb3VudElkRW5kcG9pbnRNb2RlKHZhbHVlKSkge1xuICAgICAgICAgICAgX3Rocm93KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHByb2ZpbGVbQ09ORklHX0FDQ09VTlRfSURfRU5EUE9JTlRfTU9ERV07XG4gICAgICAgIGlmICh2YWx1ZSAmJiAhdmFsaWRhdGVBY2NvdW50SWRFbmRwb2ludE1vZGUodmFsdWUpKSB7XG4gICAgICAgICAgICBfdGhyb3coZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBkZWZhdWx0OiBERUZBVUxUX0FDQ09VTlRfSURfRU5EUE9JTlRfTU9ERSxcbn07XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vQWNjb3VudElkRW5kcG9pbnRNb2RlQ29uZmlnUmVzb2x2ZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0FjY291bnRJZEVuZHBvaW50TW9kZUNvbnN0YW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vTm9kZUFjY291bnRJZEVuZHBvaW50TW9kZUNvbmZpZ09wdGlvbnNcIjtcbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgRmllbGQ6ICgpID0+IEZpZWxkLFxuICBGaWVsZHM6ICgpID0+IEZpZWxkcyxcbiAgSHR0cFJlcXVlc3Q6ICgpID0+IEh0dHBSZXF1ZXN0LFxuICBIdHRwUmVzcG9uc2U6ICgpID0+IEh0dHBSZXNwb25zZSxcbiAgSUh0dHBSZXF1ZXN0OiAoKSA9PiBpbXBvcnRfdHlwZXMuSHR0cFJlcXVlc3QsXG4gIGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbjogKCkgPT4gZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uLFxuICBpc1ZhbGlkSG9zdG5hbWU6ICgpID0+IGlzVmFsaWRIb3N0bmFtZSxcbiAgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZzogKCkgPT4gcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZ1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9leHRlbnNpb25zL2h0dHBFeHRlbnNpb25Db25maWd1cmF0aW9uLnRzXG52YXIgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocnVudGltZUNvbmZpZykgPT4ge1xuICByZXR1cm4ge1xuICAgIHNldEh0dHBIYW5kbGVyKGhhbmRsZXIpIHtcbiAgICAgIHJ1bnRpbWVDb25maWcuaHR0cEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIH0sXG4gICAgaHR0cEhhbmRsZXIoKSB7XG4gICAgICByZXR1cm4gcnVudGltZUNvbmZpZy5odHRwSGFuZGxlcjtcbiAgICB9LFxuICAgIHVwZGF0ZUh0dHBDbGllbnRDb25maWcoa2V5LCB2YWx1ZSkge1xuICAgICAgcnVudGltZUNvbmZpZy5odHRwSGFuZGxlcj8udXBkYXRlSHR0cENsaWVudENvbmZpZyhrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGh0dHBIYW5kbGVyQ29uZmlncygpIHtcbiAgICAgIHJldHVybiBydW50aW1lQ29uZmlnLmh0dHBIYW5kbGVyLmh0dHBIYW5kbGVyQ29uZmlncygpO1xuICAgIH1cbiAgfTtcbn0sIFwiZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uXCIpO1xudmFyIHJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChodHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBodHRwSGFuZGxlcjogaHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uLmh0dHBIYW5kbGVyKClcbiAgfTtcbn0sIFwicmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZ1wiKTtcblxuLy8gc3JjL0ZpZWxkLnRzXG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIkBzbWl0aHkvdHlwZXNcIik7XG52YXIgRmllbGQgPSBjbGFzcyB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRmllbGRcIik7XG4gIH1cbiAgY29uc3RydWN0b3IoeyBuYW1lLCBraW5kID0gaW1wb3J0X3R5cGVzLkZpZWxkUG9zaXRpb24uSEVBREVSLCB2YWx1ZXMgPSBbXSB9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmRzIGEgdmFsdWUgdG8gdGhlIGZpZWxkLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGFwcGVuZC5cbiAgICovXG4gIGFkZCh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xuICB9XG4gIC8qKlxuICAgKiBPdmVyd3JpdGUgZXhpc3RpbmcgZmllbGQgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWVzIFRoZSBuZXcgZmllbGQgdmFsdWVzLlxuICAgKi9cbiAgc2V0KHZhbHVlcykge1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIG1hdGNoaW5nIGVudHJpZXMgZnJvbSBsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gcmVtb3ZlLlxuICAgKi9cbiAgcmVtb3ZlKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZXMgPSB0aGlzLnZhbHVlcy5maWx0ZXIoKHYpID0+IHYgIT09IHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGNvbW1hLWRlbGltaXRlZCBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB7QGxpbmsgRmllbGR9LlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzLm1hcCgodikgPT4gdi5pbmNsdWRlcyhcIixcIikgfHwgdi5pbmNsdWRlcyhcIiBcIikgPyBgXCIke3Z9XCJgIDogdikuam9pbihcIiwgXCIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgc3RyaW5nIHZhbHVlcyBhcyBhIGxpc3RcbiAgICpcbiAgICogQHJldHVybnMgVmFsdWVzIGluIHtAbGluayBGaWVsZH0gYXMgYSBsaXN0LlxuICAgKi9cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlcztcbiAgfVxufTtcblxuLy8gc3JjL0ZpZWxkcy50c1xudmFyIEZpZWxkcyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoeyBmaWVsZHMgPSBbXSwgZW5jb2RpbmcgPSBcInV0Zi04XCIgfSkge1xuICAgIHRoaXMuZW50cmllcyA9IHt9O1xuICAgIGZpZWxkcy5mb3JFYWNoKHRoaXMuc2V0RmllbGQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRmllbGRzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgZW50cnkgZm9yIGEge0BsaW5rIEZpZWxkfSBuYW1lLiBUaGUgYG5hbWVgXG4gICAqIGF0dHJpYnV0ZSB3aWxsIGJlIHVzZWQgdG8ga2V5IHRoZSBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gZmllbGQgVGhlIHtAbGluayBGaWVsZH0gdG8gc2V0LlxuICAgKi9cbiAgc2V0RmllbGQoZmllbGQpIHtcbiAgICB0aGlzLmVudHJpZXNbZmllbGQubmFtZS50b0xvd2VyQ2FzZSgpXSA9IGZpZWxkO1xuICB9XG4gIC8qKlxuICAgKiAgUmV0cmlldmUge0BsaW5rIEZpZWxkfSBlbnRyeSBieSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUge0BsaW5rIEZpZWxkfSBlbnRyeVxuICAgKiAgdG8gcmV0cmlldmVcbiAgICogQHJldHVybnMgVGhlIHtAbGluayBGaWVsZH0gaWYgaXQgZXhpc3RzLlxuICAgKi9cbiAgZ2V0RmllbGQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVudHJpZXNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGVudHJ5IGZyb20gY29sbGVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZW50cnkgdG8gZGVsZXRlLlxuICAgKi9cbiAgcmVtb3ZlRmllbGQobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmVudHJpZXNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHNwZWNpZmljIHR5cGVzIG9mIGZpZWxkcy5cbiAgICogVXNlZCB0byBncmFiIGFsbCBoZWFkZXJzIG9yIGFsbCB0cmFpbGVycy5cbiAgICpcbiAgICogQHBhcmFtIGtpbmQge0BsaW5rIEZpZWxkUG9zaXRpb259IG9mIGVudHJpZXMgdG8gcmV0cmlldmUuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgRmllbGR9IGVudHJpZXMgd2l0aCB0aGUgc3BlY2lmaWVkXG4gICAqICB7QGxpbmsgRmllbGRQb3NpdGlvbn0uXG4gICAqL1xuICBnZXRCeVR5cGUoa2luZCkge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZW50cmllcykuZmlsdGVyKChmaWVsZCkgPT4gZmllbGQua2luZCA9PT0ga2luZCk7XG4gIH1cbn07XG5cbi8vIHNyYy9odHRwUmVxdWVzdC50c1xuXG52YXIgSHR0cFJlcXVlc3QgPSBjbGFzcyBfSHR0cFJlcXVlc3Qge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkh0dHBSZXF1ZXN0XCIpO1xuICB9XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgdGhpcy5ob3N0bmFtZSA9IG9wdGlvbnMuaG9zdG5hbWUgfHwgXCJsb2NhbGhvc3RcIjtcbiAgICB0aGlzLnBvcnQgPSBvcHRpb25zLnBvcnQ7XG4gICAgdGhpcy5xdWVyeSA9IG9wdGlvbnMucXVlcnkgfHwge307XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICAgIHRoaXMuYm9keSA9IG9wdGlvbnMuYm9keTtcbiAgICB0aGlzLnByb3RvY29sID0gb3B0aW9ucy5wcm90b2NvbCA/IG9wdGlvbnMucHJvdG9jb2wuc2xpY2UoLTEpICE9PSBcIjpcIiA/IGAke29wdGlvbnMucHJvdG9jb2x9OmAgOiBvcHRpb25zLnByb3RvY29sIDogXCJodHRwczpcIjtcbiAgICB0aGlzLnBhdGggPSBvcHRpb25zLnBhdGggPyBvcHRpb25zLnBhdGguY2hhckF0KDApICE9PSBcIi9cIiA/IGAvJHtvcHRpb25zLnBhdGh9YCA6IG9wdGlvbnMucGF0aCA6IFwiL1wiO1xuICAgIHRoaXMudXNlcm5hbWUgPSBvcHRpb25zLnVzZXJuYW1lO1xuICAgIHRoaXMucGFzc3dvcmQgPSBvcHRpb25zLnBhc3N3b3JkO1xuICAgIHRoaXMuZnJhZ21lbnQgPSBvcHRpb25zLmZyYWdtZW50O1xuICB9XG4gIC8qKlxuICAgKiBOb3RlOiB0aGlzIGRvZXMgbm90IGRlZXAtY2xvbmUgdGhlIGJvZHkuXG4gICAqL1xuICBzdGF0aWMgY2xvbmUocmVxdWVzdCkge1xuICAgIGNvbnN0IGNsb25lZCA9IG5ldyBfSHR0cFJlcXVlc3Qoe1xuICAgICAgLi4ucmVxdWVzdCxcbiAgICAgIGhlYWRlcnM6IHsgLi4ucmVxdWVzdC5oZWFkZXJzIH1cbiAgICB9KTtcbiAgICBpZiAoY2xvbmVkLnF1ZXJ5KSB7XG4gICAgICBjbG9uZWQucXVlcnkgPSBjbG9uZVF1ZXJ5KGNsb25lZC5xdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIG9ubHkgYWN0dWFsbHkgYXNzZXJ0cyB0aGF0IHJlcXVlc3QgaXMgdGhlIGludGVyZmFjZSB7QGxpbmsgSUh0dHBSZXF1ZXN0fSxcbiAgICogYW5kIG5vdCBuZWNlc3NhcmlseSB0aGlzIGNvbmNyZXRlIGNsYXNzLiBMZWZ0IGluIHBsYWNlIGZvciBBUEkgc3RhYmlsaXR5LlxuICAgKlxuICAgKiBEbyBub3QgY2FsbCBpbnN0YW5jZSBtZXRob2RzIG9uIHRoZSBpbnB1dCBvZiB0aGlzIGZ1bmN0aW9uLCBhbmRcbiAgICogZG8gbm90IGFzc3VtZSBpdCBoYXMgdGhlIEh0dHBSZXF1ZXN0IHByb3RvdHlwZS5cbiAgICovXG4gIHN0YXRpYyBpc0luc3RhbmNlKHJlcXVlc3QpIHtcbiAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdDtcbiAgICByZXR1cm4gXCJtZXRob2RcIiBpbiByZXEgJiYgXCJwcm90b2NvbFwiIGluIHJlcSAmJiBcImhvc3RuYW1lXCIgaW4gcmVxICYmIFwicGF0aFwiIGluIHJlcSAmJiB0eXBlb2YgcmVxW1wicXVlcnlcIl0gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlcVtcImhlYWRlcnNcIl0gPT09IFwib2JqZWN0XCI7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBzdGF0aWMgSHR0cFJlcXVlc3QuY2xvbmUocmVxdWVzdCkgaW5zdGVhZC4gSXQncyBub3Qgc2FmZSB0byBjYWxsXG4gICAqIHRoaXMgbWV0aG9kIGJlY2F1c2Uge0BsaW5rIEh0dHBSZXF1ZXN0LmlzSW5zdGFuY2V9IGluY29ycmVjdGx5XG4gICAqIGFzc2VydHMgdGhhdCBJSHR0cFJlcXVlc3QgKGludGVyZmFjZSkgb2JqZWN0cyBhcmUgb2YgdHlwZSBIdHRwUmVxdWVzdCAoY2xhc3MpLlxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIF9IdHRwUmVxdWVzdC5jbG9uZSh0aGlzKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNsb25lUXVlcnkocXVlcnkpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHF1ZXJ5KS5yZWR1Y2UoKGNhcnJ5LCBwYXJhbU5hbWUpID0+IHtcbiAgICBjb25zdCBwYXJhbSA9IHF1ZXJ5W3BhcmFtTmFtZV07XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNhcnJ5LFxuICAgICAgW3BhcmFtTmFtZV06IEFycmF5LmlzQXJyYXkocGFyYW0pID8gWy4uLnBhcmFtXSA6IHBhcmFtXG4gICAgfTtcbiAgfSwge30pO1xufVxuX19uYW1lKGNsb25lUXVlcnksIFwiY2xvbmVRdWVyeVwiKTtcblxuLy8gc3JjL2h0dHBSZXNwb25zZS50c1xudmFyIEh0dHBSZXNwb25zZSA9IGNsYXNzIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJIdHRwUmVzcG9uc2VcIik7XG4gIH1cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IG9wdGlvbnMuc3RhdHVzQ29kZTtcbiAgICB0aGlzLnJlYXNvbiA9IG9wdGlvbnMucmVhc29uO1xuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLmJvZHkgPSBvcHRpb25zLmJvZHk7XG4gIH1cbiAgc3RhdGljIGlzSW5zdGFuY2UocmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHJlc3AgPSByZXNwb25zZTtcbiAgICByZXR1cm4gdHlwZW9mIHJlc3Auc3RhdHVzQ29kZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgcmVzcC5oZWFkZXJzID09PSBcIm9iamVjdFwiO1xuICB9XG59O1xuXG4vLyBzcmMvaXNWYWxpZEhvc3RuYW1lLnRzXG5mdW5jdGlvbiBpc1ZhbGlkSG9zdG5hbWUoaG9zdG5hbWUpIHtcbiAgY29uc3QgaG9zdFBhdHRlcm4gPSAvXlthLXowLTldW2EtejAtOVxcLlxcLV0qW2EtejAtOV0kLztcbiAgcmV0dXJuIGhvc3RQYXR0ZXJuLnRlc3QoaG9zdG5hbWUpO1xufVxuX19uYW1lKGlzVmFsaWRIb3N0bmFtZSwgXCJpc1ZhbGlkSG9zdG5hbWVcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sXG4gIHJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcsXG4gIEZpZWxkLFxuICBGaWVsZHMsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwUmVzcG9uc2UsXG4gIGlzVmFsaWRIb3N0bmFtZVxufSk7XG5cbiIsICIvKipcbiAqIE9ibGl0ZXJhdG9yIEl0ZXJhdG9yIENsYXNzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBTaW1wbGUgY2xhc3MgcmVwcmVzZW50aW5nIHRoZSBsaWJyYXJ5J3MgaXRlcmF0b3JzLlxuICovXG5cbi8qKlxuICogSXRlcmF0b3IgY2xhc3MuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBuZXh0IC0gTmV4dCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gSXRlcmF0b3IobmV4dCkge1xuXG4gIC8vIEhpZGluZyB0aGUgZ2l2ZW4gZnVuY3Rpb25cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfbmV4dCcsIHtcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IG5leHRcbiAgfSk7XG5cbiAgLy8gSXMgdGhlIGl0ZXJhdG9yIGNvbXBsZXRlP1xuICB0aGlzLmRvbmUgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBOZXh0IGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuLy8gTk9URTogbWF5YmUgdGhpcyBzaG91bGQgZHJvcHBlZCBmb3IgcGVyZm9ybWFuY2U/XG5JdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kb25lKVxuICAgIHJldHVybiB7ZG9uZTogdHJ1ZX07XG5cbiAgdmFyIHN0ZXAgPSB0aGlzLl9uZXh0KCk7XG5cbiAgaWYgKHN0ZXAuZG9uZSlcbiAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gIHJldHVybiBzdGVwO1xufTtcblxuLyoqXG4gKiBJZiBzeW1ib2xzIGFyZSBzdXBwb3J0ZWQsIHdlIGFkZCBgbmV4dGAgdG8gYFN5bWJvbC5pdGVyYXRvcmAuXG4gKi9cbmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJylcbiAgSXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5pbmcgYW4gaXRlcmF0b3Igb2YgdGhlIGdpdmVuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gIHthbnkuLi59IHZhbHVlcyAtIFZhbHVlcy5cbiAqIEByZXR1cm4ge0l0ZXJhdG9yfVxuICovXG5JdGVyYXRvci5vZiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgIGwgPSBhcmdzLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSB7XG4gICAgaWYgKGkgPj0gbClcbiAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX07XG5cbiAgICByZXR1cm4ge2RvbmU6IGZhbHNlLCB2YWx1ZTogYXJnc1tpKytdfTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybmluZyBhbiBlbXB0eSBpdGVyYXRvci5cbiAqXG4gKiBAcmV0dXJuIHtJdGVyYXRvcn1cbiAqL1xuSXRlcmF0b3IuZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZXJhdG9yID0gbmV3IEl0ZXJhdG9yKG51bGwpO1xuICBpdGVyYXRvci5kb25lID0gdHJ1ZTtcblxuICByZXR1cm4gaXRlcmF0b3I7XG59O1xuXG4vKipcbiAqIFJldHVybmluZyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpdGVyYXRvci5cbiAqXG4gKiBAcGFyYW0gIHthbnl9IHZhbHVlIC0gVmFsdWUuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5JdGVyYXRvci5pcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEl0ZXJhdG9yKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgIHZhbHVlICE9PSBudWxsICYmXG4gICAgdHlwZW9mIHZhbHVlLm5leHQgPT09ICdmdW5jdGlvbidcbiAgKTtcbn07XG5cbi8qKlxuICogRXhwb3J0aW5nLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEl0ZXJhdG9yO1xuIiwgIi8qKlxuICogT2JsaXRlcmF0b3IgRm9yRWFjaCBGdW5jdGlvblxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdXNlZCB0byBlYXNpbHkgaXRlcmF0ZSBvdmVyIG1peGVkIHZhbHVlcy5cbiAqL1xuXG4vKipcbiAqIENvbnN0YW50cy5cbiAqL1xudmFyIEFSUkFZX0JVRkZFUl9TVVBQT1JUID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyxcbiAgICBTWU1CT0xfU1VQUE9SVCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIEZ1bmN0aW9uIGFibGUgdG8gaXRlcmF0ZSBvdmVyIGFsbW9zdCBhbnkgaXRlcmFibGUgSlMgdmFsdWUuXG4gKlxuICogQHBhcmFtICB7YW55fSAgICAgIGl0ZXJhYmxlIC0gSXRlcmFibGUgdmFsdWUuXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChpdGVyYWJsZSwgY2FsbGJhY2spIHtcbiAgdmFyIGl0ZXJhdG9yLCBrLCBpLCBsLCBzO1xuXG4gIGlmICghaXRlcmFibGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmxpdGVyYXRvci9mb3JFYWNoOiBpbnZhbGlkIGl0ZXJhYmxlLicpO1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmxpdGVyYXRvci9mb3JFYWNoOiBleHBlY3RpbmcgYSBjYWxsYmFjay4nKTtcblxuICAvLyBUaGUgdGFyZ2V0IGlzIGFuIGFycmF5IG9yIGEgc3RyaW5nIG9yIGZ1bmN0aW9uIGFyZ3VtZW50c1xuICBpZiAoXG4gICAgQXJyYXkuaXNBcnJheShpdGVyYWJsZSkgfHxcbiAgICAoQVJSQVlfQlVGRkVSX1NVUFBPUlQgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGl0ZXJhYmxlKSkgfHxcbiAgICB0eXBlb2YgaXRlcmFibGUgPT09ICdzdHJpbmcnIHx8XG4gICAgaXRlcmFibGUudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSdcbiAgKSB7XG4gICAgZm9yIChpID0gMCwgbCA9IGl0ZXJhYmxlLmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgIGNhbGxiYWNrKGl0ZXJhYmxlW2ldLCBpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUaGUgdGFyZ2V0IGhhcyBhICMuZm9yRWFjaCBtZXRob2RcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZS5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaXRlcmFibGUuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHRhcmdldCBpcyBpdGVyYWJsZVxuICBpZiAoXG4gICAgU1lNQk9MX1NVUFBPUlQgJiZcbiAgICBTeW1ib2wuaXRlcmF0b3IgaW4gaXRlcmFibGUgJiZcbiAgICB0eXBlb2YgaXRlcmFibGUubmV4dCAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBpdGVyYWJsZSA9IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIC8vIFRoZSB0YXJnZXQgaXMgYW4gaXRlcmF0b3JcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgICBpID0gMDtcblxuICAgIHdoaWxlICgocyA9IGl0ZXJhdG9yLm5leHQoKSwgcy5kb25lICE9PSB0cnVlKSkge1xuICAgICAgY2FsbGJhY2socy52YWx1ZSwgaSk7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHRhcmdldCBpcyBhIHBsYWluIG9iamVjdFxuICBmb3IgKGsgaW4gaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGNhbGxiYWNrKGl0ZXJhYmxlW2tdLCBrKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm47XG59XG5cbi8qKlxuICogU2FtZSBmdW5jdGlvbiBhcyB0aGUgYWJvdmUgYGZvckVhY2hgIGJ1dCB3aWxsIHlpZWxkIGBudWxsYCB3aGVuIHRoZSB0YXJnZXRcbiAqIGRvZXMgbm90IGhhdmUga2V5cy5cbiAqXG4gKiBAcGFyYW0gIHthbnl9ICAgICAgaXRlcmFibGUgLSBJdGVyYWJsZSB2YWx1ZS5cbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIENhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5mb3JFYWNoLmZvckVhY2hXaXRoTnVsbEtleXMgPSBmdW5jdGlvbihpdGVyYWJsZSwgY2FsbGJhY2spIHtcbiAgdmFyIGl0ZXJhdG9yLCBrLCBpLCBsLCBzO1xuXG4gIGlmICghaXRlcmFibGUpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmxpdGVyYXRvci9mb3JFYWNoV2l0aE51bGxLZXlzOiBpbnZhbGlkIGl0ZXJhYmxlLicpO1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmxpdGVyYXRvci9mb3JFYWNoV2l0aE51bGxLZXlzOiBleHBlY3RpbmcgYSBjYWxsYmFjay4nKTtcblxuICAvLyBUaGUgdGFyZ2V0IGlzIGFuIGFycmF5IG9yIGEgc3RyaW5nIG9yIGZ1bmN0aW9uIGFyZ3VtZW50c1xuICBpZiAoXG4gICAgQXJyYXkuaXNBcnJheShpdGVyYWJsZSkgfHxcbiAgICAoQVJSQVlfQlVGRkVSX1NVUFBPUlQgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGl0ZXJhYmxlKSkgfHxcbiAgICB0eXBlb2YgaXRlcmFibGUgPT09ICdzdHJpbmcnIHx8XG4gICAgaXRlcmFibGUudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSdcbiAgKSB7XG4gICAgZm9yIChpID0gMCwgbCA9IGl0ZXJhYmxlLmxlbmd0aDsgaSA8IGw7IGkrKylcbiAgICAgIGNhbGxiYWNrKGl0ZXJhYmxlW2ldLCBudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUaGUgdGFyZ2V0IGlzIGEgU2V0XG4gIGlmIChpdGVyYWJsZSBpbnN0YW5jZW9mIFNldCkge1xuICAgIGl0ZXJhYmxlLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGNhbGxiYWNrKHZhbHVlLCBudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUaGUgdGFyZ2V0IGhhcyBhICMuZm9yRWFjaCBtZXRob2RcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZS5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaXRlcmFibGUuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHRhcmdldCBpcyBpdGVyYWJsZVxuICBpZiAoXG4gICAgU1lNQk9MX1NVUFBPUlQgJiZcbiAgICBTeW1ib2wuaXRlcmF0b3IgaW4gaXRlcmFibGUgJiZcbiAgICB0eXBlb2YgaXRlcmFibGUubmV4dCAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBpdGVyYWJsZSA9IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIC8vIFRoZSB0YXJnZXQgaXMgYW4gaXRlcmF0b3JcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgICBpID0gMDtcblxuICAgIHdoaWxlICgocyA9IGl0ZXJhdG9yLm5leHQoKSwgcy5kb25lICE9PSB0cnVlKSkge1xuICAgICAgY2FsbGJhY2socy52YWx1ZSwgbnVsbCk7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHRhcmdldCBpcyBhIHBsYWluIG9iamVjdFxuICBmb3IgKGsgaW4gaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGNhbGxiYWNrKGl0ZXJhYmxlW2tdLCBrKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm47XG59O1xuXG4vKipcbiAqIEV4cG9ydGluZy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwgIi8qKlxuICogTW5lbW9uaXN0IFR5cGVkIEFycmF5IEhlbHBlcnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIE1pc2NlbGxhbmVvdXMgaGVscGVycyByZWxhdGVkIHRvIHR5cGVkIGFycmF5cy5cbiAqL1xuXG4vKipcbiAqIFdoZW4gdXNpbmcgYW4gdW5zaWduZWQgaW50ZWdlciBhcnJheSB0byBzdG9yZSBwb2ludGVycywgb25lIG1pZ2h0IHdhbnQgdG9cbiAqIGNob29zZSB0aGUgb3B0aW1hbCB3b3JkIHNpemUgaW4gcmVnYXJkcyB0byB0aGUgYWN0dWFsIG51bWJlcnMgb2YgcG9pbnRlcnNcbiAqIHRvIHN0b3JlLlxuICpcbiAqIFRoaXMgaGVscGVycyBkb2VzIGp1c3QgdGhhdC5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHNpemUgLSBFeHBlY3RlZCBzaXplIG9mIHRoZSBhcnJheSB0byBtYXAuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5fVxuICovXG52YXIgTUFYXzhCSVRfSU5URUdFUiA9IE1hdGgucG93KDIsIDgpIC0gMSxcbiAgICBNQVhfMTZCSVRfSU5URUdFUiA9IE1hdGgucG93KDIsIDE2KSAtIDEsXG4gICAgTUFYXzMyQklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCAzMikgLSAxO1xuXG52YXIgTUFYX1NJR05FRF84QklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCA3KSAtIDEsXG4gICAgTUFYX1NJR05FRF8xNkJJVF9JTlRFR0VSID0gTWF0aC5wb3coMiwgMTUpIC0gMSxcbiAgICBNQVhfU0lHTkVEXzMyQklUX0lOVEVHRVIgPSBNYXRoLnBvdygyLCAzMSkgLSAxO1xuXG5leHBvcnRzLmdldFBvaW50ZXJBcnJheSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIG1heEluZGV4ID0gc2l6ZSAtIDE7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF84QklUX0lOVEVHRVIpXG4gICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF8xNkJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBVaW50MTZBcnJheTtcblxuICBpZiAobWF4SW5kZXggPD0gTUFYXzMyQklUX0lOVEVHRVIpXG4gICAgcmV0dXJuIFVpbnQzMkFycmF5O1xuXG4gIHJldHVybiBGbG9hdDY0QXJyYXk7XG59O1xuXG5leHBvcnRzLmdldFNpZ25lZFBvaW50ZXJBcnJheSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdmFyIG1heEluZGV4ID0gc2l6ZSAtIDE7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF9TSUdORURfOEJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBJbnQ4QXJyYXk7XG5cbiAgaWYgKG1heEluZGV4IDw9IE1BWF9TSUdORURfMTZCSVRfSU5URUdFUilcbiAgICByZXR1cm4gSW50MTZBcnJheTtcblxuICBpZiAobWF4SW5kZXggPD0gTUFYX1NJR05FRF8zMkJJVF9JTlRFR0VSKVxuICAgIHJldHVybiBJbnQzMkFycmF5O1xuXG4gIHJldHVybiBGbG9hdDY0QXJyYXk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyB0aGUgbWluaW1hbCB0eXBlIGFibGUgdG8gcmVwcmVzZW50IHRoZSBnaXZlbiBudW1iZXIuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZSAtIFZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5Q2xhc3N9XG4gKi9cbmV4cG9ydHMuZ2V0TnVtYmVyVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cbiAgLy8gPD0gMzIgYml0cyBpdG50ZWdlcj9cbiAgaWYgKHZhbHVlID09PSAodmFsdWUgfCAwKSkge1xuXG4gICAgLy8gTmVnYXRpdmVcbiAgICBpZiAoTWF0aC5zaWduKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgIGlmICh2YWx1ZSA8PSAxMjcgJiYgdmFsdWUgPj0gLTEyOClcbiAgICAgICAgcmV0dXJuIEludDhBcnJheTtcblxuICAgICAgaWYgKHZhbHVlIDw9IDMyNzY3ICYmIHZhbHVlID49IC0zMjc2OClcbiAgICAgICAgcmV0dXJuIEludDE2QXJyYXk7XG5cbiAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgIH1cbiAgICBlbHNlIHtcblxuICAgICAgaWYgKHZhbHVlIDw9IDI1NSlcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cbiAgICAgIGlmICh2YWx1ZSA8PSA2NTUzNSlcbiAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuXG4gICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgfVxuICB9XG5cbiAgLy8gNTMgYml0cyBpbnRlZ2VyICYgZmxvYXRzXG4gIC8vIE5PVEU6IGl0J3Mga2luZGEgaGFyZCB0byB0ZWxsIHdoZXRoZXIgd2UgY291bGQgdXNlIDMyYml0cyBvciBub3QuLi5cbiAgcmV0dXJuIEZsb2F0NjRBcnJheTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBtaW5pbWFsIHR5cGUgYWJsZSB0byByZXByZXNlbnQgdGhlIGdpdmVuIGFycmF5XG4gKiBvZiBKYXZhU2NyaXB0IG51bWJlcnMuXG4gKlxuICogQHBhcmFtICB7YXJyYXl9ICAgIGFycmF5ICAtIEFycmF5IHRvIHJlcHJlc2VudC5cbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBnZXR0ZXIgLSBPcHRpb25hbCBnZXR0ZXIuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5Q2xhc3N9XG4gKi9cbnZhciBUWVBFX1BSSU9SSVRZID0ge1xuICBVaW50OEFycmF5OiAxLFxuICBJbnQ4QXJyYXk6IDIsXG4gIFVpbnQxNkFycmF5OiAzLFxuICBJbnQxNkFycmF5OiA0LFxuICBVaW50MzJBcnJheTogNSxcbiAgSW50MzJBcnJheTogNixcbiAgRmxvYXQzMkFycmF5OiA3LFxuICBGbG9hdDY0QXJyYXk6IDhcbn07XG5cbi8vIFRPRE86IG1ha2UgdGhpcyBhIG9uZS1zaG90IGZvciBvbmUgdmFsdWVcbmV4cG9ydHMuZ2V0TWluaW1hbFJlcHJlc2VudGF0aW9uID0gZnVuY3Rpb24oYXJyYXksIGdldHRlcikge1xuICB2YXIgbWF4VHlwZSA9IG51bGwsXG4gICAgICBtYXhQcmlvcml0eSA9IDAsXG4gICAgICBwLFxuICAgICAgdCxcbiAgICAgIHYsXG4gICAgICBpLFxuICAgICAgbDtcblxuICBmb3IgKGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdiA9IGdldHRlciA/IGdldHRlcihhcnJheVtpXSkgOiBhcnJheVtpXTtcbiAgICB0ID0gZXhwb3J0cy5nZXROdW1iZXJUeXBlKHYpO1xuICAgIHAgPSBUWVBFX1BSSU9SSVRZW3QubmFtZV07XG5cbiAgICBpZiAocCA+IG1heFByaW9yaXR5KSB7XG4gICAgICBtYXhQcmlvcml0eSA9IHA7XG4gICAgICBtYXhUeXBlID0gdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4VHlwZTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gcmV0dXJuaW5nIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHBhcmFtICB7YW55fSB2YWx1ZSAtIFZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnRzLmlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY29uY2F0IGJ5dGUgYXJyYXlzLlxuICpcbiAqIEBwYXJhbSAgey4uLkJ5dGVBcnJheX1cbiAqIEByZXR1cm4ge0J5dGVBcnJheX1cbiAqL1xuZXhwb3J0cy5jb25jYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxlbmd0aCA9IDAsXG4gICAgICBpLFxuICAgICAgbyxcbiAgICAgIGw7XG5cbiAgZm9yIChpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgbGVuZ3RoICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG5cbiAgdmFyIGFycmF5ID0gbmV3IChhcmd1bWVudHNbMF0uY29uc3RydWN0b3IpKGxlbmd0aCk7XG5cbiAgZm9yIChpID0gMCwgbyA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBhcnJheS5zZXQoYXJndW1lbnRzW2ldLCBvKTtcbiAgICBvICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gaW5pdGlhbGl6ZSBhIGJ5dGUgYXJyYXkgb2YgaW5kaWNlcy5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ9ICAgIGxlbmd0aCAtIExlbmd0aCBvZiB0YXJnZXQuXG4gKiBAcmV0dXJuIHtCeXRlQXJyYXl9XG4gKi9cbmV4cG9ydHMuaW5kaWNlcyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICB2YXIgUG9pbnRlckFycmF5ID0gZXhwb3J0cy5nZXRQb2ludGVyQXJyYXkobGVuZ3RoKTtcblxuICB2YXIgYXJyYXkgPSBuZXcgUG9pbnRlckFycmF5KGxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICBhcnJheVtpXSA9IGk7XG5cbiAgcmV0dXJuIGFycmF5O1xufTtcbiIsICIvKipcbiAqIE1uZW1vbmlzdCBJdGVyYWJsZSBGdW5jdGlvblxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEhhcm1vbml6ZWQgaXRlcmF0aW9uIGhlbHBlcnMgb3ZlciBtaXhlZCBpdGVyYWJsZSB0YXJnZXRzLlxuICovXG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJ29ibGl0ZXJhdG9yL2ZvcmVhY2gnKTtcblxudmFyIHR5cGVkID0gcmVxdWlyZSgnLi90eXBlZC1hcnJheXMuanMnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3Qgc3VwcG9ydHMgYXJyYXktbGlrZVxuICogcmFuZG9tIGFjY2Vzcy5cbiAqXG4gKiBAcGFyYW0gIHthbnl9IHRhcmdldCAtIFRhcmdldCBvYmplY3QuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh0YXJnZXQpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGFyZ2V0KSB8fCB0eXBlZC5pc1R5cGVkQXJyYXkodGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIHRvIGd1ZXNzIHRoZSBsZW5ndGggb2YgdGhlIHN0cnVjdHVyZSBvdmVyIHdoaWNoIHdlIGFyZSBnb2luZ1xuICogdG8gaXRlcmF0ZS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9IHRhcmdldCAtIFRhcmdldCBvYmplY3QuXG4gKiBAcmV0dXJuIHtudW1iZXJ8dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBndWVzc0xlbmd0aCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiB0YXJnZXQubGVuZ3RoID09PSAnbnVtYmVyJylcbiAgICByZXR1cm4gdGFyZ2V0Lmxlbmd0aDtcblxuICBpZiAodHlwZW9mIHRhcmdldC5zaXplID09PSAnbnVtYmVyJylcbiAgICByZXR1cm4gdGFyZ2V0LnNpemU7XG5cbiAgcmV0dXJuO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gY29udmVydCBhbiBpdGVyYWJsZSB0byBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9ICAgdGFyZ2V0IC0gSXRlcmF0aW9uIHRhcmdldC5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KHRhcmdldCkge1xuICB2YXIgbCA9IGd1ZXNzTGVuZ3RoKHRhcmdldCk7XG5cbiAgdmFyIGFycmF5ID0gdHlwZW9mIGwgPT09ICdudW1iZXInID8gbmV3IEFycmF5KGwpIDogW107XG5cbiAgdmFyIGkgPSAwO1xuXG4gIC8vIFRPRE86IHdlIGNvdWxkIG9wdGltaXplIHdoZW4gZ2l2ZW4gdGFyZ2V0IGlzIGFycmF5IGxpa2VcbiAgZm9yRWFjaCh0YXJnZXQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgYXJyYXlbaSsrXSA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogU2FtZSBhcyBhYm92ZSBidXQgcmV0dXJucyBhIHN1cHBsZW1lbnRhcnkgaW5kaWNlcyBhcnJheS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9ICAgdGFyZ2V0IC0gSXRlcmF0aW9uIHRhcmdldC5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5V2l0aEluZGljZXModGFyZ2V0KSB7XG4gIHZhciBsID0gZ3Vlc3NMZW5ndGgodGFyZ2V0KTtcblxuICB2YXIgSW5kZXhBcnJheSA9IHR5cGVvZiBsID09PSAnbnVtYmVyJyA/XG4gICAgdHlwZWQuZ2V0UG9pbnRlckFycmF5KGwpIDpcbiAgICBBcnJheTtcblxuICB2YXIgYXJyYXkgPSB0eXBlb2YgbCA9PT0gJ251bWJlcicgPyBuZXcgQXJyYXkobCkgOiBbXTtcbiAgdmFyIGluZGljZXMgPSB0eXBlb2YgbCA9PT0gJ251bWJlcicgPyBuZXcgSW5kZXhBcnJheShsKSA6IFtdO1xuXG4gIHZhciBpID0gMDtcblxuICAvLyBUT0RPOiB3ZSBjb3VsZCBvcHRpbWl6ZSB3aGVuIGdpdmVuIHRhcmdldCBpcyBhcnJheSBsaWtlXG4gIGZvckVhY2godGFyZ2V0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGFycmF5W2ldID0gdmFsdWU7XG4gICAgaW5kaWNlc1tpXSA9IGkrKztcbiAgfSk7XG5cbiAgcmV0dXJuIFthcnJheSwgaW5kaWNlc107XG59XG5cbi8qKlxuICogRXhwb3J0aW5nLlxuICovXG5leHBvcnRzLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG5leHBvcnRzLmd1ZXNzTGVuZ3RoID0gZ3Vlc3NMZW5ndGg7XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuZXhwb3J0cy50b0FycmF5V2l0aEluZGljZXMgPSB0b0FycmF5V2l0aEluZGljZXM7XG4iLCAiLyoqXG4gKiBNbmVtb25pc3QgTFJVQ2FjaGVcbiAqID09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBMUlUgQ2FjaGUgZGF0YSBzdHJ1Y3R1cmUuIFRvIHNhdmUgdXBcbiAqIG1lbW9yeSBhbmQgYWxsb2NhdGlvbnMgdGhpcyBpbXBsZW1lbnRhdGlvbiByZXByZXNlbnRzIGl0cyB1bmRlcmx5aW5nXG4gKiBkb3VibHktbGlua2VkIGxpc3QgYXMgc3RhdGljIGFycmF5cyBhbmQgcG9pbnRlcnMuIFRodXMsIG1lbW9yeSBpcyBhbGxvY2F0ZWRcbiAqIG9ubHkgb25jZSBhdCBpbnN0YW50aWF0aW9uIGFuZCBKUyBvYmplY3RzIGFyZSBuZXZlciBjcmVhdGVkIHRvIHNlcnZlIGFzXG4gKiBwb2ludGVycy4gVGhpcyBhbHNvIG1lYW5zIHRoaXMgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgdHJpZ2dlciB0b28gbWFueVxuICogZ2FyYmFnZSBjb2xsZWN0aW9ucy5cbiAqXG4gKiBOb3RlIHRoYXQgdG8gc2F2ZSB1cCBtZW1vcnksIGEgTFJVIENhY2hlIGNhbiBiZSBpbXBsZW1lbnRlZCB1c2luZyBhIHNpbmdseVxuICogbGlua2VkIGxpc3QgYnkgc3RvcmluZyBwcmVkZWNlc3NvcnMnIHBvaW50ZXJzIGFzIGhhc2htYXAgdmFsdWVzLlxuICogSG93ZXZlciwgdGhpcyBtZWFucyBtb3JlIGhhc2htYXAgbG9va3VwcyBhbmQgd291bGQgcHJvYmFibHkgc2xvdyB0aGUgd2hvbGVcbiAqIHRoaW5nIGRvd24uIFdoYXQncyBtb3JlLCBwb2ludGVycyBhcmUgbm90IHRoZSB0aGluZ3MgdGFraW5nIG1vc3Qgc3BhY2UgaW5cbiAqIG1lbW9yeS5cbiAqL1xudmFyIEl0ZXJhdG9yID0gcmVxdWlyZSgnb2JsaXRlcmF0b3IvaXRlcmF0b3InKSxcbiAgICBmb3JFYWNoID0gcmVxdWlyZSgnb2JsaXRlcmF0b3IvZm9yZWFjaCcpLFxuICAgIHR5cGVkID0gcmVxdWlyZSgnLi91dGlscy90eXBlZC1hcnJheXMuanMnKSxcbiAgICBpdGVyYWJsZXMgPSByZXF1aXJlKCcuL3V0aWxzL2l0ZXJhYmxlcy5qcycpO1xuXG4vKipcbiAqIExSVUNhY2hlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gS2V5cyAgICAgLSBBcnJheSBjbGFzcyBmb3Igc3RvcmluZyBrZXlzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gVmFsdWVzICAgLSBBcnJheSBjbGFzcyBmb3Igc3RvcmluZyB2YWx1ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gICBjYXBhY2l0eSAtIERlc2lyZWQgY2FwYWNpdHkuXG4gKi9cbmZ1bmN0aW9uIExSVUNhY2hlKEtleXMsIFZhbHVlcywgY2FwYWNpdHkpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgY2FwYWNpdHkgPSBLZXlzO1xuICAgIEtleXMgPSBudWxsO1xuICAgIFZhbHVlcyA9IG51bGw7XG4gIH1cblxuICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLmNhcGFjaXR5ICE9PSAnbnVtYmVyJyB8fCB0aGlzLmNhcGFjaXR5IDw9IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdtbmVtb25pc3QvbHJ1LWNhY2hlOiBjYXBhY2l0eSBzaG91bGQgYmUgcG9zaXRpdmUgbnVtYmVyLicpO1xuXG4gIHZhciBQb2ludGVyQXJyYXkgPSB0eXBlZC5nZXRQb2ludGVyQXJyYXkoY2FwYWNpdHkpO1xuXG4gIHRoaXMuZm9yd2FyZCA9IG5ldyBQb2ludGVyQXJyYXkoY2FwYWNpdHkpO1xuICB0aGlzLmJhY2t3YXJkID0gbmV3IFBvaW50ZXJBcnJheShjYXBhY2l0eSk7XG4gIHRoaXMuSyA9IHR5cGVvZiBLZXlzID09PSAnZnVuY3Rpb24nID8gbmV3IEtleXMoY2FwYWNpdHkpIDogbmV3IEFycmF5KGNhcGFjaXR5KTtcbiAgdGhpcy5WID0gdHlwZW9mIFZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBWYWx1ZXMoY2FwYWNpdHkpIDogbmV3IEFycmF5KGNhcGFjaXR5KTtcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuaGVhZCA9IDA7XG4gIHRoaXMudGFpbCA9IDA7XG4gIHRoaXMuaXRlbXMgPSB7fTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBjbGVhciB0aGUgc3RydWN0dXJlLlxuICpcbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqL1xuTFJVQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuaGVhZCA9IDA7XG4gIHRoaXMudGFpbCA9IDA7XG4gIHRoaXMuaXRlbXMgPSB7fTtcbn07XG5cbi8qKlxuICogTWV0aG9kIHVzZWQgdG8gc3BsYXkgYSB2YWx1ZSBvbiB0b3AuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSAgIHBvaW50ZXIgLSBQb2ludGVyIG9mIHRoZSB2YWx1ZSB0byBzcGxheSBvbiB0b3AuXG4gKiBAcmV0dXJuIHtMUlVDYWNoZX1cbiAqL1xuTFJVQ2FjaGUucHJvdG90eXBlLnNwbGF5T25Ub3AgPSBmdW5jdGlvbihwb2ludGVyKSB7XG4gIHZhciBvbGRIZWFkID0gdGhpcy5oZWFkO1xuXG4gIGlmICh0aGlzLmhlYWQgPT09IHBvaW50ZXIpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHByZXZpb3VzID0gdGhpcy5iYWNrd2FyZFtwb2ludGVyXSxcbiAgICAgIG5leHQgPSB0aGlzLmZvcndhcmRbcG9pbnRlcl07XG5cbiAgaWYgKHRoaXMudGFpbCA9PT0gcG9pbnRlcikge1xuICAgIHRoaXMudGFpbCA9IHByZXZpb3VzO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuYmFja3dhcmRbbmV4dF0gPSBwcmV2aW91cztcbiAgfVxuXG4gIHRoaXMuZm9yd2FyZFtwcmV2aW91c10gPSBuZXh0O1xuXG4gIHRoaXMuYmFja3dhcmRbb2xkSGVhZF0gPSBwb2ludGVyO1xuICB0aGlzLmhlYWQgPSBwb2ludGVyO1xuICB0aGlzLmZvcndhcmRbcG9pbnRlcl0gPSBvbGRIZWFkO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBzZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4ga2V5IGluIHRoZSBjYWNoZS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9IGtleSAgIC0gS2V5LlxuICogQHBhcmFtICB7YW55fSB2YWx1ZSAtIFZhbHVlLlxuICogQHJldHVybiB7dW5kZWZpbmVkfVxuICovXG5MUlVDYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXG4gIC8vIFRoZSBrZXkgYWxyZWFkeSBleGlzdHMsIHdlIGp1c3QgbmVlZCB0byB1cGRhdGUgdGhlIHZhbHVlIGFuZCBzcGxheSBvbiB0b3BcbiAgdmFyIHBvaW50ZXIgPSB0aGlzLml0ZW1zW2tleV07XG5cbiAgaWYgKHR5cGVvZiBwb2ludGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuc3BsYXlPblRvcChwb2ludGVyKTtcbiAgICB0aGlzLlZbcG9pbnRlcl0gPSB2YWx1ZTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoZSBjYWNoZSBpcyBub3QgeWV0IGZ1bGxcbiAgaWYgKHRoaXMuc2l6ZSA8IHRoaXMuY2FwYWNpdHkpIHtcbiAgICBwb2ludGVyID0gdGhpcy5zaXplKys7XG4gIH1cblxuICAvLyBDYWNoZSBpcyBmdWxsLCB3ZSBuZWVkIHRvIGRyb3AgdGhlIGxhc3QgdmFsdWVcbiAgZWxzZSB7XG4gICAgcG9pbnRlciA9IHRoaXMudGFpbDtcbiAgICB0aGlzLnRhaWwgPSB0aGlzLmJhY2t3YXJkW3BvaW50ZXJdO1xuICAgIGRlbGV0ZSB0aGlzLml0ZW1zW3RoaXMuS1twb2ludGVyXV07XG4gIH1cblxuICAvLyBTdG9yaW5nIGtleSAmIHZhbHVlXG4gIHRoaXMuaXRlbXNba2V5XSA9IHBvaW50ZXI7XG4gIHRoaXMuS1twb2ludGVyXSA9IGtleTtcbiAgdGhpcy5WW3BvaW50ZXJdID0gdmFsdWU7XG5cbiAgLy8gTW92aW5nIHRoZSBpdGVtIGF0IHRoZSBmcm9udCBvZiB0aGUgbGlzdFxuICB0aGlzLmZvcndhcmRbcG9pbnRlcl0gPSB0aGlzLmhlYWQ7XG4gIHRoaXMuYmFja3dhcmRbdGhpcy5oZWFkXSA9IHBvaW50ZXI7XG4gIHRoaXMuaGVhZCA9IHBvaW50ZXI7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIHNldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBrZXkgaW4gdGhlIGNhY2hlXG4gKlxuICogQHBhcmFtICB7YW55fSBrZXkgICAtIEtleS5cbiAqIEBwYXJhbSAge2FueX0gdmFsdWUgLSBWYWx1ZS5cbiAqIEByZXR1cm4ge3tldmljdGVkOiBib29sZWFuLCBrZXk6IGFueSwgdmFsdWU6IGFueX19IEFuIG9iamVjdCBjb250YWluaW5nIHRoZVxuICoga2V5IGFuZCB2YWx1ZSBvZiBhbiBpdGVtIHRoYXQgd2FzIG92ZXJ3cml0dGVuIG9yIGV2aWN0ZWQgaW4gdGhlIHNldFxuICogb3BlcmF0aW9uLCBhcyB3ZWxsIGFzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgaXQgd2FzIGV2aWN0ZWQgZHVlIHRvXG4gKiBsaW1pdGVkIGNhcGFjaXR5LiBSZXR1cm4gdmFsdWUgaXMgbnVsbCBpZiBub3RoaW5nIHdhcyBldmljdGVkIG9yIG92ZXJ3cml0dGVuXG4gKiBkdXJpbmcgdGhlIHNldCBvcGVyYXRpb24uXG4gKi9cbkxSVUNhY2hlLnByb3RvdHlwZS5zZXRwb3AgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gIHZhciBvbGRWYWx1ZSA9IG51bGw7XG4gIHZhciBvbGRLZXkgPSBudWxsO1xuICAvLyBUaGUga2V5IGFscmVhZHkgZXhpc3RzLCB3ZSBqdXN0IG5lZWQgdG8gdXBkYXRlIHRoZSB2YWx1ZSBhbmQgc3BsYXkgb24gdG9wXG4gIHZhciBwb2ludGVyID0gdGhpcy5pdGVtc1trZXldO1xuXG4gIGlmICh0eXBlb2YgcG9pbnRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLnNwbGF5T25Ub3AocG9pbnRlcik7XG4gICAgb2xkVmFsdWUgPSB0aGlzLlZbcG9pbnRlcl07XG4gICAgdGhpcy5WW3BvaW50ZXJdID0gdmFsdWU7XG4gICAgcmV0dXJuIHtldmljdGVkOiBmYWxzZSwga2V5OiBrZXksIHZhbHVlOiBvbGRWYWx1ZX07XG4gIH1cblxuICAvLyBUaGUgY2FjaGUgaXMgbm90IHlldCBmdWxsXG4gIGlmICh0aGlzLnNpemUgPCB0aGlzLmNhcGFjaXR5KSB7XG4gICAgcG9pbnRlciA9IHRoaXMuc2l6ZSsrO1xuICB9XG5cbiAgLy8gQ2FjaGUgaXMgZnVsbCwgd2UgbmVlZCB0byBkcm9wIHRoZSBsYXN0IHZhbHVlXG4gIGVsc2Uge1xuICAgIHBvaW50ZXIgPSB0aGlzLnRhaWw7XG4gICAgdGhpcy50YWlsID0gdGhpcy5iYWNrd2FyZFtwb2ludGVyXTtcbiAgICBvbGRWYWx1ZSA9IHRoaXMuVltwb2ludGVyXTtcbiAgICBvbGRLZXkgPSB0aGlzLktbcG9pbnRlcl07XG4gICAgZGVsZXRlIHRoaXMuaXRlbXNbdGhpcy5LW3BvaW50ZXJdXTtcbiAgfVxuXG4gIC8vIFN0b3Jpbmcga2V5ICYgdmFsdWVcbiAgdGhpcy5pdGVtc1trZXldID0gcG9pbnRlcjtcbiAgdGhpcy5LW3BvaW50ZXJdID0ga2V5O1xuICB0aGlzLlZbcG9pbnRlcl0gPSB2YWx1ZTtcblxuICAvLyBNb3ZpbmcgdGhlIGl0ZW0gYXQgdGhlIGZyb250IG9mIHRoZSBsaXN0XG4gIHRoaXMuZm9yd2FyZFtwb2ludGVyXSA9IHRoaXMuaGVhZDtcbiAgdGhpcy5iYWNrd2FyZFt0aGlzLmhlYWRdID0gcG9pbnRlcjtcbiAgdGhpcy5oZWFkID0gcG9pbnRlcjtcblxuICAvLyBSZXR1cm4gb2JqZWN0IGlmIGV2aWN0aW9uIHRvb2sgcGxhY2UsIG90aGVyd2lzZSByZXR1cm4gbnVsbFxuICBpZiAob2xkS2V5KSB7XG4gICAgcmV0dXJuIHtldmljdGVkOiB0cnVlLCBrZXk6IG9sZEtleSwgdmFsdWU6IG9sZFZhbHVlfTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBjaGVjayB3aGV0aGVyIHRoZSBrZXkgZXhpc3RzIGluIHRoZSBjYWNoZS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9IGtleSAgIC0gS2V5LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuTFJVQ2FjaGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICByZXR1cm4ga2V5IGluIHRoaXMuaXRlbXM7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGdldCB0aGUgdmFsdWUgYXR0YWNoZWQgdG8gdGhlIGdpdmVuIGtleS4gV2lsbCBtb3ZlIHRoZVxuICogcmVsYXRlZCBrZXkgdG8gdGhlIGZyb250IG9mIHRoZSB1bmRlcmx5aW5nIGxpbmtlZCBsaXN0LlxuICpcbiAqIEBwYXJhbSAge2FueX0ga2V5ICAgLSBLZXkuXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbkxSVUNhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpIHtcbiAgdmFyIHBvaW50ZXIgPSB0aGlzLml0ZW1zW2tleV07XG5cbiAgaWYgKHR5cGVvZiBwb2ludGVyID09PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm47XG5cbiAgdGhpcy5zcGxheU9uVG9wKHBvaW50ZXIpO1xuXG4gIHJldHVybiB0aGlzLlZbcG9pbnRlcl07XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGdldCB0aGUgdmFsdWUgYXR0YWNoZWQgdG8gdGhlIGdpdmVuIGtleS4gRG9lcyBub3QgbW9kaWZ5XG4gKiB0aGUgb3JkZXJpbmcgb2YgdGhlIHVuZGVybHlpbmcgbGlua2VkIGxpc3QuXG4gKlxuICogQHBhcmFtICB7YW55fSBrZXkgICAtIEtleS5cbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuTFJVQ2FjaGUucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcG9pbnRlciA9IHRoaXMuaXRlbXNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgcG9pbnRlciA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybjtcblxuICAgIHJldHVybiB0aGlzLlZbcG9pbnRlcl07XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGl0ZXJhdGUgb3ZlciB0aGUgY2FjaGUncyBlbnRyaWVzIHVzaW5nIGEgY2FsbGJhY2suXG4gKlxuICogQHBhcmFtICB7ZnVuY3Rpb259ICBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaXRlbS5cbiAqIEBwYXJhbSAge29iamVjdH0gICAgc2NvcGUgICAgLSBPcHRpb25hbCBzY29wZS5cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqL1xuTFJVQ2FjaGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgc2NvcGUpIHtcbiAgc2NvcGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNjb3BlIDogdGhpcztcblxuICB2YXIgaSA9IDAsXG4gICAgICBsID0gdGhpcy5zaXplO1xuXG4gIHZhciBwb2ludGVyID0gdGhpcy5oZWFkLFxuICAgICAga2V5cyA9IHRoaXMuSyxcbiAgICAgIHZhbHVlcyA9IHRoaXMuVixcbiAgICAgIGZvcndhcmQgPSB0aGlzLmZvcndhcmQ7XG5cbiAgd2hpbGUgKGkgPCBsKSB7XG5cbiAgICBjYWxsYmFjay5jYWxsKHNjb3BlLCB2YWx1ZXNbcG9pbnRlcl0sIGtleXNbcG9pbnRlcl0sIHRoaXMpO1xuICAgIHBvaW50ZXIgPSBmb3J3YXJkW3BvaW50ZXJdO1xuXG4gICAgaSsrO1xuICB9XG59O1xuXG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNyZWF0ZSBhbiBpdGVyYXRvciBvdmVyIHRoZSBjYWNoZSdzIGtleXMgZnJvbSBtb3N0XG4gKiByZWNlbnRseSB1c2VkIHRvIGxlYXN0IHJlY2VudGx5IHVzZWQuXG4gKlxuICogQHJldHVybiB7SXRlcmF0b3J9XG4gKi9cbkxSVUNhY2hlLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIGwgPSB0aGlzLnNpemU7XG5cbiAgdmFyIHBvaW50ZXIgPSB0aGlzLmhlYWQsXG4gICAgICBrZXlzID0gdGhpcy5LLFxuICAgICAgZm9yd2FyZCA9IHRoaXMuZm9yd2FyZDtcblxuICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkge1xuICAgIGlmIChpID49IGwpXG4gICAgICByZXR1cm4ge2RvbmU6IHRydWV9O1xuXG4gICAgdmFyIGtleSA9IGtleXNbcG9pbnRlcl07XG5cbiAgICBpKys7XG5cbiAgICBpZiAoaSA8IGwpXG4gICAgICBwb2ludGVyID0gZm9yd2FyZFtwb2ludGVyXTtcblxuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBrZXlcbiAgICB9O1xuICB9KTtcbn07XG5cbi8qKlxuICogTWV0aG9kIHVzZWQgdG8gY3JlYXRlIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIGNhY2hlJ3MgdmFsdWVzIGZyb20gbW9zdFxuICogcmVjZW50bHkgdXNlZCB0byBsZWFzdCByZWNlbnRseSB1c2VkLlxuICpcbiAqIEByZXR1cm4ge0l0ZXJhdG9yfVxuICovXG5MUlVDYWNoZS5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIGwgPSB0aGlzLnNpemU7XG5cbiAgdmFyIHBvaW50ZXIgPSB0aGlzLmhlYWQsXG4gICAgICB2YWx1ZXMgPSB0aGlzLlYsXG4gICAgICBmb3J3YXJkID0gdGhpcy5mb3J3YXJkO1xuXG4gIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSB7XG4gICAgaWYgKGkgPj0gbClcbiAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX07XG5cbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbcG9pbnRlcl07XG5cbiAgICBpKys7XG5cbiAgICBpZiAoaSA8IGwpXG4gICAgICBwb2ludGVyID0gZm9yd2FyZFtwb2ludGVyXTtcblxuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH0pO1xufTtcblxuLyoqXG4gKiBNZXRob2QgdXNlZCB0byBjcmVhdGUgYW4gaXRlcmF0b3Igb3ZlciB0aGUgY2FjaGUncyBlbnRyaWVzIGZyb20gbW9zdFxuICogcmVjZW50bHkgdXNlZCB0byBsZWFzdCByZWNlbnRseSB1c2VkLlxuICpcbiAqIEByZXR1cm4ge0l0ZXJhdG9yfVxuICovXG5MUlVDYWNoZS5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaSA9IDAsXG4gICAgICBsID0gdGhpcy5zaXplO1xuXG4gIHZhciBwb2ludGVyID0gdGhpcy5oZWFkLFxuICAgICAga2V5cyA9IHRoaXMuSyxcbiAgICAgIHZhbHVlcyA9IHRoaXMuVixcbiAgICAgIGZvcndhcmQgPSB0aGlzLmZvcndhcmQ7XG5cbiAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIHtcbiAgICBpZiAoaSA+PSBsKVxuICAgICAgcmV0dXJuIHtkb25lOiB0cnVlfTtcblxuICAgIHZhciBrZXkgPSBrZXlzW3BvaW50ZXJdLFxuICAgICAgICB2YWx1ZSA9IHZhbHVlc1twb2ludGVyXTtcblxuICAgIGkrKztcblxuICAgIGlmIChpIDwgbClcbiAgICAgIHBvaW50ZXIgPSBmb3J3YXJkW3BvaW50ZXJdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IFtrZXksIHZhbHVlXVxuICAgIH07XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBdHRhY2hpbmcgdGhlICMuZW50cmllcyBtZXRob2QgdG8gU3ltYm9sLml0ZXJhdG9yIGlmIHBvc3NpYmxlLlxuICovXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpXG4gIExSVUNhY2hlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gTFJVQ2FjaGUucHJvdG90eXBlLmVudHJpZXM7XG5cbi8qKlxuICogQ29udmVuaWVuY2Uga25vd24gbWV0aG9kcy5cbiAqL1xuTFJVQ2FjaGUucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHByb3h5ID0gbmV3IE1hcCgpO1xuXG4gIHZhciBpdGVyYXRvciA9IHRoaXMuZW50cmllcygpLFxuICAgICAgc3RlcDtcblxuICB3aGlsZSAoKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCksICFzdGVwLmRvbmUpKVxuICAgIHByb3h5LnNldChzdGVwLnZhbHVlWzBdLCBzdGVwLnZhbHVlWzFdKTtcblxuICAvLyBUcmljayBzbyB0aGF0IG5vZGUgZGlzcGxheXMgdGhlIG5hbWUgb2YgdGhlIGNvbnN0cnVjdG9yXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm94eSwgJ2NvbnN0cnVjdG9yJywge1xuICAgIHZhbHVlOiBMUlVDYWNoZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICB9KTtcblxuICByZXR1cm4gcHJveHk7XG59O1xuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpXG4gIExSVUNhY2hlLnByb3RvdHlwZVtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IExSVUNhY2hlLnByb3RvdHlwZS5pbnNwZWN0O1xuXG4vKipcbiAqIFN0YXRpYyBALmZyb20gZnVuY3Rpb24gdGFraW5nIGFuIGFyYml0cmFyeSBpdGVyYWJsZSAmIGNvbnZlcnRpbmcgaXQgaW50b1xuICogYSBzdHJ1Y3R1cmUuXG4gKlxuICogQHBhcmFtICB7SXRlcmFibGV9IGl0ZXJhYmxlIC0gVGFyZ2V0IGl0ZXJhYmxlLlxuICogQHBhcmFtICB7ZnVuY3Rpb259IEtleXMgICAgIC0gQXJyYXkgY2xhc3MgZm9yIHN0b3Jpbmcga2V5cy5cbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBWYWx1ZXMgICAtIEFycmF5IGNsYXNzIGZvciBzdG9yaW5nIHZhbHVlcy5cbiAqIEBwYXJhbSAge251bWJlcn0gICBjYXBhY2l0eSAtIENhY2hlJ3MgY2FwYWNpdHkuXG4gKiBAcmV0dXJuIHtMUlVDYWNoZX1cbiAqL1xuTFJVQ2FjaGUuZnJvbSA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBLZXlzLCBWYWx1ZXMsIGNhcGFjaXR5KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIGNhcGFjaXR5ID0gaXRlcmFibGVzLmd1ZXNzTGVuZ3RoKGl0ZXJhYmxlKTtcblxuICAgIGlmICh0eXBlb2YgY2FwYWNpdHkgIT09ICdudW1iZXInKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtbmVtb25pc3QvbHJ1LWNhY2hlLmZyb206IGNvdWxkIG5vdCBndWVzcyBpdGVyYWJsZSBsZW5ndGguIFBsZWFzZSBwcm92aWRlIGRlc2lyZWQgY2FwYWNpdHkgYXMgbGFzdCBhcmd1bWVudC4nKTtcbiAgfVxuICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgY2FwYWNpdHkgPSBLZXlzO1xuICAgIEtleXMgPSBudWxsO1xuICAgIFZhbHVlcyA9IG51bGw7XG4gIH1cblxuICB2YXIgY2FjaGUgPSBuZXcgTFJVQ2FjaGUoS2V5cywgVmFsdWVzLCBjYXBhY2l0eSk7XG5cbiAgZm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGNhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuLyoqXG4gKiBFeHBvcnRpbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gTFJVQ2FjaGU7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgRW5kcG9pbnRDYWNoZTogKCkgPT4gRW5kcG9pbnRDYWNoZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9FbmRwb2ludENhY2hlLnRzXG52YXIgaW1wb3J0X2xydV9jYWNoZSA9IF9fdG9FU00ocmVxdWlyZShcIm1uZW1vbmlzdC9scnUtY2FjaGVcIikpO1xudmFyIEVuZHBvaW50Q2FjaGUgPSBjbGFzcyB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRW5kcG9pbnRDYWNoZVwiKTtcbiAgfVxuICBjYWNoZTtcbiAgY29uc3RydWN0b3IoY2FwYWNpdHkpIHtcbiAgICB0aGlzLmNhY2hlID0gbmV3IGltcG9ydF9scnVfY2FjaGUuZGVmYXVsdChjYXBhY2l0eSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gdW4tZXhwaXJlZCBlbmRwb2ludCBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICpcbiAgICogQHBhcmFtIGVuZHBvaW50c1dpdGhFeHBpcnlcbiAgICogQHJldHVybnNcbiAgICovXG4gIGdldEVuZHBvaW50KGtleSkge1xuICAgIGNvbnN0IGVuZHBvaW50c1dpdGhFeHBpcnkgPSB0aGlzLmdldChrZXkpO1xuICAgIGlmICghZW5kcG9pbnRzV2l0aEV4cGlyeSB8fCBlbmRwb2ludHNXaXRoRXhwaXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgY29uc3QgZW5kcG9pbnRzID0gZW5kcG9pbnRzV2l0aEV4cGlyeS5tYXAoKGVuZHBvaW50KSA9PiBlbmRwb2ludC5BZGRyZXNzKTtcbiAgICByZXR1cm4gZW5kcG9pbnRzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGVuZHBvaW50cy5sZW5ndGgpXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB1bi1leHBpcmVkIGVuZHBvaW50cyBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICpcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgZ2V0KGtleSkge1xuICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGVuZHBvaW50c1dpdGhFeHBpcnkgPSB2YWx1ZS5maWx0ZXIoKGVuZHBvaW50KSA9PiBub3cgPCBlbmRwb2ludC5FeHBpcmVzKTtcbiAgICBpZiAoZW5kcG9pbnRzV2l0aEV4cGlyeS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gZW5kcG9pbnRzV2l0aEV4cGlyeTtcbiAgfVxuICAvKipcbiAgICogU3RvcmVzIHRoZSBlbmRwb2ludHMgcGFzc2VkIGZvciB0aGUga2V5IGluIGNhY2hlLlxuICAgKiBJZiBub3QgZGVmaW5lZCwgdXNlcyBlbXB0eSBzdHJpbmcgZm9yIHRoZSBBZGRyZXNzIGluIGVuZHBvaW50LlxuICAgKiBJZiBub3QgZGVmaW5lZCwgdXNlcyBvbmUgbWludXRlIGZvciBDYWNoZVBlcmlvZEluTWludXRlcyBpbiBlbmRwb2ludC5cbiAgICogU3RvcmVzIG1pbGxpc2Vjb25kcyBlbGFwc2VkIHNpbmNlIHRoZSBVTklYIGVwb2NoIGluIEV4cGlyZXMgcGFyYW0gYmFzZWRcbiAgICogb24gdmFsdWUgcHJvdmlkZWQgaW4gQ2FjaGVQZXJpb2RJbk1pbnV0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHBhcmFtIGVuZHBvaW50c1xuICAgKi9cbiAgc2V0KGtleSwgZW5kcG9pbnRzKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLmNhY2hlLnNldChcbiAgICAgIGtleSxcbiAgICAgIGVuZHBvaW50cy5tYXAoKHsgQWRkcmVzcywgQ2FjaGVQZXJpb2RJbk1pbnV0ZXMgfSkgPT4gKHtcbiAgICAgICAgQWRkcmVzcyxcbiAgICAgICAgRXhwaXJlczogbm93ICsgQ2FjaGVQZXJpb2RJbk1pbnV0ZXMgKiA2MCAqIDFlM1xuICAgICAgfSkpXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBrZXkgaW4gdGhlIGNhY2hlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqL1xuICBkZWxldGUoa2V5KSB7XG4gICAgdGhpcy5jYWNoZS5zZXQoa2V5LCBbXSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSBrZXkgZXhpc3RzIGluIGNhY2hlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIGlmICghdGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBlbmRwb2ludHMgPSB0aGlzLmNhY2hlLnBlZWsoa2V5KTtcbiAgICBpZiAoIWVuZHBvaW50cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZW5kcG9pbnRzLmxlbmd0aCA+IDA7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgY2FjaGUuXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBFbmRwb2ludENhY2hlXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBOT0RFX0VORFBPSU5UX0RJU0NPVkVSWV9DT05GSUdfT1BUSU9OUzogKCkgPT4gTk9ERV9FTkRQT0lOVF9ESVNDT1ZFUllfQ09ORklHX09QVElPTlMsXG4gIGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZU9wdGlvbnM6ICgpID0+IGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldEVuZHBvaW50RGlzY292ZXJ5T3B0aW9uYWxQbHVnaW46ICgpID0+IGdldEVuZHBvaW50RGlzY292ZXJ5T3B0aW9uYWxQbHVnaW4sXG4gIGdldEVuZHBvaW50RGlzY292ZXJ5UGx1Z2luOiAoKSA9PiBnZXRFbmRwb2ludERpc2NvdmVyeVBsdWdpbixcbiAgZ2V0RW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZFBsdWdpbjogKCkgPT4gZ2V0RW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZFBsdWdpbixcbiAgcmVzb2x2ZUVuZHBvaW50RGlzY292ZXJ5Q29uZmlnOiAoKSA9PiByZXNvbHZlRW5kcG9pbnREaXNjb3ZlcnlDb25maWdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG5cbi8vIHNyYy9jb25maWd1cmF0aW9ucy50c1xudmFyIEVOVl9FTkRQT0lOVF9ESVNDT1ZFUlkgPSBbXCJBV1NfRU5BQkxFX0VORFBPSU5UX0RJU0NPVkVSWVwiLCBcIkFXU19FTkRQT0lOVF9ESVNDT1ZFUllfRU5BQkxFRFwiXTtcbnZhciBDT05GSUdfRU5EUE9JTlRfRElTQ09WRVJZID0gXCJlbmRwb2ludF9kaXNjb3ZlcnlfZW5hYmxlZFwiO1xudmFyIGlzRmFsc3kgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4gW1wiZmFsc2VcIiwgXCIwXCJdLmluZGV4T2YodmFsdWUpID49IDAsIFwiaXNGYWxzeVwiKTtcbnZhciBOT0RFX0VORFBPSU5UX0RJU0NPVkVSWV9DT05GSUdfT1BUSU9OUyA9IHtcbiAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbnYpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEVOVl9FTkRQT0lOVF9ESVNDT1ZFUlkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVudktleSA9IEVOVl9FTkRQT0lOVF9ESVNDT1ZFUllbaV07XG4gICAgICBpZiAoZW52S2V5IGluIGVudikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGVudltlbnZLZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgRW52aXJvbm1lbnQgdmFyaWFibGUgJHtlbnZLZXl9IGNhbid0IGJlIGVtcHR5IG9mIHVuZGVmaW5lZCwgZ290IFwiJHt2YWx1ZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhaXNGYWxzeSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBcImVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvclwiKSxcbiAgY29uZmlnRmlsZVNlbGVjdG9yOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwcm9maWxlKSA9PiB7XG4gICAgaWYgKENPTkZJR19FTkRQT0lOVF9ESVNDT1ZFUlkgaW4gcHJvZmlsZSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBwcm9maWxlW0NPTkZJR19FTkRQT0lOVF9ESVNDT1ZFUlldO1xuICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYFNoYXJlZCBjb25maWcgZW50cnkgJHtDT05GSUdfRU5EUE9JTlRfRElTQ09WRVJZfSBjYW4ndCBiZSB1bmRlZmluZWQsIGdvdCBcIiR7dmFsdWV9XCJgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhaXNGYWxzeSh2YWx1ZSk7XG4gICAgfVxuICB9LCBcImNvbmZpZ0ZpbGVTZWxlY3RvclwiKSxcbiAgZGVmYXVsdDogdm9pZCAwXG59O1xuXG4vLyBzcmMvZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlLnRzXG52YXIgaW1wb3J0X3Byb3RvY29sX2h0dHAgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCIpO1xuXG4vLyBzcmMvZ2V0Q2FjaGVLZXkudHNcbnZhciBnZXRDYWNoZUtleSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGNvbW1hbmROYW1lLCBjb25maWcsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyBhY2Nlc3NLZXlJZCB9ID0gYXdhaXQgY29uZmlnLmNyZWRlbnRpYWxzKCk7XG4gIGNvbnN0IHsgaWRlbnRpZmllcnMgfSA9IG9wdGlvbnM7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgLi4uYWNjZXNzS2V5SWQgJiYgeyBhY2Nlc3NLZXlJZCB9LFxuICAgIC4uLmlkZW50aWZpZXJzICYmIHtcbiAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgaWRlbnRpZmllcnM6IE9iamVjdC5lbnRyaWVzKGlkZW50aWZpZXJzKS5zb3J0KCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKHsgLi4uYWNjLCBba2V5XTogdmFsdWUgfSksIHt9KVxuICAgIH1cbiAgfSk7XG59LCBcImdldENhY2hlS2V5XCIpO1xuXG4vLyBzcmMvdXBkYXRlRGlzY292ZXJlZEVuZHBvaW50SW5DYWNoZS50c1xudmFyIHJlcXVlc3RRdWV1ZSA9IHt9O1xudmFyIHVwZGF0ZURpc2NvdmVyZWRFbmRwb2ludEluQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChjb25maWcsIG9wdGlvbnMpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgY29uc3QgeyBlbmRwb2ludENhY2hlIH0gPSBjb25maWc7XG4gIGNvbnN0IHsgY2FjaGVLZXksIGNvbW1hbmROYW1lLCBpZGVudGlmaWVycyB9ID0gb3B0aW9ucztcbiAgY29uc3QgZW5kcG9pbnRzID0gZW5kcG9pbnRDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoZW5kcG9pbnRzICYmIGVuZHBvaW50cy5sZW5ndGggPT09IDEgJiYgZW5kcG9pbnRzWzBdLkFkZHJlc3MgPT09IFwiXCIpIHtcbiAgICBpZiAob3B0aW9ucy5pc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkKSB7XG4gICAgICBpZiAoIXJlcXVlc3RRdWV1ZVtjYWNoZUtleV0pIHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0gPSBbXTtcbiAgICAgIHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0ucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbmRwb2ludHMgJiYgZW5kcG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICByZXNvbHZlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJFbmRwb2ludHMgPSBbeyBBZGRyZXNzOiBcIlwiLCBDYWNoZVBlcmlvZEluTWludXRlczogMSB9XTtcbiAgICBlbmRwb2ludENhY2hlLnNldChjYWNoZUtleSwgcGxhY2Vob2xkZXJFbmRwb2ludHMpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgb3B0aW9ucy5lbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yKHtcbiAgICAgIE9wZXJhdGlvbjogY29tbWFuZE5hbWUuc2xpY2UoMCwgLTcpLFxuICAgICAgLy8gc3RyaXAgXCJDb21tYW5kXCJcbiAgICAgIElkZW50aWZpZXJzOiBpZGVudGlmaWVyc1xuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKG9wdGlvbnMuY2xpZW50U3RhY2ssIGNvbmZpZywgb3B0aW9ucy5vcHRpb25zKTtcbiAgICBoYW5kbGVyKGNvbW1hbmQpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgZW5kcG9pbnRDYWNoZS5zZXQoY2FjaGVLZXksIHJlc3VsdC5vdXRwdXQuRW5kcG9pbnRzKTtcbiAgICAgIGlmIChyZXF1ZXN0UXVldWVbY2FjaGVLZXldKSB7XG4gICAgICAgIHJlcXVlc3RRdWV1ZVtjYWNoZUtleV0uZm9yRWFjaCgoeyByZXNvbHZlOiByZXNvbHZlMiB9KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZTIoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZSByZXF1ZXN0UXVldWVbY2FjaGVLZXldO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgZW5kcG9pbnRDYWNoZS5kZWxldGUoY2FjaGVLZXkpO1xuICAgICAgY29uc3QgZXJyb3JUb1Rocm93ID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgIGBUaGUgb3BlcmF0aW9uIHRvIGRpc2NvdmVyIGVuZHBvaW50IGZhaWxlZC4gUGxlYXNlIHJldHJ5LCBvciBwcm92aWRlIGEgY3VzdG9tIGVuZHBvaW50IGFuZCBkaXNhYmxlIGVuZHBvaW50IGRpc2NvdmVyeSB0byBwcm9jZWVkLmBcbiAgICAgICAgKSxcbiAgICAgICAgeyByZWFzb246IGVycm9yIH1cbiAgICAgICk7XG4gICAgICBpZiAocmVxdWVzdFF1ZXVlW2NhY2hlS2V5XSkge1xuICAgICAgICByZXF1ZXN0UXVldWVbY2FjaGVLZXldLmZvckVhY2goKHsgcmVqZWN0OiByZWplY3QyIH0pID0+IHtcbiAgICAgICAgICByZWplY3QyKGVycm9yVG9UaHJvdyk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgcmVxdWVzdFF1ZXVlW2NhY2hlS2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmlzRGlzY292ZXJlZEVuZHBvaW50UmVxdWlyZWQpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yVG9UaHJvdyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmRwb2ludENhY2hlLnNldChjYWNoZUtleSwgcGxhY2Vob2xkZXJFbmRwb2ludHMpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pLCBcInVwZGF0ZURpc2NvdmVyZWRFbmRwb2ludEluQ2FjaGVcIik7XG5cbi8vIHNyYy9lbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmUudHNcbnZhciBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb25maWcsIG1pZGRsZXdhcmVDb25maWcpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICBpZiAoY29uZmlnLmlzQ3VzdG9tRW5kcG9pbnQpIHtcbiAgICBpZiAoY29uZmlnLmlzQ2xpZW50RW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEN1c3RvbSBlbmRwb2ludCBpcyBzdXBwbGllZDsgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkIG11c3Qgbm90IGJlIHRydWUuYCk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICB9XG4gIGNvbnN0IHsgZW5kcG9pbnREaXNjb3ZlcnlDb21tYW5kQ3RvciB9ID0gY29uZmlnO1xuICBjb25zdCB7IGlzRGlzY292ZXJlZEVuZHBvaW50UmVxdWlyZWQsIGlkZW50aWZpZXJzIH0gPSBtaWRkbGV3YXJlQ29uZmlnO1xuICBjb25zdCBjbGllbnROYW1lID0gY29udGV4dC5jbGllbnROYW1lO1xuICBjb25zdCBjb21tYW5kTmFtZSA9IGNvbnRleHQuY29tbWFuZE5hbWU7XG4gIGNvbnN0IGlzRW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID0gYXdhaXQgY29uZmlnLmVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCgpO1xuICBjb25zdCBjYWNoZUtleSA9IGF3YWl0IGdldENhY2hlS2V5KGNvbW1hbmROYW1lLCBjb25maWcsIHsgaWRlbnRpZmllcnMgfSk7XG4gIGlmIChpc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkKSB7XG4gICAgaWYgKGlzRW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRW5kcG9pbnQgRGlzY292ZXJ5IGlzIGRpc2FibGVkIGJ1dCAke2NvbW1hbmROYW1lfSBvbiAke2NsaWVudE5hbWV9IHJlcXVpcmVzIGl0LiBQbGVhc2UgY2hlY2sgeW91ciBjb25maWd1cmF0aW9ucy5gXG4gICAgICApO1xuICAgIH1cbiAgICBhd2FpdCB1cGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlKGNvbmZpZywge1xuICAgICAgLi4ubWlkZGxld2FyZUNvbmZpZyxcbiAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgY2FjaGVLZXksXG4gICAgICBlbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNFbmRwb2ludERpc2NvdmVyeUVuYWJsZWQpIHtcbiAgICB1cGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlKGNvbmZpZywge1xuICAgICAgLi4ubWlkZGxld2FyZUNvbmZpZyxcbiAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgY2FjaGVLZXksXG4gICAgICBlbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICBpZiAoY2FjaGVLZXkgJiYgaW1wb3J0X3Byb3RvY29sX2h0dHAuSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gY29uZmlnLmVuZHBvaW50Q2FjaGUuZ2V0RW5kcG9pbnQoY2FjaGVLZXkpO1xuICAgIGlmIChlbmRwb2ludCkge1xuICAgICAgcmVxdWVzdC5ob3N0bmFtZSA9IGVuZHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV4dChhcmdzKTtcbn0sIFwiZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlXCIpO1xuXG4vLyBzcmMvZ2V0RW5kcG9pbnREaXNjb3ZlcnlQbHVnaW4udHNcbnZhciBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVPcHRpb25zID0ge1xuICBuYW1lOiBcImVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZVwiLFxuICBzdGVwOiBcImJ1aWxkXCIsXG4gIHRhZ3M6IFtcIkVORFBPSU5UX0RJU0NPVkVSWVwiXSxcbiAgb3ZlcnJpZGU6IHRydWVcbn07XG52YXIgZ2V0RW5kcG9pbnREaXNjb3ZlcnlQbHVnaW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwbHVnaW5Db25maWcsIG1pZGRsZXdhcmVDb25maWcpID0+ICh7XG4gIGFwcGx5VG9TdGFjazogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29tbWFuZFN0YWNrKSA9PiB7XG4gICAgY29tbWFuZFN0YWNrLmFkZChlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmUocGx1Z2luQ29uZmlnLCBtaWRkbGV3YXJlQ29uZmlnKSwgZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sIFwiYXBwbHlUb1N0YWNrXCIpXG59KSwgXCJnZXRFbmRwb2ludERpc2NvdmVyeVBsdWdpblwiKTtcbnZhciBnZXRFbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkUGx1Z2luID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocGx1Z2luQ29uZmlnLCBtaWRkbGV3YXJlQ29uZmlnKSA9PiAoe1xuICBhcHBseVRvU3RhY2s6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbW1hbmRTdGFjaykgPT4ge1xuICAgIGNvbW1hbmRTdGFjay5hZGQoXG4gICAgICBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmUocGx1Z2luQ29uZmlnLCB7IC4uLm1pZGRsZXdhcmVDb25maWcsIGlzRGlzY292ZXJlZEVuZHBvaW50UmVxdWlyZWQ6IHRydWUgfSksXG4gICAgICBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVPcHRpb25zXG4gICAgKTtcbiAgfSwgXCJhcHBseVRvU3RhY2tcIilcbn0pLCBcImdldEVuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWRQbHVnaW5cIik7XG52YXIgZ2V0RW5kcG9pbnREaXNjb3ZlcnlPcHRpb25hbFBsdWdpbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHBsdWdpbkNvbmZpZywgbWlkZGxld2FyZUNvbmZpZykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb21tYW5kU3RhY2spID0+IHtcbiAgICBjb21tYW5kU3RhY2suYWRkKFxuICAgICAgZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlKHBsdWdpbkNvbmZpZywgeyAuLi5taWRkbGV3YXJlQ29uZmlnLCBpc0Rpc2NvdmVyZWRFbmRwb2ludFJlcXVpcmVkOiBmYWxzZSB9KSxcbiAgICAgIGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZU9wdGlvbnNcbiAgICApO1xuICB9LCBcImFwcGx5VG9TdGFja1wiKVxufSksIFwiZ2V0RW5kcG9pbnREaXNjb3ZlcnlPcHRpb25hbFBsdWdpblwiKTtcblxuLy8gc3JjL3Jlc29sdmVFbmRwb2ludERpc2NvdmVyeUNvbmZpZy50c1xudmFyIGltcG9ydF9lbmRwb2ludF9jYWNoZSA9IHJlcXVpcmUoXCJAYXdzLXNkay9lbmRwb2ludC1jYWNoZVwiKTtcbnZhciByZXNvbHZlRW5kcG9pbnREaXNjb3ZlcnlDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgeyBlbmRwb2ludERpc2NvdmVyeUNvbW1hbmRDdG9yIH0pID0+IHtcbiAgY29uc3QgeyBlbmRwb2ludENhY2hlU2l6ZSwgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkLCBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWRQcm92aWRlciB9ID0gaW5wdXQ7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGlucHV0LCB7XG4gICAgZW5kcG9pbnREaXNjb3ZlcnlDb21tYW5kQ3RvcixcbiAgICBlbmRwb2ludENhY2hlOiBuZXcgaW1wb3J0X2VuZHBvaW50X2NhY2hlLkVuZHBvaW50Q2FjaGUoZW5kcG9pbnRDYWNoZVNpemUgPz8gMWUzKSxcbiAgICBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQ6IGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCAhPT0gdm9pZCAwID8gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCkgOiBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWRQcm92aWRlcixcbiAgICBpc0NsaWVudEVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZDogZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkICE9PSB2b2lkIDBcbiAgfSk7XG59LCBcInJlc29sdmVFbmRwb2ludERpc2NvdmVyeUNvbmZpZ1wiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5PREVfRU5EUE9JTlRfRElTQ09WRVJZX0NPTkZJR19PUFRJT05TLFxuICBlbmRwb2ludERpc2NvdmVyeU1pZGRsZXdhcmVPcHRpb25zLFxuICBnZXRFbmRwb2ludERpc2NvdmVyeVBsdWdpbixcbiAgZ2V0RW5kcG9pbnREaXNjb3ZlcnlSZXF1aXJlZFBsdWdpbixcbiAgZ2V0RW5kcG9pbnREaXNjb3ZlcnlPcHRpb25hbFBsdWdpbixcbiAgcmVzb2x2ZUVuZHBvaW50RGlzY292ZXJ5Q29uZmlnXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBnZXRIb3N0SGVhZGVyUGx1Z2luOiAoKSA9PiBnZXRIb3N0SGVhZGVyUGx1Z2luLFxuICBob3N0SGVhZGVyTWlkZGxld2FyZTogKCkgPT4gaG9zdEhlYWRlck1pZGRsZXdhcmUsXG4gIGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9uczogKCkgPT4gaG9zdEhlYWRlck1pZGRsZXdhcmVPcHRpb25zLFxuICByZXNvbHZlSG9zdEhlYWRlckNvbmZpZzogKCkgPT4gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3Byb3RvY29sX2h0dHAgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0O1xufVxuX19uYW1lKHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnLCBcInJlc29sdmVIb3N0SGVhZGVyQ29uZmlnXCIpO1xudmFyIGhvc3RIZWFkZXJNaWRkbGV3YXJlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKG5leHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gIGlmICghaW1wb3J0X3Byb3RvY29sX2h0dHAuSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShhcmdzLnJlcXVlc3QpKSByZXR1cm4gbmV4dChhcmdzKTtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICBjb25zdCB7IGhhbmRsZXJQcm90b2NvbCA9IFwiXCIgfSA9IG9wdGlvbnMucmVxdWVzdEhhbmRsZXIubWV0YWRhdGEgfHwge307XG4gIGlmIChoYW5kbGVyUHJvdG9jb2wuaW5kZXhPZihcImgyXCIpID49IDAgJiYgIXJlcXVlc3QuaGVhZGVyc1tcIjphdXRob3JpdHlcIl0pIHtcbiAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW1wiaG9zdFwiXTtcbiAgICByZXF1ZXN0LmhlYWRlcnNbXCI6YXV0aG9yaXR5XCJdID0gcmVxdWVzdC5ob3N0bmFtZSArIChyZXF1ZXN0LnBvcnQgPyBcIjpcIiArIHJlcXVlc3QucG9ydCA6IFwiXCIpO1xuICB9IGVsc2UgaWYgKCFyZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdKSB7XG4gICAgbGV0IGhvc3QgPSByZXF1ZXN0Lmhvc3RuYW1lO1xuICAgIGlmIChyZXF1ZXN0LnBvcnQgIT0gbnVsbCkgaG9zdCArPSBgOiR7cmVxdWVzdC5wb3J0fWA7XG4gICAgcmVxdWVzdC5oZWFkZXJzW1wiaG9zdFwiXSA9IGhvc3Q7XG4gIH1cbiAgcmV0dXJuIG5leHQoYXJncyk7XG59LCBcImhvc3RIZWFkZXJNaWRkbGV3YXJlXCIpO1xudmFyIGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgbmFtZTogXCJob3N0SGVhZGVyTWlkZGxld2FyZVwiLFxuICBzdGVwOiBcImJ1aWxkXCIsXG4gIHByaW9yaXR5OiBcImxvd1wiLFxuICB0YWdzOiBbXCJIT1NUXCJdLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbnZhciBnZXRIb3N0SGVhZGVyUGx1Z2luID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChob3N0SGVhZGVyTWlkZGxld2FyZShvcHRpb25zKSwgaG9zdEhlYWRlck1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSwgXCJhcHBseVRvU3RhY2tcIilcbn0pLCBcImdldEhvc3RIZWFkZXJQbHVnaW5cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyxcbiAgaG9zdEhlYWRlck1pZGRsZXdhcmUsXG4gIGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9ucyxcbiAgZ2V0SG9zdEhlYWRlclBsdWdpblxufSk7XG5cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgZ2V0TG9nZ2VyUGx1Z2luOiAoKSA9PiBnZXRMb2dnZXJQbHVnaW4sXG4gIGxvZ2dlck1pZGRsZXdhcmU6ICgpID0+IGxvZ2dlck1pZGRsZXdhcmUsXG4gIGxvZ2dlck1pZGRsZXdhcmVPcHRpb25zOiAoKSA9PiBsb2dnZXJNaWRkbGV3YXJlT3B0aW9uc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTtcblxuLy8gc3JjL2xvZ2dlck1pZGRsZXdhcmUudHNcbnZhciBsb2dnZXJNaWRkbGV3YXJlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgY29uc3QgeyBjbGllbnROYW1lLCBjb21tYW5kTmFtZSwgbG9nZ2VyLCBkeW5hbW9EYkRvY3VtZW50Q2xpZW50T3B0aW9ucyA9IHt9IH0gPSBjb250ZXh0O1xuICAgIGNvbnN0IHsgb3ZlcnJpZGVJbnB1dEZpbHRlclNlbnNpdGl2ZUxvZywgb3ZlcnJpZGVPdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2cgfSA9IGR5bmFtb0RiRG9jdW1lbnRDbGllbnRPcHRpb25zO1xuICAgIGNvbnN0IGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gb3ZlcnJpZGVJbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyA/PyBjb250ZXh0LmlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nO1xuICAgIGNvbnN0IG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IG92ZXJyaWRlT3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nID8/IGNvbnRleHQub3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nO1xuICAgIGNvbnN0IHsgJG1ldGFkYXRhLCAuLi5vdXRwdXRXaXRob3V0TWV0YWRhdGEgfSA9IHJlc3BvbnNlLm91dHB1dDtcbiAgICBsb2dnZXI/LmluZm8/Lih7XG4gICAgICBjbGllbnROYW1lLFxuICAgICAgY29tbWFuZE5hbWUsXG4gICAgICBpbnB1dDogaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2coYXJncy5pbnB1dCksXG4gICAgICBvdXRwdXQ6IG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyhvdXRwdXRXaXRob3V0TWV0YWRhdGEpLFxuICAgICAgbWV0YWRhdGE6ICRtZXRhZGF0YVxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCB7IGNsaWVudE5hbWUsIGNvbW1hbmROYW1lLCBsb2dnZXIsIGR5bmFtb0RiRG9jdW1lbnRDbGllbnRPcHRpb25zID0ge30gfSA9IGNvbnRleHQ7XG4gICAgY29uc3QgeyBvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nIH0gPSBkeW5hbW9EYkRvY3VtZW50Q2xpZW50T3B0aW9ucztcbiAgICBjb25zdCBpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IG92ZXJyaWRlSW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPz8gY29udGV4dC5pbnB1dEZpbHRlclNlbnNpdGl2ZUxvZztcbiAgICBsb2dnZXI/LmVycm9yPy4oe1xuICAgICAgY2xpZW50TmFtZSxcbiAgICAgIGNvbW1hbmROYW1lLFxuICAgICAgaW5wdXQ6IGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nKGFyZ3MuaW5wdXQpLFxuICAgICAgZXJyb3IsXG4gICAgICBtZXRhZGF0YTogZXJyb3IuJG1ldGFkYXRhXG4gICAgfSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0sIFwibG9nZ2VyTWlkZGxld2FyZVwiKTtcbnZhciBsb2dnZXJNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgbmFtZTogXCJsb2dnZXJNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIkxPR0dFUlwiXSxcbiAgc3RlcDogXCJpbml0aWFsaXplXCIsXG4gIG92ZXJyaWRlOiB0cnVlXG59O1xudmFyIGdldExvZ2dlclBsdWdpbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG9wdGlvbnMpID0+ICh7XG4gIGFwcGx5VG9TdGFjazogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQobG9nZ2VyTWlkZGxld2FyZSgpLCBsb2dnZXJNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sIFwiYXBwbHlUb1N0YWNrXCIpXG59KSwgXCJnZXRMb2dnZXJQbHVnaW5cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBsb2dnZXJNaWRkbGV3YXJlLFxuICBsb2dnZXJNaWRkbGV3YXJlT3B0aW9ucyxcbiAgZ2V0TG9nZ2VyUGx1Z2luXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBhZGRSZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlT3B0aW9uczogKCkgPT4gYWRkUmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbjogKCkgPT4gZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luLFxuICByZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlOiAoKSA9PiByZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbnZhciBUUkFDRV9JRF9IRUFERVJfTkFNRSA9IFwiWC1BbXpuLVRyYWNlLUlkXCI7XG52YXIgRU5WX0xBTUJEQV9GVU5DVElPTl9OQU1FID0gXCJBV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUVcIjtcbnZhciBFTlZfVFJBQ0VfSUQgPSBcIl9YX0FNWk5fVFJBQ0VfSURcIjtcbnZhciByZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKG5leHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgaWYgKCFpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpIHx8IG9wdGlvbnMucnVudGltZSAhPT0gXCJub2RlXCIpIHtcbiAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgfVxuICBjb25zdCB0cmFjZUlkSGVhZGVyID0gT2JqZWN0LmtleXMocmVxdWVzdC5oZWFkZXJzID8/IHt9KS5maW5kKChoKSA9PiBoLnRvTG93ZXJDYXNlKCkgPT09IFRSQUNFX0lEX0hFQURFUl9OQU1FLnRvTG93ZXJDYXNlKCkpID8/IFRSQUNFX0lEX0hFQURFUl9OQU1FO1xuICBpZiAocmVxdWVzdC5oZWFkZXJzLmhhc093blByb3BlcnR5KHRyYWNlSWRIZWFkZXIpKSB7XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG4gIH1cbiAgY29uc3QgZnVuY3Rpb25OYW1lID0gcHJvY2Vzcy5lbnZbRU5WX0xBTUJEQV9GVU5DVElPTl9OQU1FXTtcbiAgY29uc3QgdHJhY2VJZCA9IHByb2Nlc3MuZW52W0VOVl9UUkFDRV9JRF07XG4gIGNvbnN0IG5vbkVtcHR5U3RyaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc3RyKSA9PiB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIHN0ci5sZW5ndGggPiAwLCBcIm5vbkVtcHR5U3RyaW5nXCIpO1xuICBpZiAobm9uRW1wdHlTdHJpbmcoZnVuY3Rpb25OYW1lKSAmJiBub25FbXB0eVN0cmluZyh0cmFjZUlkKSkge1xuICAgIHJlcXVlc3QuaGVhZGVyc1tUUkFDRV9JRF9IRUFERVJfTkFNRV0gPSB0cmFjZUlkO1xuICB9XG4gIHJldHVybiBuZXh0KHtcbiAgICAuLi5hcmdzLFxuICAgIHJlcXVlc3RcbiAgfSk7XG59LCBcInJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVcIik7XG52YXIgYWRkUmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gIHN0ZXA6IFwiYnVpbGRcIixcbiAgdGFnczogW1wiUkVDVVJTSU9OX0RFVEVDVElPTlwiXSxcbiAgbmFtZTogXCJyZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlXCIsXG4gIG92ZXJyaWRlOiB0cnVlLFxuICBwcmlvcml0eTogXCJsb3dcIlxufTtcbnZhciBnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zKSA9PiAoe1xuICBhcHBseVRvU3RhY2s6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkKHJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmUob3B0aW9ucyksIGFkZFJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSwgXCJhcHBseVRvU3RhY2tcIilcbn0pLCBcImdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpblwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmUsXG4gIGFkZFJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVPcHRpb25zLFxuICBnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW5cbn0pO1xuXG4iLCAiaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmV4cG9ydCBjb25zdCBnZXRTbWl0aHlDb250ZXh0ID0gKGNvbnRleHQpID0+IGNvbnRleHRbU01JVEhZX0NPTlRFWFRfS0VZXSB8fCAoY29udGV4dFtTTUlUSFlfQ09OVEVYVF9LRVldID0ge30pO1xuIiwgImV4cG9ydCBjb25zdCByZXNvbHZlQXV0aE9wdGlvbnMgPSAoY2FuZGlkYXRlQXV0aE9wdGlvbnMsIGF1dGhTY2hlbWVQcmVmZXJlbmNlKSA9PiB7XG4gICAgaWYgKCFhdXRoU2NoZW1lUHJlZmVyZW5jZSB8fCBhdXRoU2NoZW1lUHJlZmVyZW5jZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZUF1dGhPcHRpb25zO1xuICAgIH1cbiAgICBjb25zdCBwcmVmZXJyZWRBdXRoT3B0aW9ucyA9IFtdO1xuICAgIGZvciAoY29uc3QgcHJlZmVycmVkU2NoZW1lTmFtZSBvZiBhdXRoU2NoZW1lUHJlZmVyZW5jZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZUF1dGhPcHRpb24gb2YgY2FuZGlkYXRlQXV0aE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZUF1dGhTY2hlbWVOYW1lID0gY2FuZGlkYXRlQXV0aE9wdGlvbi5zY2hlbWVJZC5zcGxpdChcIiNcIilbMV07XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlQXV0aFNjaGVtZU5hbWUgPT09IHByZWZlcnJlZFNjaGVtZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBwcmVmZXJyZWRBdXRoT3B0aW9ucy5wdXNoKGNhbmRpZGF0ZUF1dGhPcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2FuZGlkYXRlQXV0aE9wdGlvbiBvZiBjYW5kaWRhdGVBdXRoT3B0aW9ucykge1xuICAgICAgICBpZiAoIXByZWZlcnJlZEF1dGhPcHRpb25zLmZpbmQoKHsgc2NoZW1lSWQgfSkgPT4gc2NoZW1lSWQgPT09IGNhbmRpZGF0ZUF1dGhPcHRpb24uc2NoZW1lSWQpKSB7XG4gICAgICAgICAgICBwcmVmZXJyZWRBdXRoT3B0aW9ucy5wdXNoKGNhbmRpZGF0ZUF1dGhPcHRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmVmZXJyZWRBdXRoT3B0aW9ucztcbn07XG4iLCAiaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZLCB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyByZXNvbHZlQXV0aE9wdGlvbnMgfSBmcm9tIFwiLi9yZXNvbHZlQXV0aE9wdGlvbnNcIjtcbmZ1bmN0aW9uIGNvbnZlcnRIdHRwQXV0aFNjaGVtZXNUb01hcChodHRwQXV0aFNjaGVtZXMpIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBzY2hlbWUgb2YgaHR0cEF1dGhTY2hlbWVzKSB7XG4gICAgICAgIG1hcC5zZXQoc2NoZW1lLnNjaGVtZUlkLCBzY2hlbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufVxuZXhwb3J0IGNvbnN0IGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZSA9IChjb25maWcsIG13T3B0aW9ucykgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyKGF3YWl0IG13T3B0aW9ucy5odHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcihjb25maWcsIGNvbnRleHQsIGFyZ3MuaW5wdXQpKTtcbiAgICBjb25zdCBhdXRoU2NoZW1lUHJlZmVyZW5jZSA9IGNvbmZpZy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/IGF3YWl0IGNvbmZpZy5hdXRoU2NoZW1lUHJlZmVyZW5jZSgpIDogW107XG4gICAgY29uc3QgcmVzb2x2ZWRPcHRpb25zID0gcmVzb2x2ZUF1dGhPcHRpb25zKG9wdGlvbnMsIGF1dGhTY2hlbWVQcmVmZXJlbmNlKTtcbiAgICBjb25zdCBhdXRoU2NoZW1lcyA9IGNvbnZlcnRIdHRwQXV0aFNjaGVtZXNUb01hcChjb25maWcuaHR0cEF1dGhTY2hlbWVzKTtcbiAgICBjb25zdCBzbWl0aHlDb250ZXh0ID0gZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KTtcbiAgICBjb25zdCBmYWlsdXJlUmVhc29ucyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIHJlc29sdmVkT3B0aW9ucykge1xuICAgICAgICBjb25zdCBzY2hlbWUgPSBhdXRoU2NoZW1lcy5nZXQob3B0aW9uLnNjaGVtZUlkKTtcbiAgICAgICAgaWYgKCFzY2hlbWUpIHtcbiAgICAgICAgICAgIGZhaWx1cmVSZWFzb25zLnB1c2goYEh0dHBBdXRoU2NoZW1lIFxcYCR7b3B0aW9uLnNjaGVtZUlkfVxcYCB3YXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgc2VydmljZS5gKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkZW50aXR5UHJvdmlkZXIgPSBzY2hlbWUuaWRlbnRpdHlQcm92aWRlcihhd2FpdCBtd09wdGlvbnMuaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyKGNvbmZpZykpO1xuICAgICAgICBpZiAoIWlkZW50aXR5UHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGZhaWx1cmVSZWFzb25zLnB1c2goYEh0dHBBdXRoU2NoZW1lIFxcYCR7b3B0aW9uLnNjaGVtZUlkfVxcYCBkaWQgbm90IGhhdmUgYW4gSWRlbnRpdHlQcm92aWRlciBjb25maWd1cmVkLmApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBpZGVudGl0eVByb3BlcnRpZXMgPSB7fSwgc2lnbmluZ1Byb3BlcnRpZXMgPSB7fSB9ID0gb3B0aW9uLnByb3BlcnRpZXNFeHRyYWN0b3I/Lihjb25maWcsIGNvbnRleHQpIHx8IHt9O1xuICAgICAgICBvcHRpb24uaWRlbnRpdHlQcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbihvcHRpb24uaWRlbnRpdHlQcm9wZXJ0aWVzIHx8IHt9LCBpZGVudGl0eVByb3BlcnRpZXMpO1xuICAgICAgICBvcHRpb24uc2lnbmluZ1Byb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKG9wdGlvbi5zaWduaW5nUHJvcGVydGllcyB8fCB7fSwgc2lnbmluZ1Byb3BlcnRpZXMpO1xuICAgICAgICBzbWl0aHlDb250ZXh0LnNlbGVjdGVkSHR0cEF1dGhTY2hlbWUgPSB7XG4gICAgICAgICAgICBodHRwQXV0aE9wdGlvbjogb3B0aW9uLFxuICAgICAgICAgICAgaWRlbnRpdHk6IGF3YWl0IGlkZW50aXR5UHJvdmlkZXIob3B0aW9uLmlkZW50aXR5UHJvcGVydGllcyksXG4gICAgICAgICAgICBzaWduZXI6IHNjaGVtZS5zaWduZXIsXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIXNtaXRoeUNvbnRleHQuc2VsZWN0ZWRIdHRwQXV0aFNjaGVtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZmFpbHVyZVJlYXNvbnMuam9pbihcIlxcblwiKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KGFyZ3MpO1xufTtcbiIsICJpbXBvcnQgeyBodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUgfSBmcm9tIFwiLi9odHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBodHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldE1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwic2VyaWFsaXplXCIsXG4gICAgdGFnczogW1wiSFRUUF9BVVRIX1NDSEVNRVwiXSxcbiAgICBuYW1lOiBcImh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZVwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgIHJlbGF0aW9uOiBcImJlZm9yZVwiLFxuICAgIHRvTWlkZGxld2FyZTogXCJlbmRwb2ludFYyTWlkZGxld2FyZVwiLFxufTtcbmV4cG9ydCBjb25zdCBnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiA9IChjb25maWcsIHsgaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlciwgfSkgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGRSZWxhdGl2ZVRvKGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZShjb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyLFxuICAgICAgICB9KSwgaHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlOiAoKSA9PiBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlLFxuICBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uOiAoKSA9PiBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLFxuICBnZXRTZXJkZVBsdWdpbjogKCkgPT4gZ2V0U2VyZGVQbHVnaW4sXG4gIHNlcmlhbGl6ZXJNaWRkbGV3YXJlOiAoKSA9PiBzZXJpYWxpemVyTWlkZGxld2FyZSxcbiAgc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb246ICgpID0+IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2Rlc2VyaWFsaXplck1pZGRsZXdhcmUudHNcbnZhciBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucywgZGVzZXJpYWxpemVyKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgY29uc3QgeyByZXNwb25zZSB9ID0gYXdhaXQgbmV4dChhcmdzKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCBkZXNlcmlhbGl6ZXIocmVzcG9uc2UsIG9wdGlvbnMpO1xuICAgIHJldHVybiB7XG4gICAgICByZXNwb25zZSxcbiAgICAgIG91dHB1dDogcGFyc2VkXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsIFwiJHJlc3BvbnNlXCIsIHtcbiAgICAgIHZhbHVlOiByZXNwb25zZVxuICAgIH0pO1xuICAgIGlmICghKFwiJG1ldGFkYXRhXCIgaW4gZXJyb3IpKSB7XG4gICAgICBjb25zdCBoaW50ID0gYERlc2VyaWFsaXphdGlvbiBlcnJvcjogdG8gc2VlIHRoZSByYXcgcmVzcG9uc2UsIGluc3BlY3QgdGhlIGhpZGRlbiBmaWVsZCB7ZXJyb3J9LiRyZXNwb25zZSBvbiB0aGlzIG9iamVjdC5gO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSBcIlxcbiAgXCIgKyBoaW50O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoIWNvbnRleHQubG9nZ2VyIHx8IGNvbnRleHQubG9nZ2VyPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJOb09wTG9nZ2VyXCIpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oaGludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5sb2dnZXI/Lndhcm4/LihoaW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlcnJvci4kcmVzcG9uc2VCb2R5VGV4dCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoZXJyb3IuJHJlc3BvbnNlKSB7XG4gICAgICAgICAgZXJyb3IuJHJlc3BvbnNlLmJvZHkgPSBlcnJvci4kcmVzcG9uc2VCb2R5VGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSwgXCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIpO1xuXG4vLyBzcmMvc2VyaWFsaXplck1pZGRsZXdhcmUudHNcbnZhciBzZXJpYWxpemVyTWlkZGxld2FyZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG9wdGlvbnMsIHNlcmlhbGl6ZXIpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICBjb25zdCBlbmRwb2ludCA9IGNvbnRleHQuZW5kcG9pbnRWMj8udXJsICYmIG9wdGlvbnMudXJsUGFyc2VyID8gYXN5bmMgKCkgPT4gb3B0aW9ucy51cmxQYXJzZXIoY29udGV4dC5lbmRwb2ludFYyLnVybCkgOiBvcHRpb25zLmVuZHBvaW50O1xuICBpZiAoIWVuZHBvaW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdmFsaWQgZW5kcG9pbnQgcHJvdmlkZXIgYXZhaWxhYmxlLlwiKTtcbiAgfVxuICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgc2VyaWFsaXplcihhcmdzLmlucHV0LCB7IC4uLm9wdGlvbnMsIGVuZHBvaW50IH0pO1xuICByZXR1cm4gbmV4dCh7XG4gICAgLi4uYXJncyxcbiAgICByZXF1ZXN0XG4gIH0pO1xufSwgXCJzZXJpYWxpemVyTWlkZGxld2FyZVwiKTtcblxuLy8gc3JjL3NlcmRlUGx1Z2luLnRzXG52YXIgZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiA9IHtcbiAgbmFtZTogXCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIsXG4gIHN0ZXA6IFwiZGVzZXJpYWxpemVcIixcbiAgdGFnczogW1wiREVTRVJJQUxJWkVSXCJdLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbnZhciBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiA9IHtcbiAgbmFtZTogXCJzZXJpYWxpemVyTWlkZGxld2FyZVwiLFxuICBzdGVwOiBcInNlcmlhbGl6ZVwiLFxuICB0YWdzOiBbXCJTRVJJQUxJWkVSXCJdLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbmZ1bmN0aW9uIGdldFNlcmRlUGx1Z2luKGNvbmZpZywgc2VyaWFsaXplciwgZGVzZXJpYWxpemVyKSB7XG4gIHJldHVybiB7XG4gICAgYXBwbHlUb1N0YWNrOiAoY29tbWFuZFN0YWNrKSA9PiB7XG4gICAgICBjb21tYW5kU3RhY2suYWRkKGRlc2VyaWFsaXplck1pZGRsZXdhcmUoY29uZmlnLCBkZXNlcmlhbGl6ZXIpLCBkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uKTtcbiAgICAgIGNvbW1hbmRTdGFjay5hZGQoc2VyaWFsaXplck1pZGRsZXdhcmUoY29uZmlnLCBzZXJpYWxpemVyKSwgc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24pO1xuICAgIH1cbiAgfTtcbn1cbl9fbmFtZShnZXRTZXJkZVBsdWdpbiwgXCJnZXRTZXJkZVBsdWdpblwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc2VyaWFsaXplck1pZGRsZXdhcmUsXG4gIGRlc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24sXG4gIHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLFxuICBnZXRTZXJkZVBsdWdpbixcbiAgc2VyaWFsaXplck1pZGRsZXdhcmVcbn0pO1xuXG4iLCAiaW1wb3J0IHsgc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI7XG5pbXBvcnQgeyBodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUgfSBmcm9tIFwiLi9odHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwic2VyaWFsaXplXCIsXG4gICAgdGFnczogW1wiSFRUUF9BVVRIX1NDSEVNRVwiXSxcbiAgICBuYW1lOiBcImh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZVwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgIHJlbGF0aW9uOiBcImJlZm9yZVwiLFxuICAgIHRvTWlkZGxld2FyZTogc2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24ubmFtZSxcbn07XG5leHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhTY2hlbWVQbHVnaW4gPSAoY29uZmlnLCB7IGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLCBpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIsIH0pID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkUmVsYXRpdmVUbyhodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUoY29uZmlnLCB7XG4gICAgICAgICAgICBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcixcbiAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcixcbiAgICAgICAgfSksIGh0dHBBdXRoU2NoZW1lTWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsICJleHBvcnQgKiBmcm9tIFwiLi9odHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZXRIdHRwQXV0aFNjaGVtZVBsdWdpblwiO1xuIiwgImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZLCB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5jb25zdCBkZWZhdWx0RXJyb3JIYW5kbGVyID0gKHNpZ25pbmdQcm9wZXJ0aWVzKSA9PiAoZXJyb3IpID0+IHtcbiAgICB0aHJvdyBlcnJvcjtcbn07XG5jb25zdCBkZWZhdWx0U3VjY2Vzc0hhbmRsZXIgPSAoaHR0cFJlc3BvbnNlLCBzaWduaW5nUHJvcGVydGllcykgPT4geyB9O1xuZXhwb3J0IGNvbnN0IGh0dHBTaWduaW5nTWlkZGxld2FyZSA9IChjb25maWcpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShhcmdzLnJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIH1cbiAgICBjb25zdCBzbWl0aHlDb250ZXh0ID0gZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KTtcbiAgICBjb25zdCBzY2hlbWUgPSBzbWl0aHlDb250ZXh0LnNlbGVjdGVkSHR0cEF1dGhTY2hlbWU7XG4gICAgaWYgKCFzY2hlbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBIdHRwQXV0aFNjaGVtZSB3YXMgc2VsZWN0ZWQ6IHVuYWJsZSB0byBzaWduIHJlcXVlc3RgKTtcbiAgICB9XG4gICAgY29uc3QgeyBodHRwQXV0aE9wdGlvbjogeyBzaWduaW5nUHJvcGVydGllcyA9IHt9IH0sIGlkZW50aXR5LCBzaWduZXIsIH0gPSBzY2hlbWU7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgbmV4dCh7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIHJlcXVlc3Q6IGF3YWl0IHNpZ25lci5zaWduKGFyZ3MucmVxdWVzdCwgaWRlbnRpdHksIHNpZ25pbmdQcm9wZXJ0aWVzKSxcbiAgICB9KS5jYXRjaCgoc2lnbmVyLmVycm9ySGFuZGxlciB8fCBkZWZhdWx0RXJyb3JIYW5kbGVyKShzaWduaW5nUHJvcGVydGllcykpO1xuICAgIChzaWduZXIuc3VjY2Vzc0hhbmRsZXIgfHwgZGVmYXVsdFN1Y2Nlc3NIYW5kbGVyKShvdXRwdXQucmVzcG9uc2UsIHNpZ25pbmdQcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbiIsICJpbXBvcnQgeyBodHRwU2lnbmluZ01pZGRsZXdhcmUgfSBmcm9tIFwiLi9odHRwU2lnbmluZ01pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBodHRwU2lnbmluZ01pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwiZmluYWxpemVSZXF1ZXN0XCIsXG4gICAgdGFnczogW1wiSFRUUF9TSUdOSU5HXCJdLFxuICAgIG5hbWU6IFwiaHR0cFNpZ25pbmdNaWRkbGV3YXJlXCIsXG4gICAgYWxpYXNlczogW1wiYXBpS2V5TWlkZGxld2FyZVwiLCBcInRva2VuTWlkZGxld2FyZVwiLCBcImF3c0F1dGhNaWRkbGV3YXJlXCJdLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgIHJlbGF0aW9uOiBcImFmdGVyXCIsXG4gICAgdG9NaWRkbGV3YXJlOiBcInJldHJ5TWlkZGxld2FyZVwiLFxufTtcbmV4cG9ydCBjb25zdCBnZXRIdHRwU2lnbmluZ1BsdWdpbiA9IChjb25maWcpID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkUmVsYXRpdmVUbyhodHRwU2lnbmluZ01pZGRsZXdhcmUoY29uZmlnKSwgaHR0cFNpZ25pbmdNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwgImV4cG9ydCAqIGZyb20gXCIuL2h0dHBTaWduaW5nTWlkZGxld2FyZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2V0SHR0cFNpZ25pbmdNaWRkbGV3YXJlXCI7XG4iLCAiZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVByb3ZpZGVyID0gKGlucHV0KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgY29uc3QgcHJvbWlzaWZpZWQgPSBQcm9taXNlLnJlc29sdmUoaW5wdXQpO1xuICAgIHJldHVybiAoKSA9PiBwcm9taXNpZmllZDtcbn07XG4iLCAiY29uc3QgbWFrZVBhZ2VkQ2xpZW50UmVxdWVzdCA9IGFzeW5jIChDb21tYW5kQ3RvciwgY2xpZW50LCBpbnB1dCwgd2l0aENvbW1hbmQgPSAoXykgPT4gXywgLi4uYXJncykgPT4ge1xuICAgIGxldCBjb21tYW5kID0gbmV3IENvbW1hbmRDdG9yKGlucHV0KTtcbiAgICBjb21tYW5kID0gd2l0aENvbW1hbmQoY29tbWFuZCkgPz8gY29tbWFuZDtcbiAgICByZXR1cm4gYXdhaXQgY2xpZW50LnNlbmQoY29tbWFuZCwgLi4uYXJncyk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhZ2luYXRvcihDbGllbnRDdG9yLCBDb21tYW5kQ3RvciwgaW5wdXRUb2tlbk5hbWUsIG91dHB1dFRva2VuTmFtZSwgcGFnZVNpemVUb2tlbk5hbWUpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24qIHBhZ2luYXRlT3BlcmF0aW9uKGNvbmZpZywgaW5wdXQsIC4uLmFkZGl0aW9uYWxBcmd1bWVudHMpIHtcbiAgICAgICAgY29uc3QgX2lucHV0ID0gaW5wdXQ7XG4gICAgICAgIGxldCB0b2tlbiA9IGNvbmZpZy5zdGFydGluZ1Rva2VuID8/IF9pbnB1dFtpbnB1dFRva2VuTmFtZV07XG4gICAgICAgIGxldCBoYXNOZXh0ID0gdHJ1ZTtcbiAgICAgICAgbGV0IHBhZ2U7XG4gICAgICAgIHdoaWxlIChoYXNOZXh0KSB7XG4gICAgICAgICAgICBfaW5wdXRbaW5wdXRUb2tlbk5hbWVdID0gdG9rZW47XG4gICAgICAgICAgICBpZiAocGFnZVNpemVUb2tlbk5hbWUpIHtcbiAgICAgICAgICAgICAgICBfaW5wdXRbcGFnZVNpemVUb2tlbk5hbWVdID0gX2lucHV0W3BhZ2VTaXplVG9rZW5OYW1lXSA/PyBjb25maWcucGFnZVNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLmNsaWVudCBpbnN0YW5jZW9mIENsaWVudEN0b3IpIHtcbiAgICAgICAgICAgICAgICBwYWdlID0gYXdhaXQgbWFrZVBhZ2VkQ2xpZW50UmVxdWVzdChDb21tYW5kQ3RvciwgY29uZmlnLmNsaWVudCwgaW5wdXQsIGNvbmZpZy53aXRoQ29tbWFuZCwgLi4uYWRkaXRpb25hbEFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2xpZW50LCBleHBlY3RlZCBpbnN0YW5jZSBvZiAke0NsaWVudEN0b3IubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIHBhZ2U7XG4gICAgICAgICAgICBjb25zdCBwcmV2VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgIHRva2VuID0gZ2V0KHBhZ2UsIG91dHB1dFRva2VuTmFtZSk7XG4gICAgICAgICAgICBoYXNOZXh0ID0gISEodG9rZW4gJiYgKCFjb25maWcuc3RvcE9uU2FtZVRva2VuIHx8IHRva2VuICE9PSBwcmV2VG9rZW4pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG59XG5jb25zdCBnZXQgPSAoZnJvbU9iamVjdCwgcGF0aCkgPT4ge1xuICAgIGxldCBjdXJzb3IgPSBmcm9tT2JqZWN0O1xuICAgIGNvbnN0IHBhdGhDb21wb25lbnRzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gICAgZm9yIChjb25zdCBzdGVwIG9mIHBhdGhDb21wb25lbnRzKSB7XG4gICAgICAgIGlmICghY3Vyc29yIHx8IHR5cGVvZiBjdXJzb3IgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY3Vyc29yID0gY3Vyc29yW3N0ZXBdO1xuICAgIH1cbiAgICByZXR1cm4gY3Vyc29yO1xufTtcbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgaXNBcnJheUJ1ZmZlcjogKCkgPT4gaXNBcnJheUJ1ZmZlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgaXNBcnJheUJ1ZmZlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGFyZykgPT4gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgYXJnIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiwgXCJpc0FycmF5QnVmZmVyXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheUJ1ZmZlclxufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZnJvbUFycmF5QnVmZmVyOiAoKSA9PiBmcm9tQXJyYXlCdWZmZXIsXG4gIGZyb21TdHJpbmc6ICgpID0+IGZyb21TdHJpbmdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF9pc19hcnJheV9idWZmZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9pcy1hcnJheS1idWZmZXJcIik7XG52YXIgaW1wb3J0X2J1ZmZlciA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG52YXIgZnJvbUFycmF5QnVmZmVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIG9mZnNldCA9IDAsIGxlbmd0aCA9IGlucHV0LmJ5dGVMZW5ndGggLSBvZmZzZXQpID0+IHtcbiAgaWYgKCEoMCwgaW1wb3J0X2lzX2FycmF5X2J1ZmZlci5pc0FycmF5QnVmZmVyKShpbnB1dCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXCJpbnB1dFwiIGFyZ3VtZW50IG11c3QgYmUgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgaW5wdXR9ICgke2lucHV0fSlgKTtcbiAgfVxuICByZXR1cm4gaW1wb3J0X2J1ZmZlci5CdWZmZXIuZnJvbShpbnB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xufSwgXCJmcm9tQXJyYXlCdWZmZXJcIik7XG52YXIgZnJvbVN0cmluZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBlbmNvZGluZykgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiaW5wdXRcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGlucHV0fSAoJHtpbnB1dH0pYCk7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nID8gaW1wb3J0X2J1ZmZlci5CdWZmZXIuZnJvbShpbnB1dCwgZW5jb2RpbmcpIDogaW1wb3J0X2J1ZmZlci5CdWZmZXIuZnJvbShpbnB1dCk7XG59LCBcImZyb21TdHJpbmdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tQXJyYXlCdWZmZXIsXG4gIGZyb21TdHJpbmdcbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21CYXNlNjQgPSB2b2lkIDA7XG5jb25zdCB1dGlsX2J1ZmZlcl9mcm9tXzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tXCIpO1xuY29uc3QgQkFTRTY0X1JFR0VYID0gL15bQS1aYS16MC05Ky9dKj17MCwyfSQvO1xuY29uc3QgZnJvbUJhc2U2NCA9IChpbnB1dCkgPT4ge1xuICAgIGlmICgoaW5wdXQubGVuZ3RoICogMykgJSA0ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEluY29ycmVjdCBwYWRkaW5nIG9uIGJhc2U2NCBzdHJpbmcuYCk7XG4gICAgfVxuICAgIGlmICghQkFTRTY0X1JFR0VYLmV4ZWMoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgYmFzZTY0IHN0cmluZy5gKTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyID0gKDAsIHV0aWxfYnVmZmVyX2Zyb21fMS5mcm9tU3RyaW5nKShpbnB1dCwgXCJiYXNlNjRcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCk7XG59O1xuZXhwb3J0cy5mcm9tQmFzZTY0ID0gZnJvbUJhc2U2NDtcbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZnJvbVV0Zjg6ICgpID0+IGZyb21VdGY4LFxuICB0b1VpbnQ4QXJyYXk6ICgpID0+IHRvVWludDhBcnJheSxcbiAgdG9VdGY4OiAoKSA9PiB0b1V0Zjhcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZnJvbVV0ZjgudHNcbnZhciBpbXBvcnRfdXRpbF9idWZmZXJfZnJvbSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIik7XG52YXIgZnJvbVV0ZjggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBjb25zdCBidWYgPSAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbVN0cmluZykoaW5wdXQsIFwidXRmOFwiKTtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xufSwgXCJmcm9tVXRmOFwiKTtcblxuLy8gc3JjL3RvVWludDhBcnJheS50c1xudmFyIHRvVWludDhBcnJheSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEpID0+IHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZyb21VdGY4KGRhdGEpO1xuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoIC8gVWludDhBcnJheS5CWVRFU19QRVJfRUxFTUVOVCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufSwgXCJ0b1VpbnQ4QXJyYXlcIik7XG5cbi8vIHNyYy90b1V0ZjgudHNcblxudmFyIHRvVXRmOCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgaW5wdXQuYnl0ZU9mZnNldCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgaW5wdXQuYnl0ZUxlbmd0aCAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkBzbWl0aHkvdXRpbC11dGY4OiB0b1V0ZjggZW5jb2RlciBmdW5jdGlvbiBvbmx5IGFjY2VwdHMgc3RyaW5nIHwgVWludDhBcnJheS5cIik7XG4gIH1cbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF9idWZmZXJfZnJvbS5mcm9tQXJyYXlCdWZmZXIpKGlucHV0LmJ1ZmZlciwgaW5wdXQuYnl0ZU9mZnNldCwgaW5wdXQuYnl0ZUxlbmd0aCkudG9TdHJpbmcoXCJ1dGY4XCIpO1xufSwgXCJ0b1V0ZjhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tVXRmOCxcbiAgdG9VaW50OEFycmF5LFxuICB0b1V0Zjhcbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQmFzZTY0ID0gdm9pZCAwO1xuY29uc3QgdXRpbF9idWZmZXJfZnJvbV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiKTtcbmNvbnN0IHV0aWxfdXRmOF8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xuY29uc3QgdG9CYXNlNjQgPSAoX2lucHV0KSA9PiB7XG4gICAgbGV0IGlucHV0O1xuICAgIGlmICh0eXBlb2YgX2lucHV0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlucHV0ID0gKDAsIHV0aWxfdXRmOF8xLmZyb21VdGY4KShfaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5wdXQgPSBfaW5wdXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVPZmZzZXQgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVMZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQHNtaXRoeS91dGlsLWJhc2U2NDogdG9CYXNlNjQgZW5jb2RlciBmdW5jdGlvbiBvbmx5IGFjY2VwdHMgc3RyaW5nIHwgVWludDhBcnJheS5cIik7XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbF9idWZmZXJfZnJvbV8xLmZyb21BcnJheUJ1ZmZlcikoaW5wdXQuYnVmZmVyLCBpbnB1dC5ieXRlT2Zmc2V0LCBpbnB1dC5ieXRlTGVuZ3RoKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn07XG5leHBvcnRzLnRvQmFzZTY0ID0gdG9CYXNlNjQ7XG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi8uL2Zyb21CYXNlNjRcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuLy4vdG9CYXNlNjRcIiksIG1vZHVsZS5leHBvcnRzKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21CYXNlNjQsXG4gIHRvQmFzZTY0XG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGVja3N1bVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfYmFzZTY0XzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiKTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNsYXNzIENoZWNrc3VtU3RyZWFtIGV4dGVuZHMgc3RyZWFtXzEuRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3Rvcih7IGV4cGVjdGVkQ2hlY2tzdW0sIGNoZWNrc3VtLCBzb3VyY2UsIGNoZWNrc3VtU291cmNlTG9jYXRpb24sIGJhc2U2NEVuY29kZXIsIH0pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UucGlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS91dGlsLXN0cmVhbTogdW5zdXBwb3J0ZWQgc291cmNlIHR5cGUgJHsoX2IgPSAoX2EgPSBzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBzb3VyY2V9IGluIENoZWNrc3VtU3RyZWFtLmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZTY0RW5jb2RlciA9IGJhc2U2NEVuY29kZXIgIT09IG51bGwgJiYgYmFzZTY0RW5jb2RlciAhPT0gdm9pZCAwID8gYmFzZTY0RW5jb2RlciA6IHV0aWxfYmFzZTY0XzEudG9CYXNlNjQ7XG4gICAgICAgIHRoaXMuZXhwZWN0ZWRDaGVja3N1bSA9IGV4cGVjdGVkQ2hlY2tzdW07XG4gICAgICAgIHRoaXMuY2hlY2tzdW0gPSBjaGVja3N1bTtcbiAgICAgICAgdGhpcy5jaGVja3N1bVNvdXJjZUxvY2F0aW9uID0gY2hlY2tzdW1Tb3VyY2VMb2NhdGlvbjtcbiAgICAgICAgdGhpcy5zb3VyY2UucGlwZSh0aGlzKTtcbiAgICB9XG4gICAgX3JlYWQoc2l6ZSkgeyB9XG4gICAgX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tzdW0udXBkYXRlKGNodW5rKTtcbiAgICAgICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgYXN5bmMgX2ZpbmFsKGNhbGxiYWNrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkaWdlc3QgPSBhd2FpdCB0aGlzLmNoZWNrc3VtLmRpZ2VzdCgpO1xuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZWQgPSB0aGlzLmJhc2U2NEVuY29kZXIoZGlnZXN0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4cGVjdGVkQ2hlY2tzdW0gIT09IHJlY2VpdmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihgQ2hlY2tzdW0gbWlzbWF0Y2g6IGV4cGVjdGVkIFwiJHt0aGlzLmV4cGVjdGVkQ2hlY2tzdW19XCIgYnV0IHJlY2VpdmVkIFwiJHtyZWNlaXZlZH1cImAgK1xuICAgICAgICAgICAgICAgICAgICBgIGluIHJlc3BvbnNlIGhlYWRlciBcIiR7dGhpcy5jaGVja3N1bVNvdXJjZUxvY2F0aW9ufVwiLmApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuZXhwb3J0cy5DaGVja3N1bVN0cmVhbSA9IENoZWNrc3VtU3RyZWFtO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jsb2IgPSBleHBvcnRzLmlzUmVhZGFibGVTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtID0gKHN0cmVhbSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgKCgoX2EgPSBzdHJlYW0gPT09IG51bGwgfHwgc3RyZWFtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHJlYW0uY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lKSA9PT0gUmVhZGFibGVTdHJlYW0ubmFtZSB8fCBzdHJlYW0gaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSk7XG59O1xuZXhwb3J0cy5pc1JlYWRhYmxlU3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbTtcbmNvbnN0IGlzQmxvYiA9IChibG9iKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmICgoKF9hID0gYmxvYiA9PT0gbnVsbCB8fCBibG9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBibG9iLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgPT09IEJsb2IubmFtZSB8fCBibG9iIGluc3RhbmNlb2YgQmxvYik7XG59O1xuZXhwb3J0cy5pc0Jsb2IgPSBpc0Jsb2I7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoZWNrc3VtU3RyZWFtID0gdm9pZCAwO1xuY29uc3QgUmVhZGFibGVTdHJlYW1SZWYgPSB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09IFwiZnVuY3Rpb25cIiA/IFJlYWRhYmxlU3RyZWFtIDogZnVuY3Rpb24gKCkgeyB9O1xuY2xhc3MgQ2hlY2tzdW1TdHJlYW0gZXh0ZW5kcyBSZWFkYWJsZVN0cmVhbVJlZiB7XG59XG5leHBvcnRzLkNoZWNrc3VtU3RyZWFtID0gQ2hlY2tzdW1TdHJlYW07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUNoZWNrc3VtU3RyZWFtID0gdm9pZCAwO1xuY29uc3QgdXRpbF9iYXNlNjRfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYmFzZTY0XCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuLi9zdHJlYW0tdHlwZS1jaGVja1wiKTtcbmNvbnN0IENoZWNrc3VtU3RyZWFtX2Jyb3dzZXJfMSA9IHJlcXVpcmUoXCIuL0NoZWNrc3VtU3RyZWFtLmJyb3dzZXJcIik7XG5jb25zdCBjcmVhdGVDaGVja3N1bVN0cmVhbSA9ICh7IGV4cGVjdGVkQ2hlY2tzdW0sIGNoZWNrc3VtLCBzb3VyY2UsIGNoZWNrc3VtU291cmNlTG9jYXRpb24sIGJhc2U2NEVuY29kZXIsIH0pID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICghKDAsIHN0cmVhbV90eXBlX2NoZWNrXzEuaXNSZWFkYWJsZVN0cmVhbSkoc291cmNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzbWl0aHkvdXRpbC1zdHJlYW06IHVuc3VwcG9ydGVkIHNvdXJjZSB0eXBlICR7KF9iID0gKF9hID0gc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogc291cmNlfSBpbiBDaGVja3N1bVN0cmVhbS5gKTtcbiAgICB9XG4gICAgY29uc3QgZW5jb2RlciA9IGJhc2U2NEVuY29kZXIgIT09IG51bGwgJiYgYmFzZTY0RW5jb2RlciAhPT0gdm9pZCAwID8gYmFzZTY0RW5jb2RlciA6IHV0aWxfYmFzZTY0XzEudG9CYXNlNjQ7XG4gICAgaWYgKHR5cGVvZiBUcmFuc2Zvcm1TdHJlYW0gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJAc21pdGh5L3V0aWwtc3RyZWFtOiB1bmFibGUgdG8gaW5zdGFudGlhdGUgQ2hlY2tzdW1TdHJlYW0gYmVjYXVzZSBBUEkgdW5hdmFpbGFibGU6IFJlYWRhYmxlU3RyZWFtL1RyYW5zZm9ybVN0cmVhbS5cIik7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICBzdGFydCgpIHsgfSxcbiAgICAgICAgYXN5bmMgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBjaGVja3N1bS51cGRhdGUoY2h1bmspO1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgZmx1c2goY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29uc3QgZGlnZXN0ID0gYXdhaXQgY2hlY2tzdW0uZGlnZXN0KCk7XG4gICAgICAgICAgICBjb25zdCByZWNlaXZlZCA9IGVuY29kZXIoZGlnZXN0KTtcbiAgICAgICAgICAgIGlmIChleHBlY3RlZENoZWNrc3VtICE9PSByZWNlaXZlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBDaGVja3N1bSBtaXNtYXRjaDogZXhwZWN0ZWQgXCIke2V4cGVjdGVkQ2hlY2tzdW19XCIgYnV0IHJlY2VpdmVkIFwiJHtyZWNlaXZlZH1cImAgK1xuICAgICAgICAgICAgICAgICAgICBgIGluIHJlc3BvbnNlIGhlYWRlciBcIiR7Y2hlY2tzdW1Tb3VyY2VMb2NhdGlvbn1cIi5gKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgc291cmNlLnBpcGVUaHJvdWdoKHRyYW5zZm9ybSk7XG4gICAgY29uc3QgcmVhZGFibGUgPSB0cmFuc2Zvcm0ucmVhZGFibGU7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHJlYWRhYmxlLCBDaGVja3N1bVN0cmVhbV9icm93c2VyXzEuQ2hlY2tzdW1TdHJlYW0ucHJvdG90eXBlKTtcbiAgICByZXR1cm4gcmVhZGFibGU7XG59O1xuZXhwb3J0cy5jcmVhdGVDaGVja3N1bVN0cmVhbSA9IGNyZWF0ZUNoZWNrc3VtU3RyZWFtO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVDaGVja3N1bVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV90eXBlX2NoZWNrXzEgPSByZXF1aXJlKFwiLi4vc3RyZWFtLXR5cGUtY2hlY2tcIik7XG5jb25zdCBDaGVja3N1bVN0cmVhbV8xID0gcmVxdWlyZShcIi4vQ2hlY2tzdW1TdHJlYW1cIik7XG5jb25zdCBjcmVhdGVDaGVja3N1bVN0cmVhbV9icm93c2VyXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVDaGVja3N1bVN0cmVhbS5icm93c2VyXCIpO1xuZnVuY3Rpb24gY3JlYXRlQ2hlY2tzdW1TdHJlYW0oaW5pdCkge1xuICAgIGlmICh0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09IFwiZnVuY3Rpb25cIiAmJiAoMCwgc3RyZWFtX3R5cGVfY2hlY2tfMS5pc1JlYWRhYmxlU3RyZWFtKShpbml0LnNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBjcmVhdGVDaGVja3N1bVN0cmVhbV9icm93c2VyXzEuY3JlYXRlQ2hlY2tzdW1TdHJlYW0pKGluaXQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENoZWNrc3VtU3RyZWFtXzEuQ2hlY2tzdW1TdHJlYW0oaW5pdCk7XG59XG5leHBvcnRzLmNyZWF0ZUNoZWNrc3VtU3RyZWFtID0gY3JlYXRlQ2hlY2tzdW1TdHJlYW07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ5dGVBcnJheUNvbGxlY3RvciA9IHZvaWQgMDtcbmNsYXNzIEJ5dGVBcnJheUNvbGxlY3RvciB7XG4gICAgY29uc3RydWN0b3IoYWxsb2NCeXRlQXJyYXkpIHtcbiAgICAgICAgdGhpcy5hbGxvY0J5dGVBcnJheSA9IGFsbG9jQnl0ZUFycmF5O1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmJ5dGVBcnJheXMgPSBbXTtcbiAgICB9XG4gICAgcHVzaChieXRlQXJyYXkpIHtcbiAgICAgICAgdGhpcy5ieXRlQXJyYXlzLnB1c2goYnl0ZUFycmF5KTtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoICs9IGJ5dGVBcnJheS5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnl0ZUFycmF5cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlQXJyYXlzWzBdO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFnZ3JlZ2F0aW9uID0gdGhpcy5hbGxvY0J5dGVBcnJheSh0aGlzLmJ5dGVMZW5ndGgpO1xuICAgICAgICBsZXQgY3Vyc29yID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJ5dGVBcnJheXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5ieXRlQXJyYXlzW2ldO1xuICAgICAgICAgICAgYWdncmVnYXRpb24uc2V0KGJ5dGVzLCBjdXJzb3IpO1xuICAgICAgICAgICAgY3Vyc29yICs9IGJ5dGVzLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICByZXR1cm4gYWdncmVnYXRpb247XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmJ5dGVBcnJheXMgPSBbXTtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gMDtcbiAgICB9XG59XG5leHBvcnRzLkJ5dGVBcnJheUNvbGxlY3RvciA9IEJ5dGVBcnJheUNvbGxlY3RvcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubW9kZU9mID0gZXhwb3J0cy5zaXplT2YgPSBleHBvcnRzLmZsdXNoID0gZXhwb3J0cy5tZXJnZSA9IGV4cG9ydHMuY3JlYXRlQnVmZmVyZWRSZWFkYWJsZSA9IGV4cG9ydHMuY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IEJ5dGVBcnJheUNvbGxlY3Rvcl8xID0gcmVxdWlyZShcIi4vQnl0ZUFycmF5Q29sbGVjdG9yXCIpO1xuZnVuY3Rpb24gY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbSh1cHN0cmVhbSwgc2l6ZSwgbG9nZ2VyKSB7XG4gICAgY29uc3QgcmVhZGVyID0gdXBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgbGV0IHN0cmVhbUJ1ZmZlcmluZ0xvZ2dlZFdhcm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYnl0ZXNTZWVuID0gMDtcbiAgICBjb25zdCBidWZmZXJzID0gW1wiXCIsIG5ldyBCeXRlQXJyYXlDb2xsZWN0b3JfMS5CeXRlQXJyYXlDb2xsZWN0b3IoKHNpemUpID0+IG5ldyBVaW50OEFycmF5KHNpemUpKV07XG4gICAgbGV0IG1vZGUgPSAtMTtcbiAgICBjb25zdCBwdWxsID0gYXN5bmMgKGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgY29uc3QgY2h1bmsgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIGlmIChtb2RlICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmRlciA9IGZsdXNoKGJ1ZmZlcnMsIG1vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChzaXplT2YocmVtYWluZGVyKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHJlbWFpbmRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY2h1bmtNb2RlID0gbW9kZU9mKGNodW5rLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAobW9kZSAhPT0gY2h1bmtNb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZmx1c2goYnVmZmVycywgbW9kZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtb2RlID0gY2h1bmtNb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjaHVua1NpemUgPSBzaXplT2YoY2h1bmspO1xuICAgICAgICAgICAgYnl0ZXNTZWVuICs9IGNodW5rU2l6ZTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlclNpemUgPSBzaXplT2YoYnVmZmVyc1ttb2RlXSk7XG4gICAgICAgICAgICBpZiAoY2h1bmtTaXplID49IHNpemUgJiYgYnVmZmVyU2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTaXplID0gbWVyZ2UoYnVmZmVycywgbW9kZSwgY2h1bmspO1xuICAgICAgICAgICAgICAgIGlmICghc3RyZWFtQnVmZmVyaW5nTG9nZ2VkV2FybmluZyAmJiBieXRlc1NlZW4gPiBzaXplICogMikge1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW1CdWZmZXJpbmdMb2dnZWRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyID09PSBudWxsIHx8IGxvZ2dlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbG9nZ2VyLndhcm4oYEBzbWl0aHkvdXRpbC1zdHJlYW0gLSBzdHJlYW0gY2h1bmsgc2l6ZSAke2NodW5rU2l6ZX0gaXMgYmVsb3cgdGhyZXNob2xkIG9mICR7c2l6ZX0sIGF1dG9tYXRpY2FsbHkgYnVmZmVyaW5nLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV3U2l6ZSA+PSBzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShmbHVzaChidWZmZXJzLCBtb2RlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwdWxsKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgIHB1bGwsXG4gICAgfSk7XG59XG5leHBvcnRzLmNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW0gPSBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtO1xuZXhwb3J0cy5jcmVhdGVCdWZmZXJlZFJlYWRhYmxlID0gY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbTtcbmZ1bmN0aW9uIG1lcmdlKGJ1ZmZlcnMsIG1vZGUsIGNodW5rKSB7XG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGJ1ZmZlcnNbMF0gKz0gY2h1bms7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZU9mKGJ1ZmZlcnNbMF0pO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGJ1ZmZlcnNbbW9kZV0ucHVzaChjaHVuayk7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZU9mKGJ1ZmZlcnNbbW9kZV0pO1xuICAgIH1cbn1cbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmZ1bmN0aW9uIGZsdXNoKGJ1ZmZlcnMsIG1vZGUpIHtcbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY29uc3QgcyA9IGJ1ZmZlcnNbMF07XG4gICAgICAgICAgICBidWZmZXJzWzBdID0gXCJcIjtcbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBidWZmZXJzW21vZGVdLmZsdXNoKCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS91dGlsLXN0cmVhbSAtIGludmFsaWQgaW5kZXggJHttb2RlfSBnaXZlbiB0byBmbHVzaCgpYCk7XG59XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5mdW5jdGlvbiBzaXplT2YoY2h1bmspIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiAoX2IgPSAoX2EgPSBjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2h1bmsuYnl0ZUxlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNodW5rLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcbn1cbmV4cG9ydHMuc2l6ZU9mID0gc2l6ZU9mO1xuZnVuY3Rpb24gbW9kZU9mKGNodW5rLCBhbGxvd0J1ZmZlciA9IHRydWUpIHtcbiAgICBpZiAoYWxsb3dCdWZmZXIgJiYgdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjaHVuayBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gMjtcbiAgICB9XG4gICAgaWYgKGNodW5rIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZXhwb3J0cy5tb2RlT2YgPSBtb2RlT2Y7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGUgPSB2b2lkIDA7XG5jb25zdCBub2RlX3N0cmVhbV8xID0gcmVxdWlyZShcIm5vZGU6c3RyZWFtXCIpO1xuY29uc3QgQnl0ZUFycmF5Q29sbGVjdG9yXzEgPSByZXF1aXJlKFwiLi9CeXRlQXJyYXlDb2xsZWN0b3JcIik7XG5jb25zdCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuZnVuY3Rpb24gY3JlYXRlQnVmZmVyZWRSZWFkYWJsZSh1cHN0cmVhbSwgc2l6ZSwgbG9nZ2VyKSB7XG4gICAgaWYgKCgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHVwc3RyZWFtKSkge1xuICAgICAgICByZXR1cm4gKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5jcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtKSh1cHN0cmVhbSwgc2l6ZSwgbG9nZ2VyKTtcbiAgICB9XG4gICAgY29uc3QgZG93bnN0cmVhbSA9IG5ldyBub2RlX3N0cmVhbV8xLlJlYWRhYmxlKHsgcmVhZCgpIHsgfSB9KTtcbiAgICBsZXQgc3RyZWFtQnVmZmVyaW5nTG9nZ2VkV2FybmluZyA9IGZhbHNlO1xuICAgIGxldCBieXRlc1NlZW4gPSAwO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIG5ldyBCeXRlQXJyYXlDb2xsZWN0b3JfMS5CeXRlQXJyYXlDb2xsZWN0b3IoKHNpemUpID0+IG5ldyBVaW50OEFycmF5KHNpemUpKSxcbiAgICAgICAgbmV3IEJ5dGVBcnJheUNvbGxlY3Rvcl8xLkJ5dGVBcnJheUNvbGxlY3Rvcigoc2l6ZSkgPT4gQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkoc2l6ZSkpKSxcbiAgICBdO1xuICAgIGxldCBtb2RlID0gLTE7XG4gICAgdXBzdHJlYW0ub24oXCJkYXRhXCIsIChjaHVuaykgPT4ge1xuICAgICAgICBjb25zdCBjaHVua01vZGUgPSAoMCwgY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbV8xLm1vZGVPZikoY2h1bmssIHRydWUpO1xuICAgICAgICBpZiAobW9kZSAhPT0gY2h1bmtNb2RlKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZG93bnN0cmVhbS5wdXNoKCgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEuZmx1c2gpKGJ1ZmZlcnMsIG1vZGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZGUgPSBjaHVua01vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGUgPT09IC0xKSB7XG4gICAgICAgICAgICBkb3duc3RyZWFtLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9ICgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEuc2l6ZU9mKShjaHVuayk7XG4gICAgICAgIGJ5dGVzU2VlbiArPSBjaHVua1NpemU7XG4gICAgICAgIGNvbnN0IGJ1ZmZlclNpemUgPSAoMCwgY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVN0cmVhbV8xLnNpemVPZikoYnVmZmVyc1ttb2RlXSk7XG4gICAgICAgIGlmIChjaHVua1NpemUgPj0gc2l6ZSAmJiBidWZmZXJTaXplID09PSAwKSB7XG4gICAgICAgICAgICBkb3duc3RyZWFtLnB1c2goY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV3U2l6ZSA9ICgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEubWVyZ2UpKGJ1ZmZlcnMsIG1vZGUsIGNodW5rKTtcbiAgICAgICAgICAgIGlmICghc3RyZWFtQnVmZmVyaW5nTG9nZ2VkV2FybmluZyAmJiBieXRlc1NlZW4gPiBzaXplICogMikge1xuICAgICAgICAgICAgICAgIHN0cmVhbUJ1ZmZlcmluZ0xvZ2dlZFdhcm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGxvZ2dlciA9PT0gbnVsbCB8fCBsb2dnZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxvZ2dlci53YXJuKGBAc21pdGh5L3V0aWwtc3RyZWFtIC0gc3RyZWFtIGNodW5rIHNpemUgJHtjaHVua1NpemV9IGlzIGJlbG93IHRocmVzaG9sZCBvZiAke3NpemV9LCBhdXRvbWF0aWNhbGx5IGJ1ZmZlcmluZy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdTaXplID49IHNpemUpIHtcbiAgICAgICAgICAgICAgICBkb3duc3RyZWFtLnB1c2goKDAsIGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGVTdHJlYW1fMS5mbHVzaCkoYnVmZmVycywgbW9kZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgdXBzdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICBpZiAobW9kZSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmRlciA9ICgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEuZmx1c2gpKGJ1ZmZlcnMsIG1vZGUpO1xuICAgICAgICAgICAgaWYgKCgwLCBjcmVhdGVCdWZmZXJlZFJlYWRhYmxlU3RyZWFtXzEuc2l6ZU9mKShyZW1haW5kZXIpID4gMCkge1xuICAgICAgICAgICAgICAgIGRvd25zdHJlYW0ucHVzaChyZW1haW5kZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvd25zdHJlYW0ucHVzaChudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG93bnN0cmVhbTtcbn1cbmV4cG9ydHMuY3JlYXRlQnVmZmVyZWRSZWFkYWJsZSA9IGNyZWF0ZUJ1ZmZlcmVkUmVhZGFibGU7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IGdldEF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbSA9IChyZWFkYWJsZVN0cmVhbSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHsgYmFzZTY0RW5jb2RlciwgYm9keUxlbmd0aENoZWNrZXIsIGNoZWNrc3VtQWxnb3JpdGhtRm4sIGNoZWNrc3VtTG9jYXRpb25OYW1lLCBzdHJlYW1IYXNoZXIgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY2hlY2tzdW1SZXF1aXJlZCA9IGJhc2U2NEVuY29kZXIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBjaGVja3N1bUFsZ29yaXRobUZuICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgY2hlY2tzdW1Mb2NhdGlvbk5hbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBzdHJlYW1IYXNoZXIgIT09IHVuZGVmaW5lZDtcbiAgICBjb25zdCBkaWdlc3QgPSBjaGVja3N1bVJlcXVpcmVkID8gc3RyZWFtSGFzaGVyKGNoZWNrc3VtQWxnb3JpdGhtRm4sIHJlYWRhYmxlU3RyZWFtKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0gPSBuZXcgc3RyZWFtXzEuUmVhZGFibGUoeyByZWFkOiAoKSA9PiB7IH0gfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGJvZHlMZW5ndGhDaGVja2VyKGRhdGEpIHx8IDA7XG4gICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKGAke2xlbmd0aC50b1N0cmluZygxNil9XFxyXFxuYCk7XG4gICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKGRhdGEpO1xuICAgICAgICBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0ucHVzaChcIlxcclxcblwiKTtcbiAgICB9KTtcbiAgICByZWFkYWJsZVN0cmVhbS5vbihcImVuZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKGAwXFxyXFxuYCk7XG4gICAgICAgIGlmIChjaGVja3N1bVJlcXVpcmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjaGVja3N1bSA9IGJhc2U2NEVuY29kZXIoYXdhaXQgZGlnZXN0KTtcbiAgICAgICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKGAke2NoZWNrc3VtTG9jYXRpb25OYW1lfToke2NoZWNrc3VtfVxcclxcbmApO1xuICAgICAgICAgICAgYXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLnB1c2goYFxcclxcbmApO1xuICAgICAgICB9XG4gICAgICAgIGF3c0NodW5rZWRFbmNvZGluZ1N0cmVhbS5wdXNoKG51bGwpO1xuICAgIH0pO1xuICAgIHJldHVybiBhd3NDaHVua2VkRW5jb2RpbmdTdHJlYW07XG59O1xuZXhwb3J0cy5nZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW0gPSBnZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhlYWRTdHJlYW0gPSB2b2lkIDA7XG5hc3luYyBmdW5jdGlvbiBoZWFkU3RyZWFtKHN0cmVhbSwgYnl0ZXMpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGJ5dGVMZW5ndGhDb3VudGVyID0gMDtcbiAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgbGV0IGlzRG9uZSA9IGZhbHNlO1xuICAgIHdoaWxlICghaXNEb25lKSB7XG4gICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgY2h1bmtzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aENvdW50ZXIgKz0gKF9hID0gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLmJ5dGVMZW5ndGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVMZW5ndGhDb3VudGVyID49IGJ5dGVzKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpc0RvbmUgPSBkb25lO1xuICAgIH1cbiAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICBjb25zdCBjb2xsZWN0ZWQgPSBuZXcgVWludDhBcnJheShNYXRoLm1pbihieXRlcywgYnl0ZUxlbmd0aENvdW50ZXIpKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCA+IGNvbGxlY3RlZC5ieXRlTGVuZ3RoIC0gb2Zmc2V0KSB7XG4gICAgICAgICAgICBjb2xsZWN0ZWQuc2V0KGNodW5rLnN1YmFycmF5KDAsIGNvbGxlY3RlZC5ieXRlTGVuZ3RoIC0gb2Zmc2V0KSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29sbGVjdGVkLnNldChjaHVuaywgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGVkO1xufVxuZXhwb3J0cy5oZWFkU3RyZWFtID0gaGVhZFN0cmVhbTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGVhZFN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IGhlYWRTdHJlYW1fYnJvd3Nlcl8xID0gcmVxdWlyZShcIi4vaGVhZFN0cmVhbS5icm93c2VyXCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuY29uc3QgaGVhZFN0cmVhbSA9IChzdHJlYW0sIGJ5dGVzKSA9PiB7XG4gICAgaWYgKCgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHN0cmVhbSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBoZWFkU3RyZWFtX2Jyb3dzZXJfMS5oZWFkU3RyZWFtKShzdHJlYW0sIGJ5dGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdG9yID0gbmV3IENvbGxlY3RvcigpO1xuICAgICAgICBjb2xsZWN0b3IubGltaXQgPSBieXRlcztcbiAgICAgICAgc3RyZWFtLnBpcGUoY29sbGVjdG9yKTtcbiAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgY29sbGVjdG9yLmVuZCgpO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb2xsZWN0b3Iub24oXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAgICBjb2xsZWN0b3Iub24oXCJmaW5pc2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycykpO1xuICAgICAgICAgICAgcmVzb2x2ZShieXRlcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuaGVhZFN0cmVhbSA9IGhlYWRTdHJlYW07XG5jbGFzcyBDb2xsZWN0b3IgZXh0ZW5kcyBzdHJlYW1fMS5Xcml0YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLmxpbWl0ID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMuYnl0ZXNCdWZmZXJlZCA9IDA7XG4gICAgfVxuICAgIF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgICB0aGlzLmJ5dGVzQnVmZmVyZWQgKz0gKF9hID0gY2h1bmsuYnl0ZUxlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgaWYgKHRoaXMuYnl0ZXNCdWZmZXJlZCA+PSB0aGlzLmxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCBleGNlc3MgPSB0aGlzLmJ5dGVzQnVmZmVyZWQgLSB0aGlzLmxpbWl0O1xuICAgICAgICAgICAgY29uc3QgdGFpbEJ1ZmZlciA9IHRoaXMuYnVmZmVyc1t0aGlzLmJ1ZmZlcnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJzLmxlbmd0aCAtIDFdID0gdGFpbEJ1ZmZlci5zdWJhcnJheSgwLCB0YWlsQnVmZmVyLmJ5dGVMZW5ndGggLSBleGNlc3MpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZmluaXNoXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuIiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBlc2NhcGVVcmk6ICgpID0+IGVzY2FwZVVyaSxcbiAgZXNjYXBlVXJpUGF0aDogKCkgPT4gZXNjYXBlVXJpUGF0aFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9lc2NhcGUtdXJpLnRzXG52YXIgZXNjYXBlVXJpID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodXJpKSA9PiAoXG4gIC8vIEFXUyBwZXJjZW50LWVuY29kZXMgc29tZSBleHRyYSBub24tc3RhbmRhcmQgY2hhcmFjdGVycyBpbiBhIFVSSVxuICBlbmNvZGVVUklDb21wb25lbnQodXJpKS5yZXBsYWNlKC9bIScoKSpdL2csIGhleEVuY29kZSlcbiksIFwiZXNjYXBlVXJpXCIpO1xudmFyIGhleEVuY29kZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGMpID0+IGAlJHtjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YCwgXCJoZXhFbmNvZGVcIik7XG5cbi8vIHNyYy9lc2NhcGUtdXJpLXBhdGgudHNcbnZhciBlc2NhcGVVcmlQYXRoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodXJpKSA9PiB1cmkuc3BsaXQoXCIvXCIpLm1hcChlc2NhcGVVcmkpLmpvaW4oXCIvXCIpLCBcImVzY2FwZVVyaVBhdGhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBlc2NhcGVVcmksXG4gIGVzY2FwZVVyaVBhdGhcbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGJ1aWxkUXVlcnlTdHJpbmc6ICgpID0+IGJ1aWxkUXVlcnlTdHJpbmdcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF91dGlsX3VyaV9lc2NhcGUgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLXVyaS1lc2NhcGVcIik7XG5mdW5jdGlvbiBidWlsZFF1ZXJ5U3RyaW5nKHF1ZXJ5KSB7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhxdWVyeSkuc29ydCgpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBxdWVyeVtrZXldO1xuICAgIGtleSA9ICgwLCBpbXBvcnRfdXRpbF91cmlfZXNjYXBlLmVzY2FwZVVyaSkoa2V5KTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpTGVuID0gdmFsdWUubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYCR7a2V5fT0keygwLCBpbXBvcnRfdXRpbF91cmlfZXNjYXBlLmVzY2FwZVVyaSkodmFsdWVbaV0pfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcXNFbnRyeSA9IGtleTtcbiAgICAgIGlmICh2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcXNFbnRyeSArPSBgPSR7KDAsIGltcG9ydF91dGlsX3VyaV9lc2NhcGUuZXNjYXBlVXJpKSh2YWx1ZSl9YDtcbiAgICAgIH1cbiAgICAgIHBhcnRzLnB1c2gocXNFbnRyeSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJ0cy5qb2luKFwiJlwiKTtcbn1cbl9fbmFtZShidWlsZFF1ZXJ5U3RyaW5nLCBcImJ1aWxkUXVlcnlTdHJpbmdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBidWlsZFF1ZXJ5U3RyaW5nXG59KTtcblxuIiwgInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBERUZBVUxUX1JFUVVFU1RfVElNRU9VVDogKCkgPT4gREVGQVVMVF9SRVFVRVNUX1RJTUVPVVQsXG4gIE5vZGVIdHRwMkhhbmRsZXI6ICgpID0+IE5vZGVIdHRwMkhhbmRsZXIsXG4gIE5vZGVIdHRwSGFuZGxlcjogKCkgPT4gTm9kZUh0dHBIYW5kbGVyLFxuICBzdHJlYW1Db2xsZWN0b3I6ICgpID0+IHN0cmVhbUNvbGxlY3RvclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9ub2RlLWh0dHAtaGFuZGxlci50c1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbnZhciBpbXBvcnRfcXVlcnlzdHJpbmdfYnVpbGRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3F1ZXJ5c3RyaW5nLWJ1aWxkZXJcIik7XG52YXIgaW1wb3J0X2h0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbnZhciBpbXBvcnRfaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbi8vIHNyYy9jb25zdGFudHMudHNcbnZhciBOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUyA9IFtcIkVDT05OUkVTRVRcIiwgXCJFUElQRVwiLCBcIkVUSU1FRE9VVFwiXTtcblxuLy8gc3JjL2dldC10cmFuc2Zvcm1lZC1oZWFkZXJzLnRzXG52YXIgZ2V0VHJhbnNmb3JtZWRIZWFkZXJzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaGVhZGVycykgPT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lZEhlYWRlcnMgPSB7fTtcbiAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgY29uc3QgaGVhZGVyVmFsdWVzID0gaGVhZGVyc1tuYW1lXTtcbiAgICB0cmFuc2Zvcm1lZEhlYWRlcnNbbmFtZV0gPSBBcnJheS5pc0FycmF5KGhlYWRlclZhbHVlcykgPyBoZWFkZXJWYWx1ZXMuam9pbihcIixcIikgOiBoZWFkZXJWYWx1ZXM7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybWVkSGVhZGVycztcbn0sIFwiZ2V0VHJhbnNmb3JtZWRIZWFkZXJzXCIpO1xuXG4vLyBzcmMvdGltaW5nLnRzXG52YXIgdGltaW5nID0ge1xuICBzZXRUaW1lb3V0OiAoY2IsIG1zKSA9PiBzZXRUaW1lb3V0KGNiLCBtcyksXG4gIGNsZWFyVGltZW91dDogKHRpbWVvdXRJZCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZClcbn07XG5cbi8vIHNyYy9zZXQtY29ubmVjdGlvbi10aW1lb3V0LnRzXG52YXIgREVGRVJfRVZFTlRfTElTVEVORVJfVElNRSA9IDFlMztcbnZhciBzZXRDb25uZWN0aW9uVGltZW91dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHJlcXVlc3QsIHJlamVjdCwgdGltZW91dEluTXMgPSAwKSA9PiB7XG4gIGlmICghdGltZW91dEluTXMpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgY29uc3QgcmVnaXN0ZXJUaW1lb3V0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgdGltZW91dElkID0gdGltaW5nLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVxdWVzdC5kZXN0cm95KCk7XG4gICAgICByZWplY3QoXG4gICAgICAgIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKGBTb2NrZXQgdGltZWQgb3V0IHdpdGhvdXQgZXN0YWJsaXNoaW5nIGEgY29ubmVjdGlvbiB3aXRoaW4gJHt0aW1lb3V0SW5Nc30gbXNgKSwge1xuICAgICAgICAgIG5hbWU6IFwiVGltZW91dEVycm9yXCJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSwgdGltZW91dEluTXMgLSBvZmZzZXQpO1xuICAgIGNvbnN0IGRvV2l0aFNvY2tldCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHNvY2tldCkgPT4ge1xuICAgICAgaWYgKHNvY2tldD8uY29ubmVjdGluZykge1xuICAgICAgICBzb2NrZXQub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgICAgICB0aW1pbmcuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltaW5nLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfVxuICAgIH0sIFwiZG9XaXRoU29ja2V0XCIpO1xuICAgIGlmIChyZXF1ZXN0LnNvY2tldCkge1xuICAgICAgZG9XaXRoU29ja2V0KHJlcXVlc3Quc29ja2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5vbihcInNvY2tldFwiLCBkb1dpdGhTb2NrZXQpO1xuICAgIH1cbiAgfSwgXCJyZWdpc3RlclRpbWVvdXRcIik7XG4gIGlmICh0aW1lb3V0SW5NcyA8IDJlMykge1xuICAgIHJlZ2lzdGVyVGltZW91dCgwKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gdGltaW5nLnNldFRpbWVvdXQocmVnaXN0ZXJUaW1lb3V0LmJpbmQobnVsbCwgREVGRVJfRVZFTlRfTElTVEVORVJfVElNRSksIERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUpO1xufSwgXCJzZXRDb25uZWN0aW9uVGltZW91dFwiKTtcblxuLy8gc3JjL3NldC1zb2NrZXQta2VlcC1hbGl2ZS50c1xudmFyIERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUyID0gM2UzO1xudmFyIHNldFNvY2tldEtlZXBBbGl2ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHJlcXVlc3QsIHsga2VlcEFsaXZlLCBrZWVwQWxpdmVNc2VjcyB9LCBkZWZlclRpbWVNcyA9IERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUyKSA9PiB7XG4gIGlmIChrZWVwQWxpdmUgIT09IHRydWUpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgY29uc3QgcmVnaXN0ZXJMaXN0ZW5lciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgIGlmIChyZXF1ZXN0LnNvY2tldCkge1xuICAgICAgcmVxdWVzdC5zb2NrZXQuc2V0S2VlcEFsaXZlKGtlZXBBbGl2ZSwga2VlcEFsaXZlTXNlY3MgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3Qub24oXCJzb2NrZXRcIiwgKHNvY2tldCkgPT4ge1xuICAgICAgICBzb2NrZXQuc2V0S2VlcEFsaXZlKGtlZXBBbGl2ZSwga2VlcEFsaXZlTXNlY3MgfHwgMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFwicmVnaXN0ZXJMaXN0ZW5lclwiKTtcbiAgaWYgKGRlZmVyVGltZU1zID09PSAwKSB7XG4gICAgcmVnaXN0ZXJMaXN0ZW5lcigpO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiB0aW1pbmcuc2V0VGltZW91dChyZWdpc3Rlckxpc3RlbmVyLCBkZWZlclRpbWVNcyk7XG59LCBcInNldFNvY2tldEtlZXBBbGl2ZVwiKTtcblxuLy8gc3JjL3NldC1zb2NrZXQtdGltZW91dC50c1xudmFyIERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUzID0gM2UzO1xudmFyIHNldFNvY2tldFRpbWVvdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXF1ZXN0LCByZWplY3QsIHRpbWVvdXRJbk1zID0gREVGQVVMVF9SRVFVRVNUX1RJTUVPVVQpID0+IHtcbiAgY29uc3QgcmVnaXN0ZXJUaW1lb3V0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgdGltZW91dCA9IHRpbWVvdXRJbk1zIC0gb2Zmc2V0O1xuICAgIGNvbnN0IG9uVGltZW91dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgICAgcmVxdWVzdC5kZXN0cm95KCk7XG4gICAgICByZWplY3QoT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoYENvbm5lY3Rpb24gdGltZWQgb3V0IGFmdGVyICR7dGltZW91dEluTXN9IG1zYCksIHsgbmFtZTogXCJUaW1lb3V0RXJyb3JcIiB9KSk7XG4gICAgfSwgXCJvblRpbWVvdXRcIik7XG4gICAgaWYgKHJlcXVlc3Quc29ja2V0KSB7XG4gICAgICByZXF1ZXN0LnNvY2tldC5zZXRUaW1lb3V0KHRpbWVvdXQsIG9uVGltZW91dCk7XG4gICAgICByZXF1ZXN0Lm9uKFwiY2xvc2VcIiwgKCkgPT4gcmVxdWVzdC5zb2NrZXQ/LnJlbW92ZUxpc3RlbmVyKFwidGltZW91dFwiLCBvblRpbWVvdXQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5zZXRUaW1lb3V0KHRpbWVvdXQsIG9uVGltZW91dCk7XG4gICAgfVxuICB9LCBcInJlZ2lzdGVyVGltZW91dFwiKTtcbiAgaWYgKDAgPCB0aW1lb3V0SW5NcyAmJiB0aW1lb3V0SW5NcyA8IDZlMykge1xuICAgIHJlZ2lzdGVyVGltZW91dCgwKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gdGltaW5nLnNldFRpbWVvdXQoXG4gICAgcmVnaXN0ZXJUaW1lb3V0LmJpbmQobnVsbCwgdGltZW91dEluTXMgPT09IDAgPyAwIDogREVGRVJfRVZFTlRfTElTVEVORVJfVElNRTMpLFxuICAgIERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUzXG4gICk7XG59LCBcInNldFNvY2tldFRpbWVvdXRcIik7XG5cbi8vIHNyYy93cml0ZS1yZXF1ZXN0LWJvZHkudHNcbnZhciBpbXBvcnRfc3RyZWFtID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbnZhciBNSU5fV0FJVF9USU1FID0gNmUzO1xuYXN5bmMgZnVuY3Rpb24gd3JpdGVSZXF1ZXN0Qm9keShodHRwUmVxdWVzdCwgcmVxdWVzdCwgbWF4Q29udGludWVUaW1lb3V0TXMgPSBNSU5fV0FJVF9USU1FKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnMgPz8ge307XG4gIGNvbnN0IGV4cGVjdCA9IGhlYWRlcnNbXCJFeHBlY3RcIl0gfHwgaGVhZGVyc1tcImV4cGVjdFwiXTtcbiAgbGV0IHRpbWVvdXRJZCA9IC0xO1xuICBsZXQgc2VuZEJvZHkgPSB0cnVlO1xuICBpZiAoZXhwZWN0ID09PSBcIjEwMC1jb250aW51ZVwiKSB7XG4gICAgc2VuZEJvZHkgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGltZW91dElkID0gTnVtYmVyKHRpbWluZy5zZXRUaW1lb3V0KCgpID0+IHJlc29sdmUodHJ1ZSksIE1hdGgubWF4KE1JTl9XQUlUX1RJTUUsIG1heENvbnRpbnVlVGltZW91dE1zKSkpO1xuICAgICAgfSksXG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBodHRwUmVxdWVzdC5vbihcImNvbnRpbnVlXCIsICgpID0+IHtcbiAgICAgICAgICB0aW1pbmcuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGh0dHBSZXF1ZXN0Lm9uKFwicmVzcG9uc2VcIiwgKCkgPT4ge1xuICAgICAgICAgIHRpbWluZy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGh0dHBSZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgICAgIHRpbWluZy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIF0pO1xuICB9XG4gIGlmIChzZW5kQm9keSkge1xuICAgIHdyaXRlQm9keShodHRwUmVxdWVzdCwgcmVxdWVzdC5ib2R5KTtcbiAgfVxufVxuX19uYW1lKHdyaXRlUmVxdWVzdEJvZHksIFwid3JpdGVSZXF1ZXN0Qm9keVwiKTtcbmZ1bmN0aW9uIHdyaXRlQm9keShodHRwUmVxdWVzdCwgYm9keSkge1xuICBpZiAoYm9keSBpbnN0YW5jZW9mIGltcG9ydF9zdHJlYW0uUmVhZGFibGUpIHtcbiAgICBib2R5LnBpcGUoaHR0cFJlcXVlc3QpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYm9keSkge1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkgfHwgdHlwZW9mIGJvZHkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGh0dHBSZXF1ZXN0LmVuZChib2R5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdWludDggPSBib2R5O1xuICAgIGlmICh0eXBlb2YgdWludDggPT09IFwib2JqZWN0XCIgJiYgdWludDguYnVmZmVyICYmIHR5cGVvZiB1aW50OC5ieXRlT2Zmc2V0ID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB1aW50OC5ieXRlTGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBodHRwUmVxdWVzdC5lbmQoQnVmZmVyLmZyb20odWludDguYnVmZmVyLCB1aW50OC5ieXRlT2Zmc2V0LCB1aW50OC5ieXRlTGVuZ3RoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGh0dHBSZXF1ZXN0LmVuZChCdWZmZXIuZnJvbShib2R5KSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGh0dHBSZXF1ZXN0LmVuZCgpO1xufVxuX19uYW1lKHdyaXRlQm9keSwgXCJ3cml0ZUJvZHlcIik7XG5cbi8vIHNyYy9ub2RlLWh0dHAtaGFuZGxlci50c1xudmFyIERFRkFVTFRfUkVRVUVTVF9USU1FT1VUID0gMDtcbnZhciBOb2RlSHR0cEhhbmRsZXIgPSBjbGFzcyBfTm9kZUh0dHBIYW5kbGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuc29ja2V0V2FybmluZ1RpbWVzdGFtcCA9IDA7XG4gICAgLy8gTm9kZSBodHRwIGhhbmRsZXIgaXMgaGFyZC1jb2RlZCB0byBodHRwLzEuMTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvZmY1NjY0YjgzYjg5YzU1ZTRhYjVkNWY2MDA2OGZiNDU3ZjFmNTg3Mi9saWIvX2h0dHBfc2VydmVyLmpzI0wyODZcbiAgICB0aGlzLm1ldGFkYXRhID0geyBoYW5kbGVyUHJvdG9jb2w6IFwiaHR0cC8xLjFcIiB9O1xuICAgIHRoaXMuY29uZmlnUHJvdmlkZXIgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvcHRpb25zKCkudGhlbigoX29wdGlvbnMpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHRoaXMucmVzb2x2ZURlZmF1bHRDb25maWcoX29wdGlvbnMpKTtcbiAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUodGhpcy5yZXNvbHZlRGVmYXVsdENvbmZpZyhvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJOb2RlSHR0cEhhbmRsZXJcIik7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHRoZSBpbnB1dCBpZiBpdCBpcyBhbiBIdHRwSGFuZGxlciBvZiBhbnkgY2xhc3MsXG4gICAqIG9yIGluc3RhbnRpYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGhhbmRsZXIuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKGluc3RhbmNlT3JPcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZU9yT3B0aW9ucz8uaGFuZGxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZU9yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfTm9kZUh0dHBIYW5kbGVyKGluc3RhbmNlT3JPcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqXG4gICAqIEBwYXJhbSBhZ2VudCAtIGh0dHAocykgYWdlbnQgaW4gdXNlIGJ5IHRoZSBOb2RlSHR0cEhhbmRsZXIgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBzb2NrZXRXYXJuaW5nVGltZXN0YW1wIC0gbGFzdCBzb2NrZXQgdXNhZ2UgY2hlY2sgdGltZXN0YW1wLlxuICAgKiBAcGFyYW0gbG9nZ2VyIC0gY2hhbm5lbCBmb3IgdGhlIHdhcm5pbmcuXG4gICAqIEByZXR1cm5zIHRpbWVzdGFtcCBvZiBsYXN0IGVtaXR0ZWQgd2FybmluZy5cbiAgICovXG4gIHN0YXRpYyBjaGVja1NvY2tldFVzYWdlKGFnZW50LCBzb2NrZXRXYXJuaW5nVGltZXN0YW1wLCBsb2dnZXIgPSBjb25zb2xlKSB7XG4gICAgY29uc3QgeyBzb2NrZXRzLCByZXF1ZXN0cywgbWF4U29ja2V0cyB9ID0gYWdlbnQ7XG4gICAgaWYgKHR5cGVvZiBtYXhTb2NrZXRzICE9PSBcIm51bWJlclwiIHx8IG1heFNvY2tldHMgPT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm4gc29ja2V0V2FybmluZ1RpbWVzdGFtcDtcbiAgICB9XG4gICAgY29uc3QgaW50ZXJ2YWwgPSAxNWUzO1xuICAgIGlmIChEYXRlLm5vdygpIC0gaW50ZXJ2YWwgPCBzb2NrZXRXYXJuaW5nVGltZXN0YW1wKSB7XG4gICAgICByZXR1cm4gc29ja2V0V2FybmluZ1RpbWVzdGFtcDtcbiAgICB9XG4gICAgaWYgKHNvY2tldHMgJiYgcmVxdWVzdHMpIHtcbiAgICAgIGZvciAoY29uc3Qgb3JpZ2luIGluIHNvY2tldHMpIHtcbiAgICAgICAgY29uc3Qgc29ja2V0c0luVXNlID0gc29ja2V0c1tvcmlnaW5dPy5sZW5ndGggPz8gMDtcbiAgICAgICAgY29uc3QgcmVxdWVzdHNFbnF1ZXVlZCA9IHJlcXVlc3RzW29yaWdpbl0/Lmxlbmd0aCA/PyAwO1xuICAgICAgICBpZiAoc29ja2V0c0luVXNlID49IG1heFNvY2tldHMgJiYgcmVxdWVzdHNFbnF1ZXVlZCA+PSAyICogbWF4U29ja2V0cykge1xuICAgICAgICAgIGxvZ2dlcj8ud2Fybj8uKFxuICAgICAgICAgICAgYEBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXI6V0FSTiAtIHNvY2tldCB1c2FnZSBhdCBjYXBhY2l0eT0ke3NvY2tldHNJblVzZX0gYW5kICR7cmVxdWVzdHNFbnF1ZXVlZH0gYWRkaXRpb25hbCByZXF1ZXN0cyBhcmUgZW5xdWV1ZWQuXG5TZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3Nkay1mb3ItamF2YXNjcmlwdC92My9kZXZlbG9wZXItZ3VpZGUvbm9kZS1jb25maWd1cmluZy1tYXhzb2NrZXRzLmh0bWxcbm9yIGluY3JlYXNlIHNvY2tldEFjcXVpc2l0aW9uV2FybmluZ1RpbWVvdXQ9KG1pbGxpcykgaW4gdGhlIE5vZGVIdHRwSGFuZGxlciBjb25maWcuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvY2tldFdhcm5pbmdUaW1lc3RhbXA7XG4gIH1cbiAgcmVzb2x2ZURlZmF1bHRDb25maWcob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcmVxdWVzdFRpbWVvdXQsIGNvbm5lY3Rpb25UaW1lb3V0LCBzb2NrZXRUaW1lb3V0LCBzb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0LCBodHRwQWdlbnQsIGh0dHBzQWdlbnQgfSA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3Qga2VlcEFsaXZlID0gdHJ1ZTtcbiAgICBjb25zdCBtYXhTb2NrZXRzID0gNTA7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3Rpb25UaW1lb3V0LFxuICAgICAgcmVxdWVzdFRpbWVvdXQ6IHJlcXVlc3RUaW1lb3V0ID8/IHNvY2tldFRpbWVvdXQsXG4gICAgICBzb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0LFxuICAgICAgaHR0cEFnZW50OiAoKCkgPT4ge1xuICAgICAgICBpZiAoaHR0cEFnZW50IGluc3RhbmNlb2YgaW1wb3J0X2h0dHAuQWdlbnQgfHwgdHlwZW9mIGh0dHBBZ2VudD8uZGVzdHJveSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIGh0dHBBZ2VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGltcG9ydF9odHRwLkFnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzLCAuLi5odHRwQWdlbnQgfSk7XG4gICAgICB9KSgpLFxuICAgICAgaHR0cHNBZ2VudDogKCgpID0+IHtcbiAgICAgICAgaWYgKGh0dHBzQWdlbnQgaW5zdGFuY2VvZiBpbXBvcnRfaHR0cHMuQWdlbnQgfHwgdHlwZW9mIGh0dHBzQWdlbnQ/LmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBodHRwc0FnZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgaW1wb3J0X2h0dHBzLkFnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzLCAuLi5odHRwc0FnZW50IH0pO1xuICAgICAgfSkoKSxcbiAgICAgIGxvZ2dlcjogY29uc29sZVxuICAgIH07XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNvbmZpZz8uaHR0cEFnZW50Py5kZXN0cm95KCk7XG4gICAgdGhpcy5jb25maWc/Lmh0dHBzQWdlbnQ/LmRlc3Ryb3koKTtcbiAgfVxuICBhc3luYyBoYW5kbGUocmVxdWVzdCwgeyBhYm9ydFNpZ25hbCB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IGF3YWl0IHRoaXMuY29uZmlnUHJvdmlkZXI7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICAgIGxldCB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZSA9IHZvaWQgMDtcbiAgICAgIGNvbnN0IHRpbWVvdXRzID0gW107XG4gICAgICBjb25zdCByZXNvbHZlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoYXJnKSA9PiB7XG4gICAgICAgIGF3YWl0IHdyaXRlUmVxdWVzdEJvZHlQcm9taXNlO1xuICAgICAgICB0aW1lb3V0cy5mb3JFYWNoKHRpbWluZy5jbGVhclRpbWVvdXQpO1xuICAgICAgICBfcmVzb2x2ZShhcmcpO1xuICAgICAgfSwgXCJyZXNvbHZlXCIpO1xuICAgICAgY29uc3QgcmVqZWN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoYXJnKSA9PiB7XG4gICAgICAgIGF3YWl0IHdyaXRlUmVxdWVzdEJvZHlQcm9taXNlO1xuICAgICAgICB0aW1lb3V0cy5mb3JFYWNoKHRpbWluZy5jbGVhclRpbWVvdXQpO1xuICAgICAgICBfcmVqZWN0KGFyZyk7XG4gICAgICB9LCBcInJlamVjdFwiKTtcbiAgICAgIGlmICghdGhpcy5jb25maWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBIVFRQIHJlcXVlc3QgaGFuZGxlciBjb25maWcgaXMgbm90IHJlc29sdmVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGFib3J0U2lnbmFsPy5hYm9ydGVkKSB7XG4gICAgICAgIGNvbnN0IGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWRcIik7XG4gICAgICAgIGFib3J0RXJyb3IubmFtZSA9IFwiQWJvcnRFcnJvclwiO1xuICAgICAgICByZWplY3QoYWJvcnRFcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzU1NMID0gcmVxdWVzdC5wcm90b2NvbCA9PT0gXCJodHRwczpcIjtcbiAgICAgIGNvbnN0IGFnZW50ID0gaXNTU0wgPyB0aGlzLmNvbmZpZy5odHRwc0FnZW50IDogdGhpcy5jb25maWcuaHR0cEFnZW50O1xuICAgICAgdGltZW91dHMucHVzaChcbiAgICAgICAgdGltaW5nLnNldFRpbWVvdXQoXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXRXYXJuaW5nVGltZXN0YW1wID0gX05vZGVIdHRwSGFuZGxlci5jaGVja1NvY2tldFVzYWdlKFxuICAgICAgICAgICAgICBhZ2VudCxcbiAgICAgICAgICAgICAgdGhpcy5zb2NrZXRXYXJuaW5nVGltZXN0YW1wLFxuICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5sb2dnZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aGlzLmNvbmZpZy5zb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0ID8/ICh0aGlzLmNvbmZpZy5yZXF1ZXN0VGltZW91dCA/PyAyZTMpICsgKHRoaXMuY29uZmlnLmNvbm5lY3Rpb25UaW1lb3V0ID8/IDFlMylcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gKDAsIGltcG9ydF9xdWVyeXN0cmluZ19idWlsZGVyLmJ1aWxkUXVlcnlTdHJpbmcpKHJlcXVlc3QucXVlcnkgfHwge30pO1xuICAgICAgbGV0IGF1dGggPSB2b2lkIDA7XG4gICAgICBpZiAocmVxdWVzdC51c2VybmFtZSAhPSBudWxsIHx8IHJlcXVlc3QucGFzc3dvcmQgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCB1c2VybmFtZSA9IHJlcXVlc3QudXNlcm5hbWUgPz8gXCJcIjtcbiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSByZXF1ZXN0LnBhc3N3b3JkID8/IFwiXCI7XG4gICAgICAgIGF1dGggPSBgJHt1c2VybmFtZX06JHtwYXNzd29yZH1gO1xuICAgICAgfVxuICAgICAgbGV0IHBhdGggPSByZXF1ZXN0LnBhdGg7XG4gICAgICBpZiAocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgcGF0aCArPSBgPyR7cXVlcnlTdHJpbmd9YDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXF1ZXN0LmZyYWdtZW50KSB7XG4gICAgICAgIHBhdGggKz0gYCMke3JlcXVlc3QuZnJhZ21lbnR9YDtcbiAgICAgIH1cbiAgICAgIGxldCBob3N0bmFtZSA9IHJlcXVlc3QuaG9zdG5hbWUgPz8gXCJcIjtcbiAgICAgIGlmIChob3N0bmFtZVswXSA9PT0gXCJbXCIgJiYgaG9zdG5hbWUuZW5kc1dpdGgoXCJdXCIpKSB7XG4gICAgICAgIGhvc3RuYW1lID0gcmVxdWVzdC5ob3N0bmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBob3N0bmFtZSA9IHJlcXVlc3QuaG9zdG5hbWU7XG4gICAgICB9XG4gICAgICBjb25zdCBub2RlSHR0cHNPcHRpb25zID0ge1xuICAgICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgIGhvc3Q6IGhvc3RuYW1lLFxuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRoLFxuICAgICAgICBwb3J0OiByZXF1ZXN0LnBvcnQsXG4gICAgICAgIGFnZW50LFxuICAgICAgICBhdXRoXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVxdWVzdEZ1bmMgPSBpc1NTTCA/IGltcG9ydF9odHRwcy5yZXF1ZXN0IDogaW1wb3J0X2h0dHAucmVxdWVzdDtcbiAgICAgIGNvbnN0IHJlcSA9IHJlcXVlc3RGdW5jKG5vZGVIdHRwc09wdGlvbnMsIChyZXMpID0+IHtcbiAgICAgICAgY29uc3QgaHR0cFJlc3BvbnNlID0gbmV3IGltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXNwb25zZSh7XG4gICAgICAgICAgc3RhdHVzQ29kZTogcmVzLnN0YXR1c0NvZGUgfHwgLTEsXG4gICAgICAgICAgcmVhc29uOiByZXMuc3RhdHVzTWVzc2FnZSxcbiAgICAgICAgICBoZWFkZXJzOiBnZXRUcmFuc2Zvcm1lZEhlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICAgIGJvZHk6IHJlc1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x2ZSh7IHJlc3BvbnNlOiBodHRwUmVzcG9uc2UgfSk7XG4gICAgICB9KTtcbiAgICAgIHJlcS5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKE5PREVKU19USU1FT1VUX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVyci5jb2RlKSkge1xuICAgICAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKGVyciwgeyBuYW1lOiBcIlRpbWVvdXRFcnJvclwiIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoYWJvcnRTaWduYWwpIHtcbiAgICAgICAgY29uc3Qgb25BYm9ydCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgICAgICAgIHJlcS5kZXN0cm95KCk7XG4gICAgICAgICAgY29uc3QgYWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIlJlcXVlc3QgYWJvcnRlZFwiKTtcbiAgICAgICAgICBhYm9ydEVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICAgICAgICByZWplY3QoYWJvcnRFcnJvcik7XG4gICAgICAgIH0sIFwib25BYm9ydFwiKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCBzaWduYWwgPSBhYm9ydFNpZ25hbDtcbiAgICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgICByZXEub25jZShcImNsb3NlXCIsICgpID0+IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFib3J0U2lnbmFsLm9uYWJvcnQgPSBvbkFib3J0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aW1lb3V0cy5wdXNoKHNldENvbm5lY3Rpb25UaW1lb3V0KHJlcSwgcmVqZWN0LCB0aGlzLmNvbmZpZy5jb25uZWN0aW9uVGltZW91dCkpO1xuICAgICAgdGltZW91dHMucHVzaChzZXRTb2NrZXRUaW1lb3V0KHJlcSwgcmVqZWN0LCB0aGlzLmNvbmZpZy5yZXF1ZXN0VGltZW91dCkpO1xuICAgICAgY29uc3QgaHR0cEFnZW50ID0gbm9kZUh0dHBzT3B0aW9ucy5hZ2VudDtcbiAgICAgIGlmICh0eXBlb2YgaHR0cEFnZW50ID09PSBcIm9iamVjdFwiICYmIFwia2VlcEFsaXZlXCIgaW4gaHR0cEFnZW50KSB7XG4gICAgICAgIHRpbWVvdXRzLnB1c2goXG4gICAgICAgICAgc2V0U29ja2V0S2VlcEFsaXZlKHJlcSwge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBrZWVwQWxpdmUgaXMgbm90IHB1YmxpYyBvbiBodHRwQWdlbnQuXG4gICAgICAgICAgICBrZWVwQWxpdmU6IGh0dHBBZ2VudC5rZWVwQWxpdmUsXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGtlZXBBbGl2ZU1zZWNzIGlzIG5vdCBwdWJsaWMgb24gaHR0cEFnZW50LlxuICAgICAgICAgICAga2VlcEFsaXZlTXNlY3M6IGh0dHBBZ2VudC5rZWVwQWxpdmVNc2Vjc1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZSA9IHdyaXRlUmVxdWVzdEJvZHkocmVxLCByZXF1ZXN0LCB0aGlzLmNvbmZpZy5yZXF1ZXN0VGltZW91dCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgdGltZW91dHMuZm9yRWFjaCh0aW1pbmcuY2xlYXJUaW1lb3V0KTtcbiAgICAgICAgcmV0dXJuIF9yZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICB1cGRhdGVIdHRwQ2xpZW50Q29uZmlnKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbmZpZyA9IHZvaWQgMDtcbiAgICB0aGlzLmNvbmZpZ1Byb3ZpZGVyID0gdGhpcy5jb25maWdQcm92aWRlci50aGVuKChjb25maWcpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgW2tleV06IHZhbHVlXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIGh0dHBIYW5kbGVyQ29uZmlncygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcgPz8ge307XG4gIH1cbn07XG5cbi8vIHNyYy9ub2RlLWh0dHAyLWhhbmRsZXIudHNcblxuXG52YXIgaW1wb3J0X2h0dHAyMiA9IHJlcXVpcmUoXCJodHRwMlwiKTtcblxuLy8gc3JjL25vZGUtaHR0cDItY29ubmVjdGlvbi1tYW5hZ2VyLnRzXG52YXIgaW1wb3J0X2h0dHAyID0gX190b0VTTShyZXF1aXJlKFwiaHR0cDJcIikpO1xuXG4vLyBzcmMvbm9kZS1odHRwMi1jb25uZWN0aW9uLXBvb2wudHNcbnZhciBOb2RlSHR0cDJDb25uZWN0aW9uUG9vbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Ioc2Vzc2lvbnMpIHtcbiAgICB0aGlzLnNlc3Npb25zID0gW107XG4gICAgdGhpcy5zZXNzaW9ucyA9IHNlc3Npb25zID8/IFtdO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiTm9kZUh0dHAyQ29ubmVjdGlvblBvb2xcIik7XG4gIH1cbiAgcG9sbCgpIHtcbiAgICBpZiAodGhpcy5zZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXNzaW9ucy5zaGlmdCgpO1xuICAgIH1cbiAgfVxuICBvZmZlckxhc3Qoc2Vzc2lvbikge1xuICAgIHRoaXMuc2Vzc2lvbnMucHVzaChzZXNzaW9uKTtcbiAgfVxuICBjb250YWlucyhzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Vzc2lvbnMuaW5jbHVkZXMoc2Vzc2lvbik7XG4gIH1cbiAgcmVtb3ZlKHNlc3Npb24pIHtcbiAgICB0aGlzLnNlc3Npb25zID0gdGhpcy5zZXNzaW9ucy5maWx0ZXIoKHMpID0+IHMgIT09IHNlc3Npb24pO1xuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLnNlc3Npb25zW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuICBkZXN0cm95KGNvbm5lY3Rpb24pIHtcbiAgICBmb3IgKGNvbnN0IHNlc3Npb24gb2YgdGhpcy5zZXNzaW9ucykge1xuICAgICAgaWYgKHNlc3Npb24gPT09IGNvbm5lY3Rpb24pIHtcbiAgICAgICAgaWYgKCFzZXNzaW9uLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHNlc3Npb24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvbm9kZS1odHRwMi1jb25uZWN0aW9uLW1hbmFnZXIudHNcbnZhciBOb2RlSHR0cDJDb25uZWN0aW9uTWFuYWdlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5zZXNzaW9uQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIGlmICh0aGlzLmNvbmZpZy5tYXhDb25jdXJyZW5jeSAmJiB0aGlzLmNvbmZpZy5tYXhDb25jdXJyZW5jeSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm1heENvbmN1cnJlbmN5IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uXCIpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIk5vZGVIdHRwMkNvbm5lY3Rpb25NYW5hZ2VyXCIpO1xuICB9XG4gIGxlYXNlKHJlcXVlc3RDb250ZXh0LCBjb25uZWN0aW9uQ29uZmlndXJhdGlvbikge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsU3RyaW5nKHJlcXVlc3RDb250ZXh0KTtcbiAgICBjb25zdCBleGlzdGluZ1Bvb2wgPSB0aGlzLnNlc3Npb25DYWNoZS5nZXQodXJsKTtcbiAgICBpZiAoZXhpc3RpbmdQb29sKSB7XG4gICAgICBjb25zdCBleGlzdGluZ1Nlc3Npb24gPSBleGlzdGluZ1Bvb2wucG9sbCgpO1xuICAgICAgaWYgKGV4aXN0aW5nU2Vzc2lvbiAmJiAhdGhpcy5jb25maWcuZGlzYWJsZUNvbmN1cnJlbmN5KSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1Nlc3Npb247XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNlc3Npb24gPSBpbXBvcnRfaHR0cDIuZGVmYXVsdC5jb25uZWN0KHVybCk7XG4gICAgaWYgKHRoaXMuY29uZmlnLm1heENvbmN1cnJlbmN5KSB7XG4gICAgICBzZXNzaW9uLnNldHRpbmdzKHsgbWF4Q29uY3VycmVudFN0cmVhbXM6IHRoaXMuY29uZmlnLm1heENvbmN1cnJlbmN5IH0sIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiRmFpbCB0byBzZXQgbWF4Q29uY3VycmVudFN0cmVhbXMgdG8gXCIgKyB0aGlzLmNvbmZpZy5tYXhDb25jdXJyZW5jeSArIFwid2hlbiBjcmVhdGluZyBuZXcgc2Vzc2lvbiBmb3IgXCIgKyByZXF1ZXN0Q29udGV4dC5kZXN0aW5hdGlvbi50b1N0cmluZygpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHNlc3Npb24udW5yZWYoKTtcbiAgICBjb25zdCBkZXN0cm95U2Vzc2lvbkNiID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gICAgICBzZXNzaW9uLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZGVsZXRlU2Vzc2lvbih1cmwsIHNlc3Npb24pO1xuICAgIH0sIFwiZGVzdHJveVNlc3Npb25DYlwiKTtcbiAgICBzZXNzaW9uLm9uKFwiZ29hd2F5XCIsIGRlc3Ryb3lTZXNzaW9uQ2IpO1xuICAgIHNlc3Npb24ub24oXCJlcnJvclwiLCBkZXN0cm95U2Vzc2lvbkNiKTtcbiAgICBzZXNzaW9uLm9uKFwiZnJhbWVFcnJvclwiLCBkZXN0cm95U2Vzc2lvbkNiKTtcbiAgICBzZXNzaW9uLm9uKFwiY2xvc2VcIiwgKCkgPT4gdGhpcy5kZWxldGVTZXNzaW9uKHVybCwgc2Vzc2lvbikpO1xuICAgIGlmIChjb25uZWN0aW9uQ29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgc2Vzc2lvbi5zZXRUaW1lb3V0KGNvbm5lY3Rpb25Db25maWd1cmF0aW9uLnJlcXVlc3RUaW1lb3V0LCBkZXN0cm95U2Vzc2lvbkNiKTtcbiAgICB9XG4gICAgY29uc3QgY29ubmVjdGlvblBvb2wgPSB0aGlzLnNlc3Npb25DYWNoZS5nZXQodXJsKSB8fCBuZXcgTm9kZUh0dHAyQ29ubmVjdGlvblBvb2woKTtcbiAgICBjb25uZWN0aW9uUG9vbC5vZmZlckxhc3Qoc2Vzc2lvbik7XG4gICAgdGhpcy5zZXNzaW9uQ2FjaGUuc2V0KHVybCwgY29ubmVjdGlvblBvb2wpO1xuICAgIHJldHVybiBzZXNzaW9uO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBzZXNzaW9uIGZyb20gdGhlIGNvbm5lY3Rpb24gcG9vbC5cbiAgICogQHBhcmFtIGF1dGhvcml0eSBUaGUgYXV0aG9yaXR5IG9mIHRoZSBzZXNzaW9uIHRvIGRlbGV0ZS5cbiAgICogQHBhcmFtIHNlc3Npb24gVGhlIHNlc3Npb24gdG8gZGVsZXRlLlxuICAgKi9cbiAgZGVsZXRlU2Vzc2lvbihhdXRob3JpdHksIHNlc3Npb24pIHtcbiAgICBjb25zdCBleGlzdGluZ0Nvbm5lY3Rpb25Qb29sID0gdGhpcy5zZXNzaW9uQ2FjaGUuZ2V0KGF1dGhvcml0eSk7XG4gICAgaWYgKCFleGlzdGluZ0Nvbm5lY3Rpb25Qb29sKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZXhpc3RpbmdDb25uZWN0aW9uUG9vbC5jb250YWlucyhzZXNzaW9uKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBleGlzdGluZ0Nvbm5lY3Rpb25Qb29sLnJlbW92ZShzZXNzaW9uKTtcbiAgICB0aGlzLnNlc3Npb25DYWNoZS5zZXQoYXV0aG9yaXR5LCBleGlzdGluZ0Nvbm5lY3Rpb25Qb29sKTtcbiAgfVxuICByZWxlYXNlKHJlcXVlc3RDb250ZXh0LCBzZXNzaW9uKSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdldFVybFN0cmluZyhyZXF1ZXN0Q29udGV4dCk7XG4gICAgdGhpcy5zZXNzaW9uQ2FjaGUuZ2V0KGNhY2hlS2V5KT8ub2ZmZXJMYXN0KHNlc3Npb24pO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCBjb25uZWN0aW9uUG9vbF0gb2YgdGhpcy5zZXNzaW9uQ2FjaGUpIHtcbiAgICAgIGZvciAoY29uc3Qgc2Vzc2lvbiBvZiBjb25uZWN0aW9uUG9vbCkge1xuICAgICAgICBpZiAoIXNlc3Npb24uZGVzdHJveWVkKSB7XG4gICAgICAgICAgc2Vzc2lvbi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGlvblBvb2wucmVtb3ZlKHNlc3Npb24pO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXNzaW9uQ2FjaGUuZGVsZXRlKGtleSk7XG4gICAgfVxuICB9XG4gIHNldE1heENvbmN1cnJlbnRTdHJlYW1zKG1heENvbmN1cnJlbnRTdHJlYW1zKSB7XG4gICAgaWYgKG1heENvbmN1cnJlbnRTdHJlYW1zICYmIG1heENvbmN1cnJlbnRTdHJlYW1zIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwibWF4Q29uY3VycmVudFN0cmVhbXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby5cIik7XG4gICAgfVxuICAgIHRoaXMuY29uZmlnLm1heENvbmN1cnJlbmN5ID0gbWF4Q29uY3VycmVudFN0cmVhbXM7XG4gIH1cbiAgc2V0RGlzYWJsZUNvbmN1cnJlbnRTdHJlYW1zKGRpc2FibGVDb25jdXJyZW50U3RyZWFtcykge1xuICAgIHRoaXMuY29uZmlnLmRpc2FibGVDb25jdXJyZW5jeSA9IGRpc2FibGVDb25jdXJyZW50U3RyZWFtcztcbiAgfVxuICBnZXRVcmxTdHJpbmcocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LmRlc3RpbmF0aW9uLnRvU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8vIHNyYy9ub2RlLWh0dHAyLWhhbmRsZXIudHNcbnZhciBOb2RlSHR0cDJIYW5kbGVyID0gY2xhc3MgX05vZGVIdHRwMkhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5tZXRhZGF0YSA9IHsgaGFuZGxlclByb3RvY29sOiBcImgyXCIgfTtcbiAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyID0gbmV3IE5vZGVIdHRwMkNvbm5lY3Rpb25NYW5hZ2VyKHt9KTtcbiAgICB0aGlzLmNvbmZpZ1Byb3ZpZGVyID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb3B0aW9ucygpLnRoZW4oKG9wdHMpID0+IHtcbiAgICAgICAgICByZXNvbHZlKG9wdHMgfHwge30pO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShvcHRpb25zIHx8IHt9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIk5vZGVIdHRwMkhhbmRsZXJcIik7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHRoZSBpbnB1dCBpZiBpdCBpcyBhbiBIdHRwSGFuZGxlciBvZiBhbnkgY2xhc3MsXG4gICAqIG9yIGluc3RhbnRpYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGhhbmRsZXIuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKGluc3RhbmNlT3JPcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZU9yT3B0aW9ucz8uaGFuZGxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZU9yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfTm9kZUh0dHAySGFuZGxlcihpbnN0YW5jZU9yT3B0aW9ucyk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmRlc3Ryb3koKTtcbiAgfVxuICBhc3luYyBoYW5kbGUocmVxdWVzdCwgeyBhYm9ydFNpZ25hbCB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IGF3YWl0IHRoaXMuY29uZmlnUHJvdmlkZXI7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnNldERpc2FibGVDb25jdXJyZW50U3RyZWFtcyh0aGlzLmNvbmZpZy5kaXNhYmxlQ29uY3VycmVudFN0cmVhbXMgfHwgZmFsc2UpO1xuICAgICAgaWYgKHRoaXMuY29uZmlnLm1heENvbmN1cnJlbnRTdHJlYW1zKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuc2V0TWF4Q29uY3VycmVudFN0cmVhbXModGhpcy5jb25maWcubWF4Q29uY3VycmVudFN0cmVhbXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB7IHJlcXVlc3RUaW1lb3V0LCBkaXNhYmxlQ29uY3VycmVudFN0cmVhbXMgfSA9IHRoaXMuY29uZmlnO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICAgIGxldCBmdWxmaWxsZWQgPSBmYWxzZTtcbiAgICAgIGxldCB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZSA9IHZvaWQgMDtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChhcmcpID0+IHtcbiAgICAgICAgYXdhaXQgd3JpdGVSZXF1ZXN0Qm9keVByb21pc2U7XG4gICAgICAgIF9yZXNvbHZlKGFyZyk7XG4gICAgICB9LCBcInJlc29sdmVcIik7XG4gICAgICBjb25zdCByZWplY3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChhcmcpID0+IHtcbiAgICAgICAgYXdhaXQgd3JpdGVSZXF1ZXN0Qm9keVByb21pc2U7XG4gICAgICAgIF9yZWplY3QoYXJnKTtcbiAgICAgIH0sIFwicmVqZWN0XCIpO1xuICAgICAgaWYgKGFib3J0U2lnbmFsPy5hYm9ydGVkKSB7XG4gICAgICAgIGZ1bGZpbGxlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWRcIik7XG4gICAgICAgIGFib3J0RXJyb3IubmFtZSA9IFwiQWJvcnRFcnJvclwiO1xuICAgICAgICByZWplY3QoYWJvcnRFcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgaG9zdG5hbWUsIG1ldGhvZCwgcG9ydCwgcHJvdG9jb2wsIHF1ZXJ5IH0gPSByZXF1ZXN0O1xuICAgICAgbGV0IGF1dGggPSBcIlwiO1xuICAgICAgaWYgKHJlcXVlc3QudXNlcm5hbWUgIT0gbnVsbCB8fCByZXF1ZXN0LnBhc3N3b3JkICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSByZXF1ZXN0LnVzZXJuYW1lID8/IFwiXCI7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxdWVzdC5wYXNzd29yZCA/PyBcIlwiO1xuICAgICAgICBhdXRoID0gYCR7dXNlcm5hbWV9OiR7cGFzc3dvcmR9QGA7XG4gICAgICB9XG4gICAgICBjb25zdCBhdXRob3JpdHkgPSBgJHtwcm90b2NvbH0vLyR7YXV0aH0ke2hvc3RuYW1lfSR7cG9ydCA/IGA6JHtwb3J0fWAgOiBcIlwifWA7XG4gICAgICBjb25zdCByZXF1ZXN0Q29udGV4dCA9IHsgZGVzdGluYXRpb246IG5ldyBVUkwoYXV0aG9yaXR5KSB9O1xuICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXIubGVhc2UocmVxdWVzdENvbnRleHQsIHtcbiAgICAgICAgcmVxdWVzdFRpbWVvdXQ6IHRoaXMuY29uZmlnPy5zZXNzaW9uVGltZW91dCxcbiAgICAgICAgZGlzYWJsZUNvbmN1cnJlbnRTdHJlYW1zOiBkaXNhYmxlQ29uY3VycmVudFN0cmVhbXMgfHwgZmFsc2VcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcmVqZWN0V2l0aERlc3Ryb3kgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnIpID0+IHtcbiAgICAgICAgaWYgKGRpc2FibGVDb25jdXJyZW50U3RyZWFtcykge1xuICAgICAgICAgIHRoaXMuZGVzdHJveVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVsZmlsbGVkID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9LCBcInJlamVjdFdpdGhEZXN0cm95XCIpO1xuICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSAoMCwgaW1wb3J0X3F1ZXJ5c3RyaW5nX2J1aWxkZXIuYnVpbGRRdWVyeVN0cmluZykocXVlcnkgfHwge30pO1xuICAgICAgbGV0IHBhdGggPSByZXF1ZXN0LnBhdGg7XG4gICAgICBpZiAocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgcGF0aCArPSBgPyR7cXVlcnlTdHJpbmd9YDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXF1ZXN0LmZyYWdtZW50KSB7XG4gICAgICAgIHBhdGggKz0gYCMke3JlcXVlc3QuZnJhZ21lbnR9YDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcSA9IHNlc3Npb24ucmVxdWVzdCh7XG4gICAgICAgIC4uLnJlcXVlc3QuaGVhZGVycyxcbiAgICAgICAgW2ltcG9ydF9odHRwMjIuY29uc3RhbnRzLkhUVFAyX0hFQURFUl9QQVRIXTogcGF0aCxcbiAgICAgICAgW2ltcG9ydF9odHRwMjIuY29uc3RhbnRzLkhUVFAyX0hFQURFUl9NRVRIT0RdOiBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgc2Vzc2lvbi5yZWYoKTtcbiAgICAgIHJlcS5vbihcInJlc3BvbnNlXCIsIChoZWFkZXJzKSA9PiB7XG4gICAgICAgIGNvbnN0IGh0dHBSZXNwb25zZSA9IG5ldyBpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVzcG9uc2Uoe1xuICAgICAgICAgIHN0YXR1c0NvZGU6IGhlYWRlcnNbXCI6c3RhdHVzXCJdIHx8IC0xLFxuICAgICAgICAgIGhlYWRlcnM6IGdldFRyYW5zZm9ybWVkSGVhZGVycyhoZWFkZXJzKSxcbiAgICAgICAgICBib2R5OiByZXFcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bGZpbGxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoeyByZXNwb25zZTogaHR0cFJlc3BvbnNlIH0pO1xuICAgICAgICBpZiAoZGlzYWJsZUNvbmN1cnJlbnRTdHJlYW1zKSB7XG4gICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuZGVsZXRlU2Vzc2lvbihhdXRob3JpdHksIHNlc3Npb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXF1ZXN0VGltZW91dCkge1xuICAgICAgICByZXEuc2V0VGltZW91dChyZXF1ZXN0VGltZW91dCwgKCkgPT4ge1xuICAgICAgICAgIHJlcS5jbG9zZSgpO1xuICAgICAgICAgIGNvbnN0IHRpbWVvdXRFcnJvciA9IG5ldyBFcnJvcihgU3RyZWFtIHRpbWVkIG91dCBiZWNhdXNlIG9mIG5vIGFjdGl2aXR5IGZvciAke3JlcXVlc3RUaW1lb3V0fSBtc2ApO1xuICAgICAgICAgIHRpbWVvdXRFcnJvci5uYW1lID0gXCJUaW1lb3V0RXJyb3JcIjtcbiAgICAgICAgICByZWplY3RXaXRoRGVzdHJveSh0aW1lb3V0RXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChhYm9ydFNpZ25hbCkge1xuICAgICAgICBjb25zdCBvbkFib3J0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gICAgICAgICAgcmVxLmNsb3NlKCk7XG4gICAgICAgICAgY29uc3QgYWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIlJlcXVlc3QgYWJvcnRlZFwiKTtcbiAgICAgICAgICBhYm9ydEVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICAgICAgICByZWplY3RXaXRoRGVzdHJveShhYm9ydEVycm9yKTtcbiAgICAgICAgfSwgXCJvbkFib3J0XCIpO1xuICAgICAgICBpZiAodHlwZW9mIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnN0IHNpZ25hbCA9IGFib3J0U2lnbmFsO1xuICAgICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICAgIHJlcS5vbmNlKFwiY2xvc2VcIiwgKCkgPT4gc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWJvcnRTaWduYWwub25hYm9ydCA9IG9uQWJvcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlcS5vbihcImZyYW1lRXJyb3JcIiwgKHR5cGUsIGNvZGUsIGlkKSA9PiB7XG4gICAgICAgIHJlamVjdFdpdGhEZXN0cm95KG5ldyBFcnJvcihgRnJhbWUgdHlwZSBpZCAke3R5cGV9IGluIHN0cmVhbSBpZCAke2lkfSBoYXMgZmFpbGVkIHdpdGggY29kZSAke2NvZGV9LmApKTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgcmVqZWN0V2l0aERlc3Ryb3kpO1xuICAgICAgcmVxLm9uKFwiYWJvcnRlZFwiLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdFdpdGhEZXN0cm95KFxuICAgICAgICAgIG5ldyBFcnJvcihgSFRUUC8yIHN0cmVhbSBpcyBhYm5vcm1hbGx5IGFib3J0ZWQgaW4gbWlkLWNvbW11bmljYXRpb24gd2l0aCByZXN1bHQgY29kZSAke3JlcS5yc3RDb2RlfS5gKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICByZXEub24oXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgIHNlc3Npb24udW5yZWYoKTtcbiAgICAgICAgaWYgKGRpc2FibGVDb25jdXJyZW50U3RyZWFtcykge1xuICAgICAgICAgIHNlc3Npb24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsZmlsbGVkKSB7XG4gICAgICAgICAgcmVqZWN0V2l0aERlc3Ryb3kobmV3IEVycm9yKFwiVW5leHBlY3RlZCBlcnJvcjogaHR0cDIgcmVxdWVzdCBkaWQgbm90IGdldCBhIHJlc3BvbnNlXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZSA9IHdyaXRlUmVxdWVzdEJvZHkocmVxLCByZXF1ZXN0LCByZXF1ZXN0VGltZW91dCk7XG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlSHR0cENsaWVudENvbmZpZyhrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcgPSB2b2lkIDA7XG4gICAgdGhpcy5jb25maWdQcm92aWRlciA9IHRoaXMuY29uZmlnUHJvdmlkZXIudGhlbigoY29uZmlnKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIFtrZXldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBodHRwSGFuZGxlckNvbmZpZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnID8/IHt9O1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyBhIHNlc3Npb24uXG4gICAqIEBwYXJhbSBzZXNzaW9uIC0gdGhlIHNlc3Npb24gdG8gZGVzdHJveS5cbiAgICovXG4gIGRlc3Ryb3lTZXNzaW9uKHNlc3Npb24pIHtcbiAgICBpZiAoIXNlc3Npb24uZGVzdHJveWVkKSB7XG4gICAgICBzZXNzaW9uLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHNyYy9zdHJlYW0tY29sbGVjdG9yL2NvbGxlY3Rvci50c1xuXG52YXIgQ29sbGVjdG9yID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc3RyZWFtLldyaXRhYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmJ1ZmZlcmVkQnl0ZXMgPSBbXTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNvbGxlY3RvclwiKTtcbiAgfVxuICBfd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMuYnVmZmVyZWRCeXRlcy5wdXNoKGNodW5rKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59O1xuXG4vLyBzcmMvc3RyZWFtLWNvbGxlY3Rvci9pbmRleC50c1xudmFyIHN0cmVhbUNvbGxlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHN0cmVhbSkgPT4ge1xuICBpZiAoaXNSZWFkYWJsZVN0cmVhbUluc3RhbmNlKHN0cmVhbSkpIHtcbiAgICByZXR1cm4gY29sbGVjdFJlYWRhYmxlU3RyZWFtKHN0cmVhbSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBjb2xsZWN0b3IgPSBuZXcgQ29sbGVjdG9yKCk7XG4gICAgc3RyZWFtLnBpcGUoY29sbGVjdG9yKTtcbiAgICBzdHJlYW0ub24oXCJlcnJvclwiLCAoZXJyKSA9PiB7XG4gICAgICBjb2xsZWN0b3IuZW5kKCk7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgICBjb2xsZWN0b3Iub24oXCJlcnJvclwiLCByZWplY3QpO1xuICAgIGNvbGxlY3Rvci5vbihcImZpbmlzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcmVkQnl0ZXMpKTtcbiAgICAgIHJlc29sdmUoYnl0ZXMpO1xuICAgIH0pO1xuICB9KTtcbn0sIFwic3RyZWFtQ29sbGVjdG9yXCIpO1xudmFyIGlzUmVhZGFibGVTdHJlYW1JbnN0YW5jZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHN0cmVhbSkgPT4gdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgJiYgc3RyZWFtIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0sIFwiaXNSZWFkYWJsZVN0cmVhbUluc3RhbmNlXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29sbGVjdFJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICBjb25zdCBjaHVua3MgPSBbXTtcbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICBsZXQgaXNEb25lID0gZmFsc2U7XG4gIGxldCBsZW5ndGggPSAwO1xuICB3aGlsZSAoIWlzRG9uZSkge1xuICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjaHVua3MucHVzaCh2YWx1ZSk7XG4gICAgICBsZW5ndGggKz0gdmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgICBpc0RvbmUgPSBkb25lO1xuICB9XG4gIGNvbnN0IGNvbGxlY3RlZCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgIGNvbGxlY3RlZC5zZXQoY2h1bmssIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGNodW5rLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gY29sbGVjdGVkO1xufVxuX19uYW1lKGNvbGxlY3RSZWFkYWJsZVN0cmVhbSwgXCJjb2xsZWN0UmVhZGFibGVTdHJlYW1cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBERUZBVUxUX1JFUVVFU1RfVElNRU9VVCxcbiAgTm9kZUh0dHBIYW5kbGVyLFxuICBOb2RlSHR0cDJIYW5kbGVyLFxuICBzdHJlYW1Db2xsZWN0b3Jcbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEZldGNoSHR0cEhhbmRsZXI6ICgpID0+IEZldGNoSHR0cEhhbmRsZXIsXG4gIGtlZXBBbGl2ZVN1cHBvcnQ6ICgpID0+IGtlZXBBbGl2ZVN1cHBvcnQsXG4gIHN0cmVhbUNvbGxlY3RvcjogKCkgPT4gc3RyZWFtQ29sbGVjdG9yXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2ZldGNoLWh0dHAtaGFuZGxlci50c1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbnZhciBpbXBvcnRfcXVlcnlzdHJpbmdfYnVpbGRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3F1ZXJ5c3RyaW5nLWJ1aWxkZXJcIik7XG5cbi8vIHNyYy9jcmVhdGUtcmVxdWVzdC50c1xuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdCh1cmwsIHJlcXVlc3RPcHRpb25zKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIHJlcXVlc3RPcHRpb25zKTtcbn1cbl9fbmFtZShjcmVhdGVSZXF1ZXN0LCBcImNyZWF0ZVJlcXVlc3RcIik7XG5cbi8vIHNyYy9yZXF1ZXN0LXRpbWVvdXQudHNcbmZ1bmN0aW9uIHJlcXVlc3RUaW1lb3V0KHRpbWVvdXRJbk1zID0gMCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICh0aW1lb3V0SW5Ncykge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXRFcnJvciA9IG5ldyBFcnJvcihgUmVxdWVzdCBkaWQgbm90IGNvbXBsZXRlIHdpdGhpbiAke3RpbWVvdXRJbk1zfSBtc2ApO1xuICAgICAgICB0aW1lb3V0RXJyb3IubmFtZSA9IFwiVGltZW91dEVycm9yXCI7XG4gICAgICAgIHJlamVjdCh0aW1lb3V0RXJyb3IpO1xuICAgICAgfSwgdGltZW91dEluTXMpO1xuICAgIH1cbiAgfSk7XG59XG5fX25hbWUocmVxdWVzdFRpbWVvdXQsIFwicmVxdWVzdFRpbWVvdXRcIik7XG5cbi8vIHNyYy9mZXRjaC1odHRwLWhhbmRsZXIudHNcbnZhciBrZWVwQWxpdmVTdXBwb3J0ID0ge1xuICBzdXBwb3J0ZWQ6IHZvaWQgMFxufTtcbnZhciBGZXRjaEh0dHBIYW5kbGVyID0gY2xhc3MgX0ZldGNoSHR0cEhhbmRsZXIge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkZldGNoSHR0cEhhbmRsZXJcIik7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHRoZSBpbnB1dCBpZiBpdCBpcyBhbiBIdHRwSGFuZGxlciBvZiBhbnkgY2xhc3MsXG4gICAqIG9yIGluc3RhbnRpYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGhhbmRsZXIuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKGluc3RhbmNlT3JPcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZU9yT3B0aW9ucz8uaGFuZGxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZU9yT3B0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfRmV0Y2hIdHRwSGFuZGxlcihpbnN0YW5jZU9yT3B0aW9ucyk7XG4gIH1cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLmNvbmZpZ1Byb3ZpZGVyID0gb3B0aW9ucygpLnRoZW4oKG9wdHMpID0+IG9wdHMgfHwge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IG9wdGlvbnMgPz8ge307XG4gICAgICB0aGlzLmNvbmZpZ1Byb3ZpZGVyID0gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29uZmlnKTtcbiAgICB9XG4gICAgaWYgKGtlZXBBbGl2ZVN1cHBvcnQuc3VwcG9ydGVkID09PSB2b2lkIDApIHtcbiAgICAgIGtlZXBBbGl2ZVN1cHBvcnQuc3VwcG9ydGVkID0gQm9vbGVhbihcbiAgICAgICAgdHlwZW9mIFJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgXCJrZWVwYWxpdmVcIiBpbiBjcmVhdGVSZXF1ZXN0KFwiaHR0cHM6Ly9bOjoxXVwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgfVxuICBhc3luYyBoYW5kbGUocmVxdWVzdCwgeyBhYm9ydFNpZ25hbCB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IGF3YWl0IHRoaXMuY29uZmlnUHJvdmlkZXI7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RUaW1lb3V0SW5NcyA9IHRoaXMuY29uZmlnLnJlcXVlc3RUaW1lb3V0O1xuICAgIGNvbnN0IGtlZXBBbGl2ZSA9IHRoaXMuY29uZmlnLmtlZXBBbGl2ZSA9PT0gdHJ1ZTtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IHRoaXMuY29uZmlnLmNyZWRlbnRpYWxzO1xuICAgIGlmIChhYm9ydFNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgY29uc3QgYWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIlJlcXVlc3QgYWJvcnRlZFwiKTtcbiAgICAgIGFib3J0RXJyb3IubmFtZSA9IFwiQWJvcnRFcnJvclwiO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IHJlcXVlc3QucGF0aDtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9ICgwLCBpbXBvcnRfcXVlcnlzdHJpbmdfYnVpbGRlci5idWlsZFF1ZXJ5U3RyaW5nKShyZXF1ZXN0LnF1ZXJ5IHx8IHt9KTtcbiAgICBpZiAocXVlcnlTdHJpbmcpIHtcbiAgICAgIHBhdGggKz0gYD8ke3F1ZXJ5U3RyaW5nfWA7XG4gICAgfVxuICAgIGlmIChyZXF1ZXN0LmZyYWdtZW50KSB7XG4gICAgICBwYXRoICs9IGAjJHtyZXF1ZXN0LmZyYWdtZW50fWA7XG4gICAgfVxuICAgIGxldCBhdXRoID0gXCJcIjtcbiAgICBpZiAocmVxdWVzdC51c2VybmFtZSAhPSBudWxsIHx8IHJlcXVlc3QucGFzc3dvcmQgIT0gbnVsbCkge1xuICAgICAgY29uc3QgdXNlcm5hbWUgPSByZXF1ZXN0LnVzZXJuYW1lID8/IFwiXCI7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QucGFzc3dvcmQgPz8gXCJcIjtcbiAgICAgIGF1dGggPSBgJHt1c2VybmFtZX06JHtwYXNzd29yZH1AYDtcbiAgICB9XG4gICAgY29uc3QgeyBwb3J0LCBtZXRob2QgfSA9IHJlcXVlc3Q7XG4gICAgY29uc3QgdXJsID0gYCR7cmVxdWVzdC5wcm90b2NvbH0vLyR7YXV0aH0ke3JlcXVlc3QuaG9zdG5hbWV9JHtwb3J0ID8gYDoke3BvcnR9YCA6IFwiXCJ9JHtwYXRofWA7XG4gICAgY29uc3QgYm9keSA9IG1ldGhvZCA9PT0gXCJHRVRcIiB8fCBtZXRob2QgPT09IFwiSEVBRFwiID8gdm9pZCAwIDogcmVxdWVzdC5ib2R5O1xuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgYm9keSxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHJlcXVlc3QuaGVhZGVycyksXG4gICAgICBtZXRob2QsXG4gICAgICBjcmVkZW50aWFsc1xuICAgIH07XG4gICAgaWYgKHRoaXMuY29uZmlnPy5jYWNoZSkge1xuICAgICAgcmVxdWVzdE9wdGlvbnMuY2FjaGUgPSB0aGlzLmNvbmZpZy5jYWNoZTtcbiAgICB9XG4gICAgaWYgKGJvZHkpIHtcbiAgICAgIHJlcXVlc3RPcHRpb25zLmR1cGxleCA9IFwiaGFsZlwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmVxdWVzdE9wdGlvbnMuc2lnbmFsID0gYWJvcnRTaWduYWw7XG4gICAgfVxuICAgIGlmIChrZWVwQWxpdmVTdXBwb3J0LnN1cHBvcnRlZCkge1xuICAgICAgcmVxdWVzdE9wdGlvbnMua2VlcGFsaXZlID0ga2VlcEFsaXZlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlnLnJlcXVlc3RJbml0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVxdWVzdE9wdGlvbnMsIHRoaXMuY29uZmlnLnJlcXVlc3RJbml0KHJlcXVlc3QpKTtcbiAgICB9XG4gICAgbGV0IHJlbW92ZVNpZ25hbEV2ZW50TGlzdGVuZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgICB9LCBcInJlbW92ZVNpZ25hbEV2ZW50TGlzdGVuZXJcIik7XG4gICAgY29uc3QgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdCh1cmwsIHJlcXVlc3RPcHRpb25zKTtcbiAgICBjb25zdCByYWNlT2ZQcm9taXNlcyA9IFtcbiAgICAgIGZldGNoKGZldGNoUmVxdWVzdCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgZmV0Y2hIZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRIZWFkZXJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBmZXRjaEhlYWRlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgdHJhbnNmb3JtZWRIZWFkZXJzW3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNSZWFkYWJsZVN0cmVhbSA9IHJlc3BvbnNlLmJvZHkgIT0gdm9pZCAwO1xuICAgICAgICBpZiAoIWhhc1JlYWRhYmxlU3RyZWFtKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKS50aGVuKChib2R5MikgPT4gKHtcbiAgICAgICAgICAgIHJlc3BvbnNlOiBuZXcgaW1wb3J0X3Byb3RvY29sX2h0dHAuSHR0cFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgaGVhZGVyczogdHJhbnNmb3JtZWRIZWFkZXJzLFxuICAgICAgICAgICAgICByZWFzb246IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogYm9keTJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzcG9uc2U6IG5ldyBpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVzcG9uc2Uoe1xuICAgICAgICAgICAgaGVhZGVyczogdHJhbnNmb3JtZWRIZWFkZXJzLFxuICAgICAgICAgICAgcmVhc29uOiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgYm9keTogcmVzcG9uc2UuYm9keVxuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIHJlcXVlc3RUaW1lb3V0KHJlcXVlc3RUaW1lb3V0SW5NcylcbiAgICBdO1xuICAgIGlmIChhYm9ydFNpZ25hbCkge1xuICAgICAgcmFjZU9mUHJvbWlzZXMucHVzaChcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9uQWJvcnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJSZXF1ZXN0IGFib3J0ZWRcIik7XG4gICAgICAgICAgICBhYm9ydEVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICAgICAgICAgIHJlamVjdChhYm9ydEVycm9yKTtcbiAgICAgICAgICB9LCBcIm9uQWJvcnRcIik7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25hbCA9IGFib3J0U2lnbmFsO1xuICAgICAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICAgICAgICByZW1vdmVTaWduYWxFdmVudExpc3RlbmVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpLCBcInJlbW92ZVNpZ25hbEV2ZW50TGlzdGVuZXJcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFib3J0U2lnbmFsLm9uYWJvcnQgPSBvbkFib3J0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJhY2UocmFjZU9mUHJvbWlzZXMpLmZpbmFsbHkocmVtb3ZlU2lnbmFsRXZlbnRMaXN0ZW5lcik7XG4gIH1cbiAgdXBkYXRlSHR0cENsaWVudENvbmZpZyhrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5jb25maWcgPSB2b2lkIDA7XG4gICAgdGhpcy5jb25maWdQcm92aWRlciA9IHRoaXMuY29uZmlnUHJvdmlkZXIudGhlbigoY29uZmlnKSA9PiB7XG4gICAgICBjb25maWdba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9KTtcbiAgfVxuICBodHRwSGFuZGxlckNvbmZpZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnID8/IHt9O1xuICB9XG59O1xuXG4vLyBzcmMvc3RyZWFtLWNvbGxlY3Rvci50c1xudmFyIGltcG9ydF91dGlsX2Jhc2U2NCA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYmFzZTY0XCIpO1xudmFyIHN0cmVhbUNvbGxlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHN0cmVhbSkgPT4ge1xuICBpZiAodHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJiBzdHJlYW0gaW5zdGFuY2VvZiBCbG9iIHx8IHN0cmVhbS5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJCbG9iXCIpIHtcbiAgICBpZiAoQmxvYi5wcm90b3R5cGUuYXJyYXlCdWZmZXIgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IHN0cmVhbS5hcnJheUJ1ZmZlcigpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3RCbG9iKHN0cmVhbSk7XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3RTdHJlYW0oc3RyZWFtKTtcbn0sIFwic3RyZWFtQ29sbGVjdG9yXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29sbGVjdEJsb2IoYmxvYikge1xuICBjb25zdCBiYXNlNjQgPSBhd2FpdCByZWFkVG9CYXNlNjQoYmxvYik7XG4gIGNvbnN0IGFycmF5QnVmZmVyID0gKDAsIGltcG9ydF91dGlsX2Jhc2U2NC5mcm9tQmFzZTY0KShiYXNlNjQpO1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xufVxuX19uYW1lKGNvbGxlY3RCbG9iLCBcImNvbGxlY3RCbG9iXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29sbGVjdFN0cmVhbShzdHJlYW0pIHtcbiAgY29uc3QgY2h1bmtzID0gW107XG4gIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgbGV0IGlzRG9uZSA9IGZhbHNlO1xuICBsZXQgbGVuZ3RoID0gMDtcbiAgd2hpbGUgKCFpc0RvbmUpIHtcbiAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgY2h1bmtzLnB1c2godmFsdWUpO1xuICAgICAgbGVuZ3RoICs9IHZhbHVlLmxlbmd0aDtcbiAgICB9XG4gICAgaXNEb25lID0gZG9uZTtcbiAgfVxuICBjb25zdCBjb2xsZWN0ZWQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICBjb2xsZWN0ZWQuc2V0KGNodW5rLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBjaHVuay5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3RlZDtcbn1cbl9fbmFtZShjb2xsZWN0U3RyZWFtLCBcImNvbGxlY3RTdHJlYW1cIik7XG5mdW5jdGlvbiByZWFkVG9CYXNlNjQoYmxvYikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHtcbiAgICAgIGlmIChyZWFkZXIucmVhZHlTdGF0ZSAhPT0gMikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIlJlYWRlciBhYm9ydGVkIHRvbyBlYXJseVwiKSk7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSByZWFkZXIucmVzdWx0ID8/IFwiXCI7XG4gICAgICBjb25zdCBjb21tYUluZGV4ID0gcmVzdWx0LmluZGV4T2YoXCIsXCIpO1xuICAgICAgY29uc3QgZGF0YU9mZnNldCA9IGNvbW1hSW5kZXggPiAtMSA/IGNvbW1hSW5kZXggKyAxIDogcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc29sdmUocmVzdWx0LnN1YnN0cmluZyhkYXRhT2Zmc2V0KSk7XG4gICAgfTtcbiAgICByZWFkZXIub25hYm9ydCA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoXCJSZWFkIGFib3J0ZWRcIikpO1xuICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4gcmVqZWN0KHJlYWRlci5lcnJvcik7XG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG4gIH0pO1xufVxuX19uYW1lKHJlYWRUb0Jhc2U2NCwgXCJyZWFkVG9CYXNlNjRcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBrZWVwQWxpdmVTdXBwb3J0LFxuICBGZXRjaEh0dHBIYW5kbGVyLFxuICBzdHJlYW1Db2xsZWN0b3Jcbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGZyb21IZXg6ICgpID0+IGZyb21IZXgsXG4gIHRvSGV4OiAoKSA9PiB0b0hleFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgU0hPUlRfVE9fSEVYID0ge307XG52YXIgSEVYX1RPX1NIT1JUID0ge307XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gIGxldCBlbmNvZGVkQnl0ZSA9IGkudG9TdHJpbmcoMTYpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChlbmNvZGVkQnl0ZS5sZW5ndGggPT09IDEpIHtcbiAgICBlbmNvZGVkQnl0ZSA9IGAwJHtlbmNvZGVkQnl0ZX1gO1xuICB9XG4gIFNIT1JUX1RPX0hFWFtpXSA9IGVuY29kZWRCeXRlO1xuICBIRVhfVE9fU0hPUlRbZW5jb2RlZEJ5dGVdID0gaTtcbn1cbmZ1bmN0aW9uIGZyb21IZXgoZW5jb2RlZCkge1xuICBpZiAoZW5jb2RlZC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSGV4IGVuY29kZWQgc3RyaW5ncyBtdXN0IGhhdmUgYW4gZXZlbiBudW1iZXIgbGVuZ3RoXCIpO1xuICB9XG4gIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoIC8gMik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkgKz0gMikge1xuICAgIGNvbnN0IGVuY29kZWRCeXRlID0gZW5jb2RlZC5zbGljZShpLCBpICsgMikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZW5jb2RlZEJ5dGUgaW4gSEVYX1RPX1NIT1JUKSB7XG4gICAgICBvdXRbaSAvIDJdID0gSEVYX1RPX1NIT1JUW2VuY29kZWRCeXRlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVjb2RlIHVucmVjb2duaXplZCBzZXF1ZW5jZSAke2VuY29kZWRCeXRlfSBhcyBoZXhhZGVjaW1hbGApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuX19uYW1lKGZyb21IZXgsIFwiZnJvbUhleFwiKTtcbmZ1bmN0aW9uIHRvSGV4KGJ5dGVzKSB7XG4gIGxldCBvdXQgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgIG91dCArPSBTSE9SVF9UT19IRVhbYnl0ZXNbaV1dO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5fX25hbWUodG9IZXgsIFwidG9IZXhcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tSGV4LFxuICB0b0hleFxufSk7XG5cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2RrU3RyZWFtTWl4aW4gPSB2b2lkIDA7XG5jb25zdCBmZXRjaF9odHRwX2hhbmRsZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L2ZldGNoLWh0dHAtaGFuZGxlclwiKTtcbmNvbnN0IHV0aWxfYmFzZTY0XzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiKTtcbmNvbnN0IHV0aWxfaGV4X2VuY29kaW5nXzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiKTtcbmNvbnN0IHV0aWxfdXRmOF8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuY29uc3QgRVJSX01TR19TVFJFQU1fSEFTX0JFRU5fVFJBTlNGT1JNRUQgPSBcIlRoZSBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiB0cmFuc2Zvcm1lZC5cIjtcbmNvbnN0IHNka1N0cmVhbU1peGluID0gKHN0cmVhbSkgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKCFpc0Jsb2JJbnN0YW5jZShzdHJlYW0pICYmICEoMCwgc3RyZWFtX3R5cGVfY2hlY2tfMS5pc1JlYWRhYmxlU3RyZWFtKShzdHJlYW0pKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAoKF9iID0gKF9hID0gc3RyZWFtID09PSBudWxsIHx8IHN0cmVhbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RyZWFtLl9fcHJvdG9fXykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZSkgfHwgc3RyZWFtO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgc3RyZWFtIGltcGxlbWVudGF0aW9uLCBleHBlY3QgQmxvYiBvciBSZWFkYWJsZVN0cmVhbSwgZ290ICR7bmFtZX1gKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zZm9ybWVkID0gZmFsc2U7XG4gICAgY29uc3QgdHJhbnNmb3JtVG9CeXRlQXJyYXkgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEKTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2Zvcm1lZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBhd2FpdCAoMCwgZmV0Y2hfaHR0cF9oYW5kbGVyXzEuc3RyZWFtQ29sbGVjdG9yKShzdHJlYW0pO1xuICAgIH07XG4gICAgY29uc3QgYmxvYlRvV2ViU3RyZWFtID0gKGJsb2IpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBibG9iLnN0cmVhbSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdHJhbnNmb3JtIHBheWxvYWQgQmxvYiB0byB3ZWIgc3RyZWFtLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBCbG9iLnN0cmVhbSgpIGlzIHBvbHlmaWxsZWQuXFxuXCIgK1xuICAgICAgICAgICAgICAgIFwiSWYgeW91IGFyZSB1c2luZyBSZWFjdCBOYXRpdmUsIHRoaXMgQVBJIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLCBzZWU6IGh0dHBzOi8vcmVhY3QtbmF0aXZlLmNhbm55LmlvL2ZlYXR1cmUtcmVxdWVzdHMvcC9mZXRjaC1zdHJlYW1pbmctYm9keVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmxvYi5zdHJlYW0oKTtcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHN0cmVhbSwge1xuICAgICAgICB0cmFuc2Zvcm1Ub0J5dGVBcnJheTogdHJhbnNmb3JtVG9CeXRlQXJyYXksXG4gICAgICAgIHRyYW5zZm9ybVRvU3RyaW5nOiBhc3luYyAoZW5jb2RpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IHRyYW5zZm9ybVRvQnl0ZUFycmF5KCk7XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwiYmFzZTY0XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxfYmFzZTY0XzEudG9CYXNlNjQpKGJ1Zik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlbmNvZGluZyA9PT0gXCJoZXhcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbF9oZXhfZW5jb2RpbmdfMS50b0hleCkoYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQgfHwgZW5jb2RpbmcgPT09IFwidXRmOFwiIHx8IGVuY29kaW5nID09PSBcInV0Zi04XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxfdXRmOF8xLnRvVXRmOCkoYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZykuZGVjb2RlKGJ1Zik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZXh0RGVjb2RlciBpcyBub3QgYXZhaWxhYmxlLCBwbGVhc2UgbWFrZSBzdXJlIHBvbHlmaWxsIGlzIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNmb3JtVG9XZWJTdHJlYW06ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaXNCbG9iSW5zdGFuY2Uoc3RyZWFtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBibG9iVG9XZWJTdHJlYW0oc3RyZWFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHN0cmVhbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdHJhbnNmb3JtIHBheWxvYWQgdG8gd2ViIHN0cmVhbSwgZ290ICR7c3RyZWFtfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydHMuc2RrU3RyZWFtTWl4aW4gPSBzZGtTdHJlYW1NaXhpbjtcbmNvbnN0IGlzQmxvYkluc3RhbmNlID0gKHN0cmVhbSkgPT4gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJiBzdHJlYW0gaW5zdGFuY2VvZiBCbG9iO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZGtTdHJlYW1NaXhpbiA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfaHR0cF9oYW5kbGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiKTtcbmNvbnN0IHV0aWxfYnVmZmVyX2Zyb21fMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIik7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBzZGtfc3RyZWFtX21peGluX2Jyb3dzZXJfMSA9IHJlcXVpcmUoXCIuL3Nkay1zdHJlYW0tbWl4aW4uYnJvd3NlclwiKTtcbmNvbnN0IEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEID0gXCJUaGUgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gdHJhbnNmb3JtZWQuXCI7XG5jb25zdCBzZGtTdHJlYW1NaXhpbiA9IChzdHJlYW0pID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICghKHN0cmVhbSBpbnN0YW5jZW9mIHN0cmVhbV8xLlJlYWRhYmxlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBzZGtfc3RyZWFtX21peGluX2Jyb3dzZXJfMS5zZGtTdHJlYW1NaXhpbikoc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9ICgoX2IgPSAoX2EgPSBzdHJlYW0gPT09IG51bGwgfHwgc3RyZWFtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHJlYW0uX19wcm90b19fKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSB8fCBzdHJlYW07XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgc3RyZWFtIGltcGxlbWVudGF0aW9uLCBleHBlY3QgU3RyZWFtLlJlYWRhYmxlIGluc3RhbmNlLCBnb3QgJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0cmFuc2Zvcm1lZCA9IGZhbHNlO1xuICAgIGNvbnN0IHRyYW5zZm9ybVRvQnl0ZUFycmF5ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAodHJhbnNmb3JtZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJfTVNHX1NUUkVBTV9IQVNfQkVFTl9UUkFOU0ZPUk1FRCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYXdhaXQgKDAsIG5vZGVfaHR0cF9oYW5kbGVyXzEuc3RyZWFtQ29sbGVjdG9yKShzdHJlYW0pO1xuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3RyZWFtLCB7XG4gICAgICAgIHRyYW5zZm9ybVRvQnl0ZUFycmF5LFxuICAgICAgICB0cmFuc2Zvcm1Ub1N0cmluZzogYXN5bmMgKGVuY29kaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCB0cmFuc2Zvcm1Ub0J5dGVBcnJheSgpO1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQgfHwgQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsX2J1ZmZlcl9mcm9tXzEuZnJvbUFycmF5QnVmZmVyKShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm1Ub1dlYlN0cmVhbTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUl9NU0dfU1RSRUFNX0hBU19CRUVOX1RSQU5TRk9STUVEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0ucmVhZGFibGVGbG93aW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSBoYXMgYmVlbiBjb25zdW1lZCBieSBvdGhlciBjYWxsYmFja3MuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW1fMS5SZWFkYWJsZS50b1dlYiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVhZGFibGUudG9XZWIoKSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgZW5zdXJlIGEgcG9seWZpbGwgaXMgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW1fMS5SZWFkYWJsZS50b1dlYihzdHJlYW0pO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydHMuc2RrU3RyZWFtTWl4aW4gPSBzZGtTdHJlYW1NaXhpbjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3BsaXRTdHJlYW0gPSB2b2lkIDA7XG5hc3luYyBmdW5jdGlvbiBzcGxpdFN0cmVhbShzdHJlYW0pIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5zdHJlYW0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBzdHJlYW0gPSBzdHJlYW0uc3RyZWFtKCk7XG4gICAgfVxuICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiByZWFkYWJsZVN0cmVhbS50ZWUoKTtcbn1cbmV4cG9ydHMuc3BsaXRTdHJlYW0gPSBzcGxpdFN0cmVhbTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3BsaXRTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBzcGxpdFN0cmVhbV9icm93c2VyXzEgPSByZXF1aXJlKFwiLi9zcGxpdFN0cmVhbS5icm93c2VyXCIpO1xuY29uc3Qgc3RyZWFtX3R5cGVfY2hlY2tfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbS10eXBlLWNoZWNrXCIpO1xuYXN5bmMgZnVuY3Rpb24gc3BsaXRTdHJlYW0oc3RyZWFtKSB7XG4gICAgaWYgKCgwLCBzdHJlYW1fdHlwZV9jaGVja18xLmlzUmVhZGFibGVTdHJlYW0pKHN0cmVhbSkgfHwgKDAsIHN0cmVhbV90eXBlX2NoZWNrXzEuaXNCbG9iKShzdHJlYW0pKSB7XG4gICAgICAgIHJldHVybiAoMCwgc3BsaXRTdHJlYW1fYnJvd3Nlcl8xLnNwbGl0U3RyZWFtKShzdHJlYW0pO1xuICAgIH1cbiAgICBjb25zdCBzdHJlYW0xID0gbmV3IHN0cmVhbV8xLlBhc3NUaHJvdWdoKCk7XG4gICAgY29uc3Qgc3RyZWFtMiA9IG5ldyBzdHJlYW1fMS5QYXNzVGhyb3VnaCgpO1xuICAgIHN0cmVhbS5waXBlKHN0cmVhbTEpO1xuICAgIHN0cmVhbS5waXBlKHN0cmVhbTIpO1xuICAgIHJldHVybiBbc3RyZWFtMSwgc3RyZWFtMl07XG59XG5leHBvcnRzLnNwbGl0U3RyZWFtID0gc3BsaXRTdHJlYW07XG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBVaW50OEFycmF5QmxvYkFkYXB0ZXI6ICgpID0+IFVpbnQ4QXJyYXlCbG9iQWRhcHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9ibG9iL3RyYW5zZm9ybXMudHNcbnZhciBpbXBvcnRfdXRpbF9iYXNlNjQgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiKTtcbnZhciBpbXBvcnRfdXRpbF91dGY4ID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xuZnVuY3Rpb24gdHJhbnNmb3JtVG9TdHJpbmcocGF5bG9hZCwgZW5jb2RpbmcgPSBcInV0Zi04XCIpIHtcbiAgaWYgKGVuY29kaW5nID09PSBcImJhc2U2NFwiKSB7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF9iYXNlNjQudG9CYXNlNjQpKHBheWxvYWQpO1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X3V0aWxfdXRmOC50b1V0ZjgpKHBheWxvYWQpO1xufVxuX19uYW1lKHRyYW5zZm9ybVRvU3RyaW5nLCBcInRyYW5zZm9ybVRvU3RyaW5nXCIpO1xuZnVuY3Rpb24gdHJhbnNmb3JtRnJvbVN0cmluZyhzdHIsIGVuY29kaW5nKSB7XG4gIGlmIChlbmNvZGluZyA9PT0gXCJiYXNlNjRcIikge1xuICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKCgwLCBpbXBvcnRfdXRpbF9iYXNlNjQuZnJvbUJhc2U2NCkoc3RyKSk7XG4gIH1cbiAgcmV0dXJuIFVpbnQ4QXJyYXlCbG9iQWRhcHRlci5tdXRhdGUoKDAsIGltcG9ydF91dGlsX3V0ZjguZnJvbVV0ZjgpKHN0cikpO1xufVxuX19uYW1lKHRyYW5zZm9ybUZyb21TdHJpbmcsIFwidHJhbnNmb3JtRnJvbVN0cmluZ1wiKTtcblxuLy8gc3JjL2Jsb2IvVWludDhBcnJheUJsb2JBZGFwdGVyLnRzXG52YXIgVWludDhBcnJheUJsb2JBZGFwdGVyID0gY2xhc3MgX1VpbnQ4QXJyYXlCbG9iQWRhcHRlciBleHRlbmRzIFVpbnQ4QXJyYXkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlVpbnQ4QXJyYXlCbG9iQWRhcHRlclwiKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHNvdXJjZSAtIHN1Y2ggYXMgYSBzdHJpbmcgb3IgU3RyZWFtLlxuICAgKiBAcmV0dXJucyBhIG5ldyBVaW50OEFycmF5QmxvYkFkYXB0ZXIgZXh0ZW5kaW5nIFVpbnQ4QXJyYXkuXG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmluZyhzb3VyY2UsIGVuY29kaW5nID0gXCJ1dGYtOFwiKSB7XG4gICAgc3dpdGNoICh0eXBlb2Ygc291cmNlKSB7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1Gcm9tU3RyaW5nKHNvdXJjZSwgZW5jb2RpbmcpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBjb252ZXJzaW9uIGZyb20gJHt0eXBlb2Ygc291cmNlfSB0byBVaW50OEFycmF5QmxvYkFkYXB0ZXIuYCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gc291cmNlIC0gVWludDhBcnJheSB0byBiZSBtdXRhdGVkLlxuICAgKiBAcmV0dXJucyB0aGUgc2FtZSBVaW50OEFycmF5IGJ1dCB3aXRoIHByb3RvdHlwZSBzd2l0Y2hlZCB0byBVaW50OEFycmF5QmxvYkFkYXB0ZXIuXG4gICAqL1xuICBzdGF0aWMgbXV0YXRlKHNvdXJjZSkge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihzb3VyY2UsIF9VaW50OEFycmF5QmxvYkFkYXB0ZXIucHJvdG90eXBlKTtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gZW5jb2RpbmcgLSBkZWZhdWx0ICd1dGYtOCcuXG4gICAqIEByZXR1cm5zIHRoZSBibG9iIGFzIHN0cmluZy5cbiAgICovXG4gIHRyYW5zZm9ybVRvU3RyaW5nKGVuY29kaW5nID0gXCJ1dGYtOFwiKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVRvU3RyaW5nKHRoaXMsIGVuY29kaW5nKTtcbiAgfVxufTtcblxuLy8gc3JjL2luZGV4LnRzXG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi9jaGVja3N1bS9DaGVja3N1bVN0cmVhbVwiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vY2hlY2tzdW0vY3JlYXRlQ2hlY2tzdW1TdHJlYW1cIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuLy4vY3JlYXRlQnVmZmVyZWRSZWFkYWJsZVwiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vLi9nZXRBd3NDaHVua2VkRW5jb2RpbmdTdHJlYW1cIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoc3JjX2V4cG9ydHMsIHJlcXVpcmUoXCIuLy4vaGVhZFN0cmVhbVwiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vLi9zZGstc3RyZWFtLW1peGluXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi8uL3NwbGl0U3RyZWFtXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi8uL3N0cmVhbS10eXBlLWNoZWNrXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBVaW50OEFycmF5QmxvYkFkYXB0ZXIsXG4gIENoZWNrc3VtU3RyZWFtLFxuICBjcmVhdGVDaGVja3N1bVN0cmVhbSxcbiAgY3JlYXRlQnVmZmVyZWRSZWFkYWJsZSxcbiAgZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtLFxuICBoZWFkU3RyZWFtLFxuICBzZGtTdHJlYW1NaXhpbixcbiAgc3BsaXRTdHJlYW0sXG4gIGlzUmVhZGFibGVTdHJlYW0sXG4gIGlzQmxvYlxufSk7XG5cbiIsICJpbXBvcnQgeyBVaW50OEFycmF5QmxvYkFkYXB0ZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXN0cmVhbVwiO1xuZXhwb3J0IGNvbnN0IGNvbGxlY3RCb2R5ID0gYXN5bmMgKHN0cmVhbUJvZHkgPSBuZXcgVWludDhBcnJheSgpLCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKHN0cmVhbUJvZHkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKHN0cmVhbUJvZHkpO1xuICAgIH1cbiAgICBpZiAoIXN0cmVhbUJvZHkpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXlCbG9iQWRhcHRlci5tdXRhdGUobmV3IFVpbnQ4QXJyYXkoKSk7XG4gICAgfVxuICAgIGNvbnN0IGZyb21Db250ZXh0ID0gY29udGV4dC5zdHJlYW1Db2xsZWN0b3Ioc3RyZWFtQm9keSk7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXlCbG9iQWRhcHRlci5tdXRhdGUoYXdhaXQgZnJvbUNvbnRleHQpO1xufTtcbiIsICJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIFwiJVwiICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xufVxuIiwgImltcG9ydCB7IGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50IH0gZnJvbSBcIi4vZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnRcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlZFBhdGggPSAocmVzb2x2ZWRQYXRoLCBpbnB1dCwgbWVtYmVyTmFtZSwgbGFiZWxWYWx1ZVByb3ZpZGVyLCB1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbCkgPT4ge1xuICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGlucHV0W21lbWJlck5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbGFiZWxWYWx1ZSA9IGxhYmVsVmFsdWVQcm92aWRlcigpO1xuICAgICAgICBpZiAobGFiZWxWYWx1ZS5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgdmFsdWUgcHJvdmlkZWQgZm9yIGlucHV0IEhUVFAgbGFiZWw6IFwiICsgbWVtYmVyTmFtZSArIFwiLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlZFBhdGggPSByZXNvbHZlZFBhdGgucmVwbGFjZSh1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbFxuICAgICAgICAgICAgPyBsYWJlbFZhbHVlXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiL1wiKVxuICAgICAgICAgICAgICAgIC5tYXAoKHNlZ21lbnQpID0+IGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KHNlZ21lbnQpKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiL1wiKVxuICAgICAgICAgICAgOiBleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudChsYWJlbFZhbHVlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWx1ZSBwcm92aWRlZCBmb3IgaW5wdXQgSFRUUCBsYWJlbDogXCIgKyBtZW1iZXJOYW1lICsgXCIuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRQYXRoO1xufTtcbiIsICJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IHJlc29sdmVkUGF0aCB9IGZyb20gXCIuL3Jlc29sdmUtcGF0aFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RCdWlsZGVyKGlucHV0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0QnVpbGRlcihpbnB1dCwgY29udGV4dCk7XG59XG5leHBvcnQgY2xhc3MgUmVxdWVzdEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0LCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhdGggPSBcIlwiO1xuICAgICAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgICAgICB0aGlzLmhvc3RuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5yZXNvbHZlUGF0aFN0YWNrID0gW107XG4gICAgfVxuICAgIGFzeW5jIGJ1aWxkKCkge1xuICAgICAgICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCA9IFwiaHR0cHNcIiwgcG9ydCwgcGF0aDogYmFzZVBhdGggfSA9IGF3YWl0IHRoaXMuY29udGV4dC5lbmRwb2ludCgpO1xuICAgICAgICB0aGlzLnBhdGggPSBiYXNlUGF0aDtcbiAgICAgICAgZm9yIChjb25zdCByZXNvbHZlUGF0aCBvZiB0aGlzLnJlc29sdmVQYXRoU3RhY2spIHtcbiAgICAgICAgICAgIHJlc29sdmVQYXRoKHRoaXMucGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIGhvc3RuYW1lOiB0aGlzLmhvc3RuYW1lIHx8IGhvc3RuYW1lLFxuICAgICAgICAgICAgcG9ydCxcbiAgICAgICAgICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgICAgICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICBxdWVyeTogdGhpcy5xdWVyeSxcbiAgICAgICAgICAgIGJvZHk6IHRoaXMuYm9keSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhuKGhvc3RuYW1lKSB7XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgPSBob3N0bmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGJwKHVyaUxhYmVsKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZVBhdGhTdGFjay5wdXNoKChiYXNlUGF0aCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gYCR7YmFzZVBhdGg/LmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VQYXRoLnNsaWNlKDAsIC0xKSA6IGJhc2VQYXRoIHx8IFwiXCJ9YCArIHVyaUxhYmVsO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHAobWVtYmVyTmFtZSwgbGFiZWxWYWx1ZVByb3ZpZGVyLCB1cmlMYWJlbCwgaXNHcmVlZHlMYWJlbCkge1xuICAgICAgICB0aGlzLnJlc29sdmVQYXRoU3RhY2sucHVzaCgocGF0aCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcmVzb2x2ZWRQYXRoKHBhdGgsIHRoaXMuaW5wdXQsIG1lbWJlck5hbWUsIGxhYmVsVmFsdWVQcm92aWRlciwgdXJpTGFiZWwsIGlzR3JlZWR5TGFiZWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGgoaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcShxdWVyeSkge1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBiKGJvZHkpIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG0obWV0aG9kKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vY29sbGVjdC1zdHJlYW0tYm9keVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlcXVlc3RCdWlsZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZXNvbHZlLXBhdGhcIjtcbiIsICJleHBvcnQgeyByZXF1ZXN0QnVpbGRlciB9IGZyb20gXCJAc21pdGh5L2NvcmUvcHJvdG9jb2xzXCI7XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIHNldEZlYXR1cmUoY29udGV4dCwgZmVhdHVyZSwgdmFsdWUpIHtcbiAgICBpZiAoIWNvbnRleHQuX19zbWl0aHlfY29udGV4dCkge1xuICAgICAgICBjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQgPSB7XG4gICAgICAgICAgICBmZWF0dXJlczoge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKCFjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQuZmVhdHVyZXMpIHtcbiAgICAgICAgY29udGV4dC5fX3NtaXRoeV9jb250ZXh0LmZlYXR1cmVzID0ge307XG4gICAgfVxuICAgIGNvbnRleHQuX19zbWl0aHlfY29udGV4dC5mZWF0dXJlc1tmZWF0dXJlXSA9IHZhbHVlO1xufVxuIiwgImV4cG9ydCBjbGFzcyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXV0aFNjaGVtZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoU2NoZW1lcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SWRlbnRpdHlQcm92aWRlcihzY2hlbWVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdXRoU2NoZW1lcy5nZXQoc2NoZW1lSWQpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IEh0dHBBcGlLZXlBdXRoTG9jYXRpb24gfSBmcm9tIFwiQHNtaXRoeS90eXBlc1wiO1xuZXhwb3J0IGNsYXNzIEh0dHBBcGlLZXlBdXRoU2lnbmVyIHtcbiAgICBhc3luYyBzaWduKGh0dHBSZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCFzaWduaW5nUHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjb3VsZCBub3QgYmUgc2lnbmVkIHdpdGggYGFwaUtleWAgc2luY2UgdGhlIGBuYW1lYCBhbmQgYGluYCBzaWduZXIgcHJvcGVydGllcyBhcmUgbWlzc2luZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNpZ25pbmdQcm9wZXJ0aWVzLm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3QgY291bGQgbm90IGJlIHNpZ25lZCB3aXRoIGBhcGlLZXlgIHNpbmNlIHRoZSBgbmFtZWAgc2lnbmVyIHByb3BlcnR5IGlzIG1pc3NpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaWduaW5nUHJvcGVydGllcy5pbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjb3VsZCBub3QgYmUgc2lnbmVkIHdpdGggYGFwaUtleWAgc2luY2UgdGhlIGBpbmAgc2lnbmVyIHByb3BlcnR5IGlzIG1pc3NpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpZGVudGl0eS5hcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVlc3QgY291bGQgbm90IGJlIHNpZ25lZCB3aXRoIGBhcGlLZXlgIHNpbmNlIHRoZSBgYXBpS2V5YCBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbG9uZWRSZXF1ZXN0ID0gSHR0cFJlcXVlc3QuY2xvbmUoaHR0cFJlcXVlc3QpO1xuICAgICAgICBpZiAoc2lnbmluZ1Byb3BlcnRpZXMuaW4gPT09IEh0dHBBcGlLZXlBdXRoTG9jYXRpb24uUVVFUlkpIHtcbiAgICAgICAgICAgIGNsb25lZFJlcXVlc3QucXVlcnlbc2lnbmluZ1Byb3BlcnRpZXMubmFtZV0gPSBpZGVudGl0eS5hcGlLZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2lnbmluZ1Byb3BlcnRpZXMuaW4gPT09IEh0dHBBcGlLZXlBdXRoTG9jYXRpb24uSEVBREVSKSB7XG4gICAgICAgICAgICBjbG9uZWRSZXF1ZXN0LmhlYWRlcnNbc2lnbmluZ1Byb3BlcnRpZXMubmFtZV0gPSBzaWduaW5nUHJvcGVydGllcy5zY2hlbWVcbiAgICAgICAgICAgICAgICA/IGAke3NpZ25pbmdQcm9wZXJ0aWVzLnNjaGVtZX0gJHtpZGVudGl0eS5hcGlLZXl9YFxuICAgICAgICAgICAgICAgIDogaWRlbnRpdHkuYXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjYW4gb25seSBiZSBzaWduZWQgd2l0aCBgYXBpS2V5YCBsb2NhdGlvbnMgYHF1ZXJ5YCBvciBgaGVhZGVyYCwgXCIgK1xuICAgICAgICAgICAgICAgIFwiYnV0IGZvdW5kOiBgXCIgK1xuICAgICAgICAgICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzLmluICtcbiAgICAgICAgICAgICAgICBcImBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lZFJlcXVlc3Q7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuZXhwb3J0IGNsYXNzIEh0dHBCZWFyZXJBdXRoU2lnbmVyIHtcbiAgICBhc3luYyBzaWduKGh0dHBSZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkUmVxdWVzdCA9IEh0dHBSZXF1ZXN0LmNsb25lKGh0dHBSZXF1ZXN0KTtcbiAgICAgICAgaWYgKCFpZGVudGl0eS50b2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdCBjb3VsZCBub3QgYmUgc2lnbmVkIHdpdGggYHRva2VuYCBzaW5jZSB0aGUgYHRva2VuYCBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWRSZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gYEJlYXJlciAke2lkZW50aXR5LnRva2VufWA7XG4gICAgICAgIHJldHVybiBjbG9uZWRSZXF1ZXN0O1xuICAgIH1cbn1cbiIsICJleHBvcnQgY2xhc3MgTm9BdXRoU2lnbmVyIHtcbiAgICBhc3luYyBzaWduKGh0dHBSZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIGh0dHBSZXF1ZXN0O1xuICAgIH1cbn1cbiIsICJleHBvcnQgKiBmcm9tIFwiLi9odHRwQXBpS2V5QXV0aFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHR0cEJlYXJlckF1dGhcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25vQXV0aFwiO1xuIiwgImV4cG9ydCBjb25zdCBjcmVhdGVJc0lkZW50aXR5RXhwaXJlZEZ1bmN0aW9uID0gKGV4cGlyYXRpb25NcykgPT4gKGlkZW50aXR5KSA9PiBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaChpZGVudGl0eSkgJiYgaWRlbnRpdHkuZXhwaXJhdGlvbi5nZXRUaW1lKCkgLSBEYXRlLm5vdygpIDwgZXhwaXJhdGlvbk1zO1xuZXhwb3J0IGNvbnN0IEVYUElSQVRJT05fTVMgPSAzMDAwMDA7XG5leHBvcnQgY29uc3QgaXNJZGVudGl0eUV4cGlyZWQgPSBjcmVhdGVJc0lkZW50aXR5RXhwaXJlZEZ1bmN0aW9uKEVYUElSQVRJT05fTVMpO1xuZXhwb3J0IGNvbnN0IGRvZXNJZGVudGl0eVJlcXVpcmVSZWZyZXNoID0gKGlkZW50aXR5KSA9PiBpZGVudGl0eS5leHBpcmF0aW9uICE9PSB1bmRlZmluZWQ7XG5leHBvcnQgY29uc3QgbWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIgPSAocHJvdmlkZXIsIGlzRXhwaXJlZCwgcmVxdWlyZXNSZWZyZXNoKSA9PiB7XG4gICAgaWYgKHByb3ZpZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZFByb3ZpZGVyID0gdHlwZW9mIHByb3ZpZGVyICE9PSBcImZ1bmN0aW9uXCIgPyBhc3luYyAoKSA9PiBQcm9taXNlLnJlc29sdmUocHJvdmlkZXIpIDogcHJvdmlkZXI7XG4gICAgbGV0IHJlc29sdmVkO1xuICAgIGxldCBwZW5kaW5nO1xuICAgIGxldCBoYXNSZXN1bHQ7XG4gICAgbGV0IGlzQ29uc3RhbnQgPSBmYWxzZTtcbiAgICBjb25zdCBjb2FsZXNjZVByb3ZpZGVyID0gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICAgICAgICBwZW5kaW5nID0gbm9ybWFsaXplZFByb3ZpZGVyKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IHBlbmRpbmc7XG4gICAgICAgICAgICBoYXNSZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgaXNDb25zdGFudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfTtcbiAgICBpZiAoaXNFeHBpcmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWhhc1Jlc3VsdCB8fCBvcHRpb25zPy5mb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAoIWhhc1Jlc3VsdCB8fCBvcHRpb25zPy5mb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gYXdhaXQgY29hbGVzY2VQcm92aWRlcihvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb25zdGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVxdWlyZXNSZWZyZXNoKHJlc29sdmVkKSkge1xuICAgICAgICAgICAgaXNDb25zdGFudCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXhwaXJlZChyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG59O1xuIiwgImV4cG9ydCAqIGZyb20gXCIuL0RlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9odHRwQXV0aFNjaGVtZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21lbW9pemVJZGVudGl0eVByb3ZpZGVyXCI7XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vZ2V0U21pdGh5Q29udGV4dFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9taWRkbGV3YXJlLWh0dHAtc2lnbmluZ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbm9ybWFsaXplUHJvdmlkZXJcIjtcbmV4cG9ydCB7IGNyZWF0ZVBhZ2luYXRvciB9IGZyb20gXCIuL3BhZ2luYXRpb24vY3JlYXRlUGFnaW5hdG9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NldEZlYXR1cmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWwtaWRlbnRpdHktYW5kLWF1dGhcIjtcbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgRW5kcG9pbnRDYWNoZTogKCkgPT4gRW5kcG9pbnRDYWNoZSxcbiAgRW5kcG9pbnRFcnJvcjogKCkgPT4gRW5kcG9pbnRFcnJvcixcbiAgY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnM6ICgpID0+IGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLFxuICBpc0lwQWRkcmVzczogKCkgPT4gaXNJcEFkZHJlc3MsXG4gIGlzVmFsaWRIb3N0TGFiZWw6ICgpID0+IGlzVmFsaWRIb3N0TGFiZWwsXG4gIHJlc29sdmVFbmRwb2ludDogKCkgPT4gcmVzb2x2ZUVuZHBvaW50XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2NhY2hlL0VuZHBvaW50Q2FjaGUudHNcbnZhciBFbmRwb2ludENhY2hlID0gY2xhc3Mge1xuICAvKipcbiAgICogQHBhcmFtIFtzaXplXSAtIGRlc2lyZWQgYXZlcmFnZSBtYXhpbXVtIGNhcGFjaXR5LiBBIGJ1ZmZlciBvZiAxMCBhZGRpdGlvbmFsIGtleXMgd2lsbCBiZSBhbGxvd2VkXG4gICAqICAgICAgICAgICAgICAgICBiZWZvcmUga2V5cyBhcmUgZHJvcHBlZC5cbiAgICogQHBhcmFtIFtwYXJhbXNdIC0gbGlzdCBvZiBwYXJhbXMgdG8gY29uc2lkZXIgYXMgcGFydCBvZiB0aGUgY2FjaGUga2V5LlxuICAgKlxuICAgKiBJZiB0aGUgcGFyYW1zIGxpc3QgaXMgbm90IHBvcHVsYXRlZCwgbm8gY2FjaGluZyB3aWxsIGhhcHBlbi5cbiAgICogVGhpcyBtYXkgYmUgb3V0IG9mIG9yZGVyIGRlcGVuZGluZyBvbiBob3cgdGhlIG9iamVjdCBpcyBjcmVhdGVkIGFuZCBhcnJpdmVzIHRvIHRoaXMgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IHNpemUsIHBhcmFtcyB9KSB7XG4gICAgdGhpcy5kYXRhID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBbXTtcbiAgICB0aGlzLmNhcGFjaXR5ID0gc2l6ZSA/PyA1MDtcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbXM7XG4gICAgfVxuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRW5kcG9pbnRDYWNoZVwiKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIGVuZHBvaW50UGFyYW1zIC0gcXVlcnkgZm9yIGVuZHBvaW50LlxuICAgKiBAcGFyYW0gcmVzb2x2ZXIgLSBwcm92aWRlciBvZiB0aGUgdmFsdWUgaWYgbm90IHByZXNlbnQuXG4gICAqIEByZXR1cm5zIGVuZHBvaW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHF1ZXJ5LlxuICAgKi9cbiAgZ2V0KGVuZHBvaW50UGFyYW1zLCByZXNvbHZlcikge1xuICAgIGNvbnN0IGtleSA9IHRoaXMuaGFzaChlbmRwb2ludFBhcmFtcyk7XG4gICAgaWYgKGtleSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiByZXNvbHZlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZGF0YS5oYXMoa2V5KSkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5zaXplID4gdGhpcy5jYXBhY2l0eSArIDEwKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmRhdGEua2V5cygpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0ga2V5cy5uZXh0KCk7XG4gICAgICAgICAgdGhpcy5kYXRhLmRlbGV0ZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKGRvbmUgfHwgKytpID4gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5kYXRhLnNldChrZXksIHJlc29sdmVyKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kYXRhLmdldChrZXkpO1xuICB9XG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5zaXplO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyBjYWNoZSBrZXkgb3IgZmFsc2UgaWYgbm90IGNhY2hhYmxlLlxuICAgKi9cbiAgaGFzaChlbmRwb2ludFBhcmFtcykge1xuICAgIGxldCBidWZmZXIgPSBcIlwiO1xuICAgIGNvbnN0IHsgcGFyYW1ldGVycyB9ID0gdGhpcztcbiAgICBpZiAocGFyYW1ldGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBwYXJhbWV0ZXJzKSB7XG4gICAgICBjb25zdCB2YWwgPSBTdHJpbmcoZW5kcG9pbnRQYXJhbXNbcGFyYW1dID8/IFwiXCIpO1xuICAgICAgaWYgKHZhbC5pbmNsdWRlcyhcInw7XCIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJ1ZmZlciArPSB2YWwgKyBcInw7XCI7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG4gIH1cbn07XG5cbi8vIHNyYy9saWIvaXNJcEFkZHJlc3MudHNcbnZhciBJUF9WNF9SRUdFWCA9IG5ldyBSZWdFeHAoXG4gIGBeKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXFxcZHwxXFxcXGRcXFxcZHxbMS05XVxcXFxkfFxcXFxkKSl7M30kYFxuKTtcbnZhciBpc0lwQWRkcmVzcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiBJUF9WNF9SRUdFWC50ZXN0KHZhbHVlKSB8fCB2YWx1ZS5zdGFydHNXaXRoKFwiW1wiKSAmJiB2YWx1ZS5lbmRzV2l0aChcIl1cIiksIFwiaXNJcEFkZHJlc3NcIik7XG5cbi8vIHNyYy9saWIvaXNWYWxpZEhvc3RMYWJlbC50c1xudmFyIFZBTElEX0hPU1RfTEFCRUxfUkVHRVggPSBuZXcgUmVnRXhwKGBeKD8hLiotJCkoPyEtKVthLXpBLVowLTktXXsxLDYzfSRgKTtcbnZhciBpc1ZhbGlkSG9zdExhYmVsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUsIGFsbG93U3ViRG9tYWlucyA9IGZhbHNlKSA9PiB7XG4gIGlmICghYWxsb3dTdWJEb21haW5zKSB7XG4gICAgcmV0dXJuIFZBTElEX0hPU1RfTEFCRUxfUkVHRVgudGVzdCh2YWx1ZSk7XG4gIH1cbiAgY29uc3QgbGFiZWxzID0gdmFsdWUuc3BsaXQoXCIuXCIpO1xuICBmb3IgKGNvbnN0IGxhYmVsIG9mIGxhYmVscykge1xuICAgIGlmICghaXNWYWxpZEhvc3RMYWJlbChsYWJlbCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59LCBcImlzVmFsaWRIb3N0TGFiZWxcIik7XG5cbi8vIHNyYy91dGlscy9jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy50c1xudmFyIGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zID0ge307XG5cbi8vIHNyYy9kZWJ1Zy9kZWJ1Z0lkLnRzXG52YXIgZGVidWdJZCA9IFwiZW5kcG9pbnRzXCI7XG5cbi8vIHNyYy9kZWJ1Zy90b0RlYnVnU3RyaW5nLnRzXG5mdW5jdGlvbiB0b0RlYnVnU3RyaW5nKGlucHV0KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICBpZiAoXCJyZWZcIiBpbiBpbnB1dCkge1xuICAgIHJldHVybiBgJCR7dG9EZWJ1Z1N0cmluZyhpbnB1dC5yZWYpfWA7XG4gIH1cbiAgaWYgKFwiZm5cIiBpbiBpbnB1dCkge1xuICAgIHJldHVybiBgJHtpbnB1dC5mbn0oJHsoaW5wdXQuYXJndiB8fCBbXSkubWFwKHRvRGVidWdTdHJpbmcpLmpvaW4oXCIsIFwiKX0pYDtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaW5wdXQsIG51bGwsIDIpO1xufVxuX19uYW1lKHRvRGVidWdTdHJpbmcsIFwidG9EZWJ1Z1N0cmluZ1wiKTtcblxuLy8gc3JjL3R5cGVzL0VuZHBvaW50RXJyb3IudHNcbnZhciBFbmRwb2ludEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRW5kcG9pbnRFcnJvclwiKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJFbmRwb2ludEVycm9yXCI7XG4gIH1cbn07XG5cbi8vIHNyYy9saWIvYm9vbGVhbkVxdWFscy50c1xudmFyIGJvb2xlYW5FcXVhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZTEsIHZhbHVlMikgPT4gdmFsdWUxID09PSB2YWx1ZTIsIFwiYm9vbGVhbkVxdWFsc1wiKTtcblxuLy8gc3JjL2xpYi9nZXRBdHRyUGF0aExpc3QudHNcbnZhciBnZXRBdHRyUGF0aExpc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwYXRoKSA9PiB7XG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIGNvbnN0IHBhdGhMaXN0ID0gW107XG4gIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgIGNvbnN0IHNxdWFyZUJyYWNrZXRJbmRleCA9IHBhcnQuaW5kZXhPZihcIltcIik7XG4gICAgaWYgKHNxdWFyZUJyYWNrZXRJbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChwYXJ0LmluZGV4T2YoXCJdXCIpICE9PSBwYXJ0Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYFBhdGg6ICcke3BhdGh9JyBkb2VzIG5vdCBlbmQgd2l0aCAnXSdgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFycmF5SW5kZXggPSBwYXJ0LnNsaWNlKHNxdWFyZUJyYWNrZXRJbmRleCArIDEsIC0xKTtcbiAgICAgIGlmIChOdW1iZXIuaXNOYU4ocGFyc2VJbnQoYXJyYXlJbmRleCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBJbnZhbGlkIGFycmF5IGluZGV4OiAnJHthcnJheUluZGV4fScgaW4gcGF0aDogJyR7cGF0aH0nYCk7XG4gICAgICB9XG4gICAgICBpZiAoc3F1YXJlQnJhY2tldEluZGV4ICE9PSAwKSB7XG4gICAgICAgIHBhdGhMaXN0LnB1c2gocGFydC5zbGljZSgwLCBzcXVhcmVCcmFja2V0SW5kZXgpKTtcbiAgICAgIH1cbiAgICAgIHBhdGhMaXN0LnB1c2goYXJyYXlJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGhMaXN0LnB1c2gocGFydCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXRoTGlzdDtcbn0sIFwiZ2V0QXR0clBhdGhMaXN0XCIpO1xuXG4vLyBzcmMvbGliL2dldEF0dHIudHNcbnZhciBnZXRBdHRyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUsIHBhdGgpID0+IGdldEF0dHJQYXRoTGlzdChwYXRoKS5yZWR1Y2UoKGFjYywgaW5kZXgpID0+IHtcbiAgaWYgKHR5cGVvZiBhY2MgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgSW5kZXggJyR7aW5kZXh9JyBpbiAnJHtwYXRofScgbm90IGZvdW5kIGluICcke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0nYCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhY2MpKSB7XG4gICAgcmV0dXJuIGFjY1twYXJzZUludChpbmRleCldO1xuICB9XG4gIHJldHVybiBhY2NbaW5kZXhdO1xufSwgdmFsdWUpLCBcImdldEF0dHJcIik7XG5cbi8vIHNyYy9saWIvaXNTZXQudHNcbnZhciBpc1NldCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsLCBcImlzU2V0XCIpO1xuXG4vLyBzcmMvbGliL25vdC50c1xudmFyIG5vdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAhdmFsdWUsIFwibm90XCIpO1xuXG4vLyBzcmMvbGliL3BhcnNlVVJMLnRzXG52YXIgaW1wb3J0X3R5cGVzMyA9IHJlcXVpcmUoXCJAc21pdGh5L3R5cGVzXCIpO1xudmFyIERFRkFVTFRfUE9SVFMgPSB7XG4gIFtpbXBvcnRfdHlwZXMzLkVuZHBvaW50VVJMU2NoZW1lLkhUVFBdOiA4MCxcbiAgW2ltcG9ydF90eXBlczMuRW5kcG9pbnRVUkxTY2hlbWUuSFRUUFNdOiA0NDNcbn07XG52YXIgcGFyc2VVUkwgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBjb25zdCB3aGF0d2dVUkwgPSAoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBcImhvc3RuYW1lXCIgaW4gdmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyBob3N0bmFtZTogaG9zdG5hbWUyLCBwb3J0LCBwcm90b2NvbDogcHJvdG9jb2wyID0gXCJcIiwgcGF0aCA9IFwiXCIsIHF1ZXJ5ID0ge30gfSA9IHZhbHVlO1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke3Byb3RvY29sMn0vLyR7aG9zdG5hbWUyfSR7cG9ydCA/IGA6JHtwb3J0fWAgOiBcIlwifSR7cGF0aH1gKTtcbiAgICAgICAgdXJsLnNlYXJjaCA9IE9iamVjdC5lbnRyaWVzKHF1ZXJ5KS5tYXAoKFtrLCB2XSkgPT4gYCR7a309JHt2fWApLmpvaW4oXCImXCIpO1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBVUkwodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0pKCk7XG4gIGlmICghd2hhdHdnVVJMKSB7XG4gICAgY29uc29sZS5lcnJvcihgVW5hYmxlIHRvIHBhcnNlICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfSBhcyBhIHdoYXR3ZyBVUkwuYCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgdXJsU3RyaW5nID0gd2hhdHdnVVJMLmhyZWY7XG4gIGNvbnN0IHsgaG9zdCwgaG9zdG5hbWUsIHBhdGhuYW1lLCBwcm90b2NvbCwgc2VhcmNoIH0gPSB3aGF0d2dVUkw7XG4gIGlmIChzZWFyY2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBzY2hlbWUgPSBwcm90b2NvbC5zbGljZSgwLCAtMSk7XG4gIGlmICghT2JqZWN0LnZhbHVlcyhpbXBvcnRfdHlwZXMzLkVuZHBvaW50VVJMU2NoZW1lKS5pbmNsdWRlcyhzY2hlbWUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgaXNJcCA9IGlzSXBBZGRyZXNzKGhvc3RuYW1lKTtcbiAgY29uc3QgaW5wdXRDb250YWluc0RlZmF1bHRQb3J0ID0gdXJsU3RyaW5nLmluY2x1ZGVzKGAke2hvc3R9OiR7REVGQVVMVF9QT1JUU1tzY2hlbWVdfWApIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5pbmNsdWRlcyhgJHtob3N0fToke0RFRkFVTFRfUE9SVFNbc2NoZW1lXX1gKTtcbiAgY29uc3QgYXV0aG9yaXR5ID0gYCR7aG9zdH0ke2lucHV0Q29udGFpbnNEZWZhdWx0UG9ydCA/IGA6JHtERUZBVUxUX1BPUlRTW3NjaGVtZV19YCA6IGBgfWA7XG4gIHJldHVybiB7XG4gICAgc2NoZW1lLFxuICAgIGF1dGhvcml0eSxcbiAgICBwYXRoOiBwYXRobmFtZSxcbiAgICBub3JtYWxpemVkUGF0aDogcGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpID8gcGF0aG5hbWUgOiBgJHtwYXRobmFtZX0vYCxcbiAgICBpc0lwXG4gIH07XG59LCBcInBhcnNlVVJMXCIpO1xuXG4vLyBzcmMvbGliL3N0cmluZ0VxdWFscy50c1xudmFyIHN0cmluZ0VxdWFscyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlMSwgdmFsdWUyKSA9PiB2YWx1ZTEgPT09IHZhbHVlMiwgXCJzdHJpbmdFcXVhbHNcIik7XG5cbi8vIHNyYy9saWIvc3Vic3RyaW5nLnRzXG52YXIgc3Vic3RyaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIHN0YXJ0LCBzdG9wLCByZXZlcnNlKSA9PiB7XG4gIGlmIChzdGFydCA+PSBzdG9wIHx8IGlucHV0Lmxlbmd0aCA8IHN0b3ApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIXJldmVyc2UpIHtcbiAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCBzdG9wKTtcbiAgfVxuICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKGlucHV0Lmxlbmd0aCAtIHN0b3AsIGlucHV0Lmxlbmd0aCAtIHN0YXJ0KTtcbn0sIFwic3Vic3RyaW5nXCIpO1xuXG4vLyBzcmMvbGliL3VyaUVuY29kZS50c1xudmFyIHVyaUVuY29kZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoL1shKicoKV0vZywgKGMpID0+IGAlJHtjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YCksIFwidXJpRW5jb2RlXCIpO1xuXG4vLyBzcmMvdXRpbHMvZW5kcG9pbnRGdW5jdGlvbnMudHNcbnZhciBlbmRwb2ludEZ1bmN0aW9ucyA9IHtcbiAgYm9vbGVhbkVxdWFscyxcbiAgZ2V0QXR0cixcbiAgaXNTZXQsXG4gIGlzVmFsaWRIb3N0TGFiZWwsXG4gIG5vdCxcbiAgcGFyc2VVUkwsXG4gIHN0cmluZ0VxdWFscyxcbiAgc3Vic3RyaW5nLFxuICB1cmlFbmNvZGVcbn07XG5cbi8vIHNyYy91dGlscy9ldmFsdWF0ZVRlbXBsYXRlLnRzXG52YXIgZXZhbHVhdGVUZW1wbGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRlbXBsYXRlLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGV2YWx1YXRlZFRlbXBsYXRlQXJyID0gW107XG4gIGNvbnN0IHRlbXBsYXRlQ29udGV4dCA9IHtcbiAgICAuLi5vcHRpb25zLmVuZHBvaW50UGFyYW1zLFxuICAgIC4uLm9wdGlvbnMucmVmZXJlbmNlUmVjb3JkXG4gIH07XG4gIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICB3aGlsZSAoY3VycmVudEluZGV4IDwgdGVtcGxhdGUubGVuZ3RoKSB7XG4gICAgY29uc3Qgb3BlbmluZ0JyYWNlSW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKFwie1wiLCBjdXJyZW50SW5kZXgpO1xuICAgIGlmIChvcGVuaW5nQnJhY2VJbmRleCA9PT0gLTEpIHtcbiAgICAgIGV2YWx1YXRlZFRlbXBsYXRlQXJyLnB1c2godGVtcGxhdGUuc2xpY2UoY3VycmVudEluZGV4KSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaCh0ZW1wbGF0ZS5zbGljZShjdXJyZW50SW5kZXgsIG9wZW5pbmdCcmFjZUluZGV4KSk7XG4gICAgY29uc3QgY2xvc2luZ0JyYWNlSW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKFwifVwiLCBvcGVuaW5nQnJhY2VJbmRleCk7XG4gICAgaWYgKGNsb3NpbmdCcmFjZUluZGV4ID09PSAtMSkge1xuICAgICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaCh0ZW1wbGF0ZS5zbGljZShvcGVuaW5nQnJhY2VJbmRleCkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZVtvcGVuaW5nQnJhY2VJbmRleCArIDFdID09PSBcIntcIiAmJiB0ZW1wbGF0ZVtjbG9zaW5nQnJhY2VJbmRleCArIDFdID09PSBcIn1cIikge1xuICAgICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaCh0ZW1wbGF0ZS5zbGljZShvcGVuaW5nQnJhY2VJbmRleCArIDEsIGNsb3NpbmdCcmFjZUluZGV4KSk7XG4gICAgICBjdXJyZW50SW5kZXggPSBjbG9zaW5nQnJhY2VJbmRleCArIDI7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtZXRlck5hbWUgPSB0ZW1wbGF0ZS5zdWJzdHJpbmcob3BlbmluZ0JyYWNlSW5kZXggKyAxLCBjbG9zaW5nQnJhY2VJbmRleCk7XG4gICAgaWYgKHBhcmFtZXRlck5hbWUuaW5jbHVkZXMoXCIjXCIpKSB7XG4gICAgICBjb25zdCBbcmVmTmFtZSwgYXR0ck5hbWVdID0gcGFyYW1ldGVyTmFtZS5zcGxpdChcIiNcIik7XG4gICAgICBldmFsdWF0ZWRUZW1wbGF0ZUFyci5wdXNoKGdldEF0dHIodGVtcGxhdGVDb250ZXh0W3JlZk5hbWVdLCBhdHRyTmFtZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmFsdWF0ZWRUZW1wbGF0ZUFyci5wdXNoKHRlbXBsYXRlQ29udGV4dFtwYXJhbWV0ZXJOYW1lXSk7XG4gICAgfVxuICAgIGN1cnJlbnRJbmRleCA9IGNsb3NpbmdCcmFjZUluZGV4ICsgMTtcbiAgfVxuICByZXR1cm4gZXZhbHVhdGVkVGVtcGxhdGVBcnIuam9pbihcIlwiKTtcbn0sIFwiZXZhbHVhdGVUZW1wbGF0ZVwiKTtcblxuLy8gc3JjL3V0aWxzL2dldFJlZmVyZW5jZVZhbHVlLnRzXG52YXIgZ2V0UmVmZXJlbmNlVmFsdWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh7IHJlZiB9LCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHJlZmVyZW5jZVJlY29yZCA9IHtcbiAgICAuLi5vcHRpb25zLmVuZHBvaW50UGFyYW1zLFxuICAgIC4uLm9wdGlvbnMucmVmZXJlbmNlUmVjb3JkXG4gIH07XG4gIHJldHVybiByZWZlcmVuY2VSZWNvcmRbcmVmXTtcbn0sIFwiZ2V0UmVmZXJlbmNlVmFsdWVcIik7XG5cbi8vIHNyYy91dGlscy9ldmFsdWF0ZUV4cHJlc3Npb24udHNcbnZhciBldmFsdWF0ZUV4cHJlc3Npb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmosIGtleU5hbWUsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZXZhbHVhdGVUZW1wbGF0ZShvYmosIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKG9ialtcImZuXCJdKSB7XG4gICAgcmV0dXJuIGNhbGxGdW5jdGlvbihvYmosIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKG9ialtcInJlZlwiXSkge1xuICAgIHJldHVybiBnZXRSZWZlcmVuY2VWYWx1ZShvYmosIG9wdGlvbnMpO1xuICB9XG4gIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGAnJHtrZXlOYW1lfSc6ICR7U3RyaW5nKG9iail9IGlzIG5vdCBhIHN0cmluZywgZnVuY3Rpb24gb3IgcmVmZXJlbmNlLmApO1xufSwgXCJldmFsdWF0ZUV4cHJlc3Npb25cIik7XG5cbi8vIHNyYy91dGlscy9jYWxsRnVuY3Rpb24udHNcbnZhciBjYWxsRnVuY3Rpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh7IGZuLCBhcmd2IH0sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZXZhbHVhdGVkQXJncyA9IGFyZ3YubWFwKFxuICAgIChhcmcpID0+IFtcImJvb2xlYW5cIiwgXCJudW1iZXJcIl0uaW5jbHVkZXModHlwZW9mIGFyZykgPyBhcmcgOiBldmFsdWF0ZUV4cHJlc3Npb24oYXJnLCBcImFyZ1wiLCBvcHRpb25zKVxuICApO1xuICBjb25zdCBmblNlZ21lbnRzID0gZm4uc3BsaXQoXCIuXCIpO1xuICBpZiAoZm5TZWdtZW50c1swXSBpbiBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyAmJiBmblNlZ21lbnRzWzFdICE9IG51bGwpIHtcbiAgICByZXR1cm4gY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnNbZm5TZWdtZW50c1swXV1bZm5TZWdtZW50c1sxXV0oLi4uZXZhbHVhdGVkQXJncyk7XG4gIH1cbiAgcmV0dXJuIGVuZHBvaW50RnVuY3Rpb25zW2ZuXSguLi5ldmFsdWF0ZWRBcmdzKTtcbn0sIFwiY2FsbEZ1bmN0aW9uXCIpO1xuXG4vLyBzcmMvdXRpbHMvZXZhbHVhdGVDb25kaXRpb24udHNcbnZhciBldmFsdWF0ZUNvbmRpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHsgYXNzaWduLCAuLi5mbkFyZ3MgfSwgb3B0aW9ucykgPT4ge1xuICBpZiAoYXNzaWduICYmIGFzc2lnbiBpbiBvcHRpb25zLnJlZmVyZW5jZVJlY29yZCkge1xuICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGAnJHthc3NpZ259JyBpcyBhbHJlYWR5IGRlZmluZWQgaW4gUmVmZXJlbmNlIFJlY29yZC5gKTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IGNhbGxGdW5jdGlvbihmbkFyZ3MsIG9wdGlvbnMpO1xuICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihgJHtkZWJ1Z0lkfSBldmFsdWF0ZUNvbmRpdGlvbjogJHt0b0RlYnVnU3RyaW5nKGZuQXJncyl9ID0gJHt0b0RlYnVnU3RyaW5nKHZhbHVlKX1gKTtcbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IHZhbHVlID09PSBcIlwiID8gdHJ1ZSA6ICEhdmFsdWUsXG4gICAgLi4uYXNzaWduICE9IG51bGwgJiYgeyB0b0Fzc2lnbjogeyBuYW1lOiBhc3NpZ24sIHZhbHVlIH0gfVxuICB9O1xufSwgXCJldmFsdWF0ZUNvbmRpdGlvblwiKTtcblxuLy8gc3JjL3V0aWxzL2V2YWx1YXRlQ29uZGl0aW9ucy50c1xudmFyIGV2YWx1YXRlQ29uZGl0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbmRpdGlvbnMgPSBbXSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBjb25kaXRpb25zUmVmZXJlbmNlUmVjb3JkID0ge307XG4gIGZvciAoY29uc3QgY29uZGl0aW9uIG9mIGNvbmRpdGlvbnMpIHtcbiAgICBjb25zdCB7IHJlc3VsdCwgdG9Bc3NpZ24gfSA9IGV2YWx1YXRlQ29uZGl0aW9uKGNvbmRpdGlvbiwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHJlZmVyZW5jZVJlY29yZDoge1xuICAgICAgICAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCxcbiAgICAgICAgLi4uY29uZGl0aW9uc1JlZmVyZW5jZVJlY29yZFxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4geyByZXN1bHQgfTtcbiAgICB9XG4gICAgaWYgKHRvQXNzaWduKSB7XG4gICAgICBjb25kaXRpb25zUmVmZXJlbmNlUmVjb3JkW3RvQXNzaWduLm5hbWVdID0gdG9Bc3NpZ24udmFsdWU7XG4gICAgICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihgJHtkZWJ1Z0lkfSBhc3NpZ246ICR7dG9Bc3NpZ24ubmFtZX0gOj0gJHt0b0RlYnVnU3RyaW5nKHRvQXNzaWduLnZhbHVlKX1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWZlcmVuY2VSZWNvcmQ6IGNvbmRpdGlvbnNSZWZlcmVuY2VSZWNvcmQgfTtcbn0sIFwiZXZhbHVhdGVDb25kaXRpb25zXCIpO1xuXG4vLyBzcmMvdXRpbHMvZ2V0RW5kcG9pbnRIZWFkZXJzLnRzXG52YXIgZ2V0RW5kcG9pbnRIZWFkZXJzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaGVhZGVycywgb3B0aW9ucykgPT4gT2JqZWN0LmVudHJpZXMoaGVhZGVycykucmVkdWNlKFxuICAoYWNjLCBbaGVhZGVyS2V5LCBoZWFkZXJWYWxdKSA9PiAoe1xuICAgIC4uLmFjYyxcbiAgICBbaGVhZGVyS2V5XTogaGVhZGVyVmFsLm1hcCgoaGVhZGVyVmFsRW50cnkpID0+IHtcbiAgICAgIGNvbnN0IHByb2Nlc3NlZEV4cHIgPSBldmFsdWF0ZUV4cHJlc3Npb24oaGVhZGVyVmFsRW50cnksIFwiSGVhZGVyIHZhbHVlIGVudHJ5XCIsIG9wdGlvbnMpO1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzZWRFeHByICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBIZWFkZXIgJyR7aGVhZGVyS2V5fScgdmFsdWUgJyR7cHJvY2Vzc2VkRXhwcn0nIGlzIG5vdCBhIHN0cmluZ2ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2Nlc3NlZEV4cHI7XG4gICAgfSlcbiAgfSksXG4gIHt9XG4pLCBcImdldEVuZHBvaW50SGVhZGVyc1wiKTtcblxuLy8gc3JjL3V0aWxzL2dldEVuZHBvaW50UHJvcGVydHkudHNcbnZhciBnZXRFbmRwb2ludFByb3BlcnR5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocHJvcGVydHksIG9wdGlvbnMpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHkpKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5Lm1hcCgocHJvcGVydHlFbnRyeSkgPT4gZ2V0RW5kcG9pbnRQcm9wZXJ0eShwcm9wZXJ0eUVudHJ5LCBvcHRpb25zKSk7XG4gIH1cbiAgc3dpdGNoICh0eXBlb2YgcHJvcGVydHkpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gZXZhbHVhdGVUZW1wbGF0ZShwcm9wZXJ0eSwgb3B0aW9ucyk7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgaWYgKHByb3BlcnR5ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBVbmV4cGVjdGVkIGVuZHBvaW50IHByb3BlcnR5OiAke3Byb3BlcnR5fWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdldEVuZHBvaW50UHJvcGVydGllcyhwcm9wZXJ0eSwgb3B0aW9ucyk7XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYFVuZXhwZWN0ZWQgZW5kcG9pbnQgcHJvcGVydHkgdHlwZTogJHt0eXBlb2YgcHJvcGVydHl9YCk7XG4gIH1cbn0sIFwiZ2V0RW5kcG9pbnRQcm9wZXJ0eVwiKTtcblxuLy8gc3JjL3V0aWxzL2dldEVuZHBvaW50UHJvcGVydGllcy50c1xudmFyIGdldEVuZHBvaW50UHJvcGVydGllcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHByb3BlcnRpZXMsIG9wdGlvbnMpID0+IE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpLnJlZHVjZShcbiAgKGFjYywgW3Byb3BlcnR5S2V5LCBwcm9wZXJ0eVZhbF0pID0+ICh7XG4gICAgLi4uYWNjLFxuICAgIFtwcm9wZXJ0eUtleV06IGdldEVuZHBvaW50UHJvcGVydHkocHJvcGVydHlWYWwsIG9wdGlvbnMpXG4gIH0pLFxuICB7fVxuKSwgXCJnZXRFbmRwb2ludFByb3BlcnRpZXNcIik7XG5cbi8vIHNyYy91dGlscy9nZXRFbmRwb2ludFVybC50c1xudmFyIGdldEVuZHBvaW50VXJsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZW5kcG9pbnRVcmwsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZXhwcmVzc2lvbiA9IGV2YWx1YXRlRXhwcmVzc2lvbihlbmRwb2ludFVybCwgXCJFbmRwb2ludCBVUkxcIiwgb3B0aW9ucyk7XG4gIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChleHByZXNzaW9uKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNvbnN0cnVjdCBVUkwgd2l0aCAke2V4cHJlc3Npb259YCwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBFbmRwb2ludCBVUkwgbXVzdCBiZSBhIHN0cmluZywgZ290ICR7dHlwZW9mIGV4cHJlc3Npb259YCk7XG59LCBcImdldEVuZHBvaW50VXJsXCIpO1xuXG4vLyBzcmMvdXRpbHMvZXZhbHVhdGVFbmRwb2ludFJ1bGUudHNcbnZhciBldmFsdWF0ZUVuZHBvaW50UnVsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVuZHBvaW50UnVsZSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB7IGNvbmRpdGlvbnMsIGVuZHBvaW50IH0gPSBlbmRwb2ludFJ1bGU7XG4gIGNvbnN0IHsgcmVzdWx0LCByZWZlcmVuY2VSZWNvcmQgfSA9IGV2YWx1YXRlQ29uZGl0aW9ucyhjb25kaXRpb25zLCBvcHRpb25zKTtcbiAgaWYgKCFyZXN1bHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZW5kcG9pbnRSdWxlT3B0aW9ucyA9IHtcbiAgICAuLi5vcHRpb25zLFxuICAgIHJlZmVyZW5jZVJlY29yZDogeyAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCwgLi4ucmVmZXJlbmNlUmVjb3JkIH1cbiAgfTtcbiAgY29uc3QgeyB1cmwsIHByb3BlcnRpZXMsIGhlYWRlcnMgfSA9IGVuZHBvaW50O1xuICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihgJHtkZWJ1Z0lkfSBSZXNvbHZpbmcgZW5kcG9pbnQgZnJvbSB0ZW1wbGF0ZTogJHt0b0RlYnVnU3RyaW5nKGVuZHBvaW50KX1gKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5oZWFkZXJzICE9IHZvaWQgMCAmJiB7XG4gICAgICBoZWFkZXJzOiBnZXRFbmRwb2ludEhlYWRlcnMoaGVhZGVycywgZW5kcG9pbnRSdWxlT3B0aW9ucylcbiAgICB9LFxuICAgIC4uLnByb3BlcnRpZXMgIT0gdm9pZCAwICYmIHtcbiAgICAgIHByb3BlcnRpZXM6IGdldEVuZHBvaW50UHJvcGVydGllcyhwcm9wZXJ0aWVzLCBlbmRwb2ludFJ1bGVPcHRpb25zKVxuICAgIH0sXG4gICAgdXJsOiBnZXRFbmRwb2ludFVybCh1cmwsIGVuZHBvaW50UnVsZU9wdGlvbnMpXG4gIH07XG59LCBcImV2YWx1YXRlRW5kcG9pbnRSdWxlXCIpO1xuXG4vLyBzcmMvdXRpbHMvZXZhbHVhdGVFcnJvclJ1bGUudHNcbnZhciBldmFsdWF0ZUVycm9yUnVsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVycm9yUnVsZSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB7IGNvbmRpdGlvbnMsIGVycm9yIH0gPSBlcnJvclJ1bGU7XG4gIGNvbnN0IHsgcmVzdWx0LCByZWZlcmVuY2VSZWNvcmQgfSA9IGV2YWx1YXRlQ29uZGl0aW9ucyhjb25kaXRpb25zLCBvcHRpb25zKTtcbiAgaWYgKCFyZXN1bHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoXG4gICAgZXZhbHVhdGVFeHByZXNzaW9uKGVycm9yLCBcIkVycm9yXCIsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICByZWZlcmVuY2VSZWNvcmQ6IHsgLi4ub3B0aW9ucy5yZWZlcmVuY2VSZWNvcmQsIC4uLnJlZmVyZW5jZVJlY29yZCB9XG4gICAgfSlcbiAgKTtcbn0sIFwiZXZhbHVhdGVFcnJvclJ1bGVcIik7XG5cbi8vIHNyYy91dGlscy9ldmFsdWF0ZVRyZWVSdWxlLnRzXG52YXIgZXZhbHVhdGVUcmVlUnVsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRyZWVSdWxlLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgY29uZGl0aW9ucywgcnVsZXMgfSA9IHRyZWVSdWxlO1xuICBjb25zdCB7IHJlc3VsdCwgcmVmZXJlbmNlUmVjb3JkIH0gPSBldmFsdWF0ZUNvbmRpdGlvbnMoY29uZGl0aW9ucywgb3B0aW9ucyk7XG4gIGlmICghcmVzdWx0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBldmFsdWF0ZVJ1bGVzKHJ1bGVzLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICByZWZlcmVuY2VSZWNvcmQ6IHsgLi4ub3B0aW9ucy5yZWZlcmVuY2VSZWNvcmQsIC4uLnJlZmVyZW5jZVJlY29yZCB9XG4gIH0pO1xufSwgXCJldmFsdWF0ZVRyZWVSdWxlXCIpO1xuXG4vLyBzcmMvdXRpbHMvZXZhbHVhdGVSdWxlcy50c1xudmFyIGV2YWx1YXRlUnVsZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChydWxlcywgb3B0aW9ucykgPT4ge1xuICBmb3IgKGNvbnN0IHJ1bGUgb2YgcnVsZXMpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSBcImVuZHBvaW50XCIpIHtcbiAgICAgIGNvbnN0IGVuZHBvaW50T3JVbmRlZmluZWQgPSBldmFsdWF0ZUVuZHBvaW50UnVsZShydWxlLCBvcHRpb25zKTtcbiAgICAgIGlmIChlbmRwb2ludE9yVW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlbmRwb2ludE9yVW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocnVsZS50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgIGV2YWx1YXRlRXJyb3JSdWxlKHJ1bGUsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAocnVsZS50eXBlID09PSBcInRyZWVcIikge1xuICAgICAgY29uc3QgZW5kcG9pbnRPclVuZGVmaW5lZCA9IGV2YWx1YXRlVHJlZVJ1bGUocnVsZSwgb3B0aW9ucyk7XG4gICAgICBpZiAoZW5kcG9pbnRPclVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZW5kcG9pbnRPclVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYFVua25vd24gZW5kcG9pbnQgcnVsZTogJHtydWxlfWApO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgUnVsZXMgZXZhbHVhdGlvbiBmYWlsZWRgKTtcbn0sIFwiZXZhbHVhdGVSdWxlc1wiKTtcblxuLy8gc3JjL3Jlc29sdmVFbmRwb2ludC50c1xudmFyIHJlc29sdmVFbmRwb2ludCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHJ1bGVTZXRPYmplY3QsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyBlbmRwb2ludFBhcmFtcywgbG9nZ2VyIH0gPSBvcHRpb25zO1xuICBjb25zdCB7IHBhcmFtZXRlcnMsIHJ1bGVzIH0gPSBydWxlU2V0T2JqZWN0O1xuICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihgJHtkZWJ1Z0lkfSBJbml0aWFsIEVuZHBvaW50UGFyYW1zOiAke3RvRGVidWdTdHJpbmcoZW5kcG9pbnRQYXJhbXMpfWApO1xuICBjb25zdCBwYXJhbXNXaXRoRGVmYXVsdCA9IE9iamVjdC5lbnRyaWVzKHBhcmFtZXRlcnMpLmZpbHRlcigoWywgdl0pID0+IHYuZGVmYXVsdCAhPSBudWxsKS5tYXAoKFtrLCB2XSkgPT4gW2ssIHYuZGVmYXVsdF0pO1xuICBpZiAocGFyYW1zV2l0aERlZmF1bHQubGVuZ3RoID4gMCkge1xuICAgIGZvciAoY29uc3QgW3BhcmFtS2V5LCBwYXJhbURlZmF1bHRWYWx1ZV0gb2YgcGFyYW1zV2l0aERlZmF1bHQpIHtcbiAgICAgIGVuZHBvaW50UGFyYW1zW3BhcmFtS2V5XSA9IGVuZHBvaW50UGFyYW1zW3BhcmFtS2V5XSA/PyBwYXJhbURlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVxdWlyZWRQYXJhbXMgPSBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKS5maWx0ZXIoKFssIHZdKSA9PiB2LnJlcXVpcmVkKS5tYXAoKFtrXSkgPT4gayk7XG4gIGZvciAoY29uc3QgcmVxdWlyZWRQYXJhbSBvZiByZXF1aXJlZFBhcmFtcykge1xuICAgIGlmIChlbmRwb2ludFBhcmFtc1tyZXF1aXJlZFBhcmFtXSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6ICcke3JlcXVpcmVkUGFyYW19J2ApO1xuICAgIH1cbiAgfVxuICBjb25zdCBlbmRwb2ludCA9IGV2YWx1YXRlUnVsZXMocnVsZXMsIHsgZW5kcG9pbnRQYXJhbXMsIGxvZ2dlciwgcmVmZXJlbmNlUmVjb3JkOiB7fSB9KTtcbiAgb3B0aW9ucy5sb2dnZXI/LmRlYnVnPy4oYCR7ZGVidWdJZH0gUmVzb2x2ZWQgZW5kcG9pbnQ6ICR7dG9EZWJ1Z1N0cmluZyhlbmRwb2ludCl9YCk7XG4gIHJldHVybiBlbmRwb2ludDtcbn0sIFwicmVzb2x2ZUVuZHBvaW50XCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRW5kcG9pbnRDYWNoZSxcbiAgaXNJcEFkZHJlc3MsXG4gIGlzVmFsaWRIb3N0TGFiZWwsXG4gIGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLFxuICByZXNvbHZlRW5kcG9pbnQsXG4gIEVuZHBvaW50RXJyb3Jcbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIENvbmRpdGlvbk9iamVjdDogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkNvbmRpdGlvbk9iamVjdCxcbiAgRGVwcmVjYXRlZE9iamVjdDogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkRlcHJlY2F0ZWRPYmplY3QsXG4gIEVuZHBvaW50RXJyb3I6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5FbmRwb2ludEVycm9yLFxuICBFbmRwb2ludE9iamVjdDogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkVuZHBvaW50T2JqZWN0LFxuICBFbmRwb2ludE9iamVjdEhlYWRlcnM6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5FbmRwb2ludE9iamVjdEhlYWRlcnMsXG4gIEVuZHBvaW50T2JqZWN0UHJvcGVydGllczogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkVuZHBvaW50T2JqZWN0UHJvcGVydGllcyxcbiAgRW5kcG9pbnRQYXJhbXM6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5FbmRwb2ludFBhcmFtcyxcbiAgRW5kcG9pbnRSZXNvbHZlck9wdGlvbnM6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5FbmRwb2ludFJlc29sdmVyT3B0aW9ucyxcbiAgRW5kcG9pbnRSdWxlT2JqZWN0OiAoKSA9PiBpbXBvcnRfdXRpbF9lbmRwb2ludHMuRW5kcG9pbnRSdWxlT2JqZWN0LFxuICBFcnJvclJ1bGVPYmplY3Q6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5FcnJvclJ1bGVPYmplY3QsXG4gIEV2YWx1YXRlT3B0aW9uczogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkV2YWx1YXRlT3B0aW9ucyxcbiAgRXhwcmVzc2lvbjogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkV4cHJlc3Npb24sXG4gIEZ1bmN0aW9uQXJndjogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLkZ1bmN0aW9uQXJndixcbiAgRnVuY3Rpb25PYmplY3Q6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5GdW5jdGlvbk9iamVjdCxcbiAgRnVuY3Rpb25SZXR1cm46ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5GdW5jdGlvblJldHVybixcbiAgUGFyYW1ldGVyT2JqZWN0OiAoKSA9PiBpbXBvcnRfdXRpbF9lbmRwb2ludHMuUGFyYW1ldGVyT2JqZWN0LFxuICBSZWZlcmVuY2VPYmplY3Q6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5SZWZlcmVuY2VPYmplY3QsXG4gIFJlZmVyZW5jZVJlY29yZDogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLlJlZmVyZW5jZVJlY29yZCxcbiAgUnVsZVNldE9iamVjdDogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLlJ1bGVTZXRPYmplY3QsXG4gIFJ1bGVTZXRSdWxlczogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLlJ1bGVTZXRSdWxlcyxcbiAgVHJlZVJ1bGVPYmplY3Q6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5UcmVlUnVsZU9iamVjdCxcbiAgYXdzRW5kcG9pbnRGdW5jdGlvbnM6ICgpID0+IGF3c0VuZHBvaW50RnVuY3Rpb25zLFxuICBnZXRVc2VyQWdlbnRQcmVmaXg6ICgpID0+IGdldFVzZXJBZ2VudFByZWZpeCxcbiAgaXNJcEFkZHJlc3M6ICgpID0+IGltcG9ydF91dGlsX2VuZHBvaW50cy5pc0lwQWRkcmVzcyxcbiAgcGFydGl0aW9uOiAoKSA9PiBwYXJ0aXRpb24sXG4gIHJlc29sdmVFbmRwb2ludDogKCkgPT4gaW1wb3J0X3V0aWxfZW5kcG9pbnRzLnJlc29sdmVFbmRwb2ludCxcbiAgc2V0UGFydGl0aW9uSW5mbzogKCkgPT4gc2V0UGFydGl0aW9uSW5mbyxcbiAgdXNlRGVmYXVsdFBhcnRpdGlvbkluZm86ICgpID0+IHVzZURlZmF1bHRQYXJ0aXRpb25JbmZvXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvYXdzLnRzXG5cblxuLy8gc3JjL2xpYi9hd3MvaXNWaXJ0dWFsSG9zdGFibGVTM0J1Y2tldC50c1xuXG5cbi8vIHNyYy9saWIvaXNJcEFkZHJlc3MudHNcbnZhciBpbXBvcnRfdXRpbF9lbmRwb2ludHMgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWVuZHBvaW50c1wiKTtcblxuLy8gc3JjL2xpYi9hd3MvaXNWaXJ0dWFsSG9zdGFibGVTM0J1Y2tldC50c1xudmFyIGlzVmlydHVhbEhvc3RhYmxlUzNCdWNrZXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSwgYWxsb3dTdWJEb21haW5zID0gZmFsc2UpID0+IHtcbiAgaWYgKGFsbG93U3ViRG9tYWlucykge1xuICAgIGZvciAoY29uc3QgbGFiZWwgb2YgdmFsdWUuc3BsaXQoXCIuXCIpKSB7XG4gICAgICBpZiAoIWlzVmlydHVhbEhvc3RhYmxlUzNCdWNrZXQobGFiZWwpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCEoMCwgaW1wb3J0X3V0aWxfZW5kcG9pbnRzLmlzVmFsaWRIb3N0TGFiZWwpKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodmFsdWUubGVuZ3RoIDwgMyB8fCB2YWx1ZS5sZW5ndGggPiA2Mykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodmFsdWUgIT09IHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCgwLCBpbXBvcnRfdXRpbF9lbmRwb2ludHMuaXNJcEFkZHJlc3MpKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0sIFwiaXNWaXJ0dWFsSG9zdGFibGVTM0J1Y2tldFwiKTtcblxuLy8gc3JjL2xpYi9hd3MvcGFyc2VBcm4udHNcbnZhciBBUk5fREVMSU1JVEVSID0gXCI6XCI7XG52YXIgUkVTT1VSQ0VfREVMSU1JVEVSID0gXCIvXCI7XG52YXIgcGFyc2VBcm4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBjb25zdCBzZWdtZW50cyA9IHZhbHVlLnNwbGl0KEFSTl9ERUxJTUlURVIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoIDwgNikgcmV0dXJuIG51bGw7XG4gIGNvbnN0IFthcm4sIHBhcnRpdGlvbjIsIHNlcnZpY2UsIHJlZ2lvbiwgYWNjb3VudElkLCAuLi5yZXNvdXJjZVBhdGhdID0gc2VnbWVudHM7XG4gIGlmIChhcm4gIT09IFwiYXJuXCIgfHwgcGFydGl0aW9uMiA9PT0gXCJcIiB8fCBzZXJ2aWNlID09PSBcIlwiIHx8IHJlc291cmNlUGF0aC5qb2luKEFSTl9ERUxJTUlURVIpID09PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgcmVzb3VyY2VJZCA9IHJlc291cmNlUGF0aC5tYXAoKHJlc291cmNlKSA9PiByZXNvdXJjZS5zcGxpdChSRVNPVVJDRV9ERUxJTUlURVIpKS5mbGF0KCk7XG4gIHJldHVybiB7XG4gICAgcGFydGl0aW9uOiBwYXJ0aXRpb24yLFxuICAgIHNlcnZpY2UsXG4gICAgcmVnaW9uLFxuICAgIGFjY291bnRJZCxcbiAgICByZXNvdXJjZUlkXG4gIH07XG59LCBcInBhcnNlQXJuXCIpO1xuXG4vLyBzcmMvbGliL2F3cy9wYXJ0aXRpb25zLmpzb25cbnZhciBwYXJ0aXRpb25zX2RlZmF1bHQgPSB7XG4gIHBhcnRpdGlvbnM6IFt7XG4gICAgaWQ6IFwiYXdzXCIsXG4gICAgb3V0cHV0czoge1xuICAgICAgZG5zU3VmZml4OiBcImFtYXpvbmF3cy5jb21cIixcbiAgICAgIGR1YWxTdGFja0Ruc1N1ZmZpeDogXCJhcGkuYXdzXCIsXG4gICAgICBpbXBsaWNpdEdsb2JhbFJlZ2lvbjogXCJ1cy1lYXN0LTFcIixcbiAgICAgIG5hbWU6IFwiYXdzXCIsXG4gICAgICBzdXBwb3J0c0R1YWxTdGFjazogdHJ1ZSxcbiAgICAgIHN1cHBvcnRzRklQUzogdHJ1ZVxuICAgIH0sXG4gICAgcmVnaW9uUmVnZXg6IFwiXih1c3xldXxhcHxzYXxjYXxtZXxhZnxpbHxteClcXFxcLVxcXFx3K1xcXFwtXFxcXGQrJFwiLFxuICAgIHJlZ2lvbnM6IHtcbiAgICAgIFwiYWYtc291dGgtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFmcmljYSAoQ2FwZSBUb3duKVwiXG4gICAgICB9LFxuICAgICAgXCJhcC1lYXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBc2lhIFBhY2lmaWMgKEhvbmcgS29uZylcIlxuICAgICAgfSxcbiAgICAgIFwiYXAtbm9ydGhlYXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBc2lhIFBhY2lmaWMgKFRva3lvKVwiXG4gICAgICB9LFxuICAgICAgXCJhcC1ub3J0aGVhc3QtMlwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFzaWEgUGFjaWZpYyAoU2VvdWwpXCJcbiAgICAgIH0sXG4gICAgICBcImFwLW5vcnRoZWFzdC0zXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXNpYSBQYWNpZmljIChPc2FrYSlcIlxuICAgICAgfSxcbiAgICAgIFwiYXAtc291dGgtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFzaWEgUGFjaWZpYyAoTXVtYmFpKVwiXG4gICAgICB9LFxuICAgICAgXCJhcC1zb3V0aC0yXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXNpYSBQYWNpZmljIChIeWRlcmFiYWQpXCJcbiAgICAgIH0sXG4gICAgICBcImFwLXNvdXRoZWFzdC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXNpYSBQYWNpZmljIChTaW5nYXBvcmUpXCJcbiAgICAgIH0sXG4gICAgICBcImFwLXNvdXRoZWFzdC0yXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXNpYSBQYWNpZmljIChTeWRuZXkpXCJcbiAgICAgIH0sXG4gICAgICBcImFwLXNvdXRoZWFzdC0zXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXNpYSBQYWNpZmljIChKYWthcnRhKVwiXG4gICAgICB9LFxuICAgICAgXCJhcC1zb3V0aGVhc3QtNFwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFzaWEgUGFjaWZpYyAoTWVsYm91cm5lKVwiXG4gICAgICB9LFxuICAgICAgXCJhcC1zb3V0aGVhc3QtNVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFzaWEgUGFjaWZpYyAoTWFsYXlzaWEpXCJcbiAgICAgIH0sXG4gICAgICBcImFwLXNvdXRoZWFzdC03XCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXNpYSBQYWNpZmljIChUaGFpbGFuZClcIlxuICAgICAgfSxcbiAgICAgIFwiYXdzLWdsb2JhbFwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFXUyBTdGFuZGFyZCBnbG9iYWwgcmVnaW9uXCJcbiAgICAgIH0sXG4gICAgICBcImNhLWNlbnRyYWwtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNhbmFkYSAoQ2VudHJhbClcIlxuICAgICAgfSxcbiAgICAgIFwiY2Etd2VzdC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ2FuYWRhIFdlc3QgKENhbGdhcnkpXCJcbiAgICAgIH0sXG4gICAgICBcImV1LWNlbnRyYWwtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkV1cm9wZSAoRnJhbmtmdXJ0KVwiXG4gICAgICB9LFxuICAgICAgXCJldS1jZW50cmFsLTJcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJFdXJvcGUgKFp1cmljaClcIlxuICAgICAgfSxcbiAgICAgIFwiZXUtbm9ydGgtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkV1cm9wZSAoU3RvY2tob2xtKVwiXG4gICAgICB9LFxuICAgICAgXCJldS1zb3V0aC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRXVyb3BlIChNaWxhbilcIlxuICAgICAgfSxcbiAgICAgIFwiZXUtc291dGgtMlwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkV1cm9wZSAoU3BhaW4pXCJcbiAgICAgIH0sXG4gICAgICBcImV1LXdlc3QtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkV1cm9wZSAoSXJlbGFuZClcIlxuICAgICAgfSxcbiAgICAgIFwiZXUtd2VzdC0yXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRXVyb3BlIChMb25kb24pXCJcbiAgICAgIH0sXG4gICAgICBcImV1LXdlc3QtM1wiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkV1cm9wZSAoUGFyaXMpXCJcbiAgICAgIH0sXG4gICAgICBcImlsLWNlbnRyYWwtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIklzcmFlbCAoVGVsIEF2aXYpXCJcbiAgICAgIH0sXG4gICAgICBcIm1lLWNlbnRyYWwtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIk1pZGRsZSBFYXN0IChVQUUpXCJcbiAgICAgIH0sXG4gICAgICBcIm1lLXNvdXRoLTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJNaWRkbGUgRWFzdCAoQmFocmFpbilcIlxuICAgICAgfSxcbiAgICAgIFwibXgtY2VudHJhbC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiTWV4aWNvIChDZW50cmFsKVwiXG4gICAgICB9LFxuICAgICAgXCJzYS1lYXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJTb3V0aCBBbWVyaWNhIChTYW8gUGF1bG8pXCJcbiAgICAgIH0sXG4gICAgICBcInVzLWVhc3QtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlVTIEVhc3QgKE4uIFZpcmdpbmlhKVwiXG4gICAgICB9LFxuICAgICAgXCJ1cy1lYXN0LTJcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJVUyBFYXN0IChPaGlvKVwiXG4gICAgICB9LFxuICAgICAgXCJ1cy13ZXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJVUyBXZXN0IChOLiBDYWxpZm9ybmlhKVwiXG4gICAgICB9LFxuICAgICAgXCJ1cy13ZXN0LTJcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJVUyBXZXN0IChPcmVnb24pXCJcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBpZDogXCJhd3MtY25cIixcbiAgICBvdXRwdXRzOiB7XG4gICAgICBkbnNTdWZmaXg6IFwiYW1hem9uYXdzLmNvbS5jblwiLFxuICAgICAgZHVhbFN0YWNrRG5zU3VmZml4OiBcImFwaS5hbWF6b253ZWJzZXJ2aWNlcy5jb20uY25cIixcbiAgICAgIGltcGxpY2l0R2xvYmFsUmVnaW9uOiBcImNuLW5vcnRod2VzdC0xXCIsXG4gICAgICBuYW1lOiBcImF3cy1jblwiLFxuICAgICAgc3VwcG9ydHNEdWFsU3RhY2s6IHRydWUsXG4gICAgICBzdXBwb3J0c0ZJUFM6IHRydWVcbiAgICB9LFxuICAgIHJlZ2lvblJlZ2V4OiBcIl5jblxcXFwtXFxcXHcrXFxcXC1cXFxcZCskXCIsXG4gICAgcmVnaW9uczoge1xuICAgICAgXCJhd3MtY24tZ2xvYmFsXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQVdTIENoaW5hIGdsb2JhbCByZWdpb25cIlxuICAgICAgfSxcbiAgICAgIFwiY24tbm9ydGgtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNoaW5hIChCZWlqaW5nKVwiXG4gICAgICB9LFxuICAgICAgXCJjbi1ub3J0aHdlc3QtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNoaW5hIChOaW5neGlhKVwiXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgaWQ6IFwiYXdzLXVzLWdvdlwiLFxuICAgIG91dHB1dHM6IHtcbiAgICAgIGRuc1N1ZmZpeDogXCJhbWF6b25hd3MuY29tXCIsXG4gICAgICBkdWFsU3RhY2tEbnNTdWZmaXg6IFwiYXBpLmF3c1wiLFxuICAgICAgaW1wbGljaXRHbG9iYWxSZWdpb246IFwidXMtZ292LXdlc3QtMVwiLFxuICAgICAgbmFtZTogXCJhd3MtdXMtZ292XCIsXG4gICAgICBzdXBwb3J0c0R1YWxTdGFjazogdHJ1ZSxcbiAgICAgIHN1cHBvcnRzRklQUzogdHJ1ZVxuICAgIH0sXG4gICAgcmVnaW9uUmVnZXg6IFwiXnVzXFxcXC1nb3ZcXFxcLVxcXFx3K1xcXFwtXFxcXGQrJFwiLFxuICAgIHJlZ2lvbnM6IHtcbiAgICAgIFwiYXdzLXVzLWdvdi1nbG9iYWxcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgR292Q2xvdWQgKFVTKSBnbG9iYWwgcmVnaW9uXCJcbiAgICAgIH0sXG4gICAgICBcInVzLWdvdi1lYXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgR292Q2xvdWQgKFVTLUVhc3QpXCJcbiAgICAgIH0sXG4gICAgICBcInVzLWdvdi13ZXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgR292Q2xvdWQgKFVTLVdlc3QpXCJcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBpZDogXCJhd3MtaXNvXCIsXG4gICAgb3V0cHV0czoge1xuICAgICAgZG5zU3VmZml4OiBcImMycy5pYy5nb3ZcIixcbiAgICAgIGR1YWxTdGFja0Ruc1N1ZmZpeDogXCJjMnMuaWMuZ292XCIsXG4gICAgICBpbXBsaWNpdEdsb2JhbFJlZ2lvbjogXCJ1cy1pc28tZWFzdC0xXCIsXG4gICAgICBuYW1lOiBcImF3cy1pc29cIixcbiAgICAgIHN1cHBvcnRzRHVhbFN0YWNrOiBmYWxzZSxcbiAgICAgIHN1cHBvcnRzRklQUzogdHJ1ZVxuICAgIH0sXG4gICAgcmVnaW9uUmVnZXg6IFwiXnVzXFxcXC1pc29cXFxcLVxcXFx3K1xcXFwtXFxcXGQrJFwiLFxuICAgIHJlZ2lvbnM6IHtcbiAgICAgIFwiYXdzLWlzby1nbG9iYWxcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgSVNPIChVUykgZ2xvYmFsIHJlZ2lvblwiXG4gICAgICB9LFxuICAgICAgXCJ1cy1pc28tZWFzdC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVVMgSVNPIEVhc3RcIlxuICAgICAgfSxcbiAgICAgIFwidXMtaXNvLXdlc3QtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlVTIElTTyBXRVNUXCJcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBpZDogXCJhd3MtaXNvLWJcIixcbiAgICBvdXRwdXRzOiB7XG4gICAgICBkbnNTdWZmaXg6IFwic2Mycy5zZ292LmdvdlwiLFxuICAgICAgZHVhbFN0YWNrRG5zU3VmZml4OiBcInNjMnMuc2dvdi5nb3ZcIixcbiAgICAgIGltcGxpY2l0R2xvYmFsUmVnaW9uOiBcInVzLWlzb2ItZWFzdC0xXCIsXG4gICAgICBuYW1lOiBcImF3cy1pc28tYlwiLFxuICAgICAgc3VwcG9ydHNEdWFsU3RhY2s6IGZhbHNlLFxuICAgICAgc3VwcG9ydHNGSVBTOiB0cnVlXG4gICAgfSxcbiAgICByZWdpb25SZWdleDogXCJedXNcXFxcLWlzb2JcXFxcLVxcXFx3K1xcXFwtXFxcXGQrJFwiLFxuICAgIHJlZ2lvbnM6IHtcbiAgICAgIFwiYXdzLWlzby1iLWdsb2JhbFwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFXUyBJU09CIChVUykgZ2xvYmFsIHJlZ2lvblwiXG4gICAgICB9LFxuICAgICAgXCJ1cy1pc29iLWVhc3QtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlVTIElTT0IgRWFzdCAoT2hpbylcIlxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGlkOiBcImF3cy1pc28tZVwiLFxuICAgIG91dHB1dHM6IHtcbiAgICAgIGRuc1N1ZmZpeDogXCJjbG91ZC5hZGMtZS51a1wiLFxuICAgICAgZHVhbFN0YWNrRG5zU3VmZml4OiBcImNsb3VkLmFkYy1lLnVrXCIsXG4gICAgICBpbXBsaWNpdEdsb2JhbFJlZ2lvbjogXCJldS1pc29lLXdlc3QtMVwiLFxuICAgICAgbmFtZTogXCJhd3MtaXNvLWVcIixcbiAgICAgIHN1cHBvcnRzRHVhbFN0YWNrOiBmYWxzZSxcbiAgICAgIHN1cHBvcnRzRklQUzogdHJ1ZVxuICAgIH0sXG4gICAgcmVnaW9uUmVnZXg6IFwiXmV1XFxcXC1pc29lXFxcXC1cXFxcdytcXFxcLVxcXFxkKyRcIixcbiAgICByZWdpb25zOiB7XG4gICAgICBcImF3cy1pc28tZS1nbG9iYWxcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgSVNPRSAoRXVyb3BlKSBnbG9iYWwgcmVnaW9uXCJcbiAgICAgIH0sXG4gICAgICBcImV1LWlzb2Utd2VzdC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRVUgSVNPRSBXZXN0XCJcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBpZDogXCJhd3MtaXNvLWZcIixcbiAgICBvdXRwdXRzOiB7XG4gICAgICBkbnNTdWZmaXg6IFwiY3NwLmhjaS5pYy5nb3ZcIixcbiAgICAgIGR1YWxTdGFja0Ruc1N1ZmZpeDogXCJjc3AuaGNpLmljLmdvdlwiLFxuICAgICAgaW1wbGljaXRHbG9iYWxSZWdpb246IFwidXMtaXNvZi1zb3V0aC0xXCIsXG4gICAgICBuYW1lOiBcImF3cy1pc28tZlwiLFxuICAgICAgc3VwcG9ydHNEdWFsU3RhY2s6IGZhbHNlLFxuICAgICAgc3VwcG9ydHNGSVBTOiB0cnVlXG4gICAgfSxcbiAgICByZWdpb25SZWdleDogXCJedXNcXFxcLWlzb2ZcXFxcLVxcXFx3K1xcXFwtXFxcXGQrJFwiLFxuICAgIHJlZ2lvbnM6IHtcbiAgICAgIFwiYXdzLWlzby1mLWdsb2JhbFwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFXUyBJU09GIGdsb2JhbCByZWdpb25cIlxuICAgICAgfSxcbiAgICAgIFwidXMtaXNvZi1lYXN0LTFcIjoge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJVUyBJU09GIEVBU1RcIlxuICAgICAgfSxcbiAgICAgIFwidXMtaXNvZi1zb3V0aC0xXCI6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVVMgSVNPRiBTT1VUSFwiXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgaWQ6IFwiYXdzLWV1c2NcIixcbiAgICBvdXRwdXRzOiB7XG4gICAgICBkbnNTdWZmaXg6IFwiYW1hem9uYXdzLmV1XCIsXG4gICAgICBkdWFsU3RhY2tEbnNTdWZmaXg6IFwiYW1hem9uYXdzLmV1XCIsXG4gICAgICBpbXBsaWNpdEdsb2JhbFJlZ2lvbjogXCJldXNjLWRlLWVhc3QtMVwiLFxuICAgICAgbmFtZTogXCJhd3MtZXVzY1wiLFxuICAgICAgc3VwcG9ydHNEdWFsU3RhY2s6IGZhbHNlLFxuICAgICAgc3VwcG9ydHNGSVBTOiB0cnVlXG4gICAgfSxcbiAgICByZWdpb25SZWdleDogXCJeZXVzY1xcXFwtKGRlKVxcXFwtXFxcXHcrXFxcXC1cXFxcZCskXCIsXG4gICAgcmVnaW9uczoge1xuICAgICAgXCJldXNjLWRlLWVhc3QtMVwiOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkVVIChHZXJtYW55KVwiXG4gICAgICB9XG4gICAgfVxuICB9XSxcbiAgdmVyc2lvbjogXCIxLjFcIlxufTtcblxuLy8gc3JjL2xpYi9hd3MvcGFydGl0aW9uLnRzXG52YXIgc2VsZWN0ZWRQYXJ0aXRpb25zSW5mbyA9IHBhcnRpdGlvbnNfZGVmYXVsdDtcbnZhciBzZWxlY3RlZFVzZXJBZ2VudFByZWZpeCA9IFwiXCI7XG52YXIgcGFydGl0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgY29uc3QgeyBwYXJ0aXRpb25zIH0gPSBzZWxlY3RlZFBhcnRpdGlvbnNJbmZvO1xuICBmb3IgKGNvbnN0IHBhcnRpdGlvbjIgb2YgcGFydGl0aW9ucykge1xuICAgIGNvbnN0IHsgcmVnaW9ucywgb3V0cHV0cyB9ID0gcGFydGl0aW9uMjtcbiAgICBmb3IgKGNvbnN0IFtyZWdpb24sIHJlZ2lvbkRhdGFdIG9mIE9iamVjdC5lbnRyaWVzKHJlZ2lvbnMpKSB7XG4gICAgICBpZiAocmVnaW9uID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm91dHB1dHMsXG4gICAgICAgICAgLi4ucmVnaW9uRGF0YVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHBhcnRpdGlvbjIgb2YgcGFydGl0aW9ucykge1xuICAgIGNvbnN0IHsgcmVnaW9uUmVnZXgsIG91dHB1dHMgfSA9IHBhcnRpdGlvbjI7XG4gICAgaWYgKG5ldyBSZWdFeHAocmVnaW9uUmVnZXgpLnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5vdXRwdXRzXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBjb25zdCBERUZBVUxUX1BBUlRJVElPTiA9IHBhcnRpdGlvbnMuZmluZCgocGFydGl0aW9uMikgPT4gcGFydGl0aW9uMi5pZCA9PT0gXCJhd3NcIik7XG4gIGlmICghREVGQVVMVF9QQVJUSVRJT04pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlByb3ZpZGVkIHJlZ2lvbiB3YXMgbm90IGZvdW5kIGluIHRoZSBwYXJ0aXRpb24gYXJyYXkgb3IgcmVnZXgsIGFuZCBkZWZhdWx0IHBhcnRpdGlvbiB3aXRoIGlkICdhd3MnIGRvZXNuJ3QgZXhpc3QuXCJcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4uREVGQVVMVF9QQVJUSVRJT04ub3V0cHV0c1xuICB9O1xufSwgXCJwYXJ0aXRpb25cIik7XG52YXIgc2V0UGFydGl0aW9uSW5mbyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHBhcnRpdGlvbnNJbmZvLCB1c2VyQWdlbnRQcmVmaXggPSBcIlwiKSA9PiB7XG4gIHNlbGVjdGVkUGFydGl0aW9uc0luZm8gPSBwYXJ0aXRpb25zSW5mbztcbiAgc2VsZWN0ZWRVc2VyQWdlbnRQcmVmaXggPSB1c2VyQWdlbnRQcmVmaXg7XG59LCBcInNldFBhcnRpdGlvbkluZm9cIik7XG52YXIgdXNlRGVmYXVsdFBhcnRpdGlvbkluZm8gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgc2V0UGFydGl0aW9uSW5mbyhwYXJ0aXRpb25zX2RlZmF1bHQsIFwiXCIpO1xufSwgXCJ1c2VEZWZhdWx0UGFydGl0aW9uSW5mb1wiKTtcbnZhciBnZXRVc2VyQWdlbnRQcmVmaXggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHNlbGVjdGVkVXNlckFnZW50UHJlZml4LCBcImdldFVzZXJBZ2VudFByZWZpeFwiKTtcblxuLy8gc3JjL2F3cy50c1xudmFyIGF3c0VuZHBvaW50RnVuY3Rpb25zID0ge1xuICBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0LFxuICBwYXJzZUFybixcbiAgcGFydGl0aW9uXG59O1xuaW1wb3J0X3V0aWxfZW5kcG9pbnRzLmN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLmF3cyA9IGF3c0VuZHBvaW50RnVuY3Rpb25zO1xuXG4vLyBzcmMvcmVzb2x2ZUVuZHBvaW50LnRzXG5cblxuLy8gc3JjL3R5cGVzL0VuZHBvaW50RXJyb3IudHNcblxuXG4vLyBzcmMvdHlwZXMvRW5kcG9pbnRSdWxlT2JqZWN0LnRzXG5cblxuLy8gc3JjL3R5cGVzL0Vycm9yUnVsZU9iamVjdC50c1xuXG5cbi8vIHNyYy90eXBlcy9SdWxlU2V0T2JqZWN0LnRzXG5cblxuLy8gc3JjL3R5cGVzL1RyZWVSdWxlT2JqZWN0LnRzXG5cblxuLy8gc3JjL3R5cGVzL3NoYXJlZC50c1xuXG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBhd3NFbmRwb2ludEZ1bmN0aW9ucyxcbiAgcGFydGl0aW9uLFxuICBzZXRQYXJ0aXRpb25JbmZvLFxuICB1c2VEZWZhdWx0UGFydGl0aW9uSW5mbyxcbiAgZ2V0VXNlckFnZW50UHJlZml4LFxuICBpc0lwQWRkcmVzcyxcbiAgcmVzb2x2ZUVuZHBvaW50LFxuICBFbmRwb2ludEVycm9yXG59KTtcblxuIiwgImV4cG9ydCBjb25zdCBzdGF0ZSA9IHtcbiAgICB3YXJuaW5nRW1pdHRlZDogZmFsc2UsXG59O1xuZXhwb3J0IGNvbnN0IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gPSAodmVyc2lvbikgPT4ge1xuICAgIGlmICh2ZXJzaW9uICYmICFzdGF0ZS53YXJuaW5nRW1pdHRlZCAmJiBwYXJzZUludCh2ZXJzaW9uLnN1YnN0cmluZygxLCB2ZXJzaW9uLmluZGV4T2YoXCIuXCIpKSkgPCAxOCkge1xuICAgICAgICBzdGF0ZS53YXJuaW5nRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcoYE5vZGVEZXByZWNhdGlvbldhcm5pbmc6IFRoZSBBV1MgU0RLIGZvciBKYXZhU2NyaXB0ICh2Mykgd2lsbFxubm8gbG9uZ2VyIHN1cHBvcnQgTm9kZS5qcyAxNi54IG9uIEphbnVhcnkgNiwgMjAyNS5cblxuVG8gY29udGludWUgcmVjZWl2aW5nIHVwZGF0ZXMgdG8gQVdTIHNlcnZpY2VzLCBidWcgZml4ZXMsIGFuZCBzZWN1cml0eVxudXBkYXRlcyBwbGVhc2UgdXBncmFkZSB0byBhIHN1cHBvcnRlZCBOb2RlLmpzIExUUyB2ZXJzaW9uLlxuXG5Nb3JlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBhdDogaHR0cHM6Ly9hLmNvLzc0a0pNbUlgKTtcbiAgICB9XG59O1xuIiwgImV4cG9ydCBmdW5jdGlvbiBzZXRDcmVkZW50aWFsRmVhdHVyZShjcmVkZW50aWFscywgZmVhdHVyZSwgdmFsdWUpIHtcbiAgICBpZiAoIWNyZWRlbnRpYWxzLiRzb3VyY2UpIHtcbiAgICAgICAgY3JlZGVudGlhbHMuJHNvdXJjZSA9IHt9O1xuICAgIH1cbiAgICBjcmVkZW50aWFscy4kc291cmNlW2ZlYXR1cmVdID0gdmFsdWU7XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBzZXRGZWF0dXJlKGNvbnRleHQsIGZlYXR1cmUsIHZhbHVlKSB7XG4gICAgaWYgKCFjb250ZXh0Ll9fYXdzX3Nka19jb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuX19hd3Nfc2RrX2NvbnRleHQgPSB7XG4gICAgICAgICAgICBmZWF0dXJlczoge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKCFjb250ZXh0Ll9fYXdzX3Nka19jb250ZXh0LmZlYXR1cmVzKSB7XG4gICAgICAgIGNvbnRleHQuX19hd3Nfc2RrX2NvbnRleHQuZmVhdHVyZXMgPSB7fTtcbiAgICB9XG4gICAgY29udGV4dC5fX2F3c19zZGtfY29udGV4dC5mZWF0dXJlc1tmZWF0dXJlXSA9IHZhbHVlO1xufVxuIiwgImV4cG9ydCAqIGZyb20gXCIuL2VtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NldENyZWRlbnRpYWxGZWF0dXJlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZXRGZWF0dXJlXCI7XG4iLCAiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuZXhwb3J0IGNvbnN0IGdldERhdGVIZWFkZXIgPSAocmVzcG9uc2UpID0+IEh0dHBSZXNwb25zZS5pc0luc3RhbmNlKHJlc3BvbnNlKSA/IHJlc3BvbnNlLmhlYWRlcnM/LmRhdGUgPz8gcmVzcG9uc2UuaGVhZGVycz8uRGF0ZSA6IHVuZGVmaW5lZDtcbiIsICJleHBvcnQgY29uc3QgZ2V0U2tld0NvcnJlY3RlZERhdGUgPSAoc3lzdGVtQ2xvY2tPZmZzZXQpID0+IG5ldyBEYXRlKERhdGUubm93KCkgKyBzeXN0ZW1DbG9ja09mZnNldCk7XG4iLCAiaW1wb3J0IHsgZ2V0U2tld0NvcnJlY3RlZERhdGUgfSBmcm9tIFwiLi9nZXRTa2V3Q29ycmVjdGVkRGF0ZVwiO1xuZXhwb3J0IGNvbnN0IGlzQ2xvY2tTa2V3ZWQgPSAoY2xvY2tUaW1lLCBzeXN0ZW1DbG9ja09mZnNldCkgPT4gTWF0aC5hYnMoZ2V0U2tld0NvcnJlY3RlZERhdGUoc3lzdGVtQ2xvY2tPZmZzZXQpLmdldFRpbWUoKSAtIGNsb2NrVGltZSkgPj0gMzAwMDAwO1xuIiwgImltcG9ydCB7IGlzQ2xvY2tTa2V3ZWQgfSBmcm9tIFwiLi9pc0Nsb2NrU2tld2VkXCI7XG5leHBvcnQgY29uc3QgZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0ID0gKGNsb2NrVGltZSwgY3VycmVudFN5c3RlbUNsb2NrT2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgY2xvY2tUaW1lSW5NcyA9IERhdGUucGFyc2UoY2xvY2tUaW1lKTtcbiAgICBpZiAoaXNDbG9ja1NrZXdlZChjbG9ja1RpbWVJbk1zLCBjdXJyZW50U3lzdGVtQ2xvY2tPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBjbG9ja1RpbWVJbk1zIC0gRGF0ZS5ub3coKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRTeXN0ZW1DbG9ja09mZnNldDtcbn07XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vZ2V0RGF0ZUhlYWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2V0U2tld0NvcnJlY3RlZERhdGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dldFVwZGF0ZWRTeXN0ZW1DbG9ja09mZnNldFwiO1xuIiwgImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgZ2V0RGF0ZUhlYWRlciwgZ2V0U2tld0NvcnJlY3RlZERhdGUsIGdldFVwZGF0ZWRTeXN0ZW1DbG9ja09mZnNldCB9IGZyb20gXCIuLi91dGlsc1wiO1xuY29uc3QgdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvciA9IChuYW1lLCBwcm9wZXJ0eSkgPT4ge1xuICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9wZXJ0eSBcXGAke25hbWV9XFxgIGlzIG5vdCByZXNvbHZlZCBmb3IgQVdTIFNESyBTaWdWNEF1dGhgKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BlcnR5O1xufTtcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVNpZ25pbmdQcm9wZXJ0aWVzID0gYXN5bmMgKHNpZ25pbmdQcm9wZXJ0aWVzKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHRocm93U2lnbmluZ1Byb3BlcnR5RXJyb3IoXCJjb250ZXh0XCIsIHNpZ25pbmdQcm9wZXJ0aWVzLmNvbnRleHQpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHRocm93U2lnbmluZ1Byb3BlcnR5RXJyb3IoXCJjb25maWdcIiwgc2lnbmluZ1Byb3BlcnRpZXMuY29uZmlnKTtcbiAgICBjb25zdCBhdXRoU2NoZW1lID0gY29udGV4dC5lbmRwb2ludFYyPy5wcm9wZXJ0aWVzPy5hdXRoU2NoZW1lcz8uWzBdO1xuICAgIGNvbnN0IHNpZ25lckZ1bmN0aW9uID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcInNpZ25lclwiLCBjb25maWcuc2lnbmVyKTtcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBzaWduZXJGdW5jdGlvbihhdXRoU2NoZW1lKTtcbiAgICBjb25zdCBzaWduaW5nUmVnaW9uID0gc2lnbmluZ1Byb3BlcnRpZXM/LnNpZ25pbmdSZWdpb247XG4gICAgY29uc3Qgc2lnbmluZ1JlZ2lvblNldCA9IHNpZ25pbmdQcm9wZXJ0aWVzPy5zaWduaW5nUmVnaW9uU2V0O1xuICAgIGNvbnN0IHNpZ25pbmdOYW1lID0gc2lnbmluZ1Byb3BlcnRpZXM/LnNpZ25pbmdOYW1lO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgc2lnbmVyLFxuICAgICAgICBzaWduaW5nUmVnaW9uLFxuICAgICAgICBzaWduaW5nUmVnaW9uU2V0LFxuICAgICAgICBzaWduaW5nTmFtZSxcbiAgICB9O1xufTtcbmV4cG9ydCBjbGFzcyBBd3NTZGtTaWdWNFNpZ25lciB7XG4gICAgYXN5bmMgc2lnbihodHRwUmVxdWVzdCwgaWRlbnRpdHksIHNpZ25pbmdQcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShodHRwUmVxdWVzdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZXF1ZXN0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBgSHR0cFJlcXVlc3RgIGFuZCBjYW5ub3QgYmUgc2lnbmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZFByb3BzID0gYXdhaXQgdmFsaWRhdGVTaWduaW5nUHJvcGVydGllcyhzaWduaW5nUHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IHsgY29uZmlnLCBzaWduZXIgfSA9IHZhbGlkYXRlZFByb3BzO1xuICAgICAgICBsZXQgeyBzaWduaW5nUmVnaW9uLCBzaWduaW5nTmFtZSB9ID0gdmFsaWRhdGVkUHJvcHM7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJFeGVjdXRpb25Db250ZXh0ID0gc2lnbmluZ1Byb3BlcnRpZXMuY29udGV4dDtcbiAgICAgICAgaWYgKGhhbmRsZXJFeGVjdXRpb25Db250ZXh0Py5hdXRoU2NoZW1lcz8ubGVuZ3RoID8/IDAgPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBbZmlyc3QsIHNlY29uZF0gPSBoYW5kbGVyRXhlY3V0aW9uQ29udGV4dC5hdXRoU2NoZW1lcztcbiAgICAgICAgICAgIGlmIChmaXJzdD8ubmFtZSA9PT0gXCJzaWd2NGFcIiAmJiBzZWNvbmQ/Lm5hbWUgPT09IFwic2lndjRcIikge1xuICAgICAgICAgICAgICAgIHNpZ25pbmdSZWdpb24gPSBzZWNvbmQ/LnNpZ25pbmdSZWdpb24gPz8gc2lnbmluZ1JlZ2lvbjtcbiAgICAgICAgICAgICAgICBzaWduaW5nTmFtZSA9IHNlY29uZD8uc2lnbmluZ05hbWUgPz8gc2lnbmluZ05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnbmVkUmVxdWVzdCA9IGF3YWl0IHNpZ25lci5zaWduKGh0dHBSZXF1ZXN0LCB7XG4gICAgICAgICAgICBzaWduaW5nRGF0ZTogZ2V0U2tld0NvcnJlY3RlZERhdGUoY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0KSxcbiAgICAgICAgICAgIHNpZ25pbmdSZWdpb246IHNpZ25pbmdSZWdpb24sXG4gICAgICAgICAgICBzaWduaW5nU2VydmljZTogc2lnbmluZ05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2lnbmVkUmVxdWVzdDtcbiAgICB9XG4gICAgZXJyb3JIYW5kbGVyKHNpZ25pbmdQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlclRpbWUgPSBlcnJvci5TZXJ2ZXJUaW1lID8/IGdldERhdGVIZWFkZXIoZXJyb3IuJHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJUaW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcImNvbmZpZ1wiLCBzaWduaW5nUHJvcGVydGllcy5jb25maWcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxTeXN0ZW1DbG9ja09mZnNldCA9IGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldDtcbiAgICAgICAgICAgICAgICBjb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQgPSBnZXRVcGRhdGVkU3lzdGVtQ2xvY2tPZmZzZXQoc2VydmVyVGltZSwgY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9ja1NrZXdDb3JyZWN0ZWQgPSBjb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQgIT09IGluaXRpYWxTeXN0ZW1DbG9ja09mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoY2xvY2tTa2V3Q29ycmVjdGVkICYmIGVycm9yLiRtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci4kbWV0YWRhdGEuY2xvY2tTa2V3Q29ycmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3VjY2Vzc0hhbmRsZXIoaHR0cFJlc3BvbnNlLCBzaWduaW5nUHJvcGVydGllcykge1xuICAgICAgICBjb25zdCBkYXRlSGVhZGVyID0gZ2V0RGF0ZUhlYWRlcihodHRwUmVzcG9uc2UpO1xuICAgICAgICBpZiAoZGF0ZUhlYWRlcikge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcImNvbmZpZ1wiLCBzaWduaW5nUHJvcGVydGllcy5jb25maWcpO1xuICAgICAgICAgICAgY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0ID0gZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0KGRhdGVIZWFkZXIsIGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY29uc3QgQVdTU0RLU2lnVjRTaWduZXIgPSBBd3NTZGtTaWdWNFNpZ25lcjtcbiIsICJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldFNrZXdDb3JyZWN0ZWREYXRlIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBBd3NTZGtTaWdWNFNpZ25lciwgdmFsaWRhdGVTaWduaW5nUHJvcGVydGllcyB9IGZyb20gXCIuL0F3c1Nka1NpZ1Y0U2lnbmVyXCI7XG5leHBvcnQgY2xhc3MgQXdzU2RrU2lnVjRBU2lnbmVyIGV4dGVuZHMgQXdzU2RrU2lnVjRTaWduZXIge1xuICAgIGFzeW5jIHNpZ24oaHR0cFJlcXVlc3QsIGlkZW50aXR5LCBzaWduaW5nUHJvcGVydGllcykge1xuICAgICAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UoaHR0cFJlcXVlc3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVxdWVzdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgYEh0dHBSZXF1ZXN0YCBhbmQgY2Fubm90IGJlIHNpZ25lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGNvbmZpZywgc2lnbmVyLCBzaWduaW5nUmVnaW9uLCBzaWduaW5nUmVnaW9uU2V0LCBzaWduaW5nTmFtZSB9ID0gYXdhaXQgdmFsaWRhdGVTaWduaW5nUHJvcGVydGllcyhzaWduaW5nUHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IGNvbmZpZ1Jlc29sdmVkU2lnbmluZ1JlZ2lvblNldCA9IGF3YWl0IGNvbmZpZy5zaWd2NGFTaWduaW5nUmVnaW9uU2V0Py4oKTtcbiAgICAgICAgY29uc3QgbXVsdGlSZWdpb25PdmVycmlkZSA9IChjb25maWdSZXNvbHZlZFNpZ25pbmdSZWdpb25TZXQgPz9cbiAgICAgICAgICAgIHNpZ25pbmdSZWdpb25TZXQgPz8gW3NpZ25pbmdSZWdpb25dKS5qb2luKFwiLFwiKTtcbiAgICAgICAgY29uc3Qgc2lnbmVkUmVxdWVzdCA9IGF3YWl0IHNpZ25lci5zaWduKGh0dHBSZXF1ZXN0LCB7XG4gICAgICAgICAgICBzaWduaW5nRGF0ZTogZ2V0U2tld0NvcnJlY3RlZERhdGUoY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0KSxcbiAgICAgICAgICAgIHNpZ25pbmdSZWdpb246IG11bHRpUmVnaW9uT3ZlcnJpZGUsXG4gICAgICAgICAgICBzaWduaW5nU2VydmljZTogc2lnbmluZ05hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2lnbmVkUmVxdWVzdDtcbiAgICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IGdldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmcgPSAoc3RyKSA9PiB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIHN0ci5sZW5ndGggPiAwID8gc3RyLnNwbGl0KFwiLFwiKS5tYXAoKGl0ZW0pID0+IGl0ZW0udHJpbSgpKSA6IFtdO1xuIiwgImltcG9ydCB7IGdldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvZ2V0QXJyYXlGb3JDb21tYVNlcGFyYXRlZFN0cmluZ1wiO1xuY29uc3QgTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX0VOVl9LRVkgPSBcIkFXU19BVVRIX1NDSEVNRV9QUkVGRVJFTkNFXCI7XG5jb25zdCBOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfQ09ORklHX0tFWSA9IFwiYXV0aF9zY2hlbWVfcHJlZmVyZW5jZVwiO1xuZXhwb3J0IGNvbnN0IE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4ge1xuICAgICAgICBpZiAoIShOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfRU5WX0tFWSBpbiBlbnYpKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGdldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmcoZW52W05PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9FTlZfS0VZXSk7XG4gICAgfSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiB7XG4gICAgICAgIGlmICghKE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9DT05GSUdfS0VZIGluIHByb2ZpbGUpKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGdldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmcocHJvZmlsZVtOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfQ09ORklHX0tFWV0pO1xuICAgIH0sXG4gICAgZGVmYXVsdDogW10sXG59O1xuIiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3I6ICgpID0+IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcixcbiAgUHJvdmlkZXJFcnJvcjogKCkgPT4gUHJvdmlkZXJFcnJvcixcbiAgVG9rZW5Qcm92aWRlckVycm9yOiAoKSA9PiBUb2tlblByb3ZpZGVyRXJyb3IsXG4gIGNoYWluOiAoKSA9PiBjaGFpbixcbiAgZnJvbVN0YXRpYzogKCkgPT4gZnJvbVN0YXRpYyxcbiAgbWVtb2l6ZTogKCkgPT4gbWVtb2l6ZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9Qcm92aWRlckVycm9yLnRzXG52YXIgUHJvdmlkZXJFcnJvciA9IGNsYXNzIF9Qcm92aWRlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0gdHJ1ZSkge1xuICAgIGxldCBsb2dnZXI7XG4gICAgbGV0IHRyeU5leHRMaW5rID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBsb2dnZXIgPSB2b2lkIDA7XG4gICAgICB0cnlOZXh0TGluayA9IG9wdGlvbnM7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zICE9IG51bGwgJiYgdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyO1xuICAgICAgdHJ5TmV4dExpbmsgPSBvcHRpb25zLnRyeU5leHRMaW5rID8/IHRydWU7XG4gICAgfVxuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiUHJvdmlkZXJFcnJvclwiO1xuICAgIHRoaXMudHJ5TmV4dExpbmsgPSB0cnlOZXh0TGluaztcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1Byb3ZpZGVyRXJyb3IucHJvdG90eXBlKTtcbiAgICBsb2dnZXI/LmRlYnVnPy4oYEBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIgJHt0cnlOZXh0TGluayA/IFwiLT5cIiA6IFwiKCEpXCJ9ICR7bWVzc2FnZX1gKTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlByb3ZpZGVyRXJyb3JcIik7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBuZXcgb3BlcmF0b3IuXG4gICAqL1xuICBzdGF0aWMgZnJvbShlcnJvciwgb3B0aW9ucyA9IHRydWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcyhlcnJvci5tZXNzYWdlLCBvcHRpb25zKSwgZXJyb3IpO1xuICB9XG59O1xuXG4vLyBzcmMvQ3JlZGVudGlhbHNQcm92aWRlckVycm9yLnRzXG52YXIgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yID0gY2xhc3MgX0NyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciBleHRlbmRzIFByb3ZpZGVyRXJyb3Ige1xuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0gdHJ1ZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIHRoaXMubmFtZSA9IFwiQ3JlZGVudGlhbHNQcm92aWRlckVycm9yXCI7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IucHJvdG90eXBlKTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvclwiKTtcbiAgfVxufTtcblxuLy8gc3JjL1Rva2VuUHJvdmlkZXJFcnJvci50c1xudmFyIFRva2VuUHJvdmlkZXJFcnJvciA9IGNsYXNzIF9Ub2tlblByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucyA9IHRydWUpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB0aGlzLm5hbWUgPSBcIlRva2VuUHJvdmlkZXJFcnJvclwiO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfVG9rZW5Qcm92aWRlckVycm9yLnByb3RvdHlwZSk7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJUb2tlblByb3ZpZGVyRXJyb3JcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jaGFpbi50c1xudmFyIGNoYWluID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoLi4ucHJvdmlkZXJzKSA9PiBhc3luYyAoKSA9PiB7XG4gIGlmIChwcm92aWRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXCJObyBwcm92aWRlcnMgaW4gY2hhaW5cIik7XG4gIH1cbiAgbGV0IGxhc3RQcm92aWRlckVycm9yO1xuICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHByb3ZpZGVycykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IHByb3ZpZGVyKCk7XG4gICAgICByZXR1cm4gY3JlZGVudGlhbHM7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsYXN0UHJvdmlkZXJFcnJvciA9IGVycjtcbiAgICAgIGlmIChlcnI/LnRyeU5leHRMaW5rKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICB0aHJvdyBsYXN0UHJvdmlkZXJFcnJvcjtcbn0sIFwiY2hhaW5cIik7XG5cbi8vIHNyYy9mcm9tU3RhdGljLnRzXG52YXIgZnJvbVN0YXRpYyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHN0YXRpY1ZhbHVlKSA9PiAoKSA9PiBQcm9taXNlLnJlc29sdmUoc3RhdGljVmFsdWUpLCBcImZyb21TdGF0aWNcIik7XG5cbi8vIHNyYy9tZW1vaXplLnRzXG52YXIgbWVtb2l6ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHByb3ZpZGVyLCBpc0V4cGlyZWQsIHJlcXVpcmVzUmVmcmVzaCkgPT4ge1xuICBsZXQgcmVzb2x2ZWQ7XG4gIGxldCBwZW5kaW5nO1xuICBsZXQgaGFzUmVzdWx0O1xuICBsZXQgaXNDb25zdGFudCA9IGZhbHNlO1xuICBjb25zdCBjb2FsZXNjZVByb3ZpZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gcHJvdmlkZXIoKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJlc29sdmVkID0gYXdhaXQgcGVuZGluZztcbiAgICAgIGhhc1Jlc3VsdCA9IHRydWU7XG4gICAgICBpc0NvbnN0YW50ID0gZmFsc2U7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHBlbmRpbmcgPSB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbiAgfSwgXCJjb2FsZXNjZVByb3ZpZGVyXCIpO1xuICBpZiAoaXNFeHBpcmVkID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgIGlmICghaGFzUmVzdWx0IHx8IG9wdGlvbnM/LmZvcmNlUmVmcmVzaCkge1xuICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xuICB9XG4gIHJldHVybiBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgIGlmICghaGFzUmVzdWx0IHx8IG9wdGlvbnM/LmZvcmNlUmVmcmVzaCkge1xuICAgICAgcmVzb2x2ZWQgPSBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKCk7XG4gICAgfVxuICAgIGlmIChpc0NvbnN0YW50KSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGlmIChyZXF1aXJlc1JlZnJlc2ggJiYgIXJlcXVpcmVzUmVmcmVzaChyZXNvbHZlZCkpIHtcbiAgICAgIGlzQ29uc3RhbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH1cbiAgICBpZiAoaXNFeHBpcmVkKHJlc29sdmVkKSkge1xuICAgICAgYXdhaXQgY29hbGVzY2VQcm92aWRlcigpO1xuICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH07XG59LCBcIm1lbW9pemVcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IsXG4gIFByb3ZpZGVyRXJyb3IsXG4gIFRva2VuUHJvdmlkZXJFcnJvcixcbiAgY2hhaW4sXG4gIGZyb21TdGF0aWMsXG4gIG1lbW9pemVcbn0pO1xuXG4iLCAiaW1wb3J0IHsgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBQcm92aWRlckVycm9yIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlQXdzU2RrU2lnVjRBQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbmZpZy5zaWd2NGFTaWduaW5nUmVnaW9uU2V0ID0gbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnNpZ3Y0YVNpZ25pbmdSZWdpb25TZXQpO1xuICAgIHJldHVybiBjb25maWc7XG59O1xuZXhwb3J0IGNvbnN0IE5PREVfU0lHVjRBX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcihlbnYpIHtcbiAgICAgICAgaWYgKGVudi5BV1NfU0lHVjRBX1NJR05JTkdfUkVHSU9OX1NFVCkge1xuICAgICAgICAgICAgcmV0dXJuIGVudi5BV1NfU0lHVjRBX1NJR05JTkdfUkVHSU9OX1NFVC5zcGxpdChcIixcIikubWFwKChfKSA9PiBfLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXCJBV1NfU0lHVjRBX1NJR05JTkdfUkVHSU9OX1NFVCBub3Qgc2V0IGluIGVudi5cIiwge1xuICAgICAgICAgICAgdHJ5TmV4dExpbms6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yKHByb2ZpbGUpIHtcbiAgICAgICAgaWYgKHByb2ZpbGUuc2lndjRhX3NpZ25pbmdfcmVnaW9uX3NldCkge1xuICAgICAgICAgICAgcmV0dXJuIChwcm9maWxlLnNpZ3Y0YV9zaWduaW5nX3JlZ2lvbl9zZXQgPz8gXCJcIikuc3BsaXQoXCIsXCIpLm1hcCgoXykgPT4gXy50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBQcm92aWRlckVycm9yKFwic2lndjRhX3NpZ25pbmdfcmVnaW9uX3NldCBub3Qgc2V0IGluIHByb2ZpbGUuXCIsIHtcbiAgICAgICAgICAgIHRyeU5leHRMaW5rOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbn07XG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEFMR09SSVRITV9JREVOVElGSUVSOiAoKSA9PiBBTEdPUklUSE1fSURFTlRJRklFUixcbiAgQUxHT1JJVEhNX0lERU5USUZJRVJfVjRBOiAoKSA9PiBBTEdPUklUSE1fSURFTlRJRklFUl9WNEEsXG4gIEFMR09SSVRITV9RVUVSWV9QQVJBTTogKCkgPT4gQUxHT1JJVEhNX1FVRVJZX1BBUkFNLFxuICBBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTOiAoKSA9PiBBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTLFxuICBBTVpfREFURV9IRUFERVI6ICgpID0+IEFNWl9EQVRFX0hFQURFUixcbiAgQU1aX0RBVEVfUVVFUllfUEFSQU06ICgpID0+IEFNWl9EQVRFX1FVRVJZX1BBUkFNLFxuICBBVVRIX0hFQURFUjogKCkgPT4gQVVUSF9IRUFERVIsXG4gIENSRURFTlRJQUxfUVVFUllfUEFSQU06ICgpID0+IENSRURFTlRJQUxfUVVFUllfUEFSQU0sXG4gIERBVEVfSEVBREVSOiAoKSA9PiBEQVRFX0hFQURFUixcbiAgRVZFTlRfQUxHT1JJVEhNX0lERU5USUZJRVI6ICgpID0+IEVWRU5UX0FMR09SSVRITV9JREVOVElGSUVSLFxuICBFWFBJUkVTX1FVRVJZX1BBUkFNOiAoKSA9PiBFWFBJUkVTX1FVRVJZX1BBUkFNLFxuICBHRU5FUkFURURfSEVBREVSUzogKCkgPT4gR0VORVJBVEVEX0hFQURFUlMsXG4gIEhPU1RfSEVBREVSOiAoKSA9PiBIT1NUX0hFQURFUixcbiAgS0VZX1RZUEVfSURFTlRJRklFUjogKCkgPT4gS0VZX1RZUEVfSURFTlRJRklFUixcbiAgTUFYX0NBQ0hFX1NJWkU6ICgpID0+IE1BWF9DQUNIRV9TSVpFLFxuICBNQVhfUFJFU0lHTkVEX1RUTDogKCkgPT4gTUFYX1BSRVNJR05FRF9UVEwsXG4gIFBST1hZX0hFQURFUl9QQVRURVJOOiAoKSA9PiBQUk9YWV9IRUFERVJfUEFUVEVSTixcbiAgUkVHSU9OX1NFVF9QQVJBTTogKCkgPT4gUkVHSU9OX1NFVF9QQVJBTSxcbiAgU0VDX0hFQURFUl9QQVRURVJOOiAoKSA9PiBTRUNfSEVBREVSX1BBVFRFUk4sXG4gIFNIQTI1Nl9IRUFERVI6ICgpID0+IFNIQTI1Nl9IRUFERVIsXG4gIFNJR05BVFVSRV9IRUFERVI6ICgpID0+IFNJR05BVFVSRV9IRUFERVIsXG4gIFNJR05BVFVSRV9RVUVSWV9QQVJBTTogKCkgPT4gU0lHTkFUVVJFX1FVRVJZX1BBUkFNLFxuICBTSUdORURfSEVBREVSU19RVUVSWV9QQVJBTTogKCkgPT4gU0lHTkVEX0hFQURFUlNfUVVFUllfUEFSQU0sXG4gIFNpZ25hdHVyZVY0OiAoKSA9PiBTaWduYXR1cmVWNCxcbiAgU2lnbmF0dXJlVjRCYXNlOiAoKSA9PiBTaWduYXR1cmVWNEJhc2UsXG4gIFRPS0VOX0hFQURFUjogKCkgPT4gVE9LRU5fSEVBREVSLFxuICBUT0tFTl9RVUVSWV9QQVJBTTogKCkgPT4gVE9LRU5fUVVFUllfUEFSQU0sXG4gIFVOU0lHTkFCTEVfUEFUVEVSTlM6ICgpID0+IFVOU0lHTkFCTEVfUEFUVEVSTlMsXG4gIFVOU0lHTkVEX1BBWUxPQUQ6ICgpID0+IFVOU0lHTkVEX1BBWUxPQUQsXG4gIGNsZWFyQ3JlZGVudGlhbENhY2hlOiAoKSA9PiBjbGVhckNyZWRlbnRpYWxDYWNoZSxcbiAgY3JlYXRlU2NvcGU6ICgpID0+IGNyZWF0ZVNjb3BlLFxuICBnZXRDYW5vbmljYWxIZWFkZXJzOiAoKSA9PiBnZXRDYW5vbmljYWxIZWFkZXJzLFxuICBnZXRDYW5vbmljYWxRdWVyeTogKCkgPT4gZ2V0Q2Fub25pY2FsUXVlcnksXG4gIGdldFBheWxvYWRIYXNoOiAoKSA9PiBnZXRQYXlsb2FkSGFzaCxcbiAgZ2V0U2lnbmluZ0tleTogKCkgPT4gZ2V0U2lnbmluZ0tleSxcbiAgaGFzSGVhZGVyOiAoKSA9PiBoYXNIZWFkZXIsXG4gIG1vdmVIZWFkZXJzVG9RdWVyeTogKCkgPT4gbW92ZUhlYWRlcnNUb1F1ZXJ5LFxuICBwcmVwYXJlUmVxdWVzdDogKCkgPT4gcHJlcGFyZVJlcXVlc3QsXG4gIHNpZ25hdHVyZVY0YUNvbnRhaW5lcjogKCkgPT4gc2lnbmF0dXJlVjRhQ29udGFpbmVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL1NpZ25hdHVyZVY0LnRzXG5cbnZhciBpbXBvcnRfdXRpbF91dGY4NSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtdXRmOFwiKTtcblxuLy8gc3JjL2NvbnN0YW50cy50c1xudmFyIEFMR09SSVRITV9RVUVSWV9QQVJBTSA9IFwiWC1BbXotQWxnb3JpdGhtXCI7XG52YXIgQ1JFREVOVElBTF9RVUVSWV9QQVJBTSA9IFwiWC1BbXotQ3JlZGVudGlhbFwiO1xudmFyIEFNWl9EQVRFX1FVRVJZX1BBUkFNID0gXCJYLUFtei1EYXRlXCI7XG52YXIgU0lHTkVEX0hFQURFUlNfUVVFUllfUEFSQU0gPSBcIlgtQW16LVNpZ25lZEhlYWRlcnNcIjtcbnZhciBFWFBJUkVTX1FVRVJZX1BBUkFNID0gXCJYLUFtei1FeHBpcmVzXCI7XG52YXIgU0lHTkFUVVJFX1FVRVJZX1BBUkFNID0gXCJYLUFtei1TaWduYXR1cmVcIjtcbnZhciBUT0tFTl9RVUVSWV9QQVJBTSA9IFwiWC1BbXotU2VjdXJpdHktVG9rZW5cIjtcbnZhciBSRUdJT05fU0VUX1BBUkFNID0gXCJYLUFtei1SZWdpb24tU2V0XCI7XG52YXIgQVVUSF9IRUFERVIgPSBcImF1dGhvcml6YXRpb25cIjtcbnZhciBBTVpfREFURV9IRUFERVIgPSBBTVpfREFURV9RVUVSWV9QQVJBTS50b0xvd2VyQ2FzZSgpO1xudmFyIERBVEVfSEVBREVSID0gXCJkYXRlXCI7XG52YXIgR0VORVJBVEVEX0hFQURFUlMgPSBbQVVUSF9IRUFERVIsIEFNWl9EQVRFX0hFQURFUiwgREFURV9IRUFERVJdO1xudmFyIFNJR05BVFVSRV9IRUFERVIgPSBTSUdOQVRVUkVfUVVFUllfUEFSQU0udG9Mb3dlckNhc2UoKTtcbnZhciBTSEEyNTZfSEVBREVSID0gXCJ4LWFtei1jb250ZW50LXNoYTI1NlwiO1xudmFyIFRPS0VOX0hFQURFUiA9IFRPS0VOX1FVRVJZX1BBUkFNLnRvTG93ZXJDYXNlKCk7XG52YXIgSE9TVF9IRUFERVIgPSBcImhvc3RcIjtcbnZhciBBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTID0ge1xuICBhdXRob3JpemF0aW9uOiB0cnVlLFxuICBcImNhY2hlLWNvbnRyb2xcIjogdHJ1ZSxcbiAgY29ubmVjdGlvbjogdHJ1ZSxcbiAgZXhwZWN0OiB0cnVlLFxuICBmcm9tOiB0cnVlLFxuICBcImtlZXAtYWxpdmVcIjogdHJ1ZSxcbiAgXCJtYXgtZm9yd2FyZHNcIjogdHJ1ZSxcbiAgcHJhZ21hOiB0cnVlLFxuICByZWZlcmVyOiB0cnVlLFxuICB0ZTogdHJ1ZSxcbiAgdHJhaWxlcjogdHJ1ZSxcbiAgXCJ0cmFuc2Zlci1lbmNvZGluZ1wiOiB0cnVlLFxuICB1cGdyYWRlOiB0cnVlLFxuICBcInVzZXItYWdlbnRcIjogdHJ1ZSxcbiAgXCJ4LWFtem4tdHJhY2UtaWRcIjogdHJ1ZVxufTtcbnZhciBQUk9YWV9IRUFERVJfUEFUVEVSTiA9IC9ecHJveHktLztcbnZhciBTRUNfSEVBREVSX1BBVFRFUk4gPSAvXnNlYy0vO1xudmFyIFVOU0lHTkFCTEVfUEFUVEVSTlMgPSBbL15wcm94eS0vaSwgL15zZWMtL2ldO1xudmFyIEFMR09SSVRITV9JREVOVElGSUVSID0gXCJBV1M0LUhNQUMtU0hBMjU2XCI7XG52YXIgQUxHT1JJVEhNX0lERU5USUZJRVJfVjRBID0gXCJBV1M0LUVDRFNBLVAyNTYtU0hBMjU2XCI7XG52YXIgRVZFTlRfQUxHT1JJVEhNX0lERU5USUZJRVIgPSBcIkFXUzQtSE1BQy1TSEEyNTYtUEFZTE9BRFwiO1xudmFyIFVOU0lHTkVEX1BBWUxPQUQgPSBcIlVOU0lHTkVELVBBWUxPQURcIjtcbnZhciBNQVhfQ0FDSEVfU0laRSA9IDUwO1xudmFyIEtFWV9UWVBFX0lERU5USUZJRVIgPSBcImF3czRfcmVxdWVzdFwiO1xudmFyIE1BWF9QUkVTSUdORURfVFRMID0gNjAgKiA2MCAqIDI0ICogNztcblxuLy8gc3JjL2NyZWRlbnRpYWxEZXJpdmF0aW9uLnRzXG52YXIgaW1wb3J0X3V0aWxfaGV4X2VuY29kaW5nID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1oZXgtZW5jb2RpbmdcIik7XG52YXIgaW1wb3J0X3V0aWxfdXRmOCA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtdXRmOFwiKTtcbnZhciBzaWduaW5nS2V5Q2FjaGUgPSB7fTtcbnZhciBjYWNoZVF1ZXVlID0gW107XG52YXIgY3JlYXRlU2NvcGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzaG9ydERhdGUsIHJlZ2lvbiwgc2VydmljZSkgPT4gYCR7c2hvcnREYXRlfS8ke3JlZ2lvbn0vJHtzZXJ2aWNlfS8ke0tFWV9UWVBFX0lERU5USUZJRVJ9YCwgXCJjcmVhdGVTY29wZVwiKTtcbnZhciBnZXRTaWduaW5nS2V5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoc2hhMjU2Q29uc3RydWN0b3IsIGNyZWRlbnRpYWxzLCBzaG9ydERhdGUsIHJlZ2lvbiwgc2VydmljZSkgPT4ge1xuICBjb25zdCBjcmVkc0hhc2ggPSBhd2FpdCBobWFjKHNoYTI1NkNvbnN0cnVjdG9yLCBjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXksIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkKTtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtzaG9ydERhdGV9OiR7cmVnaW9ufToke3NlcnZpY2V9OiR7KDAsIGltcG9ydF91dGlsX2hleF9lbmNvZGluZy50b0hleCkoY3JlZHNIYXNoKX06JHtjcmVkZW50aWFscy5zZXNzaW9uVG9rZW59YDtcbiAgaWYgKGNhY2hlS2V5IGluIHNpZ25pbmdLZXlDYWNoZSkge1xuICAgIHJldHVybiBzaWduaW5nS2V5Q2FjaGVbY2FjaGVLZXldO1xuICB9XG4gIGNhY2hlUXVldWUucHVzaChjYWNoZUtleSk7XG4gIHdoaWxlIChjYWNoZVF1ZXVlLmxlbmd0aCA+IE1BWF9DQUNIRV9TSVpFKSB7XG4gICAgZGVsZXRlIHNpZ25pbmdLZXlDYWNoZVtjYWNoZVF1ZXVlLnNoaWZ0KCldO1xuICB9XG4gIGxldCBrZXkgPSBgQVdTNCR7Y3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5fWA7XG4gIGZvciAoY29uc3Qgc2lnbmFibGUgb2YgW3Nob3J0RGF0ZSwgcmVnaW9uLCBzZXJ2aWNlLCBLRVlfVFlQRV9JREVOVElGSUVSXSkge1xuICAgIGtleSA9IGF3YWl0IGhtYWMoc2hhMjU2Q29uc3RydWN0b3IsIGtleSwgc2lnbmFibGUpO1xuICB9XG4gIHJldHVybiBzaWduaW5nS2V5Q2FjaGVbY2FjaGVLZXldID0ga2V5O1xufSwgXCJnZXRTaWduaW5nS2V5XCIpO1xudmFyIGNsZWFyQ3JlZGVudGlhbENhY2hlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGNhY2hlUXVldWUubGVuZ3RoID0gMDtcbiAgT2JqZWN0LmtleXMoc2lnbmluZ0tleUNhY2hlKS5mb3JFYWNoKChjYWNoZUtleSkgPT4ge1xuICAgIGRlbGV0ZSBzaWduaW5nS2V5Q2FjaGVbY2FjaGVLZXldO1xuICB9KTtcbn0sIFwiY2xlYXJDcmVkZW50aWFsQ2FjaGVcIik7XG52YXIgaG1hYyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGN0b3IsIHNlY3JldCwgZGF0YSkgPT4ge1xuICBjb25zdCBoYXNoID0gbmV3IGN0b3Ioc2VjcmV0KTtcbiAgaGFzaC51cGRhdGUoKDAsIGltcG9ydF91dGlsX3V0ZjgudG9VaW50OEFycmF5KShkYXRhKSk7XG4gIHJldHVybiBoYXNoLmRpZ2VzdCgpO1xufSwgXCJobWFjXCIpO1xuXG4vLyBzcmMvZ2V0Q2Fub25pY2FsSGVhZGVycy50c1xudmFyIGdldENhbm9uaWNhbEhlYWRlcnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh7IGhlYWRlcnMgfSwgdW5zaWduYWJsZUhlYWRlcnMsIHNpZ25hYmxlSGVhZGVycykgPT4ge1xuICBjb25zdCBjYW5vbmljYWwgPSB7fTtcbiAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpLnNvcnQoKSkge1xuICAgIGlmIChoZWFkZXJzW2hlYWRlck5hbWVdID09IHZvaWQgMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGNhbm9uaWNhbEhlYWRlck5hbWUgPSBoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGNhbm9uaWNhbEhlYWRlck5hbWUgaW4gQUxXQVlTX1VOU0lHTkFCTEVfSEVBREVSUyB8fCB1bnNpZ25hYmxlSGVhZGVycz8uaGFzKGNhbm9uaWNhbEhlYWRlck5hbWUpIHx8IFBST1hZX0hFQURFUl9QQVRURVJOLnRlc3QoY2Fub25pY2FsSGVhZGVyTmFtZSkgfHwgU0VDX0hFQURFUl9QQVRURVJOLnRlc3QoY2Fub25pY2FsSGVhZGVyTmFtZSkpIHtcbiAgICAgIGlmICghc2lnbmFibGVIZWFkZXJzIHx8IHNpZ25hYmxlSGVhZGVycyAmJiAhc2lnbmFibGVIZWFkZXJzLmhhcyhjYW5vbmljYWxIZWFkZXJOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2Fub25pY2FsW2Nhbm9uaWNhbEhlYWRlck5hbWVdID0gaGVhZGVyc1toZWFkZXJOYW1lXS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XG4gIH1cbiAgcmV0dXJuIGNhbm9uaWNhbDtcbn0sIFwiZ2V0Q2Fub25pY2FsSGVhZGVyc1wiKTtcblxuLy8gc3JjL2dldFBheWxvYWRIYXNoLnRzXG52YXIgaW1wb3J0X2lzX2FycmF5X2J1ZmZlciA9IHJlcXVpcmUoXCJAc21pdGh5L2lzLWFycmF5LWJ1ZmZlclwiKTtcblxudmFyIGltcG9ydF91dGlsX3V0ZjgyID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xudmFyIGdldFBheWxvYWRIYXNoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoeyBoZWFkZXJzLCBib2R5IH0sIGhhc2hDb25zdHJ1Y3RvcikgPT4ge1xuICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICBpZiAoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpID09PSBTSEEyNTZfSEVBREVSKSB7XG4gICAgICByZXR1cm4gaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICB9XG4gIH1cbiAgaWYgKGJvZHkgPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIFwiZTNiMGM0NDI5OGZjMWMxNDlhZmJmNGM4OTk2ZmI5MjQyN2FlNDFlNDY0OWI5MzRjYTQ5NTk5MWI3ODUyYjg1NVwiO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiIHx8IEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSB8fCAoMCwgaW1wb3J0X2lzX2FycmF5X2J1ZmZlci5pc0FycmF5QnVmZmVyKShib2R5KSkge1xuICAgIGNvbnN0IGhhc2hDdG9yID0gbmV3IGhhc2hDb25zdHJ1Y3RvcigpO1xuICAgIGhhc2hDdG9yLnVwZGF0ZSgoMCwgaW1wb3J0X3V0aWxfdXRmODIudG9VaW50OEFycmF5KShib2R5KSk7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF9oZXhfZW5jb2RpbmcudG9IZXgpKGF3YWl0IGhhc2hDdG9yLmRpZ2VzdCgpKTtcbiAgfVxuICByZXR1cm4gVU5TSUdORURfUEFZTE9BRDtcbn0sIFwiZ2V0UGF5bG9hZEhhc2hcIik7XG5cbi8vIHNyYy9IZWFkZXJGb3JtYXR0ZXIudHNcblxudmFyIGltcG9ydF91dGlsX3V0ZjgzID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xudmFyIEhlYWRlckZvcm1hdHRlciA9IGNsYXNzIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJIZWFkZXJGb3JtYXR0ZXJcIik7XG4gIH1cbiAgZm9ybWF0KGhlYWRlcnMpIHtcbiAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gKDAsIGltcG9ydF91dGlsX3V0ZjgzLmZyb21VdGY4KShoZWFkZXJOYW1lKTtcbiAgICAgIGNodW5rcy5wdXNoKFVpbnQ4QXJyYXkuZnJvbShbYnl0ZXMuYnl0ZUxlbmd0aF0pLCBieXRlcywgdGhpcy5mb3JtYXRIZWFkZXJWYWx1ZShoZWFkZXJzW2hlYWRlck5hbWVdKSk7XG4gICAgfVxuICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGNodW5rcy5yZWR1Y2UoKGNhcnJ5LCBieXRlcykgPT4gY2FycnkgKyBieXRlcy5ieXRlTGVuZ3RoLCAwKSk7XG4gICAgbGV0IHBvc2l0aW9uID0gMDtcbiAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgICAgb3V0LnNldChjaHVuaywgcG9zaXRpb24pO1xuICAgICAgcG9zaXRpb24gKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICBmb3JtYXRIZWFkZXJWYWx1ZShoZWFkZXIpIHtcbiAgICBzd2l0Y2ggKGhlYWRlci50eXBlKSB7XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtoZWFkZXIudmFsdWUgPyAwIC8qIGJvb2xUcnVlICovIDogMSAvKiBib29sRmFsc2UgKi9dKTtcbiAgICAgIGNhc2UgXCJieXRlXCI6XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oWzIgLyogYnl0ZSAqLywgaGVhZGVyLnZhbHVlXSk7XG4gICAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgICAgY29uc3Qgc2hvcnRWaWV3ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigzKSk7XG4gICAgICAgIHNob3J0Vmlldy5zZXRVaW50OCgwLCAzIC8qIHNob3J0ICovKTtcbiAgICAgICAgc2hvcnRWaWV3LnNldEludDE2KDEsIGhlYWRlci52YWx1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2hvcnRWaWV3LmJ1ZmZlcik7XG4gICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICBjb25zdCBpbnRWaWV3ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig1KSk7XG4gICAgICAgIGludFZpZXcuc2V0VWludDgoMCwgNCAvKiBpbnRlZ2VyICovKTtcbiAgICAgICAgaW50Vmlldy5zZXRJbnQzMigxLCBoZWFkZXIudmFsdWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGludFZpZXcuYnVmZmVyKTtcbiAgICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICAgIGNvbnN0IGxvbmdCeXRlcyA9IG5ldyBVaW50OEFycmF5KDkpO1xuICAgICAgICBsb25nQnl0ZXNbMF0gPSA1IC8qIGxvbmcgKi87XG4gICAgICAgIGxvbmdCeXRlcy5zZXQoaGVhZGVyLnZhbHVlLmJ5dGVzLCAxKTtcbiAgICAgICAgcmV0dXJuIGxvbmdCeXRlcztcbiAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgY29uc3QgYmluVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMyArIGhlYWRlci52YWx1ZS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgIGJpblZpZXcuc2V0VWludDgoMCwgNiAvKiBieXRlQXJyYXkgKi8pO1xuICAgICAgICBiaW5WaWV3LnNldFVpbnQxNigxLCBoZWFkZXIudmFsdWUuYnl0ZUxlbmd0aCwgZmFsc2UpO1xuICAgICAgICBjb25zdCBiaW5CeXRlcyA9IG5ldyBVaW50OEFycmF5KGJpblZpZXcuYnVmZmVyKTtcbiAgICAgICAgYmluQnl0ZXMuc2V0KGhlYWRlci52YWx1ZSwgMyk7XG4gICAgICAgIHJldHVybiBiaW5CeXRlcztcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgY29uc3QgdXRmOEJ5dGVzID0gKDAsIGltcG9ydF91dGlsX3V0ZjgzLmZyb21VdGY4KShoZWFkZXIudmFsdWUpO1xuICAgICAgICBjb25zdCBzdHJWaWV3ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigzICsgdXRmOEJ5dGVzLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgc3RyVmlldy5zZXRVaW50OCgwLCA3IC8qIHN0cmluZyAqLyk7XG4gICAgICAgIHN0clZpZXcuc2V0VWludDE2KDEsIHV0ZjhCeXRlcy5ieXRlTGVuZ3RoLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHN0ckJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc3RyVmlldy5idWZmZXIpO1xuICAgICAgICBzdHJCeXRlcy5zZXQodXRmOEJ5dGVzLCAzKTtcbiAgICAgICAgcmV0dXJuIHN0ckJ5dGVzO1xuICAgICAgY2FzZSBcInRpbWVzdGFtcFwiOlxuICAgICAgICBjb25zdCB0c0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOSk7XG4gICAgICAgIHRzQnl0ZXNbMF0gPSA4IC8qIHRpbWVzdGFtcCAqLztcbiAgICAgICAgdHNCeXRlcy5zZXQoSW50NjQuZnJvbU51bWJlcihoZWFkZXIudmFsdWUudmFsdWVPZigpKS5ieXRlcywgMSk7XG4gICAgICAgIHJldHVybiB0c0J5dGVzO1xuICAgICAgY2FzZSBcInV1aWRcIjpcbiAgICAgICAgaWYgKCFVVUlEX1BBVFRFUk4udGVzdChoZWFkZXIudmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFVVSUQgcmVjZWl2ZWQ6ICR7aGVhZGVyLnZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHV1aWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KDE3KTtcbiAgICAgICAgdXVpZEJ5dGVzWzBdID0gOSAvKiB1dWlkICovO1xuICAgICAgICB1dWlkQnl0ZXMuc2V0KCgwLCBpbXBvcnRfdXRpbF9oZXhfZW5jb2RpbmcuZnJvbUhleCkoaGVhZGVyLnZhbHVlLnJlcGxhY2UoL1xcLS9nLCBcIlwiKSksIDEpO1xuICAgICAgICByZXR1cm4gdXVpZEJ5dGVzO1xuICAgIH1cbiAgfVxufTtcbnZhciBVVUlEX1BBVFRFUk4gPSAvXlthLWYwLTldezh9LVthLWYwLTldezR9LVthLWYwLTldezR9LVthLWYwLTldezR9LVthLWYwLTldezEyfSQvO1xudmFyIEludDY0ID0gY2xhc3MgX0ludDY0IHtcbiAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICB0aGlzLmJ5dGVzID0gYnl0ZXM7XG4gICAgaWYgKGJ5dGVzLmJ5dGVMZW5ndGggIT09IDgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludDY0IGJ1ZmZlcnMgbXVzdCBiZSBleGFjdGx5IDggYnl0ZXNcIik7XG4gICAgfVxuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiSW50NjRcIik7XG4gIH1cbiAgc3RhdGljIGZyb21OdW1iZXIobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA+IDkyMjMzNzIwMzY4NTQ3NzZlMyB8fCBudW1iZXIgPCAtOTIyMzM3MjAzNjg1NDc3NmUzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bnVtYmVyfSBpcyB0b28gbGFyZ2UgKG9yLCBpZiBuZWdhdGl2ZSwgdG9vIHNtYWxsKSB0byByZXByZXNlbnQgYXMgYW4gSW50NjRgKTtcbiAgICB9XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICBmb3IgKGxldCBpID0gNywgcmVtYWluaW5nID0gTWF0aC5hYnMoTWF0aC5yb3VuZChudW1iZXIpKTsgaSA+IC0xICYmIHJlbWFpbmluZyA+IDA7IGktLSwgcmVtYWluaW5nIC89IDI1Nikge1xuICAgICAgYnl0ZXNbaV0gPSByZW1haW5pbmc7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICBuZWdhdGUoYnl0ZXMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9JbnQ2NChieXRlcyk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCBpbXBsaWNpdGx5IGJ5IGluZml4IGFyaXRobWV0aWMgb3BlcmF0b3JzLlxuICAgKi9cbiAgdmFsdWVPZigpIHtcbiAgICBjb25zdCBieXRlcyA9IHRoaXMuYnl0ZXMuc2xpY2UoMCk7XG4gICAgY29uc3QgbmVnYXRpdmUgPSBieXRlc1swXSAmIDEyODtcbiAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgIG5lZ2F0ZShieXRlcyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCgoMCwgaW1wb3J0X3V0aWxfaGV4X2VuY29kaW5nLnRvSGV4KShieXRlcyksIDE2KSAqIChuZWdhdGl2ZSA/IC0xIDogMSk7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlT2YoKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBuZWdhdGUoYnl0ZXMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcbiAgICBieXRlc1tpXSBePSAyNTU7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDc7IGkgPiAtMTsgaS0tKSB7XG4gICAgYnl0ZXNbaV0rKztcbiAgICBpZiAoYnl0ZXNbaV0gIT09IDApXG4gICAgICBicmVhaztcbiAgfVxufVxuX19uYW1lKG5lZ2F0ZSwgXCJuZWdhdGVcIik7XG5cbi8vIHNyYy9oZWFkZXJVdGlsLnRzXG52YXIgaGFzSGVhZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc291Z2h0SGVhZGVyLCBoZWFkZXJzKSA9PiB7XG4gIHNvdWdodEhlYWRlciA9IHNvdWdodEhlYWRlci50b0xvd2VyQ2FzZSgpO1xuICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICBpZiAoc291Z2h0SGVhZGVyID09PSBoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59LCBcImhhc0hlYWRlclwiKTtcblxuLy8gc3JjL21vdmVIZWFkZXJzVG9RdWVyeS50c1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbnZhciBtb3ZlSGVhZGVyc1RvUXVlcnkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXF1ZXN0LCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgeyBoZWFkZXJzLCBxdWVyeSA9IHt9IH0gPSBpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVxdWVzdC5jbG9uZShyZXF1ZXN0KTtcbiAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgY29uc3QgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxuYW1lLnNsaWNlKDAsIDYpID09PSBcIngtYW16LVwiICYmICFvcHRpb25zLnVuaG9pc3RhYmxlSGVhZGVycz8uaGFzKGxuYW1lKSB8fCBvcHRpb25zLmhvaXN0YWJsZUhlYWRlcnM/LmhhcyhsbmFtZSkpIHtcbiAgICAgIHF1ZXJ5W25hbWVdID0gaGVhZGVyc1tuYW1lXTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLnJlcXVlc3QsXG4gICAgaGVhZGVycyxcbiAgICBxdWVyeVxuICB9O1xufSwgXCJtb3ZlSGVhZGVyc1RvUXVlcnlcIik7XG5cbi8vIHNyYy9wcmVwYXJlUmVxdWVzdC50c1xuXG52YXIgcHJlcGFyZVJlcXVlc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXF1ZXN0KSA9PiB7XG4gIHJlcXVlc3QgPSBpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVxdWVzdC5jbG9uZShyZXF1ZXN0KTtcbiAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKHJlcXVlc3QuaGVhZGVycykpIHtcbiAgICBpZiAoR0VORVJBVEVEX0hFQURFUlMuaW5kZXhPZihoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbaGVhZGVyTmFtZV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXF1ZXN0O1xufSwgXCJwcmVwYXJlUmVxdWVzdFwiKTtcblxuLy8gc3JjL1NpZ25hdHVyZVY0QmFzZS50c1xuXG52YXIgaW1wb3J0X3V0aWxfbWlkZGxld2FyZSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiKTtcblxudmFyIGltcG9ydF91dGlsX3V0Zjg0ID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xuXG4vLyBzcmMvZ2V0Q2Fub25pY2FsUXVlcnkudHNcbnZhciBpbXBvcnRfdXRpbF91cmlfZXNjYXBlID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11cmktZXNjYXBlXCIpO1xudmFyIGdldENhbm9uaWNhbFF1ZXJ5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeyBxdWVyeSA9IHt9IH0pID0+IHtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBjb25zdCBzZXJpYWxpemVkID0ge307XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHF1ZXJ5KSkge1xuICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gU0lHTkFUVVJFX0hFQURFUikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGVuY29kZWRLZXkgPSAoMCwgaW1wb3J0X3V0aWxfdXJpX2VzY2FwZS5lc2NhcGVVcmkpKGtleSk7XG4gICAga2V5cy5wdXNoKGVuY29kZWRLZXkpO1xuICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBzZXJpYWxpemVkW2VuY29kZWRLZXldID0gYCR7ZW5jb2RlZEtleX09JHsoMCwgaW1wb3J0X3V0aWxfdXJpX2VzY2FwZS5lc2NhcGVVcmkpKHZhbHVlKX1gO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHNlcmlhbGl6ZWRbZW5jb2RlZEtleV0gPSB2YWx1ZS5zbGljZSgwKS5yZWR1Y2UoKGVuY29kZWQsIHZhbHVlMikgPT4gZW5jb2RlZC5jb25jYXQoW2Ake2VuY29kZWRLZXl9PSR7KDAsIGltcG9ydF91dGlsX3VyaV9lc2NhcGUuZXNjYXBlVXJpKSh2YWx1ZTIpfWBdKSwgW10pLnNvcnQoKS5qb2luKFwiJlwiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGtleXMuc29ydCgpLm1hcCgoa2V5KSA9PiBzZXJpYWxpemVkW2tleV0pLmZpbHRlcigoc2VyaWFsaXplZDIpID0+IHNlcmlhbGl6ZWQyKS5qb2luKFwiJlwiKTtcbn0sIFwiZ2V0Q2Fub25pY2FsUXVlcnlcIik7XG5cbi8vIHNyYy91dGlsRGF0ZS50c1xudmFyIGlzbzg2MDEgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0aW1lKSA9PiB0b0RhdGUodGltZSkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGR7M31aJC8sIFwiWlwiKSwgXCJpc284NjAxXCIpO1xudmFyIHRvRGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRpbWUpID0+IHtcbiAgaWYgKHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWUgKiAxZTMpO1xuICB9XG4gIGlmICh0eXBlb2YgdGltZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChOdW1iZXIodGltZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOdW1iZXIodGltZSkgKiAxZTMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUodGltZSk7XG4gIH1cbiAgcmV0dXJuIHRpbWU7XG59LCBcInRvRGF0ZVwiKTtcblxuLy8gc3JjL1NpZ25hdHVyZVY0QmFzZS50c1xudmFyIFNpZ25hdHVyZVY0QmFzZSA9IGNsYXNzIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJTaWduYXR1cmVWNEJhc2VcIik7XG4gIH1cbiAgY29uc3RydWN0b3Ioe1xuICAgIGFwcGx5Q2hlY2tzdW0sXG4gICAgY3JlZGVudGlhbHMsXG4gICAgcmVnaW9uLFxuICAgIHNlcnZpY2UsXG4gICAgc2hhMjU2LFxuICAgIHVyaUVzY2FwZVBhdGggPSB0cnVlXG4gIH0pIHtcbiAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIHRoaXMuc2hhMjU2ID0gc2hhMjU2O1xuICAgIHRoaXMudXJpRXNjYXBlUGF0aCA9IHVyaUVzY2FwZVBhdGg7XG4gICAgdGhpcy5hcHBseUNoZWNrc3VtID0gdHlwZW9mIGFwcGx5Q2hlY2tzdW0gPT09IFwiYm9vbGVhblwiID8gYXBwbHlDaGVja3N1bSA6IHRydWU7XG4gICAgdGhpcy5yZWdpb25Qcm92aWRlciA9ICgwLCBpbXBvcnRfdXRpbF9taWRkbGV3YXJlLm5vcm1hbGl6ZVByb3ZpZGVyKShyZWdpb24pO1xuICAgIHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyID0gKDAsIGltcG9ydF91dGlsX21pZGRsZXdhcmUubm9ybWFsaXplUHJvdmlkZXIpKGNyZWRlbnRpYWxzKTtcbiAgfVxuICBjcmVhdGVDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QsIGNhbm9uaWNhbEhlYWRlcnMsIHBheWxvYWRIYXNoKSB7XG4gICAgY29uc3Qgc29ydGVkSGVhZGVycyA9IE9iamVjdC5rZXlzKGNhbm9uaWNhbEhlYWRlcnMpLnNvcnQoKTtcbiAgICByZXR1cm4gYCR7cmVxdWVzdC5tZXRob2R9XG4ke3RoaXMuZ2V0Q2Fub25pY2FsUGF0aChyZXF1ZXN0KX1cbiR7Z2V0Q2Fub25pY2FsUXVlcnkocmVxdWVzdCl9XG4ke3NvcnRlZEhlYWRlcnMubWFwKChuYW1lKSA9PiBgJHtuYW1lfToke2Nhbm9uaWNhbEhlYWRlcnNbbmFtZV19YCkuam9pbihcIlxcblwiKX1cblxuJHtzb3J0ZWRIZWFkZXJzLmpvaW4oXCI7XCIpfVxuJHtwYXlsb2FkSGFzaH1gO1xuICB9XG4gIGFzeW5jIGNyZWF0ZVN0cmluZ1RvU2lnbihsb25nRGF0ZSwgY3JlZGVudGlhbFNjb3BlLCBjYW5vbmljYWxSZXF1ZXN0LCBhbGdvcml0aG1JZGVudGlmaWVyKSB7XG4gICAgY29uc3QgaGFzaCA9IG5ldyB0aGlzLnNoYTI1NigpO1xuICAgIGhhc2gudXBkYXRlKCgwLCBpbXBvcnRfdXRpbF91dGY4NC50b1VpbnQ4QXJyYXkpKGNhbm9uaWNhbFJlcXVlc3QpKTtcbiAgICBjb25zdCBoYXNoZWRSZXF1ZXN0ID0gYXdhaXQgaGFzaC5kaWdlc3QoKTtcbiAgICByZXR1cm4gYCR7YWxnb3JpdGhtSWRlbnRpZmllcn1cbiR7bG9uZ0RhdGV9XG4ke2NyZWRlbnRpYWxTY29wZX1cbiR7KDAsIGltcG9ydF91dGlsX2hleF9lbmNvZGluZy50b0hleCkoaGFzaGVkUmVxdWVzdCl9YDtcbiAgfVxuICBnZXRDYW5vbmljYWxQYXRoKHsgcGF0aCB9KSB7XG4gICAgaWYgKHRoaXMudXJpRXNjYXBlUGF0aCkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFBhdGhTZWdtZW50cyA9IFtdO1xuICAgICAgZm9yIChjb25zdCBwYXRoU2VnbWVudCBvZiBwYXRoLnNwbGl0KFwiL1wiKSkge1xuICAgICAgICBpZiAocGF0aFNlZ21lbnQ/Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHBhdGhTZWdtZW50ID09PSBcIi5cIilcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHBhdGhTZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgICAgICBub3JtYWxpemVkUGF0aFNlZ21lbnRzLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vcm1hbGl6ZWRQYXRoU2VnbWVudHMucHVzaChwYXRoU2VnbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYCR7cGF0aD8uc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCJ9JHtub3JtYWxpemVkUGF0aFNlZ21lbnRzLmpvaW4oXCIvXCIpfSR7bm9ybWFsaXplZFBhdGhTZWdtZW50cy5sZW5ndGggPiAwICYmIHBhdGg/LmVuZHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIn1gO1xuICAgICAgY29uc3QgZG91YmxlRW5jb2RlZCA9ICgwLCBpbXBvcnRfdXRpbF91cmlfZXNjYXBlLmVzY2FwZVVyaSkobm9ybWFsaXplZFBhdGgpO1xuICAgICAgcmV0dXJuIGRvdWJsZUVuY29kZWQucmVwbGFjZSgvJTJGL2csIFwiL1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgdmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgaWYgKHR5cGVvZiBjcmVkZW50aWFscyAhPT0gXCJvYmplY3RcIiB8fCAvLyBAdHMtZXhwZWN0LWVycm9yOiBQcm9wZXJ0eSAnYWNjZXNzS2V5SWQnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ29iamVjdCcudHMoMjMzOSlcbiAgICB0eXBlb2YgY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQgIT09IFwic3RyaW5nXCIgfHwgLy8gQHRzLWV4cGVjdC1lcnJvcjogUHJvcGVydHkgJ3NlY3JldEFjY2Vzc0tleScgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAnb2JqZWN0Jy50cygyMzM5KVxuICAgIHR5cGVvZiBjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlc29sdmVkIGNyZWRlbnRpYWwgb2JqZWN0IGlzIG5vdCB2YWxpZFwiKTtcbiAgICB9XG4gIH1cbiAgZm9ybWF0RGF0ZShub3cpIHtcbiAgICBjb25zdCBsb25nRGF0ZSA9IGlzbzg2MDEobm93KS5yZXBsYWNlKC9bXFwtOl0vZywgXCJcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvbmdEYXRlLFxuICAgICAgc2hvcnREYXRlOiBsb25nRGF0ZS5zbGljZSgwLCA4KVxuICAgIH07XG4gIH1cbiAgZ2V0Q2Fub25pY2FsSGVhZGVyTGlzdChoZWFkZXJzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGhlYWRlcnMpLnNvcnQoKS5qb2luKFwiO1wiKTtcbiAgfVxufTtcblxuLy8gc3JjL1NpZ25hdHVyZVY0LnRzXG52YXIgU2lnbmF0dXJlVjQgPSBjbGFzcyBleHRlbmRzIFNpZ25hdHVyZVY0QmFzZSB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBhcHBseUNoZWNrc3VtLFxuICAgIGNyZWRlbnRpYWxzLFxuICAgIHJlZ2lvbixcbiAgICBzZXJ2aWNlLFxuICAgIHNoYTI1NixcbiAgICB1cmlFc2NhcGVQYXRoID0gdHJ1ZVxuICB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgYXBwbHlDaGVja3N1bSxcbiAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgcmVnaW9uLFxuICAgICAgc2VydmljZSxcbiAgICAgIHNoYTI1NixcbiAgICAgIHVyaUVzY2FwZVBhdGhcbiAgICB9KTtcbiAgICB0aGlzLmhlYWRlckZvcm1hdHRlciA9IG5ldyBIZWFkZXJGb3JtYXR0ZXIoKTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlNpZ25hdHVyZVY0XCIpO1xuICB9XG4gIGFzeW5jIHByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBzaWduaW5nRGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLFxuICAgICAgZXhwaXJlc0luID0gMzYwMCxcbiAgICAgIHVuc2lnbmFibGVIZWFkZXJzLFxuICAgICAgdW5ob2lzdGFibGVIZWFkZXJzLFxuICAgICAgc2lnbmFibGVIZWFkZXJzLFxuICAgICAgaG9pc3RhYmxlSGVhZGVycyxcbiAgICAgIHNpZ25pbmdSZWdpb24sXG4gICAgICBzaWduaW5nU2VydmljZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIoKTtcbiAgICB0aGlzLnZhbGlkYXRlUmVzb2x2ZWRDcmVkZW50aWFscyhjcmVkZW50aWFscyk7XG4gICAgY29uc3QgcmVnaW9uID0gc2lnbmluZ1JlZ2lvbiA/PyBhd2FpdCB0aGlzLnJlZ2lvblByb3ZpZGVyKCk7XG4gICAgY29uc3QgeyBsb25nRGF0ZSwgc2hvcnREYXRlIH0gPSB0aGlzLmZvcm1hdERhdGUoc2lnbmluZ0RhdGUpO1xuICAgIGlmIChleHBpcmVzSW4gPiBNQVhfUFJFU0lHTkVEX1RUTCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICBcIlNpZ25hdHVyZSB2ZXJzaW9uIDQgcHJlc2lnbmVkIFVSTHMgbXVzdCBoYXZlIGFuIGV4cGlyYXRpb24gZGF0ZSBsZXNzIHRoYW4gb25lIHdlZWsgaW4gdGhlIGZ1dHVyZVwiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzY29wZSA9IGNyZWF0ZVNjb3BlKHNob3J0RGF0ZSwgcmVnaW9uLCBzaWduaW5nU2VydmljZSA/PyB0aGlzLnNlcnZpY2UpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBtb3ZlSGVhZGVyc1RvUXVlcnkocHJlcGFyZVJlcXVlc3Qob3JpZ2luYWxSZXF1ZXN0KSwgeyB1bmhvaXN0YWJsZUhlYWRlcnMsIGhvaXN0YWJsZUhlYWRlcnMgfSk7XG4gICAgaWYgKGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbikge1xuICAgICAgcmVxdWVzdC5xdWVyeVtUT0tFTl9RVUVSWV9QQVJBTV0gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47XG4gICAgfVxuICAgIHJlcXVlc3QucXVlcnlbQUxHT1JJVEhNX1FVRVJZX1BBUkFNXSA9IEFMR09SSVRITV9JREVOVElGSUVSO1xuICAgIHJlcXVlc3QucXVlcnlbQ1JFREVOVElBTF9RVUVSWV9QQVJBTV0gPSBgJHtjcmVkZW50aWFscy5hY2Nlc3NLZXlJZH0vJHtzY29wZX1gO1xuICAgIHJlcXVlc3QucXVlcnlbQU1aX0RBVEVfUVVFUllfUEFSQU1dID0gbG9uZ0RhdGU7XG4gICAgcmVxdWVzdC5xdWVyeVtFWFBJUkVTX1FVRVJZX1BBUkFNXSA9IGV4cGlyZXNJbi50b1N0cmluZygxMCk7XG4gICAgY29uc3QgY2Fub25pY2FsSGVhZGVycyA9IGdldENhbm9uaWNhbEhlYWRlcnMocmVxdWVzdCwgdW5zaWduYWJsZUhlYWRlcnMsIHNpZ25hYmxlSGVhZGVycyk7XG4gICAgcmVxdWVzdC5xdWVyeVtTSUdORURfSEVBREVSU19RVUVSWV9QQVJBTV0gPSB0aGlzLmdldENhbm9uaWNhbEhlYWRlckxpc3QoY2Fub25pY2FsSGVhZGVycyk7XG4gICAgcmVxdWVzdC5xdWVyeVtTSUdOQVRVUkVfUVVFUllfUEFSQU1dID0gYXdhaXQgdGhpcy5nZXRTaWduYXR1cmUoXG4gICAgICBsb25nRGF0ZSxcbiAgICAgIHNjb3BlLFxuICAgICAgdGhpcy5nZXRTaWduaW5nS2V5KGNyZWRlbnRpYWxzLCByZWdpb24sIHNob3J0RGF0ZSwgc2lnbmluZ1NlcnZpY2UpLFxuICAgICAgdGhpcy5jcmVhdGVDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QsIGNhbm9uaWNhbEhlYWRlcnMsIGF3YWl0IGdldFBheWxvYWRIYXNoKG9yaWdpbmFsUmVxdWVzdCwgdGhpcy5zaGEyNTYpKVxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cbiAgYXN5bmMgc2lnbih0b1NpZ24sIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHRvU2lnbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHRoaXMuc2lnblN0cmluZyh0b1NpZ24sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodG9TaWduLmhlYWRlcnMgJiYgdG9TaWduLnBheWxvYWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpZ25FdmVudCh0b1NpZ24sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodG9TaWduLm1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpZ25NZXNzYWdlKHRvU2lnbiwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNpZ25SZXF1ZXN0KHRvU2lnbiwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHNpZ25FdmVudCh7IGhlYWRlcnMsIHBheWxvYWQgfSwgeyBzaWduaW5nRGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBwcmlvclNpZ25hdHVyZSwgc2lnbmluZ1JlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgfSkge1xuICAgIGNvbnN0IHJlZ2lvbiA9IHNpZ25pbmdSZWdpb24gPz8gYXdhaXQgdGhpcy5yZWdpb25Qcm92aWRlcigpO1xuICAgIGNvbnN0IHsgc2hvcnREYXRlLCBsb25nRGF0ZSB9ID0gdGhpcy5mb3JtYXREYXRlKHNpZ25pbmdEYXRlKTtcbiAgICBjb25zdCBzY29wZSA9IGNyZWF0ZVNjb3BlKHNob3J0RGF0ZSwgcmVnaW9uLCBzaWduaW5nU2VydmljZSA/PyB0aGlzLnNlcnZpY2UpO1xuICAgIGNvbnN0IGhhc2hlZFBheWxvYWQgPSBhd2FpdCBnZXRQYXlsb2FkSGFzaCh7IGhlYWRlcnM6IHt9LCBib2R5OiBwYXlsb2FkIH0sIHRoaXMuc2hhMjU2KTtcbiAgICBjb25zdCBoYXNoID0gbmV3IHRoaXMuc2hhMjU2KCk7XG4gICAgaGFzaC51cGRhdGUoaGVhZGVycyk7XG4gICAgY29uc3QgaGFzaGVkSGVhZGVycyA9ICgwLCBpbXBvcnRfdXRpbF9oZXhfZW5jb2RpbmcudG9IZXgpKGF3YWl0IGhhc2guZGlnZXN0KCkpO1xuICAgIGNvbnN0IHN0cmluZ1RvU2lnbiA9IFtcbiAgICAgIEVWRU5UX0FMR09SSVRITV9JREVOVElGSUVSLFxuICAgICAgbG9uZ0RhdGUsXG4gICAgICBzY29wZSxcbiAgICAgIHByaW9yU2lnbmF0dXJlLFxuICAgICAgaGFzaGVkSGVhZGVycyxcbiAgICAgIGhhc2hlZFBheWxvYWRcbiAgICBdLmpvaW4oXCJcXG5cIik7XG4gICAgcmV0dXJuIHRoaXMuc2lnblN0cmluZyhzdHJpbmdUb1NpZ24sIHsgc2lnbmluZ0RhdGUsIHNpZ25pbmdSZWdpb246IHJlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgfSk7XG4gIH1cbiAgYXN5bmMgc2lnbk1lc3NhZ2Uoc2lnbmFibGVNZXNzYWdlLCB7IHNpZ25pbmdEYXRlID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIHNpZ25pbmdSZWdpb24sIHNpZ25pbmdTZXJ2aWNlIH0pIHtcbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5zaWduRXZlbnQoXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyRm9ybWF0dGVyLmZvcm1hdChzaWduYWJsZU1lc3NhZ2UubWVzc2FnZS5oZWFkZXJzKSxcbiAgICAgICAgcGF5bG9hZDogc2lnbmFibGVNZXNzYWdlLm1lc3NhZ2UuYm9keVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2lnbmluZ0RhdGUsXG4gICAgICAgIHNpZ25pbmdSZWdpb24sXG4gICAgICAgIHNpZ25pbmdTZXJ2aWNlLFxuICAgICAgICBwcmlvclNpZ25hdHVyZTogc2lnbmFibGVNZXNzYWdlLnByaW9yU2lnbmF0dXJlXG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKChzaWduYXR1cmUpID0+IHtcbiAgICAgIHJldHVybiB7IG1lc3NhZ2U6IHNpZ25hYmxlTWVzc2FnZS5tZXNzYWdlLCBzaWduYXR1cmUgfTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBzaWduU3RyaW5nKHN0cmluZ1RvU2lnbiwgeyBzaWduaW5nRGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSB9ID0ge30pIHtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyKCk7XG4gICAgdGhpcy52YWxpZGF0ZVJlc29sdmVkQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMpO1xuICAgIGNvbnN0IHJlZ2lvbiA9IHNpZ25pbmdSZWdpb24gPz8gYXdhaXQgdGhpcy5yZWdpb25Qcm92aWRlcigpO1xuICAgIGNvbnN0IHsgc2hvcnREYXRlIH0gPSB0aGlzLmZvcm1hdERhdGUoc2lnbmluZ0RhdGUpO1xuICAgIGNvbnN0IGhhc2ggPSBuZXcgdGhpcy5zaGEyNTYoYXdhaXQgdGhpcy5nZXRTaWduaW5nS2V5KGNyZWRlbnRpYWxzLCByZWdpb24sIHNob3J0RGF0ZSwgc2lnbmluZ1NlcnZpY2UpKTtcbiAgICBoYXNoLnVwZGF0ZSgoMCwgaW1wb3J0X3V0aWxfdXRmODUudG9VaW50OEFycmF5KShzdHJpbmdUb1NpZ24pKTtcbiAgICByZXR1cm4gKDAsIGltcG9ydF91dGlsX2hleF9lbmNvZGluZy50b0hleCkoYXdhaXQgaGFzaC5kaWdlc3QoKSk7XG4gIH1cbiAgYXN5bmMgc2lnblJlcXVlc3QocmVxdWVzdFRvU2lnbiwge1xuICAgIHNpZ25pbmdEYXRlID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksXG4gICAgc2lnbmFibGVIZWFkZXJzLFxuICAgIHVuc2lnbmFibGVIZWFkZXJzLFxuICAgIHNpZ25pbmdSZWdpb24sXG4gICAgc2lnbmluZ1NlcnZpY2VcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCB0aGlzLmNyZWRlbnRpYWxQcm92aWRlcigpO1xuICAgIHRoaXMudmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICBjb25zdCByZWdpb24gPSBzaWduaW5nUmVnaW9uID8/IGF3YWl0IHRoaXMucmVnaW9uUHJvdmlkZXIoKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gcHJlcGFyZVJlcXVlc3QocmVxdWVzdFRvU2lnbik7XG4gICAgY29uc3QgeyBsb25nRGF0ZSwgc2hvcnREYXRlIH0gPSB0aGlzLmZvcm1hdERhdGUoc2lnbmluZ0RhdGUpO1xuICAgIGNvbnN0IHNjb3BlID0gY3JlYXRlU2NvcGUoc2hvcnREYXRlLCByZWdpb24sIHNpZ25pbmdTZXJ2aWNlID8/IHRoaXMuc2VydmljZSk7XG4gICAgcmVxdWVzdC5oZWFkZXJzW0FNWl9EQVRFX0hFQURFUl0gPSBsb25nRGF0ZTtcbiAgICBpZiAoY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuKSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnNbVE9LRU5fSEVBREVSXSA9IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbjtcbiAgICB9XG4gICAgY29uc3QgcGF5bG9hZEhhc2ggPSBhd2FpdCBnZXRQYXlsb2FkSGFzaChyZXF1ZXN0LCB0aGlzLnNoYTI1Nik7XG4gICAgaWYgKCFoYXNIZWFkZXIoU0hBMjU2X0hFQURFUiwgcmVxdWVzdC5oZWFkZXJzKSAmJiB0aGlzLmFwcGx5Q2hlY2tzdW0pIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVyc1tTSEEyNTZfSEVBREVSXSA9IHBheWxvYWRIYXNoO1xuICAgIH1cbiAgICBjb25zdCBjYW5vbmljYWxIZWFkZXJzID0gZ2V0Q2Fub25pY2FsSGVhZGVycyhyZXF1ZXN0LCB1bnNpZ25hYmxlSGVhZGVycywgc2lnbmFibGVIZWFkZXJzKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLmdldFNpZ25hdHVyZShcbiAgICAgIGxvbmdEYXRlLFxuICAgICAgc2NvcGUsXG4gICAgICB0aGlzLmdldFNpZ25pbmdLZXkoY3JlZGVudGlhbHMsIHJlZ2lvbiwgc2hvcnREYXRlLCBzaWduaW5nU2VydmljZSksXG4gICAgICB0aGlzLmNyZWF0ZUNhbm9uaWNhbFJlcXVlc3QocmVxdWVzdCwgY2Fub25pY2FsSGVhZGVycywgcGF5bG9hZEhhc2gpXG4gICAgKTtcbiAgICByZXF1ZXN0LmhlYWRlcnNbQVVUSF9IRUFERVJdID0gYCR7QUxHT1JJVEhNX0lERU5USUZJRVJ9IENyZWRlbnRpYWw9JHtjcmVkZW50aWFscy5hY2Nlc3NLZXlJZH0vJHtzY29wZX0sIFNpZ25lZEhlYWRlcnM9JHt0aGlzLmdldENhbm9uaWNhbEhlYWRlckxpc3QoY2Fub25pY2FsSGVhZGVycyl9LCBTaWduYXR1cmU9JHtzaWduYXR1cmV9YDtcbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuICBhc3luYyBnZXRTaWduYXR1cmUobG9uZ0RhdGUsIGNyZWRlbnRpYWxTY29wZSwga2V5UHJvbWlzZSwgY2Fub25pY2FsUmVxdWVzdCkge1xuICAgIGNvbnN0IHN0cmluZ1RvU2lnbiA9IGF3YWl0IHRoaXMuY3JlYXRlU3RyaW5nVG9TaWduKFxuICAgICAgbG9uZ0RhdGUsXG4gICAgICBjcmVkZW50aWFsU2NvcGUsXG4gICAgICBjYW5vbmljYWxSZXF1ZXN0LFxuICAgICAgQUxHT1JJVEhNX0lERU5USUZJRVJcbiAgICApO1xuICAgIGNvbnN0IGhhc2ggPSBuZXcgdGhpcy5zaGEyNTYoYXdhaXQga2V5UHJvbWlzZSk7XG4gICAgaGFzaC51cGRhdGUoKDAsIGltcG9ydF91dGlsX3V0Zjg1LnRvVWludDhBcnJheSkoc3RyaW5nVG9TaWduKSk7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF9oZXhfZW5jb2RpbmcudG9IZXgpKGF3YWl0IGhhc2guZGlnZXN0KCkpO1xuICB9XG4gIGdldFNpZ25pbmdLZXkoY3JlZGVudGlhbHMsIHJlZ2lvbiwgc2hvcnREYXRlLCBzZXJ2aWNlKSB7XG4gICAgcmV0dXJuIGdldFNpZ25pbmdLZXkodGhpcy5zaGEyNTYsIGNyZWRlbnRpYWxzLCBzaG9ydERhdGUsIHJlZ2lvbiwgc2VydmljZSB8fCB0aGlzLnNlcnZpY2UpO1xuICB9XG59O1xuXG4vLyBzcmMvc2lnbmF0dXJlLXY0YS1jb250YWluZXIudHNcbnZhciBzaWduYXR1cmVWNGFDb250YWluZXIgPSB7XG4gIFNpZ25hdHVyZVY0YTogbnVsbFxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENhbm9uaWNhbEhlYWRlcnMsXG4gIGdldENhbm9uaWNhbFF1ZXJ5LFxuICBnZXRQYXlsb2FkSGFzaCxcbiAgbW92ZUhlYWRlcnNUb1F1ZXJ5LFxuICBwcmVwYXJlUmVxdWVzdCxcbiAgU2lnbmF0dXJlVjRCYXNlLFxuICBoYXNIZWFkZXIsXG4gIFNpZ25hdHVyZVY0LFxuICBBTEdPUklUSE1fUVVFUllfUEFSQU0sXG4gIENSRURFTlRJQUxfUVVFUllfUEFSQU0sXG4gIEFNWl9EQVRFX1FVRVJZX1BBUkFNLFxuICBTSUdORURfSEVBREVSU19RVUVSWV9QQVJBTSxcbiAgRVhQSVJFU19RVUVSWV9QQVJBTSxcbiAgU0lHTkFUVVJFX1FVRVJZX1BBUkFNLFxuICBUT0tFTl9RVUVSWV9QQVJBTSxcbiAgUkVHSU9OX1NFVF9QQVJBTSxcbiAgQVVUSF9IRUFERVIsXG4gIEFNWl9EQVRFX0hFQURFUixcbiAgREFURV9IRUFERVIsXG4gIEdFTkVSQVRFRF9IRUFERVJTLFxuICBTSUdOQVRVUkVfSEVBREVSLFxuICBTSEEyNTZfSEVBREVSLFxuICBUT0tFTl9IRUFERVIsXG4gIEhPU1RfSEVBREVSLFxuICBBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTLFxuICBQUk9YWV9IRUFERVJfUEFUVEVSTixcbiAgU0VDX0hFQURFUl9QQVRURVJOLFxuICBVTlNJR05BQkxFX1BBVFRFUk5TLFxuICBBTEdPUklUSE1fSURFTlRJRklFUixcbiAgQUxHT1JJVEhNX0lERU5USUZJRVJfVjRBLFxuICBFVkVOVF9BTEdPUklUSE1fSURFTlRJRklFUixcbiAgVU5TSUdORURfUEFZTE9BRCxcbiAgTUFYX0NBQ0hFX1NJWkUsXG4gIEtFWV9UWVBFX0lERU5USUZJRVIsXG4gIE1BWF9QUkVTSUdORURfVFRMLFxuICBjcmVhdGVTY29wZSxcbiAgZ2V0U2lnbmluZ0tleSxcbiAgY2xlYXJDcmVkZW50aWFsQ2FjaGUsXG4gIHNpZ25hdHVyZVY0YUNvbnRhaW5lclxufSk7XG5cbiIsICJpbXBvcnQgeyBzZXRDcmVkZW50aWFsRmVhdHVyZSB9IGZyb20gXCJAYXdzLXNkay9jb3JlL2NsaWVudFwiO1xuaW1wb3J0IHsgZG9lc0lkZW50aXR5UmVxdWlyZVJlZnJlc2gsIGlzSWRlbnRpdHlFeHBpcmVkLCBtZW1vaXplSWRlbnRpdHlQcm92aWRlciwgbm9ybWFsaXplUHJvdmlkZXIsIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgU2lnbmF0dXJlVjQgfSBmcm9tIFwiQHNtaXRoeS9zaWduYXR1cmUtdjRcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgbGV0IGlucHV0Q3JlZGVudGlhbHMgPSBjb25maWcuY3JlZGVudGlhbHM7XG4gICAgbGV0IGlzVXNlclN1cHBsaWVkID0gISFjb25maWcuY3JlZGVudGlhbHM7XG4gICAgbGV0IHJlc29sdmVkQ3JlZGVudGlhbHMgPSB1bmRlZmluZWQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbmZpZywgXCJjcmVkZW50aWFsc1wiLCB7XG4gICAgICAgIHNldChjcmVkZW50aWFscykge1xuICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWxzICYmIGNyZWRlbnRpYWxzICE9PSBpbnB1dENyZWRlbnRpYWxzICYmIGNyZWRlbnRpYWxzICE9PSByZXNvbHZlZENyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgaXNVc2VyU3VwcGxpZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5wdXRDcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgY29uc3QgbWVtb2l6ZWRQcm92aWRlciA9IG5vcm1hbGl6ZUNyZWRlbnRpYWxQcm92aWRlcihjb25maWcsIHtcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogaW5wdXRDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyOiBjb25maWcuY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYm91bmRQcm92aWRlciA9IGJpbmRDYWxsZXJDb25maWcoY29uZmlnLCBtZW1vaXplZFByb3ZpZGVyKTtcbiAgICAgICAgICAgIGlmIChpc1VzZXJTdXBwbGllZCAmJiAhYm91bmRQcm92aWRlci5hdHRyaWJ1dGVkKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscyA9IGFzeW5jIChvcHRpb25zKSA9PiBib3VuZFByb3ZpZGVyKG9wdGlvbnMpLnRoZW4oKGNyZWRzKSA9PiBzZXRDcmVkZW50aWFsRmVhdHVyZShjcmVkcywgXCJDUkVERU5USUFMU19DT0RFXCIsIFwiZVwiKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscy5tZW1vaXplZCA9IGJvdW5kUHJvdmlkZXIubWVtb2l6ZWQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscy5jb25maWdCb3VuZCA9IGJvdW5kUHJvdmlkZXIuY29uZmlnQm91bmQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscy5hdHRyaWJ1dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkQ3JlZGVudGlhbHMgPSBib3VuZFByb3ZpZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRDcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuICAgIGNvbmZpZy5jcmVkZW50aWFscyA9IGlucHV0Q3JlZGVudGlhbHM7XG4gICAgY29uc3QgeyBzaWduaW5nRXNjYXBlUGF0aCA9IHRydWUsIHN5c3RlbUNsb2NrT2Zmc2V0ID0gY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0IHx8IDAsIHNoYTI1NiwgfSA9IGNvbmZpZztcbiAgICBsZXQgc2lnbmVyO1xuICAgIGlmIChjb25maWcuc2lnbmVyKSB7XG4gICAgICAgIHNpZ25lciA9IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5zaWduZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb25maWcucmVnaW9uSW5mb1Byb3ZpZGVyKSB7XG4gICAgICAgIHNpZ25lciA9ICgpID0+IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5yZWdpb24pKClcbiAgICAgICAgICAgIC50aGVuKGFzeW5jIChyZWdpb24pID0+IFtcbiAgICAgICAgICAgIChhd2FpdCBjb25maWcucmVnaW9uSW5mb1Byb3ZpZGVyKHJlZ2lvbiwge1xuICAgICAgICAgICAgICAgIHVzZUZpcHNFbmRwb2ludDogYXdhaXQgY29uZmlnLnVzZUZpcHNFbmRwb2ludCgpLFxuICAgICAgICAgICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBhd2FpdCBjb25maWcudXNlRHVhbHN0YWNrRW5kcG9pbnQoKSxcbiAgICAgICAgICAgIH0pKSB8fCB7fSxcbiAgICAgICAgICAgIHJlZ2lvbixcbiAgICAgICAgXSlcbiAgICAgICAgICAgIC50aGVuKChbcmVnaW9uSW5mbywgcmVnaW9uXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSB9ID0gcmVnaW9uSW5mbztcbiAgICAgICAgICAgIGNvbmZpZy5zaWduaW5nUmVnaW9uID0gY29uZmlnLnNpZ25pbmdSZWdpb24gfHwgc2lnbmluZ1JlZ2lvbiB8fCByZWdpb247XG4gICAgICAgICAgICBjb25maWcuc2lnbmluZ05hbWUgPSBjb25maWcuc2lnbmluZ05hbWUgfHwgc2lnbmluZ1NlcnZpY2UgfHwgY29uZmlnLnNlcnZpY2VJZDtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IGNvbmZpZy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICByZWdpb246IGNvbmZpZy5zaWduaW5nUmVnaW9uLFxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IGNvbmZpZy5zaWduaW5nTmFtZSxcbiAgICAgICAgICAgICAgICBzaGEyNTYsXG4gICAgICAgICAgICAgICAgdXJpRXNjYXBlUGF0aDogc2lnbmluZ0VzY2FwZVBhdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgU2lnbmVyQ3RvciA9IGNvbmZpZy5zaWduZXJDb25zdHJ1Y3RvciB8fCBTaWduYXR1cmVWNDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmVyQ3RvcihwYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNpZ25lciA9IGFzeW5jIChhdXRoU2NoZW1lKSA9PiB7XG4gICAgICAgICAgICBhdXRoU2NoZW1lID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lndjRcIixcbiAgICAgICAgICAgICAgICBzaWduaW5nTmFtZTogY29uZmlnLnNpZ25pbmdOYW1lIHx8IGNvbmZpZy5kZWZhdWx0U2lnbmluZ05hbWUsXG4gICAgICAgICAgICAgICAgc2lnbmluZ1JlZ2lvbjogYXdhaXQgbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnJlZ2lvbikoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgICAgIH0sIGF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbmluZ1JlZ2lvbiA9IGF1dGhTY2hlbWUuc2lnbmluZ1JlZ2lvbjtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25pbmdTZXJ2aWNlID0gYXV0aFNjaGVtZS5zaWduaW5nTmFtZTtcbiAgICAgICAgICAgIGNvbmZpZy5zaWduaW5nUmVnaW9uID0gY29uZmlnLnNpZ25pbmdSZWdpb24gfHwgc2lnbmluZ1JlZ2lvbjtcbiAgICAgICAgICAgIGNvbmZpZy5zaWduaW5nTmFtZSA9IGNvbmZpZy5zaWduaW5nTmFtZSB8fCBzaWduaW5nU2VydmljZSB8fCBjb25maWcuc2VydmljZUlkO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogY29uZmlnLnNpZ25pbmdSZWdpb24sXG4gICAgICAgICAgICAgICAgc2VydmljZTogY29uZmlnLnNpZ25pbmdOYW1lLFxuICAgICAgICAgICAgICAgIHNoYTI1NixcbiAgICAgICAgICAgICAgICB1cmlFc2NhcGVQYXRoOiBzaWduaW5nRXNjYXBlUGF0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBTaWduZXJDdG9yID0gY29uZmlnLnNpZ25lckNvbnN0cnVjdG9yIHx8IFNpZ25hdHVyZVY0O1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduZXJDdG9yKHBhcmFtcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc29sdmVkQ29uZmlnID0gT2JqZWN0LmFzc2lnbihjb25maWcsIHtcbiAgICAgICAgc3lzdGVtQ2xvY2tPZmZzZXQsXG4gICAgICAgIHNpZ25pbmdFc2NhcGVQYXRoLFxuICAgICAgICBzaWduZXIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc29sdmVkQ29uZmlnO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlQVdTU0RLU2lnVjRDb25maWcgPSByZXNvbHZlQXdzU2RrU2lnVjRDb25maWc7XG5mdW5jdGlvbiBub3JtYWxpemVDcmVkZW50aWFsUHJvdmlkZXIoY29uZmlnLCB7IGNyZWRlbnRpYWxzLCBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyLCB9KSB7XG4gICAgbGV0IGNyZWRlbnRpYWxzUHJvdmlkZXI7XG4gICAgaWYgKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHM/Lm1lbW9pemVkKSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gbWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIoY3JlZGVudGlhbHMsIGlzSWRlbnRpdHlFeHBpcmVkLCBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gY3JlZGVudGlhbHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gbm9ybWFsaXplUHJvdmlkZXIoY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcihPYmplY3QuYXNzaWduKHt9LCBjb25maWcsIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDbGllbnRDb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBhd3Mtc2RrL2NvcmU6OnJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyAtIGBjcmVkZW50aWFsc2Agbm90IHByb3ZpZGVkIGFuZCBubyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyIHdhcyBjb25maWd1cmVkLlwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlZGVudGlhbHNQcm92aWRlci5tZW1vaXplZCA9IHRydWU7XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzUHJvdmlkZXI7XG59XG5mdW5jdGlvbiBiaW5kQ2FsbGVyQ29uZmlnKGNvbmZpZywgY3JlZGVudGlhbHNQcm92aWRlcikge1xuICAgIGlmIChjcmVkZW50aWFsc1Byb3ZpZGVyLmNvbmZpZ0JvdW5kKSB7XG4gICAgICAgIHJldHVybiBjcmVkZW50aWFsc1Byb3ZpZGVyO1xuICAgIH1cbiAgICBjb25zdCBmbiA9IGFzeW5jIChvcHRpb25zKSA9PiBjcmVkZW50aWFsc1Byb3ZpZGVyKHsgLi4ub3B0aW9ucywgY2FsbGVyQ2xpZW50Q29uZmlnOiBjb25maWcgfSk7XG4gICAgZm4ubWVtb2l6ZWQgPSBjcmVkZW50aWFsc1Byb3ZpZGVyLm1lbW9pemVkO1xuICAgIGZuLmNvbmZpZ0JvdW5kID0gdHJ1ZTtcbiAgICByZXR1cm4gZm47XG59XG4iLCAiZXhwb3J0IHsgQXdzU2RrU2lnVjRTaWduZXIsIEFXU1NES1NpZ1Y0U2lnbmVyLCB2YWxpZGF0ZVNpZ25pbmdQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vQXdzU2RrU2lnVjRTaWduZXJcIjtcbmV4cG9ydCB7IEF3c1Nka1NpZ1Y0QVNpZ25lciB9IGZyb20gXCIuL0F3c1Nka1NpZ1Y0QVNpZ25lclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX09QVElPTlNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Jlc29sdmVBd3NTZGtTaWdWNEFDb25maWdcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Jlc29sdmVBd3NTZGtTaWdWNENvbmZpZ1wiO1xuIiwgImV4cG9ydCAqIGZyb20gXCIuL2F3c19zZGtcIjtcbiIsICJleHBvcnQgY29uc3QgX3RvU3RyID0gKHZhbCkgPT4ge1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgIGNvbnN0IHdhcm5pbmcgPSBuZXcgRXJyb3IoYFJlY2VpdmVkIG51bWJlciAke3ZhbH0gd2hlcmUgYSBzdHJpbmcgd2FzIGV4cGVjdGVkLmApO1xuICAgICAgICB3YXJuaW5nLm5hbWUgPSBcIldhcm5pbmdcIjtcbiAgICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBjb25zdCB3YXJuaW5nID0gbmV3IEVycm9yKGBSZWNlaXZlZCBib29sZWFuICR7dmFsfSB3aGVyZSBhIHN0cmluZyB3YXMgZXhwZWN0ZWQuYCk7XG4gICAgICAgIHdhcm5pbmcubmFtZSA9IFwiV2FybmluZ1wiO1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn07XG5leHBvcnQgY29uc3QgX3RvQm9vbCA9ICh2YWwpID0+IHtcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgbG93ZXJjYXNlID0gdmFsLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh2YWwgIT09IFwiXCIgJiYgbG93ZXJjYXNlICE9PSBcImZhbHNlXCIgJiYgbG93ZXJjYXNlICE9PSBcInRydWVcIikge1xuICAgICAgICAgICAgY29uc3Qgd2FybmluZyA9IG5ldyBFcnJvcihgUmVjZWl2ZWQgc3RyaW5nIFwiJHt2YWx9XCIgd2hlcmUgYSBib29sZWFuIHdhcyBleHBlY3RlZC5gKTtcbiAgICAgICAgICAgIHdhcm5pbmcubmFtZSA9IFwiV2FybmluZ1wiO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWwgIT09IFwiXCIgJiYgbG93ZXJjYXNlICE9PSBcImZhbHNlXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59O1xuZXhwb3J0IGNvbnN0IF90b051bSA9ICh2YWwpID0+IHtcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcih2YWwpO1xuICAgICAgICBpZiAobnVtLnRvU3RyaW5nKCkgIT09IHZhbCkge1xuICAgICAgICAgICAgY29uc3Qgd2FybmluZyA9IG5ldyBFcnJvcihgUmVjZWl2ZWQgc3RyaW5nIFwiJHt2YWx9XCIgd2hlcmUgYSBudW1iZXIgd2FzIGV4cGVjdGVkLmApO1xuICAgICAgICAgICAgd2FybmluZy5uYW1lID0gXCJXYXJuaW5nXCI7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59O1xuIiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBjb25zdHJ1Y3RTdGFjazogKCkgPT4gY29uc3RydWN0U3RhY2tcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvTWlkZGxld2FyZVN0YWNrLnRzXG52YXIgZ2V0QWxsQWxpYXNlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG5hbWUsIGFsaWFzZXMpID0+IHtcbiAgY29uc3QgX2FsaWFzZXMgPSBbXTtcbiAgaWYgKG5hbWUpIHtcbiAgICBfYWxpYXNlcy5wdXNoKG5hbWUpO1xuICB9XG4gIGlmIChhbGlhc2VzKSB7XG4gICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICBfYWxpYXNlcy5wdXNoKGFsaWFzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9hbGlhc2VzO1xufSwgXCJnZXRBbGxBbGlhc2VzXCIpO1xudmFyIGdldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChuYW1lLCBhbGlhc2VzKSA9PiB7XG4gIHJldHVybiBgJHtuYW1lIHx8IFwiYW5vbnltb3VzXCJ9JHthbGlhc2VzICYmIGFsaWFzZXMubGVuZ3RoID4gMCA/IGAgKGEuay5hLiAke2FsaWFzZXMuam9pbihcIixcIil9KWAgOiBcIlwifWA7XG59LCBcImdldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXNcIik7XG52YXIgY29uc3RydWN0U3RhY2sgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgbGV0IGFic29sdXRlRW50cmllcyA9IFtdO1xuICBsZXQgcmVsYXRpdmVFbnRyaWVzID0gW107XG4gIGxldCBpZGVudGlmeU9uUmVzb2x2ZSA9IGZhbHNlO1xuICBjb25zdCBlbnRyaWVzTmFtZVNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHNvcnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbnRyaWVzKSA9PiBlbnRyaWVzLnNvcnQoXG4gICAgKGEsIGIpID0+IHN0ZXBXZWlnaHRzW2Iuc3RlcF0gLSBzdGVwV2VpZ2h0c1thLnN0ZXBdIHx8IHByaW9yaXR5V2VpZ2h0c1tiLnByaW9yaXR5IHx8IFwibm9ybWFsXCJdIC0gcHJpb3JpdHlXZWlnaHRzW2EucHJpb3JpdHkgfHwgXCJub3JtYWxcIl1cbiAgKSwgXCJzb3J0XCIpO1xuICBjb25zdCByZW1vdmVCeU5hbWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0b1JlbW92ZSkgPT4ge1xuICAgIGxldCBpc1JlbW92ZWQgPSBmYWxzZTtcbiAgICBjb25zdCBmaWx0ZXJDYiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBhbGlhc2VzID0gZ2V0QWxsQWxpYXNlcyhlbnRyeS5uYW1lLCBlbnRyeS5hbGlhc2VzKTtcbiAgICAgIGlmIChhbGlhc2VzLmluY2x1ZGVzKHRvUmVtb3ZlKSkge1xuICAgICAgICBpc1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICBlbnRyaWVzTmFtZVNldC5kZWxldGUoYWxpYXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIFwiZmlsdGVyQ2JcIik7XG4gICAgYWJzb2x1dGVFbnRyaWVzID0gYWJzb2x1dGVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgcmVsYXRpdmVFbnRyaWVzID0gcmVsYXRpdmVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgcmV0dXJuIGlzUmVtb3ZlZDtcbiAgfSwgXCJyZW1vdmVCeU5hbWVcIik7XG4gIGNvbnN0IHJlbW92ZUJ5UmVmZXJlbmNlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodG9SZW1vdmUpID0+IHtcbiAgICBsZXQgaXNSZW1vdmVkID0gZmFsc2U7XG4gICAgY29uc3QgZmlsdGVyQ2IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbnRyeSkgPT4ge1xuICAgICAgaWYgKGVudHJ5Lm1pZGRsZXdhcmUgPT09IHRvUmVtb3ZlKSB7XG4gICAgICAgIGlzUmVtb3ZlZCA9IHRydWU7XG4gICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgZ2V0QWxsQWxpYXNlcyhlbnRyeS5uYW1lLCBlbnRyeS5hbGlhc2VzKSkge1xuICAgICAgICAgIGVudHJpZXNOYW1lU2V0LmRlbGV0ZShhbGlhcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgXCJmaWx0ZXJDYlwiKTtcbiAgICBhYnNvbHV0ZUVudHJpZXMgPSBhYnNvbHV0ZUVudHJpZXMuZmlsdGVyKGZpbHRlckNiKTtcbiAgICByZWxhdGl2ZUVudHJpZXMgPSByZWxhdGl2ZUVudHJpZXMuZmlsdGVyKGZpbHRlckNiKTtcbiAgICByZXR1cm4gaXNSZW1vdmVkO1xuICB9LCBcInJlbW92ZUJ5UmVmZXJlbmNlXCIpO1xuICBjb25zdCBjbG9uZVRvID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodG9TdGFjaykgPT4ge1xuICAgIGFic29sdXRlRW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgdG9TdGFjay5hZGQoZW50cnkubWlkZGxld2FyZSwgeyAuLi5lbnRyeSB9KTtcbiAgICB9KTtcbiAgICByZWxhdGl2ZUVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgIHRvU3RhY2suYWRkUmVsYXRpdmVUbyhlbnRyeS5taWRkbGV3YXJlLCB7IC4uLmVudHJ5IH0pO1xuICAgIH0pO1xuICAgIHRvU3RhY2suaWRlbnRpZnlPblJlc29sdmU/LihzdGFjay5pZGVudGlmeU9uUmVzb2x2ZSgpKTtcbiAgICByZXR1cm4gdG9TdGFjaztcbiAgfSwgXCJjbG9uZVRvXCIpO1xuICBjb25zdCBleHBhbmRSZWxhdGl2ZU1pZGRsZXdhcmVMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZnJvbSkgPT4ge1xuICAgIGNvbnN0IGV4cGFuZGVkTWlkZGxld2FyZUxpc3QgPSBbXTtcbiAgICBmcm9tLmJlZm9yZS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgaWYgKGVudHJ5LmJlZm9yZS5sZW5ndGggPT09IDAgJiYgZW50cnkuYWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaChlbnRyeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBhbmRlZE1pZGRsZXdhcmVMaXN0LnB1c2goLi4uZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdChlbnRyeSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaChmcm9tKTtcbiAgICBmcm9tLmFmdGVyLnJldmVyc2UoKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgaWYgKGVudHJ5LmJlZm9yZS5sZW5ndGggPT09IDAgJiYgZW50cnkuYWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaChlbnRyeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHBhbmRlZE1pZGRsZXdhcmVMaXN0LnB1c2goLi4uZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdChlbnRyeSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBleHBhbmRlZE1pZGRsZXdhcmVMaXN0O1xuICB9LCBcImV4cGFuZFJlbGF0aXZlTWlkZGxld2FyZUxpc3RcIik7XG4gIGNvbnN0IGdldE1pZGRsZXdhcmVMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZGVidWcgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRBYnNvbHV0ZUVudHJpZXMgPSBbXTtcbiAgICBjb25zdCBub3JtYWxpemVkUmVsYXRpdmVFbnRyaWVzID0gW107XG4gICAgY29uc3Qgbm9ybWFsaXplZEVudHJpZXNOYW1lTWFwID0ge307XG4gICAgYWJzb2x1dGVFbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBub3JtYWxpemVkRW50cnkgPSB7XG4gICAgICAgIC4uLmVudHJ5LFxuICAgICAgICBiZWZvcmU6IFtdLFxuICAgICAgICBhZnRlcjogW11cbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGdldEFsbEFsaWFzZXMobm9ybWFsaXplZEVudHJ5Lm5hbWUsIG5vcm1hbGl6ZWRFbnRyeS5hbGlhc2VzKSkge1xuICAgICAgICBub3JtYWxpemVkRW50cmllc05hbWVNYXBbYWxpYXNdID0gbm9ybWFsaXplZEVudHJ5O1xuICAgICAgfVxuICAgICAgbm9ybWFsaXplZEFic29sdXRlRW50cmllcy5wdXNoKG5vcm1hbGl6ZWRFbnRyeSk7XG4gICAgfSk7XG4gICAgcmVsYXRpdmVFbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCBub3JtYWxpemVkRW50cnkgPSB7XG4gICAgICAgIC4uLmVudHJ5LFxuICAgICAgICBiZWZvcmU6IFtdLFxuICAgICAgICBhZnRlcjogW11cbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGdldEFsbEFsaWFzZXMobm9ybWFsaXplZEVudHJ5Lm5hbWUsIG5vcm1hbGl6ZWRFbnRyeS5hbGlhc2VzKSkge1xuICAgICAgICBub3JtYWxpemVkRW50cmllc05hbWVNYXBbYWxpYXNdID0gbm9ybWFsaXplZEVudHJ5O1xuICAgICAgfVxuICAgICAgbm9ybWFsaXplZFJlbGF0aXZlRW50cmllcy5wdXNoKG5vcm1hbGl6ZWRFbnRyeSk7XG4gICAgfSk7XG4gICAgbm9ybWFsaXplZFJlbGF0aXZlRW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgaWYgKGVudHJ5LnRvTWlkZGxld2FyZSkge1xuICAgICAgICBjb25zdCB0b01pZGRsZXdhcmUgPSBub3JtYWxpemVkRW50cmllc05hbWVNYXBbZW50cnkudG9NaWRkbGV3YXJlXTtcbiAgICAgICAgaWYgKHRvTWlkZGxld2FyZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGAke2VudHJ5LnRvTWlkZGxld2FyZX0gaXMgbm90IGZvdW5kIHdoZW4gYWRkaW5nICR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhlbnRyeS5uYW1lLCBlbnRyeS5hbGlhc2VzKX0gbWlkZGxld2FyZSAke2VudHJ5LnJlbGF0aW9ufSAke2VudHJ5LnRvTWlkZGxld2FyZX1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkucmVsYXRpb24gPT09IFwiYWZ0ZXJcIikge1xuICAgICAgICAgIHRvTWlkZGxld2FyZS5hZnRlci5wdXNoKGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkucmVsYXRpb24gPT09IFwiYmVmb3JlXCIpIHtcbiAgICAgICAgICB0b01pZGRsZXdhcmUuYmVmb3JlLnB1c2goZW50cnkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgbWFpbkNoYWluID0gc29ydChub3JtYWxpemVkQWJzb2x1dGVFbnRyaWVzKS5tYXAoZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdCkucmVkdWNlKFxuICAgICAgKHdob2xlTGlzdCwgZXhwYW5kZWRNaWRkbGV3YXJlTGlzdCkgPT4ge1xuICAgICAgICB3aG9sZUxpc3QucHVzaCguLi5leHBhbmRlZE1pZGRsZXdhcmVMaXN0KTtcbiAgICAgICAgcmV0dXJuIHdob2xlTGlzdDtcbiAgICAgIH0sXG4gICAgICBbXVxuICAgICk7XG4gICAgcmV0dXJuIG1haW5DaGFpbjtcbiAgfSwgXCJnZXRNaWRkbGV3YXJlTGlzdFwiKTtcbiAgY29uc3Qgc3RhY2sgPSB7XG4gICAgYWRkOiAobWlkZGxld2FyZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICBjb25zdCB7IG5hbWUsIG92ZXJyaWRlLCBhbGlhc2VzOiBfYWxpYXNlcyB9ID0gb3B0aW9ucztcbiAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgICAgICAgcHJpb3JpdHk6IFwibm9ybWFsXCIsXG4gICAgICAgIG1pZGRsZXdhcmUsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH07XG4gICAgICBjb25zdCBhbGlhc2VzID0gZ2V0QWxsQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyk7XG4gICAgICBpZiAoYWxpYXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChhbGlhc2VzLnNvbWUoKGFsaWFzKSA9PiBlbnRyaWVzTmFtZVNldC5oYXMoYWxpYXMpKSkge1xuICAgICAgICAgIGlmICghb3ZlcnJpZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBtaWRkbGV3YXJlIG5hbWUgJyR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyl9J2ApO1xuICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgICAgICAgY29uc3QgdG9PdmVycmlkZUluZGV4ID0gYWJzb2x1dGVFbnRyaWVzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKGVudHJ5MikgPT4gZW50cnkyLm5hbWUgPT09IGFsaWFzIHx8IGVudHJ5Mi5hbGlhc2VzPy5zb21lKChhKSA9PiBhID09PSBhbGlhcylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAodG9PdmVycmlkZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRvT3ZlcnJpZGUgPSBhYnNvbHV0ZUVudHJpZXNbdG9PdmVycmlkZUluZGV4XTtcbiAgICAgICAgICAgIGlmICh0b092ZXJyaWRlLnN0ZXAgIT09IGVudHJ5LnN0ZXAgfHwgZW50cnkucHJpb3JpdHkgIT09IHRvT3ZlcnJpZGUucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBcIiR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyh0b092ZXJyaWRlLm5hbWUsIHRvT3ZlcnJpZGUuYWxpYXNlcyl9XCIgbWlkZGxld2FyZSB3aXRoICR7dG9PdmVycmlkZS5wcmlvcml0eX0gcHJpb3JpdHkgaW4gJHt0b092ZXJyaWRlLnN0ZXB9IHN0ZXAgY2Fubm90IGJlIG92ZXJyaWRkZW4gYnkgXCIke2dldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpfVwiIG1pZGRsZXdhcmUgd2l0aCAke2VudHJ5LnByaW9yaXR5fSBwcmlvcml0eSBpbiAke2VudHJ5LnN0ZXB9IHN0ZXAuYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWJzb2x1dGVFbnRyaWVzLnNwbGljZSh0b092ZXJyaWRlSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICBlbnRyaWVzTmFtZVNldC5hZGQoYWxpYXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhYnNvbHV0ZUVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgfSxcbiAgICBhZGRSZWxhdGl2ZVRvOiAobWlkZGxld2FyZSwgb3B0aW9ucykgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lLCBvdmVycmlkZSwgYWxpYXNlczogX2FsaWFzZXMgfSA9IG9wdGlvbnM7XG4gICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgbWlkZGxld2FyZSxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGFsaWFzZXMgPSBnZXRBbGxBbGlhc2VzKG5hbWUsIF9hbGlhc2VzKTtcbiAgICAgIGlmIChhbGlhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGFsaWFzZXMuc29tZSgoYWxpYXMpID0+IGVudHJpZXNOYW1lU2V0LmhhcyhhbGlhcykpKSB7XG4gICAgICAgICAgaWYgKCFvdmVycmlkZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIG1pZGRsZXdhcmUgbmFtZSAnJHtnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzKG5hbWUsIF9hbGlhc2VzKX0nYCk7XG4gICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICBjb25zdCB0b092ZXJyaWRlSW5kZXggPSByZWxhdGl2ZUVudHJpZXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAoZW50cnkyKSA9PiBlbnRyeTIubmFtZSA9PT0gYWxpYXMgfHwgZW50cnkyLmFsaWFzZXM/LnNvbWUoKGEpID0+IGEgPT09IGFsaWFzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICh0b092ZXJyaWRlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG9PdmVycmlkZSA9IHJlbGF0aXZlRW50cmllc1t0b092ZXJyaWRlSW5kZXhdO1xuICAgICAgICAgICAgaWYgKHRvT3ZlcnJpZGUudG9NaWRkbGV3YXJlICE9PSBlbnRyeS50b01pZGRsZXdhcmUgfHwgdG9PdmVycmlkZS5yZWxhdGlvbiAhPT0gZW50cnkucmVsYXRpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBcIiR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyh0b092ZXJyaWRlLm5hbWUsIHRvT3ZlcnJpZGUuYWxpYXNlcyl9XCIgbWlkZGxld2FyZSAke3RvT3ZlcnJpZGUucmVsYXRpb259IFwiJHt0b092ZXJyaWRlLnRvTWlkZGxld2FyZX1cIiBtaWRkbGV3YXJlIGNhbm5vdCBiZSBvdmVycmlkZGVuIGJ5IFwiJHtnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzKG5hbWUsIF9hbGlhc2VzKX1cIiBtaWRkbGV3YXJlICR7ZW50cnkucmVsYXRpb259IFwiJHtlbnRyeS50b01pZGRsZXdhcmV9XCIgbWlkZGxld2FyZS5gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWxhdGl2ZUVudHJpZXMuc3BsaWNlKHRvT3ZlcnJpZGVJbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgICAgIGVudHJpZXNOYW1lU2V0LmFkZChhbGlhcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICB9LFxuICAgIGNsb25lOiAoKSA9PiBjbG9uZVRvKGNvbnN0cnVjdFN0YWNrKCkpLFxuICAgIHVzZTogKHBsdWdpbikgPT4ge1xuICAgICAgcGx1Z2luLmFwcGx5VG9TdGFjayhzdGFjayk7XG4gICAgfSxcbiAgICByZW1vdmU6ICh0b1JlbW92ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0b1JlbW92ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIHJlbW92ZUJ5TmFtZSh0b1JlbW92ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiByZW1vdmVCeVJlZmVyZW5jZSh0b1JlbW92ZSk7XG4gICAgfSxcbiAgICByZW1vdmVCeVRhZzogKHRvUmVtb3ZlKSA9PiB7XG4gICAgICBsZXQgaXNSZW1vdmVkID0gZmFsc2U7XG4gICAgICBjb25zdCBmaWx0ZXJDYiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVudHJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdGFncywgbmFtZSwgYWxpYXNlczogX2FsaWFzZXMgfSA9IGVudHJ5O1xuICAgICAgICBpZiAodGFncyAmJiB0YWdzLmluY2x1ZGVzKHRvUmVtb3ZlKSkge1xuICAgICAgICAgIGNvbnN0IGFsaWFzZXMgPSBnZXRBbGxBbGlhc2VzKG5hbWUsIF9hbGlhc2VzKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICAgIGVudHJpZXNOYW1lU2V0LmRlbGV0ZShhbGlhcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzUmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSwgXCJmaWx0ZXJDYlwiKTtcbiAgICAgIGFic29sdXRlRW50cmllcyA9IGFic29sdXRlRW50cmllcy5maWx0ZXIoZmlsdGVyQ2IpO1xuICAgICAgcmVsYXRpdmVFbnRyaWVzID0gcmVsYXRpdmVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgICByZXR1cm4gaXNSZW1vdmVkO1xuICAgIH0sXG4gICAgY29uY2F0OiAoZnJvbSkgPT4ge1xuICAgICAgY29uc3QgY2xvbmVkID0gY2xvbmVUbyhjb25zdHJ1Y3RTdGFjaygpKTtcbiAgICAgIGNsb25lZC51c2UoZnJvbSk7XG4gICAgICBjbG9uZWQuaWRlbnRpZnlPblJlc29sdmUoXG4gICAgICAgIGlkZW50aWZ5T25SZXNvbHZlIHx8IGNsb25lZC5pZGVudGlmeU9uUmVzb2x2ZSgpIHx8IChmcm9tLmlkZW50aWZ5T25SZXNvbHZlPy4oKSA/PyBmYWxzZSlcbiAgICAgICk7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH0sXG4gICAgYXBwbHlUb1N0YWNrOiBjbG9uZVRvLFxuICAgIGlkZW50aWZ5OiAoKSA9PiB7XG4gICAgICByZXR1cm4gZ2V0TWlkZGxld2FyZUxpc3QodHJ1ZSkubWFwKChtdykgPT4ge1xuICAgICAgICBjb25zdCBzdGVwID0gbXcuc3RlcCA/PyBtdy5yZWxhdGlvbiArIFwiIFwiICsgbXcudG9NaWRkbGV3YXJlO1xuICAgICAgICByZXR1cm4gZ2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhtdy5uYW1lLCBtdy5hbGlhc2VzKSArIFwiIC0gXCIgKyBzdGVwO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBpZGVudGlmeU9uUmVzb2x2ZSh0b2dnbGUpIHtcbiAgICAgIGlmICh0eXBlb2YgdG9nZ2xlID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgaWRlbnRpZnlPblJlc29sdmUgPSB0b2dnbGU7XG4gICAgICByZXR1cm4gaWRlbnRpZnlPblJlc29sdmU7XG4gICAgfSxcbiAgICByZXNvbHZlOiAoaGFuZGxlciwgY29udGV4dCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBtaWRkbGV3YXJlIG9mIGdldE1pZGRsZXdhcmVMaXN0KCkubWFwKChlbnRyeSkgPT4gZW50cnkubWlkZGxld2FyZSkucmV2ZXJzZSgpKSB7XG4gICAgICAgIGhhbmRsZXIgPSBtaWRkbGV3YXJlKGhhbmRsZXIsIGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgaWYgKGlkZW50aWZ5T25SZXNvbHZlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0YWNrLmlkZW50aWZ5KCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZXI7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3RhY2s7XG59LCBcImNvbnN0cnVjdFN0YWNrXCIpO1xudmFyIHN0ZXBXZWlnaHRzID0ge1xuICBpbml0aWFsaXplOiA1LFxuICBzZXJpYWxpemU6IDQsXG4gIGJ1aWxkOiAzLFxuICBmaW5hbGl6ZVJlcXVlc3Q6IDIsXG4gIGRlc2VyaWFsaXplOiAxXG59O1xudmFyIHByaW9yaXR5V2VpZ2h0cyA9IHtcbiAgaGlnaDogMyxcbiAgbm9ybWFsOiAyLFxuICBsb3c6IDFcbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjb25zdHJ1Y3RTdGFja1xufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgQ2xpZW50OiAoKSA9PiBDbGllbnQsXG4gIENvbW1hbmQ6ICgpID0+IENvbW1hbmQsXG4gIExhenlKc29uU3RyaW5nOiAoKSA9PiBMYXp5SnNvblN0cmluZyxcbiAgTm9PcExvZ2dlcjogKCkgPT4gTm9PcExvZ2dlcixcbiAgU0VOU0lUSVZFX1NUUklORzogKCkgPT4gU0VOU0lUSVZFX1NUUklORyxcbiAgU2VydmljZUV4Y2VwdGlvbjogKCkgPT4gU2VydmljZUV4Y2VwdGlvbixcbiAgX2pzb246ICgpID0+IF9qc29uLFxuICBjb2xsZWN0Qm9keTogKCkgPT4gaW1wb3J0X3Byb3RvY29scy5jb2xsZWN0Qm9keSxcbiAgY29udmVydE1hcDogKCkgPT4gY29udmVydE1hcCxcbiAgY3JlYXRlQWdncmVnYXRlZENsaWVudDogKCkgPT4gY3JlYXRlQWdncmVnYXRlZENsaWVudCxcbiAgZGF0ZVRvVXRjU3RyaW5nOiAoKSA9PiBkYXRlVG9VdGNTdHJpbmcsXG4gIGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbjogKCkgPT4gZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uLFxuICBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uOiAoKSA9PiBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uLFxuICBleHBlY3RCb29sZWFuOiAoKSA9PiBleHBlY3RCb29sZWFuLFxuICBleHBlY3RCeXRlOiAoKSA9PiBleHBlY3RCeXRlLFxuICBleHBlY3RGbG9hdDMyOiAoKSA9PiBleHBlY3RGbG9hdDMyLFxuICBleHBlY3RJbnQ6ICgpID0+IGV4cGVjdEludCxcbiAgZXhwZWN0SW50MzI6ICgpID0+IGV4cGVjdEludDMyLFxuICBleHBlY3RMb25nOiAoKSA9PiBleHBlY3RMb25nLFxuICBleHBlY3ROb25OdWxsOiAoKSA9PiBleHBlY3ROb25OdWxsLFxuICBleHBlY3ROdW1iZXI6ICgpID0+IGV4cGVjdE51bWJlcixcbiAgZXhwZWN0T2JqZWN0OiAoKSA9PiBleHBlY3RPYmplY3QsXG4gIGV4cGVjdFNob3J0OiAoKSA9PiBleHBlY3RTaG9ydCxcbiAgZXhwZWN0U3RyaW5nOiAoKSA9PiBleHBlY3RTdHJpbmcsXG4gIGV4cGVjdFVuaW9uOiAoKSA9PiBleHBlY3RVbmlvbixcbiAgZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQ6ICgpID0+IGltcG9ydF9wcm90b2NvbHMuZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQsXG4gIGdldEFycmF5SWZTaW5nbGVJdGVtOiAoKSA9PiBnZXRBcnJheUlmU2luZ2xlSXRlbSxcbiAgZ2V0RGVmYXVsdENsaWVudENvbmZpZ3VyYXRpb246ICgpID0+IGdldERlZmF1bHRDbGllbnRDb25maWd1cmF0aW9uLFxuICBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbjogKCkgPT4gZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sXG4gIGdldFZhbHVlRnJvbVRleHROb2RlOiAoKSA9PiBnZXRWYWx1ZUZyb21UZXh0Tm9kZSxcbiAgaGFuZGxlRmxvYXQ6ICgpID0+IGhhbmRsZUZsb2F0LFxuICBpc1NlcmlhbGl6YWJsZUhlYWRlclZhbHVlOiAoKSA9PiBpc1NlcmlhbGl6YWJsZUhlYWRlclZhbHVlLFxuICBsaW1pdGVkUGFyc2VEb3VibGU6ICgpID0+IGxpbWl0ZWRQYXJzZURvdWJsZSxcbiAgbGltaXRlZFBhcnNlRmxvYXQ6ICgpID0+IGxpbWl0ZWRQYXJzZUZsb2F0LFxuICBsaW1pdGVkUGFyc2VGbG9hdDMyOiAoKSA9PiBsaW1pdGVkUGFyc2VGbG9hdDMyLFxuICBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlOiAoKSA9PiBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlLFxuICBsb2dnZXI6ICgpID0+IGxvZ2dlcixcbiAgbWFwOiAoKSA9PiBtYXAsXG4gIHBhcnNlQm9vbGVhbjogKCkgPT4gcGFyc2VCb29sZWFuLFxuICBwYXJzZUVwb2NoVGltZXN0YW1wOiAoKSA9PiBwYXJzZUVwb2NoVGltZXN0YW1wLFxuICBwYXJzZVJmYzMzMzlEYXRlVGltZTogKCkgPT4gcGFyc2VSZmMzMzM5RGF0ZVRpbWUsXG4gIHBhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldDogKCkgPT4gcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0LFxuICBwYXJzZVJmYzcyMzFEYXRlVGltZTogKCkgPT4gcGFyc2VSZmM3MjMxRGF0ZVRpbWUsXG4gIHF1b3RlSGVhZGVyOiAoKSA9PiBxdW90ZUhlYWRlcixcbiAgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnOiAoKSA9PiByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcsXG4gIHJlc29sdmVkUGF0aDogKCkgPT4gaW1wb3J0X3Byb3RvY29scy5yZXNvbHZlZFBhdGgsXG4gIHNlcmlhbGl6ZURhdGVUaW1lOiAoKSA9PiBzZXJpYWxpemVEYXRlVGltZSxcbiAgc2VyaWFsaXplRmxvYXQ6ICgpID0+IHNlcmlhbGl6ZUZsb2F0LFxuICBzcGxpdEV2ZXJ5OiAoKSA9PiBzcGxpdEV2ZXJ5LFxuICBzcGxpdEhlYWRlcjogKCkgPT4gc3BsaXRIZWFkZXIsXG4gIHN0cmljdFBhcnNlQnl0ZTogKCkgPT4gc3RyaWN0UGFyc2VCeXRlLFxuICBzdHJpY3RQYXJzZURvdWJsZTogKCkgPT4gc3RyaWN0UGFyc2VEb3VibGUsXG4gIHN0cmljdFBhcnNlRmxvYXQ6ICgpID0+IHN0cmljdFBhcnNlRmxvYXQsXG4gIHN0cmljdFBhcnNlRmxvYXQzMjogKCkgPT4gc3RyaWN0UGFyc2VGbG9hdDMyLFxuICBzdHJpY3RQYXJzZUludDogKCkgPT4gc3RyaWN0UGFyc2VJbnQsXG4gIHN0cmljdFBhcnNlSW50MzI6ICgpID0+IHN0cmljdFBhcnNlSW50MzIsXG4gIHN0cmljdFBhcnNlTG9uZzogKCkgPT4gc3RyaWN0UGFyc2VMb25nLFxuICBzdHJpY3RQYXJzZVNob3J0OiAoKSA9PiBzdHJpY3RQYXJzZVNob3J0LFxuICB0YWtlOiAoKSA9PiB0YWtlLFxuICB0aHJvd0RlZmF1bHRFcnJvcjogKCkgPT4gdGhyb3dEZWZhdWx0RXJyb3IsXG4gIHdpdGhCYXNlRXhjZXB0aW9uOiAoKSA9PiB3aXRoQmFzZUV4Y2VwdGlvblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9jbGllbnQudHNcbnZhciBpbXBvcnRfbWlkZGxld2FyZV9zdGFjayA9IHJlcXVpcmUoXCJAc21pdGh5L21pZGRsZXdhcmUtc3RhY2tcIik7XG52YXIgQ2xpZW50ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9ICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zdGFjay5jb25zdHJ1Y3RTdGFjaykoKTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNsaWVudFwiKTtcbiAgfVxuICBzZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uc09yQ2IgIT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnNPckNiIDogdm9pZCAwO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zT3JDYiA6IGNiO1xuICAgIGNvbnN0IHVzZUhhbmRsZXJDYWNoZSA9IG9wdGlvbnMgPT09IHZvaWQgMCAmJiB0aGlzLmNvbmZpZy5jYWNoZU1pZGRsZXdhcmUgPT09IHRydWU7XG4gICAgbGV0IGhhbmRsZXI7XG4gICAgaWYgKHVzZUhhbmRsZXJDYWNoZSkge1xuICAgICAgaWYgKCF0aGlzLmhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgIGlmIChoYW5kbGVycy5oYXMoY29tbWFuZC5jb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJzLmdldChjb21tYW5kLmNvbnN0cnVjdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZXIgPSBjb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKHRoaXMubWlkZGxld2FyZVN0YWNrLCB0aGlzLmNvbmZpZywgb3B0aW9ucyk7XG4gICAgICAgIGhhbmRsZXJzLnNldChjb21tYW5kLmNvbnN0cnVjdG9yLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnM7XG4gICAgICBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZSh0aGlzLm1pZGRsZXdhcmVTdGFjaywgdGhpcy5jb25maWcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGhhbmRsZXIoY29tbWFuZCkudGhlbihcbiAgICAgICAgKHJlc3VsdCkgPT4gY2FsbGJhY2sobnVsbCwgcmVzdWx0Lm91dHB1dCksXG4gICAgICAgIChlcnIpID0+IGNhbGxiYWNrKGVycilcbiAgICAgICkuY2F0Y2goXG4gICAgICAgIC8vIHByZXZlbnQgYW55IGVycm9ycyB0aHJvd24gaW4gdGhlIGNhbGxiYWNrIGZyb20gdHJpZ2dlcmluZyBhblxuICAgICAgICAvLyB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25cbiAgICAgICAgKCkgPT4ge1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFuZGxlcihjb21tYW5kKS50aGVuKChyZXN1bHQpID0+IHJlc3VsdC5vdXRwdXQpO1xuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY29uZmlnPy5yZXF1ZXN0SGFuZGxlcj8uZGVzdHJveT8uKCk7XG4gICAgZGVsZXRlIHRoaXMuaGFuZGxlcnM7XG4gIH1cbn07XG5cbi8vIHNyYy9jb2xsZWN0LXN0cmVhbS1ib2R5LnRzXG52YXIgaW1wb3J0X3Byb3RvY29scyA9IHJlcXVpcmUoXCJAc21pdGh5L2NvcmUvcHJvdG9jb2xzXCIpO1xuXG4vLyBzcmMvY29tbWFuZC50c1xuXG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIkBzbWl0aHkvdHlwZXNcIik7XG52YXIgQ29tbWFuZCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sgPSAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc3RhY2suY29uc3RydWN0U3RhY2spKCk7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJDb21tYW5kXCIpO1xuICB9XG4gIC8qKlxuICAgKiBGYWN0b3J5IGZvciBDb21tYW5kIENsYXNzQnVpbGRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgY2xhc3NCdWlsZGVyKCkge1xuICAgIHJldHVybiBuZXcgQ2xhc3NCdWlsZGVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmVXaXRoQ29udGV4dChjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucywge1xuICAgIG1pZGRsZXdhcmVGbixcbiAgICBjbGllbnROYW1lLFxuICAgIGNvbW1hbmROYW1lLFxuICAgIGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICAgIG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgICBzbWl0aHlDb250ZXh0LFxuICAgIGFkZGl0aW9uYWxDb250ZXh0LFxuICAgIENvbW1hbmRDdG9yXG4gIH0pIHtcbiAgICBmb3IgKGNvbnN0IG13IG9mIG1pZGRsZXdhcmVGbi5iaW5kKHRoaXMpKENvbW1hbmRDdG9yLCBjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucykpIHtcbiAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShtdyk7XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gY2xpZW50U3RhY2suY29uY2F0KHRoaXMubWlkZGxld2FyZVN0YWNrKTtcbiAgICBjb25zdCB7IGxvZ2dlcjogbG9nZ2VyMiB9ID0gY29uZmlndXJhdGlvbjtcbiAgICBjb25zdCBoYW5kbGVyRXhlY3V0aW9uQ29udGV4dCA9IHtcbiAgICAgIGxvZ2dlcjogbG9nZ2VyMixcbiAgICAgIGNsaWVudE5hbWUsXG4gICAgICBjb21tYW5kTmFtZSxcbiAgICAgIGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICAgICAgb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICAgICAgW2ltcG9ydF90eXBlcy5TTUlUSFlfQ09OVEVYVF9LRVldOiB7XG4gICAgICAgIGNvbW1hbmRJbnN0YW5jZTogdGhpcyxcbiAgICAgICAgLi4uc21pdGh5Q29udGV4dFxuICAgICAgfSxcbiAgICAgIC4uLmFkZGl0aW9uYWxDb250ZXh0XG4gICAgfTtcbiAgICBjb25zdCB7IHJlcXVlc3RIYW5kbGVyIH0gPSBjb25maWd1cmF0aW9uO1xuICAgIHJldHVybiBzdGFjay5yZXNvbHZlKFxuICAgICAgKHJlcXVlc3QpID0+IHJlcXVlc3RIYW5kbGVyLmhhbmRsZShyZXF1ZXN0LnJlcXVlc3QsIG9wdGlvbnMgfHwge30pLFxuICAgICAgaGFuZGxlckV4ZWN1dGlvbkNvbnRleHRcbiAgICApO1xuICB9XG59O1xudmFyIENsYXNzQnVpbGRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faW5pdCA9ICgpID0+IHtcbiAgICB9O1xuICAgIHRoaXMuX2VwID0ge307XG4gICAgdGhpcy5fbWlkZGxld2FyZUZuID0gKCkgPT4gW107XG4gICAgdGhpcy5fY29tbWFuZE5hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2NsaWVudE5hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2FkZGl0aW9uYWxDb250ZXh0ID0ge307XG4gICAgdGhpcy5fc21pdGh5Q29udGV4dCA9IHt9O1xuICAgIHRoaXMuX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKF8pID0+IF87XG4gICAgdGhpcy5fb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKF8pID0+IF87XG4gICAgdGhpcy5fc2VyaWFsaXplciA9IG51bGw7XG4gICAgdGhpcy5fZGVzZXJpYWxpemVyID0gbnVsbDtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNsYXNzQnVpbGRlclwiKTtcbiAgfVxuICAvKipcbiAgICogT3B0aW9uYWwgaW5pdCBjYWxsYmFjay5cbiAgICovXG4gIGluaXQoY2IpIHtcbiAgICB0aGlzLl9pbml0ID0gY2I7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgZW5kcG9pbnQgcGFyYW1ldGVyIGluc3RydWN0aW9ucy5cbiAgICovXG4gIGVwKGVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKSB7XG4gICAgdGhpcy5fZXAgPSBlbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkIGFueSBudW1iZXIgb2YgbWlkZGxld2FyZS5cbiAgICovXG4gIG0obWlkZGxld2FyZVN1cHBsaWVyKSB7XG4gICAgdGhpcy5fbWlkZGxld2FyZUZuID0gbWlkZGxld2FyZVN1cHBsaWVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGluaXRpYWwgaGFuZGxlciBleGVjdXRpb24gY29udGV4dCBTbWl0aHkgZmllbGQuXG4gICAqL1xuICBzKHNlcnZpY2UsIG9wZXJhdGlvbiwgc21pdGh5Q29udGV4dCA9IHt9KSB7XG4gICAgdGhpcy5fc21pdGh5Q29udGV4dCA9IHtcbiAgICAgIHNlcnZpY2UsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICAuLi5zbWl0aHlDb250ZXh0XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBpbml0aWFsIGhhbmRsZXIgZXhlY3V0aW9uIGNvbnRleHQuXG4gICAqL1xuICBjKGFkZGl0aW9uYWxDb250ZXh0ID0ge30pIHtcbiAgICB0aGlzLl9hZGRpdGlvbmFsQ29udGV4dCA9IGFkZGl0aW9uYWxDb250ZXh0O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgY29uc3RhbnQgc3RyaW5nIGlkZW50aWZpZXJzIGZvciB0aGUgb3BlcmF0aW9uLlxuICAgKi9cbiAgbihjbGllbnROYW1lLCBjb21tYW5kTmFtZSkge1xuICAgIHRoaXMuX2NsaWVudE5hbWUgPSBjbGllbnROYW1lO1xuICAgIHRoaXMuX2NvbW1hbmROYW1lID0gY29tbWFuZE5hbWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgaW5wdXQgYW5kIG91dHB1dCBzZW5zaXN0aXZlIGxvZyBmaWx0ZXJzLlxuICAgKi9cbiAgZihpbnB1dEZpbHRlciA9IChfKSA9PiBfLCBvdXRwdXRGaWx0ZXIgPSAoXykgPT4gXykge1xuICAgIHRoaXMuX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gaW5wdXRGaWx0ZXI7XG4gICAgdGhpcy5fb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gb3V0cHV0RmlsdGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzZXJpYWxpemVyLlxuICAgKi9cbiAgc2VyKHNlcmlhbGl6ZXIpIHtcbiAgICB0aGlzLl9zZXJpYWxpemVyID0gc2VyaWFsaXplcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZGVzZXJpYWxpemVyLlxuICAgKi9cbiAgZGUoZGVzZXJpYWxpemVyKSB7XG4gICAgdGhpcy5fZGVzZXJpYWxpemVyID0gZGVzZXJpYWxpemVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIENvbW1hbmQgY2xhc3Mgd2l0aCB0aGUgY2xhc3NCdWlsZGVyIHByb3BlcnRpZXMuXG4gICAqL1xuICBidWlsZCgpIHtcbiAgICBjb25zdCBjbG9zdXJlID0gdGhpcztcbiAgICBsZXQgQ29tbWFuZFJlZjtcbiAgICByZXR1cm4gQ29tbWFuZFJlZiA9IGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gICAgICAvKipcbiAgICAgICAqIEBwdWJsaWNcbiAgICAgICAqL1xuICAgICAgY29uc3RydWN0b3IoLi4uW2lucHV0XSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICAvLyBAdHMtaWdub3JlIHVzZWQgaW4gbWlkZGxld2FyZUZuIGNsb3N1cmUuXG4gICAgICAgIHRoaXMuc2VyaWFsaXplID0gY2xvc3VyZS5fc2VyaWFsaXplcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgLy8gQHRzLWlnbm9yZSB1c2VkIGluIG1pZGRsZXdhcmVGbiBjbG9zdXJlLlxuICAgICAgICB0aGlzLmRlc2VyaWFsaXplID0gY2xvc3VyZS5fZGVzZXJpYWxpemVyO1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQgPz8ge307XG4gICAgICAgIGNsb3N1cmUuX2luaXQodGhpcyk7XG4gICAgICB9XG4gICAgICBzdGF0aWMge1xuICAgICAgICBfX25hbWUodGhpcywgXCJDb21tYW5kUmVmXCIpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBAcHVibGljXG4gICAgICAgKi9cbiAgICAgIHN0YXRpYyBnZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIGNsb3N1cmUuX2VwO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAqL1xuICAgICAgcmVzb2x2ZU1pZGRsZXdhcmUoc3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZU1pZGRsZXdhcmVXaXRoQ29udGV4dChzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucywge1xuICAgICAgICAgIENvbW1hbmRDdG9yOiBDb21tYW5kUmVmLFxuICAgICAgICAgIG1pZGRsZXdhcmVGbjogY2xvc3VyZS5fbWlkZGxld2FyZUZuLFxuICAgICAgICAgIGNsaWVudE5hbWU6IGNsb3N1cmUuX2NsaWVudE5hbWUsXG4gICAgICAgICAgY29tbWFuZE5hbWU6IGNsb3N1cmUuX2NvbW1hbmROYW1lLFxuICAgICAgICAgIGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nOiBjbG9zdXJlLl9pbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgICAgICAgICBvdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2c6IGNsb3N1cmUuX291dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgICAgICAgICBzbWl0aHlDb250ZXh0OiBjbG9zdXJlLl9zbWl0aHlDb250ZXh0LFxuICAgICAgICAgIGFkZGl0aW9uYWxDb250ZXh0OiBjbG9zdXJlLl9hZGRpdGlvbmFsQ29udGV4dFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgU0VOU0lUSVZFX1NUUklORyA9IFwiKioqU2Vuc2l0aXZlSW5mb3JtYXRpb24qKipcIjtcblxuLy8gc3JjL2NyZWF0ZS1hZ2dyZWdhdGVkLWNsaWVudC50c1xudmFyIGNyZWF0ZUFnZ3JlZ2F0ZWRDbGllbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb21tYW5kcywgQ2xpZW50MikgPT4ge1xuICBmb3IgKGNvbnN0IGNvbW1hbmQgb2YgT2JqZWN0LmtleXMoY29tbWFuZHMpKSB7XG4gICAgY29uc3QgQ29tbWFuZEN0b3IgPSBjb21tYW5kc1tjb21tYW5kXTtcbiAgICBjb25zdCBtZXRob2RJbXBsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyBmdW5jdGlvbihhcmdzLCBvcHRpb25zT3JDYiwgY2IpIHtcbiAgICAgIGNvbnN0IGNvbW1hbmQyID0gbmV3IENvbW1hbmRDdG9yKGFyZ3MpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXMuc2VuZChjb21tYW5kMiwgb3B0aW9uc09yQ2IpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgaHR0cCBvcHRpb25zIGJ1dCBnb3QgJHt0eXBlb2Ygb3B0aW9uc09yQ2J9YCk7XG4gICAgICAgIHRoaXMuc2VuZChjb21tYW5kMiwgb3B0aW9uc09yQ2IgfHwge30sIGNiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoY29tbWFuZDIsIG9wdGlvbnNPckNiKTtcbiAgICAgIH1cbiAgICB9LCBcIm1ldGhvZEltcGxcIik7XG4gICAgY29uc3QgbWV0aG9kTmFtZSA9IChjb21tYW5kWzBdLnRvTG93ZXJDYXNlKCkgKyBjb21tYW5kLnNsaWNlKDEpKS5yZXBsYWNlKC9Db21tYW5kJC8sIFwiXCIpO1xuICAgIENsaWVudDIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbWV0aG9kSW1wbDtcbiAgfVxufSwgXCJjcmVhdGVBZ2dyZWdhdGVkQ2xpZW50XCIpO1xuXG4vLyBzcmMvcGFyc2UtdXRpbHMudHNcbnZhciBwYXJzZUJvb2xlYW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgY2FzZSBcInRydWVcIjpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgXCJmYWxzZVwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBib29sZWFuIHZhbHVlIFwiJHt2YWx1ZX1cImApO1xuICB9XG59LCBcInBhcnNlQm9vbGVhblwiKTtcbnZhciBleHBlY3RCb29sZWFuID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAodmFsdWUgPT09IDAgfHwgdmFsdWUgPT09IDEpIHtcbiAgICAgIGxvZ2dlci53YXJuKHN0YWNrVHJhY2VXYXJuaW5nKGBFeHBlY3RlZCBib29sZWFuLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBjb25zdCBsb3dlciA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxvd2VyID09PSBcImZhbHNlXCIgfHwgbG93ZXIgPT09IFwidHJ1ZVwiKSB7XG4gICAgICBsb2dnZXIud2FybihzdGFja1RyYWNlV2FybmluZyhgRXhwZWN0ZWQgYm9vbGVhbiwgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKSk7XG4gICAgfVxuICAgIGlmIChsb3dlciA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsb3dlciA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApO1xufSwgXCJleHBlY3RCb29sZWFuXCIpO1xudmFyIGV4cGVjdE51bWJlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgaWYgKCFOdW1iZXIuaXNOYU4ocGFyc2VkKSkge1xuICAgICAgaWYgKFN0cmluZyhwYXJzZWQpICE9PSBTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKHN0YWNrVHJhY2VXYXJuaW5nKGBFeHBlY3RlZCBudW1iZXIgYnV0IG9ic2VydmVkIHN0cmluZzogJHt2YWx1ZX1gKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIG51bWJlciwgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKTtcbn0sIFwiZXhwZWN0TnVtYmVyXCIpO1xudmFyIE1BWF9GTE9BVCA9IE1hdGguY2VpbCgyICoqIDEyNyAqICgyIC0gMiAqKiAtMjMpKTtcbnZhciBleHBlY3RGbG9hdDMyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgY29uc3QgZXhwZWN0ZWQgPSBleHBlY3ROdW1iZXIodmFsdWUpO1xuICBpZiAoZXhwZWN0ZWQgIT09IHZvaWQgMCAmJiAhTnVtYmVyLmlzTmFOKGV4cGVjdGVkKSAmJiBleHBlY3RlZCAhPT0gSW5maW5pdHkgJiYgZXhwZWN0ZWQgIT09IC1JbmZpbml0eSkge1xuICAgIGlmIChNYXRoLmFicyhleHBlY3RlZCkgPiBNQVhfRkxPQVQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIDMyLWJpdCBmbG9hdCwgZ290ICR7dmFsdWV9YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBleHBlY3RlZDtcbn0sIFwiZXhwZWN0RmxvYXQzMlwiKTtcbnZhciBleHBlY3RMb25nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSAmJiAhTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBpbnRlZ2VyLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApO1xufSwgXCJleHBlY3RMb25nXCIpO1xudmFyIGV4cGVjdEludCA9IGV4cGVjdExvbmc7XG52YXIgZXhwZWN0SW50MzIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4gZXhwZWN0U2l6ZWRJbnQodmFsdWUsIDMyKSwgXCJleHBlY3RJbnQzMlwiKTtcbnZhciBleHBlY3RTaG9ydCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiBleHBlY3RTaXplZEludCh2YWx1ZSwgMTYpLCBcImV4cGVjdFNob3J0XCIpO1xudmFyIGV4cGVjdEJ5dGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4gZXhwZWN0U2l6ZWRJbnQodmFsdWUsIDgpLCBcImV4cGVjdEJ5dGVcIik7XG52YXIgZXhwZWN0U2l6ZWRJbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSwgc2l6ZSkgPT4ge1xuICBjb25zdCBleHBlY3RlZCA9IGV4cGVjdExvbmcodmFsdWUpO1xuICBpZiAoZXhwZWN0ZWQgIT09IHZvaWQgMCAmJiBjYXN0SW50KGV4cGVjdGVkLCBzaXplKSAhPT0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCAke3NpemV9LWJpdCBpbnRlZ2VyLCBnb3QgJHt2YWx1ZX1gKTtcbiAgfVxuICByZXR1cm4gZXhwZWN0ZWQ7XG59LCBcImV4cGVjdFNpemVkSW50XCIpO1xudmFyIGNhc3RJbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSwgc2l6ZSkgPT4ge1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgICBjYXNlIDMyOlxuICAgICAgcmV0dXJuIEludDMyQXJyYXkub2YodmFsdWUpWzBdO1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gSW50MTZBcnJheS5vZih2YWx1ZSlbMF07XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIEludDhBcnJheS5vZih2YWx1ZSlbMF07XG4gIH1cbn0sIFwiY2FzdEludFwiKTtcbnZhciBleHBlY3ROb25OdWxsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUsIGxvY2F0aW9uKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBhIG5vbi1udWxsIHZhbHVlIGZvciAke2xvY2F0aW9ufWApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBub24tbnVsbCB2YWx1ZVwiKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59LCBcImV4cGVjdE5vbk51bGxcIik7XG52YXIgZXhwZWN0T2JqZWN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbnN0IHJlY2VpdmVkVHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gXCJhcnJheVwiIDogdHlwZW9mIHZhbHVlO1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBvYmplY3QsIGdvdCAke3JlY2VpdmVkVHlwZX06ICR7dmFsdWV9YCk7XG59LCBcImV4cGVjdE9iamVjdFwiKTtcbnZhciBleHBlY3RTdHJpbmcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoW1wiYm9vbGVhblwiLCBcIm51bWJlclwiLCBcImJpZ2ludFwiXS5pbmNsdWRlcyh0eXBlb2YgdmFsdWUpKSB7XG4gICAgbG9nZ2VyLndhcm4oc3RhY2tUcmFjZVdhcm5pbmcoYEV4cGVjdGVkIHN0cmluZywgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKSk7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgc3RyaW5nLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApO1xufSwgXCJleHBlY3RTdHJpbmdcIik7XG52YXIgZXhwZWN0VW5pb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3QgYXNPYmplY3QgPSBleHBlY3RPYmplY3QodmFsdWUpO1xuICBjb25zdCBzZXRLZXlzID0gT2JqZWN0LmVudHJpZXMoYXNPYmplY3QpLmZpbHRlcigoWywgdl0pID0+IHYgIT0gbnVsbCkubWFwKChba10pID0+IGspO1xuICBpZiAoc2V0S2V5cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmlvbnMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIG5vbi1udWxsIG1lbWJlci4gTm9uZSB3ZXJlIGZvdW5kLmApO1xuICB9XG4gIGlmIChzZXRLZXlzLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmlvbnMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIG5vbi1udWxsIG1lbWJlci4gS2V5cyAke3NldEtleXN9IHdlcmUgbm90IG51bGwuYCk7XG4gIH1cbiAgcmV0dXJuIGFzT2JqZWN0O1xufSwgXCJleHBlY3RVbmlvblwiKTtcbnZhciBzdHJpY3RQYXJzZURvdWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBleHBlY3ROdW1iZXIocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gZXhwZWN0TnVtYmVyKHZhbHVlKTtcbn0sIFwic3RyaWN0UGFyc2VEb3VibGVcIik7XG52YXIgc3RyaWN0UGFyc2VGbG9hdCA9IHN0cmljdFBhcnNlRG91YmxlO1xudmFyIHN0cmljdFBhcnNlRmxvYXQzMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBleHBlY3RGbG9hdDMyKHBhcnNlTnVtYmVyKHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdEZsb2F0MzIodmFsdWUpO1xufSwgXCJzdHJpY3RQYXJzZUZsb2F0MzJcIik7XG52YXIgTlVNQkVSX1JFR0VYID0gLygtPyg/OjB8WzEtOV1cXGQqKSg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPyl8KC0/SW5maW5pdHkpfChOYU4pL2c7XG52YXIgcGFyc2VOdW1iZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBjb25zdCBtYXRjaGVzID0gdmFsdWUubWF0Y2goTlVNQkVSX1JFR0VYKTtcbiAgaWYgKG1hdGNoZXMgPT09IG51bGwgfHwgbWF0Y2hlc1swXS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHJlYWwgbnVtYmVyLCBnb3QgaW1wbGljaXQgTmFOYCk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xufSwgXCJwYXJzZU51bWJlclwiKTtcbnZhciBsaW1pdGVkUGFyc2VEb3VibGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdFN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdE51bWJlcih2YWx1ZSk7XG59LCBcImxpbWl0ZWRQYXJzZURvdWJsZVwiKTtcbnZhciBoYW5kbGVGbG9hdCA9IGxpbWl0ZWRQYXJzZURvdWJsZTtcbnZhciBsaW1pdGVkUGFyc2VGbG9hdCA9IGxpbWl0ZWRQYXJzZURvdWJsZTtcbnZhciBsaW1pdGVkUGFyc2VGbG9hdDMyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXRTdHJpbmcodmFsdWUpO1xuICB9XG4gIHJldHVybiBleHBlY3RGbG9hdDMyKHZhbHVlKTtcbn0sIFwibGltaXRlZFBhcnNlRmxvYXQzMlwiKTtcbnZhciBwYXJzZUZsb2F0U3RyaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgc3dpdGNoICh2YWx1ZSkge1xuICAgIGNhc2UgXCJOYU5cIjpcbiAgICAgIHJldHVybiBOYU47XG4gICAgY2FzZSBcIkluZmluaXR5XCI6XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgY2FzZSBcIi1JbmZpbml0eVwiOlxuICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gcGFyc2UgZmxvYXQgdmFsdWU6ICR7dmFsdWV9YCk7XG4gIH1cbn0sIFwicGFyc2VGbG9hdFN0cmluZ1wiKTtcbnZhciBzdHJpY3RQYXJzZUxvbmcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGV4cGVjdExvbmcocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gZXhwZWN0TG9uZyh2YWx1ZSk7XG59LCBcInN0cmljdFBhcnNlTG9uZ1wiKTtcbnZhciBzdHJpY3RQYXJzZUludCA9IHN0cmljdFBhcnNlTG9uZztcbnZhciBzdHJpY3RQYXJzZUludDMyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBleHBlY3RJbnQzMihwYXJzZU51bWJlcih2YWx1ZSkpO1xuICB9XG4gIHJldHVybiBleHBlY3RJbnQzMih2YWx1ZSk7XG59LCBcInN0cmljdFBhcnNlSW50MzJcIik7XG52YXIgc3RyaWN0UGFyc2VTaG9ydCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZXhwZWN0U2hvcnQocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gZXhwZWN0U2hvcnQodmFsdWUpO1xufSwgXCJzdHJpY3RQYXJzZVNob3J0XCIpO1xudmFyIHN0cmljdFBhcnNlQnl0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZXhwZWN0Qnl0ZShwYXJzZU51bWJlcih2YWx1ZSkpO1xuICB9XG4gIHJldHVybiBleHBlY3RCeXRlKHZhbHVlKTtcbn0sIFwic3RyaWN0UGFyc2VCeXRlXCIpO1xudmFyIHN0YWNrVHJhY2VXYXJuaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobWVzc2FnZSkgPT4ge1xuICByZXR1cm4gU3RyaW5nKG5ldyBUeXBlRXJyb3IobWVzc2FnZSkuc3RhY2sgfHwgbWVzc2FnZSkuc3BsaXQoXCJcXG5cIikuc2xpY2UoMCwgNSkuZmlsdGVyKChzKSA9PiAhcy5pbmNsdWRlcyhcInN0YWNrVHJhY2VXYXJuaW5nXCIpKS5qb2luKFwiXFxuXCIpO1xufSwgXCJzdGFja1RyYWNlV2FybmluZ1wiKTtcbnZhciBsb2dnZXIgPSB7XG4gIHdhcm46IGNvbnNvbGUud2FyblxufTtcblxuLy8gc3JjL2RhdGUtdXRpbHMudHNcbnZhciBEQVlTID0gW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdO1xudmFyIE1PTlRIUyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcbmZ1bmN0aW9uIGRhdGVUb1V0Y1N0cmluZyhkYXRlKSB7XG4gIGNvbnN0IHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICBjb25zdCBkYXlPZk1vbnRoSW50ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gIGNvbnN0IGhvdXJzSW50ID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICBjb25zdCBtaW51dGVzSW50ID0gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG4gIGNvbnN0IHNlY29uZHNJbnQgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgY29uc3QgZGF5T2ZNb250aFN0cmluZyA9IGRheU9mTW9udGhJbnQgPCAxMCA/IGAwJHtkYXlPZk1vbnRoSW50fWAgOiBgJHtkYXlPZk1vbnRoSW50fWA7XG4gIGNvbnN0IGhvdXJzU3RyaW5nID0gaG91cnNJbnQgPCAxMCA/IGAwJHtob3Vyc0ludH1gIDogYCR7aG91cnNJbnR9YDtcbiAgY29uc3QgbWludXRlc1N0cmluZyA9IG1pbnV0ZXNJbnQgPCAxMCA/IGAwJHttaW51dGVzSW50fWAgOiBgJHttaW51dGVzSW50fWA7XG4gIGNvbnN0IHNlY29uZHNTdHJpbmcgPSBzZWNvbmRzSW50IDwgMTAgPyBgMCR7c2Vjb25kc0ludH1gIDogYCR7c2Vjb25kc0ludH1gO1xuICByZXR1cm4gYCR7REFZU1tkYXlPZldlZWtdfSwgJHtkYXlPZk1vbnRoU3RyaW5nfSAke01PTlRIU1ttb250aF19ICR7eWVhcn0gJHtob3Vyc1N0cmluZ306JHttaW51dGVzU3RyaW5nfToke3NlY29uZHNTdHJpbmd9IEdNVGA7XG59XG5fX25hbWUoZGF0ZVRvVXRjU3RyaW5nLCBcImRhdGVUb1V0Y1N0cmluZ1wiKTtcbnZhciBSRkMzMzM5ID0gbmV3IFJlZ0V4cCgvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pW3RUXShcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKD86XFwuKFxcZCspKT9belpdJC8pO1xudmFyIHBhcnNlUmZjMzMzOURhdGVUaW1lID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUkZDLTMzMzkgZGF0ZS10aW1lcyBtdXN0IGJlIGV4cHJlc3NlZCBhcyBzdHJpbmdzXCIpO1xuICB9XG4gIGNvbnN0IG1hdGNoID0gUkZDMzMzOS5leGVjKHZhbHVlKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIFJGQy0zMzM5IGRhdGUtdGltZSB2YWx1ZVwiKTtcbiAgfVxuICBjb25zdCBbXywgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gIGNvbnN0IHllYXIgPSBzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh5ZWFyU3RyKSk7XG4gIGNvbnN0IG1vbnRoID0gcGFyc2VEYXRlVmFsdWUobW9udGhTdHIsIFwibW9udGhcIiwgMSwgMTIpO1xuICBjb25zdCBkYXkgPSBwYXJzZURhdGVWYWx1ZShkYXlTdHIsIFwiZGF5XCIsIDEsIDMxKTtcbiAgcmV0dXJuIGJ1aWxkRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCB7IGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzIH0pO1xufSwgXCJwYXJzZVJmYzMzMzlEYXRlVGltZVwiKTtcbnZhciBSRkMzMzM5X1dJVEhfT0ZGU0VUID0gbmV3IFJlZ0V4cChcbiAgL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVt0VF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/KChbLStdXFxkezJ9XFw6XFxkezJ9KXxbelpdKSQvXG4pO1xudmFyIHBhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJGQy0zMzM5IGRhdGUtdGltZXMgbXVzdCBiZSBleHByZXNzZWQgYXMgc3RyaW5nc1wiKTtcbiAgfVxuICBjb25zdCBtYXRjaCA9IFJGQzMzMzlfV0lUSF9PRkZTRVQuZXhlYyh2YWx1ZSk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBSRkMtMzMzOSBkYXRlLXRpbWUgdmFsdWVcIik7XG4gIH1cbiAgY29uc3QgW18sIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzLCBvZmZzZXRTdHJdID0gbWF0Y2g7XG4gIGNvbnN0IHllYXIgPSBzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh5ZWFyU3RyKSk7XG4gIGNvbnN0IG1vbnRoID0gcGFyc2VEYXRlVmFsdWUobW9udGhTdHIsIFwibW9udGhcIiwgMSwgMTIpO1xuICBjb25zdCBkYXkgPSBwYXJzZURhdGVWYWx1ZShkYXlTdHIsIFwiZGF5XCIsIDEsIDMxKTtcbiAgY29uc3QgZGF0ZSA9IGJ1aWxkRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCB7IGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzIH0pO1xuICBpZiAob2Zmc2V0U3RyLnRvVXBwZXJDYXNlKCkgIT0gXCJaXCIpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBwYXJzZU9mZnNldFRvTWlsbGlzZWNvbmRzKG9mZnNldFN0cikpO1xuICB9XG4gIHJldHVybiBkYXRlO1xufSwgXCJwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXRcIik7XG52YXIgSU1GX0ZJWERBVEUgPSBuZXcgUmVnRXhwKFxuICAvXig/Ok1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGR7Mn0pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IEdNVCQvXG4pO1xudmFyIFJGQ184NTBfREFURSA9IG5ldyBSZWdFeHAoXG4gIC9eKD86TW9uZGF5fFR1ZXNkYXl8V2VkbmVzZGF5fFRodXJzZGF5fEZyaWRheXxTYXR1cmRheXxTdW5kYXkpLCAoXFxkezJ9KS0oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLShcXGR7Mn0pIChcXGR7MSwyfSk6KFxcZHsyfSk6KFxcZHsyfSkoPzpcXC4oXFxkKykpPyBHTVQkL1xuKTtcbnZhciBBU0NfVElNRSA9IG5ldyBSZWdFeHAoXG4gIC9eKD86TW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpICggWzEtOV18XFxkezJ9KSAoXFxkezEsMn0pOihcXGR7Mn0pOihcXGR7Mn0pKD86XFwuKFxcZCspKT8gKFxcZHs0fSkkL1xuKTtcbnZhciBwYXJzZVJmYzcyMzFEYXRlVGltZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJGQy03MjMxIGRhdGUtdGltZXMgbXVzdCBiZSBleHByZXNzZWQgYXMgc3RyaW5nc1wiKTtcbiAgfVxuICBsZXQgbWF0Y2ggPSBJTUZfRklYREFURS5leGVjKHZhbHVlKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgY29uc3QgW18sIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzXSA9IG1hdGNoO1xuICAgIHJldHVybiBidWlsZERhdGUoXG4gICAgICBzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh5ZWFyU3RyKSksXG4gICAgICBwYXJzZU1vbnRoQnlTaG9ydE5hbWUobW9udGhTdHIpLFxuICAgICAgcGFyc2VEYXRlVmFsdWUoZGF5U3RyLCBcImRheVwiLCAxLCAzMSksXG4gICAgICB7IGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzIH1cbiAgICApO1xuICB9XG4gIG1hdGNoID0gUkZDXzg1MF9EQVRFLmV4ZWModmFsdWUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICBjb25zdCBbXywgZGF5U3RyLCBtb250aFN0ciwgeWVhclN0ciwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gICAgcmV0dXJuIGFkanVzdFJmYzg1MFllYXIoXG4gICAgICBidWlsZERhdGUocGFyc2VUd29EaWdpdFllYXIoeWVhclN0ciksIHBhcnNlTW9udGhCeVNob3J0TmFtZShtb250aFN0ciksIHBhcnNlRGF0ZVZhbHVlKGRheVN0ciwgXCJkYXlcIiwgMSwgMzEpLCB7XG4gICAgICAgIGhvdXJzLFxuICAgICAgICBtaW51dGVzLFxuICAgICAgICBzZWNvbmRzLFxuICAgICAgICBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgbWF0Y2ggPSBBU0NfVElNRS5leGVjKHZhbHVlKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgY29uc3QgW18sIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzLCB5ZWFyU3RyXSA9IG1hdGNoO1xuICAgIHJldHVybiBidWlsZERhdGUoXG4gICAgICBzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh5ZWFyU3RyKSksXG4gICAgICBwYXJzZU1vbnRoQnlTaG9ydE5hbWUobW9udGhTdHIpLFxuICAgICAgcGFyc2VEYXRlVmFsdWUoZGF5U3RyLnRyaW1MZWZ0KCksIFwiZGF5XCIsIDEsIDMxKSxcbiAgICAgIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfVxuICAgICk7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgUkZDLTcyMzEgZGF0ZS10aW1lIHZhbHVlXCIpO1xufSwgXCJwYXJzZVJmYzcyMzFEYXRlVGltZVwiKTtcbnZhciBwYXJzZUVwb2NoVGltZXN0YW1wID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGxldCB2YWx1ZUFzRG91YmxlO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgdmFsdWVBc0RvdWJsZSA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHZhbHVlQXNEb3VibGUgPSBzdHJpY3RQYXJzZURvdWJsZSh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlLnRhZyA9PT0gMSkge1xuICAgIHZhbHVlQXNEb3VibGUgPSB2YWx1ZS52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXBvY2ggdGltZXN0YW1wcyBtdXN0IGJlIGV4cHJlc3NlZCBhcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIG9yIHRoZWlyIHN0cmluZyByZXByZXNlbnRhdGlvblwiKTtcbiAgfVxuICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlQXNEb3VibGUpIHx8IHZhbHVlQXNEb3VibGUgPT09IEluZmluaXR5IHx8IHZhbHVlQXNEb3VibGUgPT09IC1JbmZpbml0eSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFcG9jaCB0aW1lc3RhbXBzIG11c3QgYmUgdmFsaWQsIG5vbi1JbmZpbml0ZSwgbm9uLU5hTiBudW1lcmljc1wiKTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoTWF0aC5yb3VuZCh2YWx1ZUFzRG91YmxlICogMWUzKSk7XG59LCBcInBhcnNlRXBvY2hUaW1lc3RhbXBcIik7XG52YXIgYnVpbGREYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeWVhciwgbW9udGgsIGRheSwgdGltZSkgPT4ge1xuICBjb25zdCBhZGp1c3RlZE1vbnRoID0gbW9udGggLSAxO1xuICB2YWxpZGF0ZURheU9mTW9udGgoeWVhciwgYWRqdXN0ZWRNb250aCwgZGF5KTtcbiAgcmV0dXJuIG5ldyBEYXRlKFxuICAgIERhdGUuVVRDKFxuICAgICAgeWVhcixcbiAgICAgIGFkanVzdGVkTW9udGgsXG4gICAgICBkYXksXG4gICAgICBwYXJzZURhdGVWYWx1ZSh0aW1lLmhvdXJzLCBcImhvdXJcIiwgMCwgMjMpLFxuICAgICAgcGFyc2VEYXRlVmFsdWUodGltZS5taW51dGVzLCBcIm1pbnV0ZVwiLCAwLCA1OSksXG4gICAgICAvLyBzZWNvbmRzIGNhbiBnbyB1cCB0byA2MCBmb3IgbGVhcCBzZWNvbmRzXG4gICAgICBwYXJzZURhdGVWYWx1ZSh0aW1lLnNlY29uZHMsIFwic2Vjb25kc1wiLCAwLCA2MCksXG4gICAgICBwYXJzZU1pbGxpc2Vjb25kcyh0aW1lLmZyYWN0aW9uYWxNaWxsaXNlY29uZHMpXG4gICAgKVxuICApO1xufSwgXCJidWlsZERhdGVcIik7XG52YXIgcGFyc2VUd29EaWdpdFllYXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBjb25zdCB0aGlzWWVhciA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkuZ2V0VVRDRnVsbFllYXIoKTtcbiAgY29uc3QgdmFsdWVJblRoaXNDZW50dXJ5ID0gTWF0aC5mbG9vcih0aGlzWWVhciAvIDEwMCkgKiAxMDAgKyBzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh2YWx1ZSkpO1xuICBpZiAodmFsdWVJblRoaXNDZW50dXJ5IDwgdGhpc1llYXIpIHtcbiAgICByZXR1cm4gdmFsdWVJblRoaXNDZW50dXJ5ICsgMTAwO1xuICB9XG4gIHJldHVybiB2YWx1ZUluVGhpc0NlbnR1cnk7XG59LCBcInBhcnNlVHdvRGlnaXRZZWFyXCIpO1xudmFyIEZJRlRZX1lFQVJTX0lOX01JTExJUyA9IDUwICogMzY1ICogMjQgKiA2MCAqIDYwICogMWUzO1xudmFyIGFkanVzdFJmYzg1MFllYXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBpZiAoaW5wdXQuZ2V0VGltZSgpIC0gKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgPiBGSUZUWV9ZRUFSU19JTl9NSUxMSVMpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICBEYXRlLlVUQyhcbiAgICAgICAgaW5wdXQuZ2V0VVRDRnVsbFllYXIoKSAtIDEwMCxcbiAgICAgICAgaW5wdXQuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgaW5wdXQuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICBpbnB1dC5nZXRVVENIb3VycygpLFxuICAgICAgICBpbnB1dC5nZXRVVENNaW51dGVzKCksXG4gICAgICAgIGlucHV0LmdldFVUQ1NlY29uZHMoKSxcbiAgICAgICAgaW5wdXQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgICAgIClcbiAgICApO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn0sIFwiYWRqdXN0UmZjODUwWWVhclwiKTtcbnZhciBwYXJzZU1vbnRoQnlTaG9ydE5hbWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBjb25zdCBtb250aElkeCA9IE1PTlRIUy5pbmRleE9mKHZhbHVlKTtcbiAgaWYgKG1vbnRoSWR4IDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgbW9udGg6ICR7dmFsdWV9YCk7XG4gIH1cbiAgcmV0dXJuIG1vbnRoSWR4ICsgMTtcbn0sIFwicGFyc2VNb250aEJ5U2hvcnROYW1lXCIpO1xudmFyIERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG52YXIgdmFsaWRhdGVEYXlPZk1vbnRoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeWVhciwgbW9udGgsIGRheSkgPT4ge1xuICBsZXQgbWF4RGF5cyA9IERBWVNfSU5fTU9OVEhbbW9udGhdO1xuICBpZiAobW9udGggPT09IDEgJiYgaXNMZWFwWWVhcih5ZWFyKSkge1xuICAgIG1heERheXMgPSAyOTtcbiAgfVxuICBpZiAoZGF5ID4gbWF4RGF5cykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZGF5IGZvciAke01PTlRIU1ttb250aF19IGluICR7eWVhcn06ICR7ZGF5fWApO1xuICB9XG59LCBcInZhbGlkYXRlRGF5T2ZNb250aFwiKTtcbnZhciBpc0xlYXBZZWFyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeWVhcikgPT4ge1xuICByZXR1cm4geWVhciAlIDQgPT09IDAgJiYgKHllYXIgJSAxMDAgIT09IDAgfHwgeWVhciAlIDQwMCA9PT0gMCk7XG59LCBcImlzTGVhcFllYXJcIik7XG52YXIgcGFyc2VEYXRlVmFsdWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSwgdHlwZSwgbG93ZXIsIHVwcGVyKSA9PiB7XG4gIGNvbnN0IGRhdGVWYWwgPSBzdHJpY3RQYXJzZUJ5dGUoc3RyaXBMZWFkaW5nWmVyb2VzKHZhbHVlKSk7XG4gIGlmIChkYXRlVmFsIDwgbG93ZXIgfHwgZGF0ZVZhbCA+IHVwcGVyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0eXBlfSBtdXN0IGJlIGJldHdlZW4gJHtsb3dlcn0gYW5kICR7dXBwZXJ9LCBpbmNsdXNpdmVgKTtcbiAgfVxuICByZXR1cm4gZGF0ZVZhbDtcbn0sIFwicGFyc2VEYXRlVmFsdWVcIik7XG52YXIgcGFyc2VNaWxsaXNlY29uZHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdHJpY3RQYXJzZUZsb2F0MzIoXCIwLlwiICsgdmFsdWUpICogMWUzO1xufSwgXCJwYXJzZU1pbGxpc2Vjb25kc1wiKTtcbnZhciBwYXJzZU9mZnNldFRvTWlsbGlzZWNvbmRzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgY29uc3QgZGlyZWN0aW9uU3RyID0gdmFsdWVbMF07XG4gIGxldCBkaXJlY3Rpb24gPSAxO1xuICBpZiAoZGlyZWN0aW9uU3RyID09IFwiK1wiKSB7XG4gICAgZGlyZWN0aW9uID0gMTtcbiAgfSBlbHNlIGlmIChkaXJlY3Rpb25TdHIgPT0gXCItXCIpIHtcbiAgICBkaXJlY3Rpb24gPSAtMTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBPZmZzZXQgZGlyZWN0aW9uLCAke2RpcmVjdGlvblN0cn0sIG11c3QgYmUgXCIrXCIgb3IgXCItXCJgKTtcbiAgfVxuICBjb25zdCBob3VyID0gTnVtYmVyKHZhbHVlLnN1YnN0cmluZygxLCAzKSk7XG4gIGNvbnN0IG1pbnV0ZSA9IE51bWJlcih2YWx1ZS5zdWJzdHJpbmcoNCwgNikpO1xuICByZXR1cm4gZGlyZWN0aW9uICogKGhvdXIgKiA2MCArIG1pbnV0ZSkgKiA2MCAqIDFlMztcbn0sIFwicGFyc2VPZmZzZXRUb01pbGxpc2Vjb25kc1wiKTtcbnZhciBzdHJpcExlYWRpbmdaZXJvZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4ge1xuICBsZXQgaWR4ID0gMDtcbiAgd2hpbGUgKGlkeCA8IHZhbHVlLmxlbmd0aCAtIDEgJiYgdmFsdWUuY2hhckF0KGlkeCkgPT09IFwiMFwiKSB7XG4gICAgaWR4Kys7XG4gIH1cbiAgaWYgKGlkeCA9PT0gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWUuc2xpY2UoaWR4KTtcbn0sIFwic3RyaXBMZWFkaW5nWmVyb2VzXCIpO1xuXG4vLyBzcmMvZXhjZXB0aW9ucy50c1xudmFyIFNlcnZpY2VFeGNlcHRpb24gPSBjbGFzcyBfU2VydmljZUV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJTZXJ2aWNlRXhjZXB0aW9uXCIpO1xuICB9XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zLm1lc3NhZ2UpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgdGhpcy4kZmF1bHQgPSBvcHRpb25zLiRmYXVsdDtcbiAgICB0aGlzLiRtZXRhZGF0YSA9IG9wdGlvbnMuJG1ldGFkYXRhO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBTZXJ2aWNlRXhjZXB0aW9uIChkdWNrIHR5cGVkKVxuICAgKi9cbiAgc3RhdGljIGlzSW5zdGFuY2UodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBfU2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihjYW5kaWRhdGUpIHx8IEJvb2xlYW4oY2FuZGlkYXRlLiRmYXVsdCkgJiYgQm9vbGVhbihjYW5kaWRhdGUuJG1ldGFkYXRhKSAmJiAoY2FuZGlkYXRlLiRmYXVsdCA9PT0gXCJjbGllbnRcIiB8fCBjYW5kaWRhdGUuJGZhdWx0ID09PSBcInNlcnZlclwiKTtcbiAgfVxuICAvKipcbiAgICogQ3VzdG9tIGluc3RhbmNlb2YgY2hlY2sgdG8gc3VwcG9ydCB0aGUgb3BlcmF0b3IgZm9yIFNlcnZpY2VFeGNlcHRpb24gYmFzZSBjbGFzc1xuICAgKi9cbiAgc3RhdGljIFtTeW1ib2wuaGFzSW5zdGFuY2VdKGluc3RhbmNlKSB7XG4gICAgaWYgKCFpbnN0YW5jZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSBpbnN0YW5jZTtcbiAgICBpZiAodGhpcyA9PT0gX1NlcnZpY2VFeGNlcHRpb24pIHtcbiAgICAgIHJldHVybiBfU2VydmljZUV4Y2VwdGlvbi5pc0luc3RhbmNlKGluc3RhbmNlKTtcbiAgICB9XG4gICAgaWYgKF9TZXJ2aWNlRXhjZXB0aW9uLmlzSW5zdGFuY2UoaW5zdGFuY2UpKSB7XG4gICAgICBpZiAoY2FuZGlkYXRlLm5hbWUgJiYgdGhpcy5uYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGluc3RhbmNlKSB8fCBjYW5kaWRhdGUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5zdGFuY2UpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXhjZXB0aW9uLCBhZGRpdGlvbnMgPSB7fSkgPT4ge1xuICBPYmplY3QuZW50cmllcyhhZGRpdGlvbnMpLmZpbHRlcigoWywgdl0pID0+IHYgIT09IHZvaWQgMCkuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgaWYgKGV4Y2VwdGlvbltrXSA9PSB2b2lkIDAgfHwgZXhjZXB0aW9uW2tdID09PSBcIlwiKSB7XG4gICAgICBleGNlcHRpb25ba10gPSB2O1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IG1lc3NhZ2UgPSBleGNlcHRpb24ubWVzc2FnZSB8fCBleGNlcHRpb24uTWVzc2FnZSB8fCBcIlVua25vd25FcnJvclwiO1xuICBleGNlcHRpb24ubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIGRlbGV0ZSBleGNlcHRpb24uTWVzc2FnZTtcbiAgcmV0dXJuIGV4Y2VwdGlvbjtcbn0sIFwiZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uXCIpO1xuXG4vLyBzcmMvZGVmYXVsdC1lcnJvci1oYW5kbGVyLnRzXG52YXIgdGhyb3dEZWZhdWx0RXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh7IG91dHB1dCwgcGFyc2VkQm9keSwgZXhjZXB0aW9uQ3RvciwgZXJyb3JDb2RlIH0pID0+IHtcbiAgY29uc3QgJG1ldGFkYXRhID0gZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpO1xuICBjb25zdCBzdGF0dXNDb2RlID0gJG1ldGFkYXRhLmh0dHBTdGF0dXNDb2RlID8gJG1ldGFkYXRhLmh0dHBTdGF0dXNDb2RlICsgXCJcIiA6IHZvaWQgMDtcbiAgY29uc3QgcmVzcG9uc2UgPSBuZXcgZXhjZXB0aW9uQ3Rvcih7XG4gICAgbmFtZTogcGFyc2VkQm9keT8uY29kZSB8fCBwYXJzZWRCb2R5Py5Db2RlIHx8IGVycm9yQ29kZSB8fCBzdGF0dXNDb2RlIHx8IFwiVW5rbm93bkVycm9yXCIsXG4gICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICRtZXRhZGF0YVxuICB9KTtcbiAgdGhyb3cgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKHJlc3BvbnNlLCBwYXJzZWRCb2R5KTtcbn0sIFwidGhyb3dEZWZhdWx0RXJyb3JcIik7XG52YXIgd2l0aEJhc2VFeGNlcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChFeGNlcHRpb25DdG9yKSA9PiB7XG4gIHJldHVybiAoeyBvdXRwdXQsIHBhcnNlZEJvZHksIGVycm9yQ29kZSB9KSA9PiB7XG4gICAgdGhyb3dEZWZhdWx0RXJyb3IoeyBvdXRwdXQsIHBhcnNlZEJvZHksIGV4Y2VwdGlvbkN0b3I6IEV4Y2VwdGlvbkN0b3IsIGVycm9yQ29kZSB9KTtcbiAgfTtcbn0sIFwid2l0aEJhc2VFeGNlcHRpb25cIik7XG52YXIgZGVzZXJpYWxpemVNZXRhZGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCkgPT4gKHtcbiAgaHR0cFN0YXR1c0NvZGU6IG91dHB1dC5zdGF0dXNDb2RlLFxuICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgZXh0ZW5kZWRSZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotaWQtMlwiXSxcbiAgY2ZJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1jZi1pZFwiXVxufSksIFwiZGVzZXJpYWxpemVNZXRhZGF0YVwiKTtcblxuLy8gc3JjL2RlZmF1bHRzLW1vZGUudHNcbnZhciBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobW9kZSkgPT4ge1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIFwic3RhbmRhcmRcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJldHJ5TW9kZTogXCJzdGFuZGFyZFwiLFxuICAgICAgICBjb25uZWN0aW9uVGltZW91dDogMzEwMFxuICAgICAgfTtcbiAgICBjYXNlIFwiaW4tcmVnaW9uXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXRyeU1vZGU6IFwic3RhbmRhcmRcIixcbiAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IDExMDBcbiAgICAgIH07XG4gICAgY2FzZSBcImNyb3NzLXJlZ2lvblwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmV0cnlNb2RlOiBcInN0YW5kYXJkXCIsXG4gICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAzMTAwXG4gICAgICB9O1xuICAgIGNhc2UgXCJtb2JpbGVcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJldHJ5TW9kZTogXCJzdGFuZGFyZFwiLFxuICAgICAgICBjb25uZWN0aW9uVGltZW91dDogM2U0XG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge307XG4gIH1cbn0sIFwibG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZVwiKTtcblxuLy8gc3JjL2VtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24udHNcbnZhciB3YXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xudmFyIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2ZXJzaW9uKSA9PiB7XG4gIGlmICh2ZXJzaW9uICYmICF3YXJuaW5nRW1pdHRlZCAmJiBwYXJzZUludCh2ZXJzaW9uLnN1YnN0cmluZygxLCB2ZXJzaW9uLmluZGV4T2YoXCIuXCIpKSkgPCAxNikge1xuICAgIHdhcm5pbmdFbWl0dGVkID0gdHJ1ZTtcbiAgfVxufSwgXCJlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uXCIpO1xuXG4vLyBzcmMvZXh0ZW5kZWQtZW5jb2RlLXVyaS1jb21wb25lbnQudHNcblxuXG4vLyBzcmMvZXh0ZW5zaW9ucy9jaGVja3N1bS50c1xuXG52YXIgZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocnVudGltZUNvbmZpZykgPT4ge1xuICBjb25zdCBjaGVja3N1bUFsZ29yaXRobXMgPSBbXTtcbiAgZm9yIChjb25zdCBpZCBpbiBpbXBvcnRfdHlwZXMuQWxnb3JpdGhtSWQpIHtcbiAgICBjb25zdCBhbGdvcml0aG1JZCA9IGltcG9ydF90eXBlcy5BbGdvcml0aG1JZFtpZF07XG4gICAgaWYgKHJ1bnRpbWVDb25maWdbYWxnb3JpdGhtSWRdID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjaGVja3N1bUFsZ29yaXRobXMucHVzaCh7XG4gICAgICBhbGdvcml0aG1JZDogKCkgPT4gYWxnb3JpdGhtSWQsXG4gICAgICBjaGVja3N1bUNvbnN0cnVjdG9yOiAoKSA9PiBydW50aW1lQ29uZmlnW2FsZ29yaXRobUlkXVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWRkQ2hlY2tzdW1BbGdvcml0aG0oYWxnbykge1xuICAgICAgY2hlY2tzdW1BbGdvcml0aG1zLnB1c2goYWxnbyk7XG4gICAgfSxcbiAgICBjaGVja3N1bUFsZ29yaXRobXMoKSB7XG4gICAgICByZXR1cm4gY2hlY2tzdW1BbGdvcml0aG1zO1xuICAgIH1cbiAgfTtcbn0sIFwiZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uXCIpO1xudmFyIHJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjbGllbnRDb25maWcpID0+IHtcbiAgY29uc3QgcnVudGltZUNvbmZpZyA9IHt9O1xuICBjbGllbnRDb25maWcuY2hlY2tzdW1BbGdvcml0aG1zKCkuZm9yRWFjaCgoY2hlY2tzdW1BbGdvcml0aG0pID0+IHtcbiAgICBydW50aW1lQ29uZmlnW2NoZWNrc3VtQWxnb3JpdGhtLmFsZ29yaXRobUlkKCldID0gY2hlY2tzdW1BbGdvcml0aG0uY2hlY2tzdW1Db25zdHJ1Y3RvcigpO1xuICB9KTtcbiAgcmV0dXJuIHJ1bnRpbWVDb25maWc7XG59LCBcInJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWdcIik7XG5cbi8vIHNyYy9leHRlbnNpb25zL3JldHJ5LnRzXG52YXIgZ2V0UmV0cnlDb25maWd1cmF0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocnVudGltZUNvbmZpZykgPT4ge1xuICByZXR1cm4ge1xuICAgIHNldFJldHJ5U3RyYXRlZ3kocmV0cnlTdHJhdGVneSkge1xuICAgICAgcnVudGltZUNvbmZpZy5yZXRyeVN0cmF0ZWd5ID0gcmV0cnlTdHJhdGVneTtcbiAgICB9LFxuICAgIHJldHJ5U3RyYXRlZ3koKSB7XG4gICAgICByZXR1cm4gcnVudGltZUNvbmZpZy5yZXRyeVN0cmF0ZWd5O1xuICAgIH1cbiAgfTtcbn0sIFwiZ2V0UmV0cnlDb25maWd1cmF0aW9uXCIpO1xudmFyIHJlc29sdmVSZXRyeVJ1bnRpbWVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXRyeVN0cmF0ZWd5Q29uZmlndXJhdGlvbikgPT4ge1xuICBjb25zdCBydW50aW1lQ29uZmlnID0ge307XG4gIHJ1bnRpbWVDb25maWcucmV0cnlTdHJhdGVneSA9IHJldHJ5U3RyYXRlZ3lDb25maWd1cmF0aW9uLnJldHJ5U3RyYXRlZ3koKTtcbiAgcmV0dXJuIHJ1bnRpbWVDb25maWc7XG59LCBcInJlc29sdmVSZXRyeVJ1bnRpbWVDb25maWdcIik7XG5cbi8vIHNyYy9leHRlbnNpb25zL2RlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLnRzXG52YXIgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChydW50aW1lQ29uZmlnKSA9PiB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGdldENoZWNrc3VtQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0UmV0cnlDb25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKTtcbn0sIFwiZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb25cIik7XG52YXIgZ2V0RGVmYXVsdENsaWVudENvbmZpZ3VyYXRpb24gPSBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbjtcbnZhciByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb25maWcpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocmVzb2x2ZUNoZWNrc3VtUnVudGltZUNvbmZpZyhjb25maWcpLCByZXNvbHZlUmV0cnlSdW50aW1lQ29uZmlnKGNvbmZpZykpO1xufSwgXCJyZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWdcIik7XG5cbi8vIHNyYy9nZXQtYXJyYXktaWYtc2luZ2xlLWl0ZW0udHNcbnZhciBnZXRBcnJheUlmU2luZ2xlSXRlbSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG1heUJlQXJyYXkpID0+IEFycmF5LmlzQXJyYXkobWF5QmVBcnJheSkgPyBtYXlCZUFycmF5IDogW21heUJlQXJyYXldLCBcImdldEFycmF5SWZTaW5nbGVJdGVtXCIpO1xuXG4vLyBzcmMvZ2V0LXZhbHVlLWZyb20tdGV4dC1ub2RlLnRzXG52YXIgZ2V0VmFsdWVGcm9tVGV4dE5vZGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmopID0+IHtcbiAgY29uc3QgdGV4dE5vZGVOYW1lID0gXCIjdGV4dFwiO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV1bdGV4dE5vZGVOYW1lXSAhPT0gdm9pZCAwKSB7XG4gICAgICBvYmpba2V5XSA9IG9ialtrZXldW3RleHROb2RlTmFtZV07XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09IFwib2JqZWN0XCIgJiYgb2JqW2tleV0gIT09IG51bGwpIHtcbiAgICAgIG9ialtrZXldID0gZ2V0VmFsdWVGcm9tVGV4dE5vZGUob2JqW2tleV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufSwgXCJnZXRWYWx1ZUZyb21UZXh0Tm9kZVwiKTtcblxuLy8gc3JjL2lzLXNlcmlhbGl6YWJsZS1oZWFkZXItdmFsdWUudHNcbnZhciBpc1NlcmlhbGl6YWJsZUhlYWRlclZhbHVlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGw7XG59LCBcImlzU2VyaWFsaXphYmxlSGVhZGVyVmFsdWVcIik7XG5cbi8vIHNyYy9sYXp5LWpzb24udHNcbnZhciBMYXp5SnNvblN0cmluZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24gTGF6eUpzb25TdHJpbmcyKHZhbCkge1xuICBjb25zdCBzdHIgPSBPYmplY3QuYXNzaWduKG5ldyBTdHJpbmcodmFsKSwge1xuICAgIGRlc2VyaWFsaXplSlNPTigpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKFN0cmluZyh2YWwpKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICAgIH0sXG4gICAgdG9KU09OKCkge1xuICAgICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHI7XG59LCBcIkxhenlKc29uU3RyaW5nXCIpO1xuTGF6eUpzb25TdHJpbmcuZnJvbSA9IChvYmplY3QpID0+IHtcbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSBcIm9iamVjdFwiICYmIChvYmplY3QgaW5zdGFuY2VvZiBMYXp5SnNvblN0cmluZyB8fCBcImRlc2VyaWFsaXplSlNPTlwiIGluIG9iamVjdCkpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmplY3QgPT09IFwic3RyaW5nXCIgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCkgPT09IFN0cmluZy5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gTGF6eUpzb25TdHJpbmcoU3RyaW5nKG9iamVjdCkpO1xuICB9XG4gIHJldHVybiBMYXp5SnNvblN0cmluZyhKU09OLnN0cmluZ2lmeShvYmplY3QpKTtcbn07XG5MYXp5SnNvblN0cmluZy5mcm9tT2JqZWN0ID0gTGF6eUpzb25TdHJpbmcuZnJvbTtcblxuLy8gc3JjL05vT3BMb2dnZXIudHNcbnZhciBOb09wTG9nZ2VyID0gY2xhc3Mge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIk5vT3BMb2dnZXJcIik7XG4gIH1cbiAgdHJhY2UoKSB7XG4gIH1cbiAgZGVidWcoKSB7XG4gIH1cbiAgaW5mbygpIHtcbiAgfVxuICB3YXJuKCkge1xuICB9XG4gIGVycm9yKCkge1xuICB9XG59O1xuXG4vLyBzcmMvb2JqZWN0LW1hcHBpbmcudHNcbmZ1bmN0aW9uIG1hcChhcmcwLCBhcmcxLCBhcmcyKSB7XG4gIGxldCB0YXJnZXQ7XG4gIGxldCBmaWx0ZXI7XG4gIGxldCBpbnN0cnVjdGlvbnM7XG4gIGlmICh0eXBlb2YgYXJnMSA9PT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgYXJnMiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRhcmdldCA9IHt9O1xuICAgIGluc3RydWN0aW9ucyA9IGFyZzA7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gYXJnMDtcbiAgICBpZiAodHlwZW9mIGFyZzEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZmlsdGVyID0gYXJnMTtcbiAgICAgIGluc3RydWN0aW9ucyA9IGFyZzI7XG4gICAgICByZXR1cm4gbWFwV2l0aEZpbHRlcih0YXJnZXQsIGZpbHRlciwgaW5zdHJ1Y3Rpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYXJnMTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoaW5zdHJ1Y3Rpb25zKSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnN0cnVjdGlvbnNba2V5XSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gaW5zdHJ1Y3Rpb25zW2tleV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYXBwbHlJbnN0cnVjdGlvbih0YXJnZXQsIG51bGwsIGluc3RydWN0aW9ucywga2V5KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuX19uYW1lKG1hcCwgXCJtYXBcIik7XG52YXIgY29udmVydE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRhcmdldCkgPT4ge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXModGFyZ2V0IHx8IHt9KSkge1xuICAgIG91dHB1dFtrXSA9IFssIHZdO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59LCBcImNvbnZlcnRNYXBcIik7XG52YXIgdGFrZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHNvdXJjZSwgaW5zdHJ1Y3Rpb25zKSA9PiB7XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0cnVjdGlvbnMpIHtcbiAgICBhcHBseUluc3RydWN0aW9uKG91dCwgc291cmNlLCBpbnN0cnVjdGlvbnMsIGtleSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn0sIFwidGFrZVwiKTtcbnZhciBtYXBXaXRoRmlsdGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGFyZ2V0LCBmaWx0ZXIsIGluc3RydWN0aW9ucykgPT4ge1xuICByZXR1cm4gbWFwKFxuICAgIHRhcmdldCxcbiAgICBPYmplY3QuZW50cmllcyhpbnN0cnVjdGlvbnMpLnJlZHVjZShcbiAgICAgIChfaW5zdHJ1Y3Rpb25zLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgX2luc3RydWN0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBfaW5zdHJ1Y3Rpb25zW2tleV0gPSBbZmlsdGVyLCB2YWx1ZSgpXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2luc3RydWN0aW9uc1trZXldID0gW2ZpbHRlciwgdmFsdWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2luc3RydWN0aW9ucztcbiAgICAgIH0sXG4gICAgICB7fVxuICAgIClcbiAgKTtcbn0sIFwibWFwV2l0aEZpbHRlclwiKTtcbnZhciBhcHBseUluc3RydWN0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGFyZ2V0LCBzb3VyY2UsIGluc3RydWN0aW9ucywgdGFyZ2V0S2V5KSA9PiB7XG4gIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICBsZXQgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbdGFyZ2V0S2V5XTtcbiAgICBpZiAodHlwZW9mIGluc3RydWN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGluc3RydWN0aW9uID0gWywgaW5zdHJ1Y3Rpb25dO1xuICAgIH1cbiAgICBjb25zdCBbZmlsdGVyMiA9IG5vbk51bGxpc2gsIHZhbHVlRm4gPSBwYXNzLCBzb3VyY2VLZXkgPSB0YXJnZXRLZXldID0gaW5zdHJ1Y3Rpb247XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIyID09PSBcImZ1bmN0aW9uXCIgJiYgZmlsdGVyMihzb3VyY2Vbc291cmNlS2V5XSkgfHwgdHlwZW9mIGZpbHRlcjIgIT09IFwiZnVuY3Rpb25cIiAmJiAhIWZpbHRlcjIpIHtcbiAgICAgIHRhcmdldFt0YXJnZXRLZXldID0gdmFsdWVGbihzb3VyY2Vbc291cmNlS2V5XSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBsZXQgW2ZpbHRlciwgdmFsdWVdID0gaW5zdHJ1Y3Rpb25zW3RhcmdldEtleV07XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGxldCBfdmFsdWU7XG4gICAgY29uc3QgZGVmYXVsdEZpbHRlclBhc3NlZCA9IGZpbHRlciA9PT0gdm9pZCAwICYmIChfdmFsdWUgPSB2YWx1ZSgpKSAhPSBudWxsO1xuICAgIGNvbnN0IGN1c3RvbUZpbHRlclBhc3NlZCA9IHR5cGVvZiBmaWx0ZXIgPT09IFwiZnVuY3Rpb25cIiAmJiAhIWZpbHRlcih2b2lkIDApIHx8IHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAhIWZpbHRlcjtcbiAgICBpZiAoZGVmYXVsdEZpbHRlclBhc3NlZCkge1xuICAgICAgdGFyZ2V0W3RhcmdldEtleV0gPSBfdmFsdWU7XG4gICAgfSBlbHNlIGlmIChjdXN0b21GaWx0ZXJQYXNzZWQpIHtcbiAgICAgIHRhcmdldFt0YXJnZXRLZXldID0gdmFsdWUoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZGVmYXVsdEZpbHRlclBhc3NlZCA9IGZpbHRlciA9PT0gdm9pZCAwICYmIHZhbHVlICE9IG51bGw7XG4gICAgY29uc3QgY3VzdG9tRmlsdGVyUGFzc2VkID0gdHlwZW9mIGZpbHRlciA9PT0gXCJmdW5jdGlvblwiICYmICEhZmlsdGVyKHZhbHVlKSB8fCB0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXI7XG4gICAgaWYgKGRlZmF1bHRGaWx0ZXJQYXNzZWQgfHwgY3VzdG9tRmlsdGVyUGFzc2VkKSB7XG4gICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufSwgXCJhcHBseUluc3RydWN0aW9uXCIpO1xudmFyIG5vbk51bGxpc2ggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBfICE9IG51bGwsIFwibm9uTnVsbGlzaFwiKTtcbnZhciBwYXNzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gXywgXCJwYXNzXCIpO1xuXG4vLyBzcmMvcXVvdGUtaGVhZGVyLnRzXG5mdW5jdGlvbiBxdW90ZUhlYWRlcihwYXJ0KSB7XG4gIGlmIChwYXJ0LmluY2x1ZGVzKFwiLFwiKSB8fCBwYXJ0LmluY2x1ZGVzKCdcIicpKSB7XG4gICAgcGFydCA9IGBcIiR7cGFydC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyl9XCJgO1xuICB9XG4gIHJldHVybiBwYXJ0O1xufVxuX19uYW1lKHF1b3RlSGVhZGVyLCBcInF1b3RlSGVhZGVyXCIpO1xuXG4vLyBzcmMvcmVzb2x2ZS1wYXRoLnRzXG5cblxuLy8gc3JjL3Nlci11dGlscy50c1xudmFyIHNlcmlhbGl6ZUZsb2F0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBcIk5hTlwiO1xuICB9XG4gIHN3aXRjaCAodmFsdWUpIHtcbiAgICBjYXNlIEluZmluaXR5OlxuICAgICAgcmV0dXJuIFwiSW5maW5pdHlcIjtcbiAgICBjYXNlIC1JbmZpbml0eTpcbiAgICAgIHJldHVybiBcIi1JbmZpbml0eVwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn0sIFwic2VyaWFsaXplRmxvYXRcIik7XG52YXIgc2VyaWFsaXplRGF0ZVRpbWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRlKSA9PiBkYXRlLnRvSVNPU3RyaW5nKCkucmVwbGFjZShcIi4wMDBaXCIsIFwiWlwiKSwgXCJzZXJpYWxpemVEYXRlVGltZVwiKTtcblxuLy8gc3JjL3NlcmRlLWpzb24udHNcbnZhciBfanNvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG9iaikgPT4ge1xuICBpZiAob2JqID09IG51bGwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmouZmlsdGVyKChfKSA9PiBfICE9IG51bGwpLm1hcChfanNvbik7XG4gIH1cbiAgaWYgKHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmopKSB7XG4gICAgICBpZiAob2JqW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRhcmdldFtrZXldID0gX2pzb24ob2JqW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBvYmo7XG59LCBcIl9qc29uXCIpO1xuXG4vLyBzcmMvc3BsaXQtZXZlcnkudHNcbmZ1bmN0aW9uIHNwbGl0RXZlcnkodmFsdWUsIGRlbGltaXRlciwgbnVtRGVsaW1pdGVycykge1xuICBpZiAobnVtRGVsaW1pdGVycyA8PSAwIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bURlbGltaXRlcnMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBudW1iZXIgb2YgZGVsaW1pdGVycyAoXCIgKyBudW1EZWxpbWl0ZXJzICsgXCIpIGZvciBzcGxpdEV2ZXJ5LlwiKTtcbiAgfVxuICBjb25zdCBzZWdtZW50cyA9IHZhbHVlLnNwbGl0KGRlbGltaXRlcik7XG4gIGlmIChudW1EZWxpbWl0ZXJzID09PSAxKSB7XG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG4gIGNvbnN0IGNvbXBvdW5kU2VnbWVudHMgPSBbXTtcbiAgbGV0IGN1cnJlbnRTZWdtZW50ID0gXCJcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjdXJyZW50U2VnbWVudCA9PT0gXCJcIikge1xuICAgICAgY3VycmVudFNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFNlZ21lbnQgKz0gZGVsaW1pdGVyICsgc2VnbWVudHNbaV07XG4gICAgfVxuICAgIGlmICgoaSArIDEpICUgbnVtRGVsaW1pdGVycyA9PT0gMCkge1xuICAgICAgY29tcG91bmRTZWdtZW50cy5wdXNoKGN1cnJlbnRTZWdtZW50KTtcbiAgICAgIGN1cnJlbnRTZWdtZW50ID0gXCJcIjtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJlbnRTZWdtZW50ICE9PSBcIlwiKSB7XG4gICAgY29tcG91bmRTZWdtZW50cy5wdXNoKGN1cnJlbnRTZWdtZW50KTtcbiAgfVxuICByZXR1cm4gY29tcG91bmRTZWdtZW50cztcbn1cbl9fbmFtZShzcGxpdEV2ZXJ5LCBcInNwbGl0RXZlcnlcIik7XG5cbi8vIHNyYy9zcGxpdC1oZWFkZXIudHNcbnZhciBzcGxpdEhlYWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHogPSB2YWx1ZS5sZW5ndGg7XG4gIGNvbnN0IHZhbHVlcyA9IFtdO1xuICBsZXQgd2l0aGluUXVvdGVzID0gZmFsc2U7XG4gIGxldCBwcmV2Q2hhciA9IHZvaWQgMDtcbiAgbGV0IGFuY2hvciA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgejsgKytpKSB7XG4gICAgY29uc3QgY2hhciA9IHZhbHVlW2ldO1xuICAgIHN3aXRjaCAoY2hhcikge1xuICAgICAgY2FzZSBgXCJgOlxuICAgICAgICBpZiAocHJldkNoYXIgIT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgd2l0aGluUXVvdGVzID0gIXdpdGhpblF1b3RlcztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCIsXCI6XG4gICAgICAgIGlmICghd2l0aGluUXVvdGVzKSB7XG4gICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUuc2xpY2UoYW5jaG9yLCBpKSk7XG4gICAgICAgICAgYW5jaG9yID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICBwcmV2Q2hhciA9IGNoYXI7XG4gIH1cbiAgdmFsdWVzLnB1c2godmFsdWUuc2xpY2UoYW5jaG9yKSk7XG4gIHJldHVybiB2YWx1ZXMubWFwKCh2KSA9PiB7XG4gICAgdiA9IHYudHJpbSgpO1xuICAgIGNvbnN0IHoyID0gdi5sZW5ndGg7XG4gICAgaWYgKHoyIDwgMikge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGlmICh2WzBdID09PSBgXCJgICYmIHZbejIgLSAxXSA9PT0gYFwiYCkge1xuICAgICAgdiA9IHYuc2xpY2UoMSwgejIgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHYucmVwbGFjZSgvXFxcXFwiL2csICdcIicpO1xuICB9KTtcbn0sIFwic3BsaXRIZWFkZXJcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDbGllbnQsXG4gIGNvbGxlY3RCb2R5LFxuICBDb21tYW5kLFxuICBTRU5TSVRJVkVfU1RSSU5HLFxuICBjcmVhdGVBZ2dyZWdhdGVkQ2xpZW50LFxuICBkYXRlVG9VdGNTdHJpbmcsXG4gIHBhcnNlUmZjMzMzOURhdGVUaW1lLFxuICBwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQsXG4gIHBhcnNlUmZjNzIzMURhdGVUaW1lLFxuICBwYXJzZUVwb2NoVGltZXN0YW1wLFxuICB0aHJvd0RlZmF1bHRFcnJvcixcbiAgd2l0aEJhc2VFeGNlcHRpb24sXG4gIGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUsXG4gIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24sXG4gIFNlcnZpY2VFeGNlcHRpb24sXG4gIGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbixcbiAgZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQsXG4gIGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLFxuICBnZXREZWZhdWx0Q2xpZW50Q29uZmlndXJhdGlvbixcbiAgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnLFxuICBnZXRBcnJheUlmU2luZ2xlSXRlbSxcbiAgZ2V0VmFsdWVGcm9tVGV4dE5vZGUsXG4gIGlzU2VyaWFsaXphYmxlSGVhZGVyVmFsdWUsXG4gIExhenlKc29uU3RyaW5nLFxuICBOb09wTG9nZ2VyLFxuICBtYXAsXG4gIGNvbnZlcnRNYXAsXG4gIHRha2UsXG4gIHBhcnNlQm9vbGVhbixcbiAgZXhwZWN0Qm9vbGVhbixcbiAgZXhwZWN0TnVtYmVyLFxuICBleHBlY3RGbG9hdDMyLFxuICBleHBlY3RMb25nLFxuICBleHBlY3RJbnQsXG4gIGV4cGVjdEludDMyLFxuICBleHBlY3RTaG9ydCxcbiAgZXhwZWN0Qnl0ZSxcbiAgZXhwZWN0Tm9uTnVsbCxcbiAgZXhwZWN0T2JqZWN0LFxuICBleHBlY3RTdHJpbmcsXG4gIGV4cGVjdFVuaW9uLFxuICBzdHJpY3RQYXJzZURvdWJsZSxcbiAgc3RyaWN0UGFyc2VGbG9hdCxcbiAgc3RyaWN0UGFyc2VGbG9hdDMyLFxuICBsaW1pdGVkUGFyc2VEb3VibGUsXG4gIGhhbmRsZUZsb2F0LFxuICBsaW1pdGVkUGFyc2VGbG9hdCxcbiAgbGltaXRlZFBhcnNlRmxvYXQzMixcbiAgc3RyaWN0UGFyc2VMb25nLFxuICBzdHJpY3RQYXJzZUludCxcbiAgc3RyaWN0UGFyc2VJbnQzMixcbiAgc3RyaWN0UGFyc2VTaG9ydCxcbiAgc3RyaWN0UGFyc2VCeXRlLFxuICBsb2dnZXIsXG4gIHF1b3RlSGVhZGVyLFxuICByZXNvbHZlZFBhdGgsXG4gIHNlcmlhbGl6ZUZsb2F0LFxuICBzZXJpYWxpemVEYXRlVGltZSxcbiAgX2pzb24sXG4gIHNwbGl0RXZlcnksXG4gIHNwbGl0SGVhZGVyXG59KTtcblxuIiwgImltcG9ydCB7IGV4cGVjdFVuaW9uIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGF3c0V4cGVjdFVuaW9uID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBcIl9fdHlwZVwiIGluIHZhbHVlKSB7XG4gICAgICAgIGRlbGV0ZSB2YWx1ZS5fX3R5cGU7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RVbmlvbih2YWx1ZSk7XG59O1xuIiwgImltcG9ydCB7IGNvbGxlY3RCb2R5IH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHksIGNvbnRleHQpID0+IGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuIiwgImltcG9ydCB7IGNvbGxlY3RCb2R5U3RyaW5nIH0gZnJvbSBcIi4uL2NvbW1vblwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlSnNvbkJvZHkgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHlTdHJpbmcoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoZW5jb2RlZCkgPT4ge1xuICAgIGlmIChlbmNvZGVkLmxlbmd0aCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZW5jb2RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlPy5uYW1lID09PSBcIlN5bnRheEVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCIkcmVzcG9uc2VCb2R5VGV4dFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbmNvZGVkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge307XG59KTtcbmV4cG9ydCBjb25zdCBwYXJzZUpzb25FcnJvckJvZHkgPSBhc3luYyAoZXJyb3JCb2R5LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwYXJzZUpzb25Cb2R5KGVycm9yQm9keSwgY29udGV4dCk7XG4gICAgdmFsdWUubWVzc2FnZSA9IHZhbHVlLm1lc3NhZ2UgPz8gdmFsdWUuTWVzc2FnZTtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuZXhwb3J0IGNvbnN0IGxvYWRSZXN0SnNvbkVycm9yQ29kZSA9IChvdXRwdXQsIGRhdGEpID0+IHtcbiAgICBjb25zdCBmaW5kS2V5ID0gKG9iamVjdCwga2V5KSA9PiBPYmplY3Qua2V5cyhvYmplY3QpLmZpbmQoKGspID0+IGsudG9Mb3dlckNhc2UoKSA9PT0ga2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgIGNvbnN0IHNhbml0aXplRXJyb3JDb2RlID0gKHJhd1ZhbHVlKSA9PiB7XG4gICAgICAgIGxldCBjbGVhblZhbHVlID0gcmF3VmFsdWU7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYW5WYWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgY2xlYW5WYWx1ZSA9IGNsZWFuVmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYW5WYWx1ZS5pbmRleE9mKFwiLFwiKSA+PSAwKSB7XG4gICAgICAgICAgICBjbGVhblZhbHVlID0gY2xlYW5WYWx1ZS5zcGxpdChcIixcIilbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFuVmFsdWUuaW5kZXhPZihcIjpcIikgPj0gMCkge1xuICAgICAgICAgICAgY2xlYW5WYWx1ZSA9IGNsZWFuVmFsdWUuc3BsaXQoXCI6XCIpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhblZhbHVlLmluZGV4T2YoXCIjXCIpID49IDApIHtcbiAgICAgICAgICAgIGNsZWFuVmFsdWUgPSBjbGVhblZhbHVlLnNwbGl0KFwiI1wiKVsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xlYW5WYWx1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGhlYWRlcktleSA9IGZpbmRLZXkob3V0cHV0LmhlYWRlcnMsIFwieC1hbXpuLWVycm9ydHlwZVwiKTtcbiAgICBpZiAoaGVhZGVyS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHNhbml0aXplRXJyb3JDb2RlKG91dHB1dC5oZWFkZXJzW2hlYWRlcktleV0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHNhbml0aXplRXJyb3JDb2RlKGRhdGEuY29kZSk7XG4gICAgfVxuICAgIGlmIChkYXRhW1wiX190eXBlXCJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHNhbml0aXplRXJyb3JDb2RlKGRhdGFbXCJfX3R5cGVcIl0pO1xuICAgIH1cbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuYW1lU3RhcnRDaGFyID0gJzpBLVphLXpfXFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkQnO1xuY29uc3QgbmFtZUNoYXIgPSBuYW1lU3RhcnRDaGFyICsgJ1xcXFwtLlxcXFxkXFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDAnO1xuY29uc3QgbmFtZVJlZ2V4cCA9ICdbJyArIG5hbWVTdGFydENoYXIgKyAnXVsnICsgbmFtZUNoYXIgKyAnXSonXG5jb25zdCByZWdleE5hbWUgPSBuZXcgUmVnRXhwKCdeJyArIG5hbWVSZWdleHAgKyAnJCcpO1xuXG5jb25zdCBnZXRBbGxNYXRjaGVzID0gZnVuY3Rpb24oc3RyaW5nLCByZWdleCkge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgY29uc3QgYWxsbWF0Y2hlcyA9IFtdO1xuICAgIGFsbG1hdGNoZXMuc3RhcnRJbmRleCA9IHJlZ2V4Lmxhc3RJbmRleCAtIG1hdGNoWzBdLmxlbmd0aDtcbiAgICBjb25zdCBsZW4gPSBtYXRjaC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgYWxsbWF0Y2hlcy5wdXNoKG1hdGNoW2luZGV4XSk7XG4gICAgfVxuICAgIG1hdGNoZXMucHVzaChhbGxtYXRjaGVzKTtcbiAgICBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn07XG5cbmNvbnN0IGlzTmFtZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICBjb25zdCBtYXRjaCA9IHJlZ2V4TmFtZS5leGVjKHN0cmluZyk7XG4gIHJldHVybiAhKG1hdGNoID09PSBudWxsIHx8IHR5cGVvZiBtYXRjaCA9PT0gJ3VuZGVmaW5lZCcpO1xufTtcblxuZXhwb3J0cy5pc0V4aXN0ID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnO1xufTtcblxuZXhwb3J0cy5pc0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn07XG5cbi8qKlxuICogQ29weSBhbGwgdGhlIHByb3BlcnRpZXMgb2YgYSBpbnRvIGIuXG4gKiBAcGFyYW0geyp9IHRhcmdldFxuICogQHBhcmFtIHsqfSBhXG4gKi9cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbih0YXJnZXQsIGEsIGFycmF5TW9kZSkge1xuICBpZiAoYSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhKTsgLy8gd2lsbCByZXR1cm4gYW4gYXJyYXkgb2Ygb3duIHByb3BlcnRpZXNcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsgLy9kb24ndCBtYWtlIGl0IGlubGluZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhcnJheU1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IFsgYVtrZXlzW2ldXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gYVtrZXlzW2ldXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4vKiBleHBvcnRzLm1lcmdlID1mdW5jdGlvbiAoYixhKXtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYixhKTtcbn0gKi9cblxuZXhwb3J0cy5nZXRWYWx1ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgaWYgKGV4cG9ydHMuaXNFeGlzdCh2KSkge1xuICAgIHJldHVybiB2O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuLy8gY29uc3QgZmFrZUNhbGwgPSBmdW5jdGlvbihhKSB7cmV0dXJuIGE7fTtcbi8vIGNvbnN0IGZha2VDYWxsTm9SZXR1cm4gPSBmdW5jdGlvbigpIHt9O1xuXG5leHBvcnRzLmlzTmFtZSA9IGlzTmFtZTtcbmV4cG9ydHMuZ2V0QWxsTWF0Y2hlcyA9IGdldEFsbE1hdGNoZXM7XG5leHBvcnRzLm5hbWVSZWdleHAgPSBuYW1lUmVnZXhwO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UsIC8vQSB0YWcgY2FuIGhhdmUgYXR0cmlidXRlcyB3aXRob3V0IGFueSB2YWx1ZVxuICB1bnBhaXJlZFRhZ3M6IFtdXG59O1xuXG4vL2NvbnN0IHRhZ3NQYXR0ZXJuID0gbmV3IFJlZ0V4cChcIjxcXFxcLz8oW1xcXFx3OlxcXFwtX1xcLl0rKVxcXFxzKlxcLz8+XCIsXCJnXCIpO1xuZXhwb3J0cy52YWxpZGF0ZSA9IGZ1bmN0aW9uICh4bWxEYXRhLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgLy94bWxEYXRhID0geG1sRGF0YS5yZXBsYWNlKC8oXFxyXFxufFxcbnxcXHIpL2dtLFwiXCIpOy8vbWFrZSBpdCBzaW5nbGUgbGluZVxuICAvL3htbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoLyheXFxzKjxcXD94bWwuKj9cXD8+KS9nLFwiXCIpOy8vUmVtb3ZlIFhNTCBzdGFydGluZyB0YWdcbiAgLy94bWxEYXRhID0geG1sRGF0YS5yZXBsYWNlKC8oPCFET0NUWVBFW1xcc1xcd1xcXCJcXC5cXC9cXC1cXDpdKyhcXFsuKlxcXSkqXFxzKj4pL2csXCJcIik7Ly9SZW1vdmUgRE9DVFlQRVxuICBjb25zdCB0YWdzID0gW107XG4gIGxldCB0YWdGb3VuZCA9IGZhbHNlO1xuXG4gIC8vaW5kaWNhdGVzIHRoYXQgdGhlIHJvb3QgdGFnIGhhcyBiZWVuIGNsb3NlZCAoYWthLiBkZXB0aCAwIGhhcyBiZWVuIHJlYWNoZWQpXG4gIGxldCByZWFjaGVkUm9vdCA9IGZhbHNlO1xuXG4gIGlmICh4bWxEYXRhWzBdID09PSAnXFx1ZmVmZicpIHtcbiAgICAvLyBjaGVjayBmb3IgYnl0ZSBvcmRlciBtYXJrIChCT00pXG4gICAgeG1sRGF0YSA9IHhtbERhdGEuc3Vic3RyKDEpO1xuICB9XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcblxuICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcgJiYgeG1sRGF0YVtpKzFdID09PSAnPycpIHtcbiAgICAgIGkrPTI7XG4gICAgICBpID0gcmVhZFBJKHhtbERhdGEsaSk7XG4gICAgICBpZiAoaS5lcnIpIHJldHVybiBpO1xuICAgIH1lbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgIC8vc3RhcnRpbmcgb2YgdGFnXG4gICAgICAvL3JlYWQgdW50aWwgeW91IHJlYWNoIHRvICc+JyBhdm9pZGluZyBhbnkgJz4nIGluIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgbGV0IHRhZ1N0YXJ0UG9zID0gaTtcbiAgICAgIGkrKztcbiAgICAgIFxuICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICchJykge1xuICAgICAgICBpID0gcmVhZENvbW1lbnRBbmRDREFUQSh4bWxEYXRhLCBpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY2xvc2luZ1RhZyA9IGZhbHNlO1xuICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJy8nKSB7XG4gICAgICAgICAgLy9jbG9zaW5nIHRhZ1xuICAgICAgICAgIGNsb3NpbmdUYWcgPSB0cnVlO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICAvL3JlYWQgdGFnbmFtZVxuICAgICAgICBsZXQgdGFnTmFtZSA9ICcnO1xuICAgICAgICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJz4nICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJyAnICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJ1xcdCcgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnXFxuJyAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICdcXHInOyBpKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGFnTmFtZSArPSB4bWxEYXRhW2ldO1xuICAgICAgICB9XG4gICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnRyaW0oKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0YWdOYW1lKTtcblxuICAgICAgICBpZiAodGFnTmFtZVt0YWdOYW1lLmxlbmd0aCAtIDFdID09PSAnLycpIHtcbiAgICAgICAgICAvL3NlbGYgY2xvc2luZyB0YWcgd2l0aG91dCBhdHRyaWJ1dGVzXG4gICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyaW5nKDAsIHRhZ05hbWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgLy9jb250aW51ZTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWxpZGF0ZVRhZ05hbWUodGFnTmFtZSkpIHtcbiAgICAgICAgICBsZXQgbXNnO1xuICAgICAgICAgIGlmICh0YWdOYW1lLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIG1zZyA9IFwiSW52YWxpZCBzcGFjZSBhZnRlciAnPCcuXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1zZyA9IFwiVGFnICdcIit0YWdOYW1lK1wiJyBpcyBhbiBpbnZhbGlkIG5hbWUuXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIG1zZywgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlYWRBdHRyaWJ1dGVTdHIoeG1sRGF0YSwgaSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlcyBmb3IgJ1wiK3RhZ05hbWUrXCInIGhhdmUgb3BlbiBxdW90ZS5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYXR0clN0ciA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaSA9IHJlc3VsdC5pbmRleDtcblxuICAgICAgICBpZiAoYXR0clN0clthdHRyU3RyLmxlbmd0aCAtIDFdID09PSAnLycpIHtcbiAgICAgICAgICAvL3NlbGYgY2xvc2luZyB0YWdcbiAgICAgICAgICBjb25zdCBhdHRyU3RyU3RhcnQgPSBpIC0gYXR0clN0ci5sZW5ndGg7XG4gICAgICAgICAgYXR0clN0ciA9IGF0dHJTdHIuc3Vic3RyaW5nKDAsIGF0dHJTdHIubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlQXR0cmlidXRlU3RyaW5nKGF0dHJTdHIsIG9wdGlvbnMpO1xuICAgICAgICAgIGlmIChpc1ZhbGlkID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0YWdGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnRpbnVlOyAvL3RleHQgbWF5IHByZXNlbnRzIGFmdGVyIHNlbGYgY2xvc2luZyB0YWdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy90aGUgcmVzdWx0IGZyb20gdGhlIG5lc3RlZCBmdW5jdGlvbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZXJyb3Igd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vaW4gb3JkZXIgdG8gZ2V0IHRoZSAndHJ1ZScgZXJyb3IgbGluZSwgd2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIHdoZXJlIHRoZSBhdHRyaWJ1dGUgYmVnaW5zIChpIC0gYXR0clN0ci5sZW5ndGgpIGFuZCB0aGVuIGFkZCB0aGUgcG9zaXRpb24gd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vdGhpcyBnaXZlcyB1cyB0aGUgYWJzb2x1dGUgaW5kZXggaW4gdGhlIGVudGlyZSB4bWwsIHdoaWNoIHdlIGNhbiB1c2UgdG8gZmluZCB0aGUgbGluZSBhdCBsYXN0XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoaXNWYWxpZC5lcnIuY29kZSwgaXNWYWxpZC5lcnIubXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgYXR0clN0clN0YXJ0ICsgaXNWYWxpZC5lcnIubGluZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjbG9zaW5nVGFnKSB7XG4gICAgICAgICAgaWYgKCFyZXN1bHQudGFnQ2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBcIkNsb3NpbmcgdGFnICdcIit0YWdOYW1lK1wiJyBkb2Vzbid0IGhhdmUgcHJvcGVyIGNsb3NpbmcuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyU3RyLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBcIkNsb3NpbmcgdGFnICdcIit0YWdOYW1lK1wiJyBjYW4ndCBoYXZlIGF0dHJpYnV0ZXMgb3IgaW52YWxpZCBzdGFydGluZy5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIHRhZ1N0YXJ0UG9zKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgXCJDbG9zaW5nIHRhZyAnXCIrdGFnTmFtZStcIicgaGFzIG5vdCBiZWVuIG9wZW5lZC5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIHRhZ1N0YXJ0UG9zKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG90ZyA9IHRhZ3MucG9wKCk7XG4gICAgICAgICAgICBpZiAodGFnTmFtZSAhPT0gb3RnLnRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgbGV0IG9wZW5Qb3MgPSBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgb3RnLnRhZ1N0YXJ0UG9zKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJyxcbiAgICAgICAgICAgICAgICBcIkV4cGVjdGVkIGNsb3NpbmcgdGFnICdcIitvdGcudGFnTmFtZStcIicgKG9wZW5lZCBpbiBsaW5lIFwiK29wZW5Qb3MubGluZStcIiwgY29sIFwiK29wZW5Qb3MuY29sK1wiKSBpbnN0ZWFkIG9mIGNsb3NpbmcgdGFnICdcIit0YWdOYW1lK1wiJy5cIixcbiAgICAgICAgICAgICAgICBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgdGFnU3RhcnRQb3MpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy93aGVuIHRoZXJlIGFyZSBubyBtb3JlIHRhZ3MsIHdlIHJlYWNoZWQgdGhlIHJvb3QgbGV2ZWwuXG4gICAgICAgICAgICBpZiAodGFncy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICByZWFjaGVkUm9vdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyhhdHRyU3RyLCBvcHRpb25zKTtcbiAgICAgICAgICBpZiAoaXNWYWxpZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy90aGUgcmVzdWx0IGZyb20gdGhlIG5lc3RlZCBmdW5jdGlvbiByZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiB0aGUgZXJyb3Igd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vaW4gb3JkZXIgdG8gZ2V0IHRoZSAndHJ1ZScgZXJyb3IgbGluZSwgd2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIHdoZXJlIHRoZSBhdHRyaWJ1dGUgYmVnaW5zIChpIC0gYXR0clN0ci5sZW5ndGgpIGFuZCB0aGVuIGFkZCB0aGUgcG9zaXRpb24gd2l0aGluIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vdGhpcyBnaXZlcyB1cyB0aGUgYWJzb2x1dGUgaW5kZXggaW4gdGhlIGVudGlyZSB4bWwsIHdoaWNoIHdlIGNhbiB1c2UgdG8gZmluZCB0aGUgbGluZSBhdCBsYXN0XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoaXNWYWxpZC5lcnIuY29kZSwgaXNWYWxpZC5lcnIubXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSAtIGF0dHJTdHIubGVuZ3RoICsgaXNWYWxpZC5lcnIubGluZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vaWYgdGhlIHJvb3QgbGV2ZWwgaGFzIGJlZW4gcmVhY2hlZCBiZWZvcmUgLi4uXG4gICAgICAgICAgaWYgKHJlYWNoZWRSb290ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCAnTXVsdGlwbGUgcG9zc2libGUgcm9vdCBub2RlcyBmb3VuZC4nLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICAgIH0gZWxzZSBpZihvcHRpb25zLnVucGFpcmVkVGFncy5pbmRleE9mKHRhZ05hbWUpICE9PSAtMSl7XG4gICAgICAgICAgICAvL2Rvbid0IHB1c2ggaW50byBzdGFja1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YWdzLnB1c2goe3RhZ05hbWUsIHRhZ1N0YXJ0UG9zfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhZ0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc2tpcCB0YWcgdGV4dCB2YWx1ZVxuICAgICAgICAvL0l0IG1heSBpbmNsdWRlIGNvbW1lbnRzIGFuZCBDREFUQSB2YWx1ZVxuICAgICAgICBmb3IgKGkrKzsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAgICAgICBpZiAoeG1sRGF0YVtpICsgMV0gPT09ICchJykge1xuICAgICAgICAgICAgICAvL2NvbW1lbnQgb3IgQ0FEQVRBXG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgaSA9IHJlYWRDb21tZW50QW5kQ0RBVEEoeG1sRGF0YSwgaSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2krMV0gPT09ICc/Jykge1xuICAgICAgICAgICAgICBpID0gcmVhZFBJKHhtbERhdGEsICsraSk7XG4gICAgICAgICAgICAgIGlmIChpLmVycikgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gJyYnKSB7XG4gICAgICAgICAgICBjb25zdCBhZnRlckFtcCA9IHZhbGlkYXRlQW1wZXJzYW5kKHhtbERhdGEsIGkpO1xuICAgICAgICAgICAgaWYgKGFmdGVyQW1wID09IC0xKVxuICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRDaGFyJywgXCJjaGFyICcmJyBpcyBub3QgZXhwZWN0ZWQuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgICBpID0gYWZ0ZXJBbXA7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZiAocmVhY2hlZFJvb3QgPT09IHRydWUgJiYgIWlzV2hpdGVTcGFjZSh4bWxEYXRhW2ldKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCBcIkV4dHJhIHRleHQgYXQgdGhlIGVuZFwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvL2VuZCBvZiByZWFkaW5nIHRhZyB0ZXh0IHZhbHVlXG4gICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCBpc1doaXRlU3BhY2UoeG1sRGF0YVtpXSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRDaGFyJywgXCJjaGFyICdcIit4bWxEYXRhW2ldK1wiJyBpcyBub3QgZXhwZWN0ZWQuXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0YWdGb3VuZCkge1xuICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsICdTdGFydCB0YWcgZXhwZWN0ZWQuJywgMSk7XG4gIH1lbHNlIGlmICh0YWdzLmxlbmd0aCA9PSAxKSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBcIlVuY2xvc2VkIHRhZyAnXCIrdGFnc1swXS50YWdOYW1lK1wiJy5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIHRhZ3NbMF0udGFnU3RhcnRQb3MpKTtcbiAgfWVsc2UgaWYgKHRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgXCJJbnZhbGlkICdcIitcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0YWdzLm1hcCh0ID0+IHQudGFnTmFtZSksIG51bGwsIDQpLnJlcGxhY2UoL1xccj9cXG4vZywgJycpK1xuICAgICAgICAgIFwiJyBmb3VuZC5cIiwge2xpbmU6IDEsIGNvbDogMX0pO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBpc1doaXRlU3BhY2UoY2hhcil7XG4gIHJldHVybiBjaGFyID09PSAnICcgfHwgY2hhciA9PT0gJ1xcdCcgfHwgY2hhciA9PT0gJ1xcbicgIHx8IGNoYXIgPT09ICdcXHInO1xufVxuLyoqXG4gKiBSZWFkIFByb2Nlc3NpbmcgaW5zc3RydWN0aW9ucyBhbmQgc2tpcFxuICogQHBhcmFtIHsqfSB4bWxEYXRhXG4gKiBAcGFyYW0geyp9IGlcbiAqL1xuZnVuY3Rpb24gcmVhZFBJKHhtbERhdGEsIGkpIHtcbiAgY29uc3Qgc3RhcnQgPSBpO1xuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PSAnPycgfHwgeG1sRGF0YVtpXSA9PSAnICcpIHtcbiAgICAgIC8vdGFnbmFtZVxuICAgICAgY29uc3QgdGFnbmFtZSA9IHhtbERhdGEuc3Vic3RyKHN0YXJ0LCBpIC0gc3RhcnQpO1xuICAgICAgaWYgKGkgPiA1ICYmIHRhZ25hbWUgPT09ICd4bWwnKSB7XG4gICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsICdYTUwgZGVjbGFyYXRpb24gYWxsb3dlZCBvbmx5IGF0IHRoZSBzdGFydCBvZiB0aGUgZG9jdW1lbnQuJywgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpXSA9PSAnPycgJiYgeG1sRGF0YVtpICsgMV0gPT0gJz4nKSB7XG4gICAgICAgIC8vY2hlY2sgaWYgdmFsaWQgYXR0cmlidXQgc3RyaW5nXG4gICAgICAgIGkrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIHJlYWRDb21tZW50QW5kQ0RBVEEoeG1sRGF0YSwgaSkge1xuICBpZiAoeG1sRGF0YS5sZW5ndGggPiBpICsgNSAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gJy0nICYmIHhtbERhdGFbaSArIDJdID09PSAnLScpIHtcbiAgICAvL2NvbW1lbnRcbiAgICBmb3IgKGkgKz0gMzsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnLScgJiYgeG1sRGF0YVtpICsgMV0gPT09ICctJyAmJiB4bWxEYXRhW2kgKyAyXSA9PT0gJz4nKSB7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFxuICAgIHhtbERhdGEubGVuZ3RoID4gaSArIDggJiZcbiAgICB4bWxEYXRhW2kgKyAxXSA9PT0gJ0QnICYmXG4gICAgeG1sRGF0YVtpICsgMl0gPT09ICdPJyAmJlxuICAgIHhtbERhdGFbaSArIDNdID09PSAnQycgJiZcbiAgICB4bWxEYXRhW2kgKyA0XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpICsgNV0gPT09ICdZJyAmJlxuICAgIHhtbERhdGFbaSArIDZdID09PSAnUCcgJiZcbiAgICB4bWxEYXRhW2kgKyA3XSA9PT0gJ0UnXG4gICkge1xuICAgIGxldCBhbmdsZUJyYWNrZXRzQ291bnQgPSAxO1xuICAgIGZvciAoaSArPSA4OyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gJz4nKSB7XG4gICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudC0tO1xuICAgICAgICBpZiAoYW5nbGVCcmFja2V0c0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgeG1sRGF0YS5sZW5ndGggPiBpICsgOSAmJlxuICAgIHhtbERhdGFbaSArIDFdID09PSAnWycgJiZcbiAgICB4bWxEYXRhW2kgKyAyXSA9PT0gJ0MnICYmXG4gICAgeG1sRGF0YVtpICsgM10gPT09ICdEJyAmJlxuICAgIHhtbERhdGFbaSArIDRdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2kgKyA1XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpICsgNl0gPT09ICdBJyAmJlxuICAgIHhtbERhdGFbaSArIDddID09PSAnWydcbiAgKSB7XG4gICAgZm9yIChpICs9IDg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJ10nICYmIHhtbERhdGFbaSArIDFdID09PSAnXScgJiYgeG1sRGF0YVtpICsgMl0gPT09ICc+Jykge1xuICAgICAgICBpICs9IDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpO1xufVxuXG5jb25zdCBkb3VibGVRdW90ZSA9ICdcIic7XG5jb25zdCBzaW5nbGVRdW90ZSA9IFwiJ1wiO1xuXG4vKipcbiAqIEtlZXAgcmVhZGluZyB4bWxEYXRhIHVudGlsICc8JyBpcyBmb3VuZCBvdXRzaWRlIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30geG1sRGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IGlcbiAqL1xuZnVuY3Rpb24gcmVhZEF0dHJpYnV0ZVN0cih4bWxEYXRhLCBpKSB7XG4gIGxldCBhdHRyU3RyID0gJyc7XG4gIGxldCBzdGFydENoYXIgPSAnJztcbiAgbGV0IHRhZ0Nsb3NlZCA9IGZhbHNlO1xuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PT0gZG91YmxlUXVvdGUgfHwgeG1sRGF0YVtpXSA9PT0gc2luZ2xlUXVvdGUpIHtcbiAgICAgIGlmIChzdGFydENoYXIgPT09ICcnKSB7XG4gICAgICAgIHN0YXJ0Q2hhciA9IHhtbERhdGFbaV07XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0Q2hhciAhPT0geG1sRGF0YVtpXSkge1xuICAgICAgICAvL2lmIHZhdWUgaXMgZW5jbG9zZWQgd2l0aCBkb3VibGUgcXVvdGUgdGhlbiBzaW5nbGUgcXVvdGVzIGFyZSBhbGxvd2VkIGluc2lkZSB0aGUgdmFsdWUgYW5kIHZpY2UgdmVyc2FcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0Q2hhciA9ICcnO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gJz4nKSB7XG4gICAgICBpZiAoc3RhcnRDaGFyID09PSAnJykge1xuICAgICAgICB0YWdDbG9zZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgYXR0clN0ciArPSB4bWxEYXRhW2ldO1xuICB9XG4gIGlmIChzdGFydENoYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogYXR0clN0cixcbiAgICBpbmRleDogaSxcbiAgICB0YWdDbG9zZWQ6IHRhZ0Nsb3NlZFxuICB9O1xufVxuXG4vKipcbiAqIFNlbGVjdCBhbGwgdGhlIGF0dHJpYnV0ZXMgd2hldGhlciB2YWxpZCBvciBpbnZhbGlkLlxuICovXG5jb25zdCB2YWxpZEF0dHJTdHJSZWd4cCA9IG5ldyBSZWdFeHAoJyhcXFxccyopKFteXFxcXHM9XSspKFxcXFxzKj0pPyhcXFxccyooW1xcJ1wiXSkoKFtcXFxcc1xcXFxTXSkqPylcXFxcNSk/JywgJ2cnKTtcblxuLy9hdHRyLCA9XCJzZFwiLCBhPVwiYW1pdCdzXCIsIGE9XCJzZFwiYj1cInNhZlwiLCBhYiAgY2Q9XCJcIlxuXG5mdW5jdGlvbiB2YWxpZGF0ZUF0dHJpYnV0ZVN0cmluZyhhdHRyU3RyLCBvcHRpb25zKSB7XG4gIC8vY29uc29sZS5sb2coXCJzdGFydDpcIithdHRyU3RyK1wiOmVuZFwiKTtcblxuICAvL2lmKGF0dHJTdHIudHJpbSgpLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7IC8vZW1wdHkgc3RyaW5nXG5cbiAgY29uc3QgbWF0Y2hlcyA9IHV0aWwuZ2V0QWxsTWF0Y2hlcyhhdHRyU3RyLCB2YWxpZEF0dHJTdHJSZWd4cCk7XG4gIGNvbnN0IGF0dHJOYW1lcyA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChtYXRjaGVzW2ldWzFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy9ub3NwYWNlIGJlZm9yZSBhdHRyaWJ1dGUgbmFtZTogYT1cInNkXCJiPVwic2FmXCJcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrbWF0Y2hlc1tpXVsyXStcIicgaGFzIG5vIHNwYWNlIGluIHN0YXJ0aW5nLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSlcbiAgICB9IGVsc2UgaWYgKG1hdGNoZXNbaV1bM10gIT09IHVuZGVmaW5lZCAmJiBtYXRjaGVzW2ldWzRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrbWF0Y2hlc1tpXVsyXStcIicgaXMgd2l0aG91dCB2YWx1ZS5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlc1tpXVszXSA9PT0gdW5kZWZpbmVkICYmICFvcHRpb25zLmFsbG93Qm9vbGVhbkF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vaW5kZXBlbmRlbnQgYXR0cmlidXRlOiBhYlxuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiYm9vbGVhbiBhdHRyaWJ1dGUgJ1wiK21hdGNoZXNbaV1bMl0rXCInIGlzIG5vdCBhbGxvd2VkLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSk7XG4gICAgfVxuICAgIC8qIGVsc2UgaWYobWF0Y2hlc1tpXVs2XSA9PT0gdW5kZWZpbmVkKXsvL2F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlOiBhYj1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyOiB7IGNvZGU6XCJJbnZhbGlkQXR0clwiLG1zZzpcImF0dHJpYnV0ZSBcIiArIG1hdGNoZXNbaV1bMl0gKyBcIiBoYXMgbm8gdmFsdWUgYXNzaWduZWQuXCJ9fTtcbiAgICAgICAgICAgICAgICB9ICovXG4gICAgY29uc3QgYXR0ck5hbWUgPSBtYXRjaGVzW2ldWzJdO1xuICAgIGlmICghdmFsaWRhdGVBdHRyTmFtZShhdHRyTmFtZSkpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrYXR0ck5hbWUrXCInIGlzIGFuIGludmFsaWQgbmFtZS5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpO1xuICAgIH1cbiAgICBpZiAoIWF0dHJOYW1lcy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHtcbiAgICAgIC8vY2hlY2sgZm9yIGR1cGxpY2F0ZSBhdHRyaWJ1dGUuXG4gICAgICBhdHRyTmFtZXNbYXR0ck5hbWVdID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlICdcIithdHRyTmFtZStcIicgaXMgcmVwZWF0ZWQuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQoeG1sRGF0YSwgaSkge1xuICBsZXQgcmUgPSAvXFxkLztcbiAgaWYgKHhtbERhdGFbaV0gPT09ICd4Jykge1xuICAgIGkrKztcbiAgICByZSA9IC9bXFxkYS1mQS1GXS87XG4gIH1cbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHhtbERhdGFbaV0gPT09ICc7JylcbiAgICAgIHJldHVybiBpO1xuICAgIGlmICgheG1sRGF0YVtpXS5tYXRjaChyZSkpXG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQW1wZXJzYW5kKHhtbERhdGEsIGkpIHtcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jZHQtY2hhcnJlZlxuICBpKys7XG4gIGlmICh4bWxEYXRhW2ldID09PSAnOycpXG4gICAgcmV0dXJuIC0xO1xuICBpZiAoeG1sRGF0YVtpXSA9PT0gJyMnKSB7XG4gICAgaSsrO1xuICAgIHJldHVybiB2YWxpZGF0ZU51bWJlckFtcGVyc2FuZCh4bWxEYXRhLCBpKTtcbiAgfVxuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyssIGNvdW50KyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXS5tYXRjaCgvXFx3LykgJiYgY291bnQgPCAyMClcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmICh4bWxEYXRhW2ldID09PSAnOycpXG4gICAgICBicmVhaztcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yT2JqZWN0KGNvZGUsIG1lc3NhZ2UsIGxpbmVOdW1iZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBlcnI6IHtcbiAgICAgIGNvZGU6IGNvZGUsXG4gICAgICBtc2c6IG1lc3NhZ2UsXG4gICAgICBsaW5lOiBsaW5lTnVtYmVyLmxpbmUgfHwgbGluZU51bWJlcixcbiAgICAgIGNvbDogbGluZU51bWJlci5jb2wsXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBdHRyTmFtZShhdHRyTmFtZSkge1xuICByZXR1cm4gdXRpbC5pc05hbWUoYXR0ck5hbWUpO1xufVxuXG4vLyBjb25zdCBzdGFydHNXaXRoWE1MID0gL154bWwvaTtcblxuZnVuY3Rpb24gdmFsaWRhdGVUYWdOYW1lKHRhZ25hbWUpIHtcbiAgcmV0dXJuIHV0aWwuaXNOYW1lKHRhZ25hbWUpIC8qICYmICF0YWduYW1lLm1hdGNoKHN0YXJ0c1dpdGhYTUwpICovO1xufVxuXG4vL3RoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgbGluZSBudW1iZXIgZm9yIHRoZSBjaGFyYWN0ZXIgYXQgdGhlIGdpdmVuIGluZGV4XG5mdW5jdGlvbiBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaW5kZXgpIHtcbiAgY29uc3QgbGluZXMgPSB4bWxEYXRhLnN1YnN0cmluZygwLCBpbmRleCkuc3BsaXQoL1xccj9cXG4vKTtcbiAgcmV0dXJuIHtcbiAgICBsaW5lOiBsaW5lcy5sZW5ndGgsXG5cbiAgICAvLyBjb2x1bW4gbnVtYmVyIGlzIGxhc3QgbGluZSdzIGxlbmd0aCArIDEsIGJlY2F1c2UgY29sdW1uIG51bWJlcmluZyBzdGFydHMgYXQgMTpcbiAgICBjb2w6IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLmxlbmd0aCArIDFcbiAgfTtcbn1cblxuLy90aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgbWF0Y2ggd2l0aGluIGF0dHJTdHJcbmZ1bmN0aW9uIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoKSB7XG4gIHJldHVybiBtYXRjaC5zdGFydEluZGV4ICsgbWF0Y2hbMV0ubGVuZ3RoO1xufVxuIiwgIlxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgcHJlc2VydmVPcmRlcjogZmFsc2UsXG4gICAgYXR0cmlidXRlTmFtZVByZWZpeDogJ0BfJyxcbiAgICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZSxcbiAgICB0ZXh0Tm9kZU5hbWU6ICcjdGV4dCcsXG4gICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgICByZW1vdmVOU1ByZWZpeDogZmFsc2UsIC8vIHJlbW92ZSBOUyBmcm9tIHRhZyBuYW1lIG9yIGF0dHJpYnV0ZSBuYW1lIGlmIHRydWVcbiAgICBhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzOiBmYWxzZSwgLy9hIHRhZyBjYW4gaGF2ZSBhdHRyaWJ1dGVzIHdpdGhvdXQgYW55IHZhbHVlXG4gICAgLy9pZ25vcmVSb290RWxlbWVudCA6IGZhbHNlLFxuICAgIHBhcnNlVGFnVmFsdWU6IHRydWUsXG4gICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsXG4gICAgdHJpbVZhbHVlczogdHJ1ZSwgLy9UcmltIHN0cmluZyB2YWx1ZXMgb2YgdGFnIGFuZCBhdHRyaWJ1dGVzXG4gICAgY2RhdGFQcm9wTmFtZTogZmFsc2UsXG4gICAgbnVtYmVyUGFyc2VPcHRpb25zOiB7XG4gICAgICBoZXg6IHRydWUsXG4gICAgICBsZWFkaW5nWmVyb3M6IHRydWUsXG4gICAgICBlTm90YXRpb246IHRydWVcbiAgICB9LFxuICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbih0YWdOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBhdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYXR0ck5hbWUsIHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIHN0b3BOb2RlczogW10sIC8vbmVzdGVkIHRhZ3Mgd2lsbCBub3QgYmUgcGFyc2VkIGV2ZW4gZm9yIGVycm9yc1xuICAgIGFsd2F5c0NyZWF0ZVRleHROb2RlOiBmYWxzZSxcbiAgICBpc0FycmF5OiAoKSA9PiBmYWxzZSxcbiAgICBjb21tZW50UHJvcE5hbWU6IGZhbHNlLFxuICAgIHVucGFpcmVkVGFnczogW10sXG4gICAgcHJvY2Vzc0VudGl0aWVzOiB0cnVlLFxuICAgIGh0bWxFbnRpdGllczogZmFsc2UsXG4gICAgaWdub3JlRGVjbGFyYXRpb246IGZhbHNlLFxuICAgIGlnbm9yZVBpVGFnczogZmFsc2UsXG4gICAgdHJhbnNmb3JtVGFnTmFtZTogZmFsc2UsXG4gICAgdHJhbnNmb3JtQXR0cmlidXRlTmFtZTogZmFsc2UsXG4gICAgdXBkYXRlVGFnOiBmdW5jdGlvbih0YWdOYW1lLCBqUGF0aCwgYXR0cnMpe1xuICAgICAgcmV0dXJuIHRhZ05hbWVcbiAgICB9LFxuICAgIC8vIHNraXBFbXB0eUxpc3RJdGVtOiBmYWxzZVxufTtcbiAgIFxuY29uc3QgYnVpbGRPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmJ1aWxkT3B0aW9ucyA9IGJ1aWxkT3B0aW9ucztcbmV4cG9ydHMuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9uczsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBYbWxOb2Rle1xuICBjb25zdHJ1Y3Rvcih0YWduYW1lKSB7XG4gICAgdGhpcy50YWduYW1lID0gdGFnbmFtZTtcbiAgICB0aGlzLmNoaWxkID0gW107IC8vbmVzdGVkIHRhZ3MsIHRleHQsIGNkYXRhLCBjb21tZW50cyBpbiBvcmRlclxuICAgIHRoaXNbXCI6QFwiXSA9IHt9OyAvL2F0dHJpYnV0ZXMgbWFwXG4gIH1cbiAgYWRkKGtleSx2YWwpe1xuICAgIC8vIHRoaXMuY2hpbGQucHVzaCgge25hbWUgOiBrZXksIHZhbDogdmFsLCBpc0NkYXRhOiBpc0NkYXRhIH0pO1xuICAgIGlmKGtleSA9PT0gXCJfX3Byb3RvX19cIikga2V5ID0gXCIjX19wcm90b19fXCI7XG4gICAgdGhpcy5jaGlsZC5wdXNoKCB7W2tleV06IHZhbCB9KTtcbiAgfVxuICBhZGRDaGlsZChub2RlKSB7XG4gICAgaWYobm9kZS50YWduYW1lID09PSBcIl9fcHJvdG9fX1wiKSBub2RlLnRhZ25hbWUgPSBcIiNfX3Byb3RvX19cIjtcbiAgICBpZihub2RlW1wiOkBcIl0gJiYgT2JqZWN0LmtleXMobm9kZVtcIjpAXCJdKS5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuY2hpbGQucHVzaCggeyBbbm9kZS50YWduYW1lXTogbm9kZS5jaGlsZCwgW1wiOkBcIl06IG5vZGVbXCI6QFwiXSB9KTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuY2hpbGQucHVzaCggeyBbbm9kZS50YWduYW1lXTogbm9kZS5jaGlsZCB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gWG1sTm9kZTsiLCAiY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuLy9UT0RPOiBoYW5kbGUgY29tbWVudHNcbmZ1bmN0aW9uIHJlYWREb2NUeXBlKHhtbERhdGEsIGkpe1xuICAgIFxuICAgIGNvbnN0IGVudGl0aWVzID0ge307XG4gICAgaWYoIHhtbERhdGFbaSArIDNdID09PSAnTycgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDRdID09PSAnQycgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDVdID09PSAnVCcgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDZdID09PSAnWScgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDddID09PSAnUCcgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDhdID09PSAnRScpXG4gICAgeyAgICBcbiAgICAgICAgaSA9IGkrOTtcbiAgICAgICAgbGV0IGFuZ2xlQnJhY2tldHNDb3VudCA9IDE7XG4gICAgICAgIGxldCBoYXNCb2R5ID0gZmFsc2UsIGNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGV4cCA9IFwiXCI7XG4gICAgICAgIGZvcig7aTx4bWxEYXRhLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8JyAmJiAhY29tbWVudCkgeyAvL0RldGVybWluZSB0aGUgdGFnIHR5cGVcbiAgICAgICAgICAgICAgICBpZiggaGFzQm9keSAmJiBpc0VudGl0eSh4bWxEYXRhLCBpKSl7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gNzsgXG4gICAgICAgICAgICAgICAgICAgIFtlbnRpdHlOYW1lLCB2YWwsaV0gPSByZWFkRW50aXR5RXhwKHhtbERhdGEsaSsxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsLmluZGV4T2YoXCImXCIpID09PSAtMSkgLy9QYXJhbWV0ZXIgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0aWVzWyB2YWxpZGF0ZUVudGl0eU5hbWUoZW50aXR5TmFtZSkgXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWd4IDogUmVnRXhwKCBgJiR7ZW50aXR5TmFtZX07YCxcImdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGhhc0JvZHkgJiYgaXNFbGVtZW50KHhtbERhdGEsIGkpKSAgaSArPSA4Oy8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGhhc0JvZHkgJiYgaXNBdHRsaXN0KHhtbERhdGEsIGkpKSAgaSArPSA4Oy8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGhhc0JvZHkgJiYgaXNOb3RhdGlvbih4bWxEYXRhLCBpKSkgaSArPSA5Oy8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGlzQ29tbWVudCkgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIERPQ1RZUEVcIik7XG5cbiAgICAgICAgICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQrKztcbiAgICAgICAgICAgICAgICBleHAgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPicpIHsgLy9SZWFkIHRhZyBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYoY29tbWVudCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB4bWxEYXRhW2kgLSAxXSA9PT0gXCItXCIgJiYgeG1sRGF0YVtpIC0gMl0gPT09IFwiLVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5nbGVCcmFja2V0c0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiggeG1sRGF0YVtpXSA9PT0gJ1snKXtcbiAgICAgICAgICAgICAgICBoYXNCb2R5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGV4cCArPSB4bWxEYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGFuZ2xlQnJhY2tldHNDb3VudCAhPT0gMCl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuY2xvc2VkIERPQ1RZUEVgKTtcbiAgICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVGFnIGluc3RlYWQgb2YgRE9DVFlQRWApO1xuICAgIH1cbiAgICByZXR1cm4ge2VudGl0aWVzLCBpfTtcbn1cblxuZnVuY3Rpb24gcmVhZEVudGl0eUV4cCh4bWxEYXRhLGkpe1xuICAgIC8vRXh0ZXJuYWwgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAvLyAgICA8IUVOVElUWSBleHQgU1lTVEVNIFwiaHR0cDovL25vcm1hbC13ZWJzaXRlLmNvbVwiID5cblxuICAgIC8vUGFyYW1ldGVyIGVudGl0aWVzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgLy8gICAgPCFFTlRJVFkgZW50aXR5bmFtZSBcIiZhbm90aGVyRWxlbWVudDtcIj5cblxuICAgIC8vSW50ZXJuYWwgZW50aXRpZXMgYXJlIHN1cHBvcnRlZFxuICAgIC8vICAgIDwhRU5USVRZIGVudGl0eW5hbWUgXCJyZXBsYWNlbWVudCB0ZXh0XCI+XG4gICAgXG4gICAgLy9yZWFkIEVudGl0eU5hbWVcbiAgICBsZXQgZW50aXR5TmFtZSA9IFwiXCI7XG4gICAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAoeG1sRGF0YVtpXSAhPT0gXCInXCIgJiYgeG1sRGF0YVtpXSAhPT0gJ1wiJyApOyBpKyspIHtcbiAgICAgICAgLy8gaWYoeG1sRGF0YVtpXSA9PT0gXCIgXCIpIGNvbnRpbnVlO1xuICAgICAgICAvLyBlbHNlIFxuICAgICAgICBlbnRpdHlOYW1lICs9IHhtbERhdGFbaV07XG4gICAgfVxuICAgIGVudGl0eU5hbWUgPSBlbnRpdHlOYW1lLnRyaW0oKTtcbiAgICBpZihlbnRpdHlOYW1lLmluZGV4T2YoXCIgXCIpICE9PSAtMSkgdGhyb3cgbmV3IEVycm9yKFwiRXh0ZXJuYWwgZW50aXRlcyBhcmUgbm90IHN1cHBvcnRlZFwiKTtcblxuICAgIC8vcmVhZCBFbnRpdHkgVmFsdWVcbiAgICBjb25zdCBzdGFydENoYXIgPSB4bWxEYXRhW2krK107XG4gICAgbGV0IHZhbCA9IFwiXCJcbiAgICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoICYmIHhtbERhdGFbaV0gIT09IHN0YXJ0Q2hhciA7IGkrKykge1xuICAgICAgICB2YWwgKz0geG1sRGF0YVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtlbnRpdHlOYW1lLCB2YWwsIGldO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1lbnQoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICctJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJy0nKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuZnVuY3Rpb24gaXNFbnRpdHkoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICdFJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJ04nICYmXG4gICAgeG1sRGF0YVtpKzRdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2krNV0gPT09ICdJJyAmJlxuICAgIHhtbERhdGFbaSs2XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzddID09PSAnWScpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5mdW5jdGlvbiBpc0VsZW1lbnQoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICdFJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJ0wnICYmXG4gICAgeG1sRGF0YVtpKzRdID09PSAnRScgJiZcbiAgICB4bWxEYXRhW2krNV0gPT09ICdNJyAmJlxuICAgIHhtbERhdGFbaSs2XSA9PT0gJ0UnICYmXG4gICAgeG1sRGF0YVtpKzddID09PSAnTicgJiZcbiAgICB4bWxEYXRhW2krOF0gPT09ICdUJykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gaXNBdHRsaXN0KHhtbERhdGEsIGkpe1xuICAgIGlmKHhtbERhdGFbaSsxXSA9PT0gJyEnICYmXG4gICAgeG1sRGF0YVtpKzJdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2krM10gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSs0XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzVdID09PSAnTCcgJiZcbiAgICB4bWxEYXRhW2krNl0gPT09ICdJJyAmJlxuICAgIHhtbERhdGFbaSs3XSA9PT0gJ1MnICYmXG4gICAgeG1sRGF0YVtpKzhdID09PSAnVCcpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5mdW5jdGlvbiBpc05vdGF0aW9uKHhtbERhdGEsIGkpe1xuICAgIGlmKHhtbERhdGFbaSsxXSA9PT0gJyEnICYmXG4gICAgeG1sRGF0YVtpKzJdID09PSAnTicgJiZcbiAgICB4bWxEYXRhW2krM10gPT09ICdPJyAmJlxuICAgIHhtbERhdGFbaSs0XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzVdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2krNl0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSs3XSA9PT0gJ0knICYmXG4gICAgeG1sRGF0YVtpKzhdID09PSAnTycgJiZcbiAgICB4bWxEYXRhW2krOV0gPT09ICdOJykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbnRpdHlOYW1lKG5hbWUpe1xuICAgIGlmICh1dGlsLmlzTmFtZShuYW1lKSlcblx0cmV0dXJuIG5hbWU7XG4gICAgZWxzZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZW50aXR5IG5hbWUgJHtuYW1lfWApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWREb2NUeXBlO1xuIiwgImNvbnN0IGhleFJlZ2V4ID0gL15bLStdPzB4W2EtZkEtRjAtOV0rJC87XG5jb25zdCBudW1SZWdleCA9IC9eKFtcXC1cXCtdKT8oMCopKFswLTldKihcXC5bMC05XSopPykkLztcbi8vIGNvbnN0IG9jdFJlZ2V4ID0gL14weFthLXowLTldKy87XG4vLyBjb25zdCBiaW5SZWdleCA9IC8weFthLXowLTldKy87XG5cbiBcbmNvbnN0IGNvbnNpZGVyID0ge1xuICAgIGhleCA6ICB0cnVlLFxuICAgIC8vIG9jdDogZmFsc2UsXG4gICAgbGVhZGluZ1plcm9zOiB0cnVlLFxuICAgIGRlY2ltYWxQb2ludDogXCJcXC5cIixcbiAgICBlTm90YXRpb246IHRydWUsXG4gICAgLy9za2lwTGlrZTogL3JlZ2V4L1xufTtcblxuZnVuY3Rpb24gdG9OdW1iZXIoc3RyLCBvcHRpb25zID0ge30pe1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjb25zaWRlciwgb3B0aW9ucyApO1xuICAgIGlmKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIiApIHJldHVybiBzdHI7XG4gICAgXG4gICAgbGV0IHRyaW1tZWRTdHIgID0gc3RyLnRyaW0oKTtcbiAgICBcbiAgICBpZihvcHRpb25zLnNraXBMaWtlICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5za2lwTGlrZS50ZXN0KHRyaW1tZWRTdHIpKSByZXR1cm4gc3RyO1xuICAgIGVsc2UgaWYoc3RyPT09XCIwXCIpIHJldHVybiAwO1xuICAgIGVsc2UgaWYgKG9wdGlvbnMuaGV4ICYmIGhleFJlZ2V4LnRlc3QodHJpbW1lZFN0cikpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlX2ludCh0cmltbWVkU3RyLCAxNik7XG4gICAgLy8gfWVsc2UgaWYgKG9wdGlvbnMub2N0ICYmIG9jdFJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIC8vICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHZhbCwgOCk7XG4gICAgfWVsc2UgaWYgKHRyaW1tZWRTdHIuc2VhcmNoKC9bZUVdLykhPT0gLTEpIHsgLy9lTm90YXRpb25cbiAgICAgICAgY29uc3Qgbm90YXRpb24gPSB0cmltbWVkU3RyLm1hdGNoKC9eKFstXFwrXSk/KDAqKShbMC05XSooXFwuWzAtOV0qKT9bZUVdWy1cXCtdP1swLTldKykkLyk7IFxuICAgICAgICAvLyArMDAuMTIzID0+IFsgLCAnKycsICcwMCcsICcuMTIzJywgLi5cbiAgICAgICAgaWYobm90YXRpb24pe1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobm90YXRpb24pXG4gICAgICAgICAgICBpZihvcHRpb25zLmxlYWRpbmdaZXJvcyl7IC8vYWNjZXB0IHdpdGggbGVhZGluZyB6ZXJvc1xuICAgICAgICAgICAgICAgIHRyaW1tZWRTdHIgPSAobm90YXRpb25bMV0gfHwgXCJcIikgKyBub3RhdGlvblszXTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGlmKG5vdGF0aW9uWzJdID09PSBcIjBcIiAmJiBub3RhdGlvblszXVswXT09PSBcIi5cIil7IC8vdmFsaWQgbnVtYmVyXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZU5vdGF0aW9uID8gTnVtYmVyKHRyaW1tZWRTdHIpIDogc3RyO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICAvLyB9ZWxzZSBpZiAob3B0aW9ucy5wYXJzZUJpbiAmJiBiaW5SZWdleC50ZXN0KHN0cikpIHtcbiAgICAvLyAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh2YWwsIDIpO1xuICAgIH1lbHNle1xuICAgICAgICAvL3NlcGFyYXRlIG5lZ2F0aXZlIHNpZ24sIGxlYWRpbmcgemVyb3MsIGFuZCByZXN0IG51bWJlclxuICAgICAgICBjb25zdCBtYXRjaCA9IG51bVJlZ2V4LmV4ZWModHJpbW1lZFN0cik7XG4gICAgICAgIC8vICswMC4xMjMgPT4gWyAsICcrJywgJzAwJywgJy4xMjMnLCAuLlxuICAgICAgICBpZihtYXRjaCl7XG4gICAgICAgICAgICBjb25zdCBzaWduID0gbWF0Y2hbMV07XG4gICAgICAgICAgICBjb25zdCBsZWFkaW5nWmVyb3MgPSBtYXRjaFsyXTtcbiAgICAgICAgICAgIGxldCBudW1UcmltbWVkQnlaZXJvcyA9IHRyaW1aZXJvcyhtYXRjaFszXSk7IC8vY29tcGxldGUgbnVtIHdpdGhvdXQgbGVhZGluZyB6ZXJvc1xuICAgICAgICAgICAgLy90cmltIGVuZGluZyB6ZXJvcyBmb3IgZmxvYXRpbmcgbnVtYmVyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCFvcHRpb25zLmxlYWRpbmdaZXJvcyAmJiBsZWFkaW5nWmVyb3MubGVuZ3RoID4gMCAmJiBzaWduICYmIHRyaW1tZWRTdHJbMl0gIT09IFwiLlwiKSByZXR1cm4gc3RyOyAvLy0wMTIzXG4gICAgICAgICAgICBlbHNlIGlmKCFvcHRpb25zLmxlYWRpbmdaZXJvcyAmJiBsZWFkaW5nWmVyb3MubGVuZ3RoID4gMCAmJiAhc2lnbiAmJiB0cmltbWVkU3RyWzFdICE9PSBcIi5cIikgcmV0dXJuIHN0cjsgLy8wMTIzXG4gICAgICAgICAgICBlbHNlIGlmKG9wdGlvbnMubGVhZGluZ1plcm9zICYmIGxlYWRpbmdaZXJvcz09PXN0cikgcmV0dXJuIDA7IC8vMDBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWxzZXsvL25vIGxlYWRpbmcgemVyb3Mgb3IgbGVhZGluZyB6ZXJvcyBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlcih0cmltbWVkU3RyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1TdHIgPSBcIlwiICsgbnVtO1xuXG4gICAgICAgICAgICAgICAgaWYobnVtU3RyLnNlYXJjaCgvW2VFXS8pICE9PSAtMSl7IC8vZ2l2ZW4gbnVtYmVyIGlzIGxvbmcgYW5kIHBhcnNlZCB0byBlTm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9ucy5lTm90YXRpb24pIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0cmltbWVkU3RyLmluZGV4T2YoXCIuXCIpICE9PSAtMSl7IC8vZmxvYXRpbmcgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgIGlmKG51bVN0ciA9PT0gXCIwXCIgJiYgKG51bVRyaW1tZWRCeVplcm9zID09PSBcIlwiKSApIHJldHVybiBudW07IC8vMC4wXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYobnVtU3RyID09PSBudW1UcmltbWVkQnlaZXJvcykgcmV0dXJuIG51bTsgLy8wLjQ1Ni4gMC43OTAwMFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKCBzaWduICYmIG51bVN0ciA9PT0gXCItXCIrbnVtVHJpbW1lZEJ5WmVyb3MpIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYobGVhZGluZ1plcm9zKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW1UcmltbWVkQnlaZXJvcyA9PT0gbnVtU3RyKSB8fCAoc2lnbitudW1UcmltbWVkQnlaZXJvcyA9PT0gbnVtU3RyKSA/IG51bSA6IHN0clxuICAgICAgICAgICAgICAgIH1lbHNlICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodHJpbW1lZFN0ciA9PT0gbnVtU3RyKSB8fCAodHJpbW1lZFN0ciA9PT0gc2lnbitudW1TdHIpID8gbnVtIDogc3RyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXsgLy9ub24tbnVtZXJpYyBzdHJpbmdcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gbnVtU3RyIHdpdGhvdXQgbGVhZGluZyB6ZXJvc1xuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIHRyaW1aZXJvcyhudW1TdHIpe1xuICAgIGlmKG51bVN0ciAmJiBudW1TdHIuaW5kZXhPZihcIi5cIikgIT09IC0xKXsvL2Zsb2F0XG4gICAgICAgIG51bVN0ciA9IG51bVN0ci5yZXBsYWNlKC8wKyQvLCBcIlwiKTsgLy9yZW1vdmUgZW5kaW5nIHplcm9zXG4gICAgICAgIGlmKG51bVN0ciA9PT0gXCIuXCIpICBudW1TdHIgPSBcIjBcIjtcbiAgICAgICAgZWxzZSBpZihudW1TdHJbMF0gPT09IFwiLlwiKSAgbnVtU3RyID0gXCIwXCIrbnVtU3RyO1xuICAgICAgICBlbHNlIGlmKG51bVN0cltudW1TdHIubGVuZ3RoLTFdID09PSBcIi5cIikgIG51bVN0ciA9IG51bVN0ci5zdWJzdHIoMCxudW1TdHIubGVuZ3RoLTEpO1xuICAgICAgICByZXR1cm4gbnVtU3RyO1xuICAgIH1cbiAgICByZXR1cm4gbnVtU3RyO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9pbnQobnVtU3RyLCBiYXNlKXtcbiAgICAvL3BvbHlmaWxsXG4gICAgaWYocGFyc2VJbnQpIHJldHVybiBwYXJzZUludChudW1TdHIsIGJhc2UpO1xuICAgIGVsc2UgaWYoTnVtYmVyLnBhcnNlSW50KSByZXR1cm4gTnVtYmVyLnBhcnNlSW50KG51bVN0ciwgYmFzZSk7XG4gICAgZWxzZSBpZih3aW5kb3cgJiYgd2luZG93LnBhcnNlSW50KSByZXR1cm4gd2luZG93LnBhcnNlSW50KG51bVN0ciwgYmFzZSk7XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZUludCwgTnVtYmVyLnBhcnNlSW50LCB3aW5kb3cucGFyc2VJbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjsiLCAiJ3VzZSBzdHJpY3QnO1xuLy8vQHRzLWNoZWNrXG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCB4bWxOb2RlID0gcmVxdWlyZSgnLi94bWxOb2RlJyk7XG5jb25zdCByZWFkRG9jVHlwZSA9IHJlcXVpcmUoXCIuL0RvY1R5cGVSZWFkZXJcIik7XG5jb25zdCB0b051bWJlciA9IHJlcXVpcmUoXCJzdHJudW1cIik7XG5cbi8vIGNvbnN0IHJlZ3ggPVxuLy8gICAnPCgoIVxcXFxbQ0RBVEFcXFxcWyhbXFxcXHNcXFxcU10qPykoXV0+KSl8KChOQU1FOik/KE5BTUUpKShbXj5dKik+fCgoXFxcXC8pKE5BTUUpXFxcXHMqPikpKFtePF0qKSdcbi8vICAgLnJlcGxhY2UoL05BTUUvZywgdXRpbC5uYW1lUmVnZXhwKTtcblxuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvP1tcXFxcdzpcXFxcLVxcLl9dKykoW14+XSopPihcXFxccypcIitjZGF0YVJlZ3grXCIpKihbXjxdKyk/XCIsXCJnXCIpO1xuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvPykoKFxcXFx3KjopPyhbXFxcXHc6XFxcXC1cXC5fXSspKShbXj5dKik+KFtePF0qKShcIitjZGF0YVJlZ3grXCIoW148XSopKSooW148XSspP1wiLFwiZ1wiKTtcblxuY2xhc3MgT3JkZXJlZE9ialBhcnNlcntcbiAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmN1cnJlbnROb2RlID0gbnVsbDtcbiAgICB0aGlzLnRhZ3NOb2RlU3RhY2sgPSBbXTtcbiAgICB0aGlzLmRvY1R5cGVFbnRpdGllcyA9IHt9O1xuICAgIHRoaXMubGFzdEVudGl0aWVzID0ge1xuICAgICAgXCJhcG9zXCIgOiB7IHJlZ2V4OiAvJihhcG9zfCMzOXwjeDI3KTsvZywgdmFsIDogXCInXCJ9LFxuICAgICAgXCJndFwiIDogeyByZWdleDogLyYoZ3R8IzYyfCN4M0UpOy9nLCB2YWwgOiBcIj5cIn0sXG4gICAgICBcImx0XCIgOiB7IHJlZ2V4OiAvJihsdHwjNjB8I3gzQyk7L2csIHZhbCA6IFwiPFwifSxcbiAgICAgIFwicXVvdFwiIDogeyByZWdleDogLyYocXVvdHwjMzR8I3gyMik7L2csIHZhbCA6IFwiXFxcIlwifSxcbiAgICB9O1xuICAgIHRoaXMuYW1wRW50aXR5ID0geyByZWdleDogLyYoYW1wfCMzOHwjeDI2KTsvZywgdmFsIDogXCImXCJ9O1xuICAgIHRoaXMuaHRtbEVudGl0aWVzID0ge1xuICAgICAgXCJzcGFjZVwiOiB7IHJlZ2V4OiAvJihuYnNwfCMxNjApOy9nLCB2YWw6IFwiIFwiIH0sXG4gICAgICAvLyBcImx0XCIgOiB7IHJlZ2V4OiAvJihsdHwjNjApOy9nLCB2YWw6IFwiPFwiIH0sXG4gICAgICAvLyBcImd0XCIgOiB7IHJlZ2V4OiAvJihndHwjNjIpOy9nLCB2YWw6IFwiPlwiIH0sXG4gICAgICAvLyBcImFtcFwiIDogeyByZWdleDogLyYoYW1wfCMzOCk7L2csIHZhbDogXCImXCIgfSxcbiAgICAgIC8vIFwicXVvdFwiIDogeyByZWdleDogLyYocXVvdHwjMzQpOy9nLCB2YWw6IFwiXFxcIlwiIH0sXG4gICAgICAvLyBcImFwb3NcIiA6IHsgcmVnZXg6IC8mKGFwb3N8IzM5KTsvZywgdmFsOiBcIidcIiB9LFxuICAgICAgXCJjZW50XCIgOiB7IHJlZ2V4OiAvJihjZW50fCMxNjIpOy9nLCB2YWw6IFwiXHUwMEEyXCIgfSxcbiAgICAgIFwicG91bmRcIiA6IHsgcmVnZXg6IC8mKHBvdW5kfCMxNjMpOy9nLCB2YWw6IFwiXHUwMEEzXCIgfSxcbiAgICAgIFwieWVuXCIgOiB7IHJlZ2V4OiAvJih5ZW58IzE2NSk7L2csIHZhbDogXCJcdTAwQTVcIiB9LFxuICAgICAgXCJldXJvXCIgOiB7IHJlZ2V4OiAvJihldXJvfCM4MzY0KTsvZywgdmFsOiBcIlx1MjBBQ1wiIH0sXG4gICAgICBcImNvcHlyaWdodFwiIDogeyByZWdleDogLyYoY29weXwjMTY5KTsvZywgdmFsOiBcIlx1MDBBOVwiIH0sXG4gICAgICBcInJlZ1wiIDogeyByZWdleDogLyYocmVnfCMxNzQpOy9nLCB2YWw6IFwiXHUwMEFFXCIgfSxcbiAgICAgIFwiaW5yXCIgOiB7IHJlZ2V4OiAvJihpbnJ8IzgzNzcpOy9nLCB2YWw6IFwiXHUyMEI5XCIgfSxcbiAgICAgIFwibnVtX2RlY1wiOiB7IHJlZ2V4OiAvJiMoWzAtOV17MSw3fSk7L2csIHZhbCA6IChfLCBzdHIpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoTnVtYmVyLnBhcnNlSW50KHN0ciwgMTApKSB9LFxuICAgICAgXCJudW1faGV4XCI6IHsgcmVnZXg6IC8mI3goWzAtOWEtZkEtRl17MSw2fSk7L2csIHZhbCA6IChfLCBzdHIpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoTnVtYmVyLnBhcnNlSW50KHN0ciwgMTYpKSB9LFxuICAgIH07XG4gICAgdGhpcy5hZGRFeHRlcm5hbEVudGl0aWVzID0gYWRkRXh0ZXJuYWxFbnRpdGllcztcbiAgICB0aGlzLnBhcnNlWG1sID0gcGFyc2VYbWw7XG4gICAgdGhpcy5wYXJzZVRleHREYXRhID0gcGFyc2VUZXh0RGF0YTtcbiAgICB0aGlzLnJlc29sdmVOYW1lU3BhY2UgPSByZXNvbHZlTmFtZVNwYWNlO1xuICAgIHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwID0gYnVpbGRBdHRyaWJ1dGVzTWFwO1xuICAgIHRoaXMuaXNJdFN0b3BOb2RlID0gaXNJdFN0b3BOb2RlO1xuICAgIHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUgPSByZXBsYWNlRW50aXRpZXNWYWx1ZTtcbiAgICB0aGlzLnJlYWRTdG9wTm9kZURhdGEgPSByZWFkU3RvcE5vZGVEYXRhO1xuICAgIHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyA9IHNhdmVUZXh0VG9QYXJlbnRUYWc7XG4gICAgdGhpcy5hZGRDaGlsZCA9IGFkZENoaWxkO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gYWRkRXh0ZXJuYWxFbnRpdGllcyhleHRlcm5hbEVudGl0aWVzKXtcbiAgY29uc3QgZW50S2V5cyA9IE9iamVjdC5rZXlzKGV4dGVybmFsRW50aXRpZXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVudEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbnQgPSBlbnRLZXlzW2ldO1xuICAgIHRoaXMubGFzdEVudGl0aWVzW2VudF0gPSB7XG4gICAgICAgcmVnZXg6IG5ldyBSZWdFeHAoXCImXCIrZW50K1wiO1wiLFwiZ1wiKSxcbiAgICAgICB2YWwgOiBleHRlcm5hbEVudGl0aWVzW2VudF1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRvbnRUcmltXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc0F0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMZWFmTm9kZVxuICogQHBhcmFtIHtib29sZWFufSBlc2NhcGVFbnRpdGllc1xuICovXG5mdW5jdGlvbiBwYXJzZVRleHREYXRhKHZhbCwgdGFnTmFtZSwgalBhdGgsIGRvbnRUcmltLCBoYXNBdHRyaWJ1dGVzLCBpc0xlYWZOb2RlLCBlc2NhcGVFbnRpdGllcykge1xuICBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyaW1WYWx1ZXMgJiYgIWRvbnRUcmltKSB7XG4gICAgICB2YWwgPSB2YWwudHJpbSgpO1xuICAgIH1cbiAgICBpZih2YWwubGVuZ3RoID4gMCl7XG4gICAgICBpZighZXNjYXBlRW50aXRpZXMpIHZhbCA9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUodmFsKTtcbiAgICAgIFxuICAgICAgY29uc3QgbmV3dmFsID0gdGhpcy5vcHRpb25zLnRhZ1ZhbHVlUHJvY2Vzc29yKHRhZ05hbWUsIHZhbCwgalBhdGgsIGhhc0F0dHJpYnV0ZXMsIGlzTGVhZk5vZGUpO1xuICAgICAgaWYobmV3dmFsID09PSBudWxsIHx8IG5ld3ZhbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgLy9kb24ndCBwYXJzZVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfWVsc2UgaWYodHlwZW9mIG5ld3ZhbCAhPT0gdHlwZW9mIHZhbCB8fCBuZXd2YWwgIT09IHZhbCl7XG4gICAgICAgIC8vb3ZlcndyaXRlXG4gICAgICAgIHJldHVybiBuZXd2YWw7XG4gICAgICB9ZWxzZSBpZih0aGlzLm9wdGlvbnMudHJpbVZhbHVlcyl7XG4gICAgICAgIHJldHVybiBwYXJzZVZhbHVlKHZhbCwgdGhpcy5vcHRpb25zLnBhcnNlVGFnVmFsdWUsIHRoaXMub3B0aW9ucy5udW1iZXJQYXJzZU9wdGlvbnMpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRWYWwgPSB2YWwudHJpbSgpO1xuICAgICAgICBpZih0cmltbWVkVmFsID09PSB2YWwpe1xuICAgICAgICAgIHJldHVybiBwYXJzZVZhbHVlKHZhbCwgdGhpcy5vcHRpb25zLnBhcnNlVGFnVmFsdWUsIHRoaXMub3B0aW9ucy5udW1iZXJQYXJzZU9wdGlvbnMpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOYW1lU3BhY2UodGFnbmFtZSkge1xuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU5TUHJlZml4KSB7XG4gICAgY29uc3QgdGFncyA9IHRhZ25hbWUuc3BsaXQoJzonKTtcbiAgICBjb25zdCBwcmVmaXggPSB0YWduYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJyc7XG4gICAgaWYgKHRhZ3NbMF0gPT09ICd4bWxucycpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICB0YWduYW1lID0gcHJlZml4ICsgdGFnc1sxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhZ25hbWU7XG59XG5cbi8vVE9ETzogY2hhbmdlIHJlZ2V4IHRvIGNhcHR1cmUgTlNcbi8vY29uc3QgYXR0cnNSZWd4ID0gbmV3IFJlZ0V4cChcIihbXFxcXHdcXFxcLVxcXFwuXFxcXDpdKylcXFxccyo9XFxcXHMqKFsnXFxcIl0pKCgufFxcbikqPylcXFxcMlwiLFwiZ21cIik7XG5jb25zdCBhdHRyc1JlZ3ggPSBuZXcgUmVnRXhwKCcoW15cXFxccz1dKylcXFxccyooPVxcXFxzKihbXFwnXCJdKShbXFxcXHNcXFxcU10qPylcXFxcMyk/JywgJ2dtJyk7XG5cbmZ1bmN0aW9uIGJ1aWxkQXR0cmlidXRlc01hcChhdHRyU3RyLCBqUGF0aCwgdGFnTmFtZSkge1xuICBpZiAoIXRoaXMub3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIHR5cGVvZiBhdHRyU3RyID09PSAnc3RyaW5nJykge1xuICAgIC8vIGF0dHJTdHIgPSBhdHRyU3RyLnJlcGxhY2UoL1xccj9cXG4vZywgJyAnKTtcbiAgICAvL2F0dHJTdHIgPSBhdHRyU3RyIHx8IGF0dHJTdHIudHJpbSgpO1xuXG4gICAgY29uc3QgbWF0Y2hlcyA9IHV0aWwuZ2V0QWxsTWF0Y2hlcyhhdHRyU3RyLCBhdHRyc1JlZ3gpO1xuICAgIGNvbnN0IGxlbiA9IG1hdGNoZXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgY29uc3QgYXR0cnMgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBhdHRyTmFtZSA9IHRoaXMucmVzb2x2ZU5hbWVTcGFjZShtYXRjaGVzW2ldWzFdKTtcbiAgICAgIGxldCBvbGRWYWwgPSBtYXRjaGVzW2ldWzRdO1xuICAgICAgbGV0IGFOYW1lID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXggKyBhdHRyTmFtZTtcbiAgICAgIGlmIChhdHRyTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFuc2Zvcm1BdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgYU5hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtQXR0cmlidXRlTmFtZShhTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoYU5hbWUgPT09IFwiX19wcm90b19fXCIpIGFOYW1lICA9IFwiI19fcHJvdG9fX1wiO1xuICAgICAgICBpZiAob2xkVmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyaW1WYWx1ZXMpIHtcbiAgICAgICAgICAgIG9sZFZhbCA9IG9sZFZhbC50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9sZFZhbCA9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUob2xkVmFsKTtcbiAgICAgICAgICBjb25zdCBuZXdWYWwgPSB0aGlzLm9wdGlvbnMuYXR0cmlidXRlVmFsdWVQcm9jZXNzb3IoYXR0ck5hbWUsIG9sZFZhbCwgalBhdGgpO1xuICAgICAgICAgIGlmKG5ld1ZhbCA9PT0gbnVsbCB8fCBuZXdWYWwgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvL2Rvbid0IHBhcnNlXG4gICAgICAgICAgICBhdHRyc1thTmFtZV0gPSBvbGRWYWw7XG4gICAgICAgICAgfWVsc2UgaWYodHlwZW9mIG5ld1ZhbCAhPT0gdHlwZW9mIG9sZFZhbCB8fCBuZXdWYWwgIT09IG9sZFZhbCl7XG4gICAgICAgICAgICAvL292ZXJ3cml0ZVxuICAgICAgICAgICAgYXR0cnNbYU5hbWVdID0gbmV3VmFsO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgLy9wYXJzZVxuICAgICAgICAgICAgYXR0cnNbYU5hbWVdID0gcGFyc2VWYWx1ZShcbiAgICAgICAgICAgICAgb2xkVmFsLFxuICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFyc2VBdHRyaWJ1dGVWYWx1ZSxcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm51bWJlclBhcnNlT3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmFsbG93Qm9vbGVhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBhdHRyc1thTmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghT2JqZWN0LmtleXMoYXR0cnMpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJpYnV0ZXNHcm91cE5hbWUpIHtcbiAgICAgIGNvbnN0IGF0dHJDb2xsZWN0aW9uID0ge307XG4gICAgICBhdHRyQ29sbGVjdGlvblt0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZV0gPSBhdHRycztcbiAgICAgIHJldHVybiBhdHRyQ29sbGVjdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJzXG4gIH1cbn1cblxuY29uc3QgcGFyc2VYbWwgPSBmdW5jdGlvbih4bWxEYXRhKSB7XG4gIHhtbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIik7IC8vVE9ETzogcmVtb3ZlIHRoaXMgbGluZVxuICBjb25zdCB4bWxPYmogPSBuZXcgeG1sTm9kZSgnIXhtbCcpO1xuICBsZXQgY3VycmVudE5vZGUgPSB4bWxPYmo7XG4gIGxldCB0ZXh0RGF0YSA9IFwiXCI7XG4gIGxldCBqUGF0aCA9IFwiXCI7XG4gIGZvcihsZXQgaT0wOyBpPCB4bWxEYXRhLmxlbmd0aDsgaSsrKXsvL2ZvciBlYWNoIGNoYXIgaW4gWE1MIGRhdGFcbiAgICBjb25zdCBjaCA9IHhtbERhdGFbaV07XG4gICAgaWYoY2ggPT09ICc8Jyl7XG4gICAgICAvLyBjb25zdCBuZXh0SW5kZXggPSBpKzE7XG4gICAgICAvLyBjb25zdCBfMm5kQ2hhciA9IHhtbERhdGFbbmV4dEluZGV4XTtcbiAgICAgIGlmKCB4bWxEYXRhW2krMV0gPT09ICcvJykgey8vQ2xvc2luZyBUYWdcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI+XCIsIGksIFwiQ2xvc2luZyBUYWcgaXMgbm90IGNsb3NlZC5cIilcbiAgICAgICAgbGV0IHRhZ05hbWUgPSB4bWxEYXRhLnN1YnN0cmluZyhpKzIsY2xvc2VJbmRleCkudHJpbSgpO1xuXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5yZW1vdmVOU1ByZWZpeCl7XG4gICAgICAgICAgY29uc3QgY29sb25JbmRleCA9IHRhZ05hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgICAgICAgaWYoY29sb25JbmRleCAhPT0gLTEpe1xuICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKGNvbG9uSW5kZXgrMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5vcHRpb25zLnRyYW5zZm9ybVRhZ05hbWUpIHtcbiAgICAgICAgICB0YWdOYW1lID0gdGhpcy5vcHRpb25zLnRyYW5zZm9ybVRhZ05hbWUodGFnTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihjdXJyZW50Tm9kZSl7XG4gICAgICAgICAgdGV4dERhdGEgPSB0aGlzLnNhdmVUZXh0VG9QYXJlbnRUYWcodGV4dERhdGEsIGN1cnJlbnROb2RlLCBqUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGlmIGxhc3QgdGFnIG9mIG5lc3RlZCB0YWcgd2FzIHVucGFpcmVkIHRhZ1xuICAgICAgICBjb25zdCBsYXN0VGFnTmFtZSA9IGpQYXRoLnN1YnN0cmluZyhqUGF0aC5sYXN0SW5kZXhPZihcIi5cIikrMSk7XG4gICAgICAgIGlmKHRhZ05hbWUgJiYgdGhpcy5vcHRpb25zLnVucGFpcmVkVGFncy5pbmRleE9mKHRhZ05hbWUpICE9PSAtMSApe1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5wYWlyZWQgdGFnIGNhbiBub3QgYmUgdXNlZCBhcyBjbG9zaW5nIHRhZzogPC8ke3RhZ05hbWV9PmApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9wSW5kZXggPSAwXG4gICAgICAgIGlmKGxhc3RUYWdOYW1lICYmIHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZihsYXN0VGFnTmFtZSkgIT09IC0xICl7XG4gICAgICAgICAgcHJvcEluZGV4ID0galBhdGgubGFzdEluZGV4T2YoJy4nLCBqUGF0aC5sYXN0SW5kZXhPZignLicpLTEpXG4gICAgICAgICAgdGhpcy50YWdzTm9kZVN0YWNrLnBvcCgpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBwcm9wSW5kZXggPSBqUGF0aC5sYXN0SW5kZXhPZihcIi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgalBhdGggPSBqUGF0aC5zdWJzdHJpbmcoMCwgcHJvcEluZGV4KTtcblxuICAgICAgICBjdXJyZW50Tm9kZSA9IHRoaXMudGFnc05vZGVTdGFjay5wb3AoKTsvL2F2b2lkIHJlY3Vyc2lvbiwgc2V0IHRoZSBwYXJlbnQgdGFnIHNjb3BlXG4gICAgICAgIHRleHREYXRhID0gXCJcIjtcbiAgICAgICAgaSA9IGNsb3NlSW5kZXg7XG4gICAgICB9IGVsc2UgaWYoIHhtbERhdGFbaSsxXSA9PT0gJz8nKSB7XG5cbiAgICAgICAgbGV0IHRhZ0RhdGEgPSByZWFkVGFnRXhwKHhtbERhdGEsaSwgZmFsc2UsIFwiPz5cIik7XG4gICAgICAgIGlmKCF0YWdEYXRhKSB0aHJvdyBuZXcgRXJyb3IoXCJQaSBUYWcgaXMgbm90IGNsb3NlZC5cIik7XG5cbiAgICAgICAgdGV4dERhdGEgPSB0aGlzLnNhdmVUZXh0VG9QYXJlbnRUYWcodGV4dERhdGEsIGN1cnJlbnROb2RlLCBqUGF0aCk7XG4gICAgICAgIGlmKCAodGhpcy5vcHRpb25zLmlnbm9yZURlY2xhcmF0aW9uICYmIHRhZ0RhdGEudGFnTmFtZSA9PT0gXCI/eG1sXCIpIHx8IHRoaXMub3B0aW9ucy5pZ25vcmVQaVRhZ3Mpe1xuXG4gICAgICAgIH1lbHNle1xuICBcbiAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSh0YWdEYXRhLnRhZ05hbWUpO1xuICAgICAgICAgIGNoaWxkTm9kZS5hZGQodGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSwgXCJcIik7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYodGFnRGF0YS50YWdOYW1lICE9PSB0YWdEYXRhLnRhZ0V4cCAmJiB0YWdEYXRhLmF0dHJFeHBQcmVzZW50KXtcbiAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRGF0YS50YWdFeHAsIGpQYXRoLCB0YWdEYXRhLnRhZ05hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFkZENoaWxkKGN1cnJlbnROb2RlLCBjaGlsZE5vZGUsIGpQYXRoKVxuXG4gICAgICAgIH1cblxuXG4gICAgICAgIGkgPSB0YWdEYXRhLmNsb3NlSW5kZXggKyAxO1xuICAgICAgfSBlbHNlIGlmKHhtbERhdGEuc3Vic3RyKGkgKyAxLCAzKSA9PT0gJyEtLScpIHtcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiLS0+XCIsIGkrNCwgXCJDb21tZW50IGlzIG5vdCBjbG9zZWQuXCIpXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUpe1xuICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSB4bWxEYXRhLnN1YnN0cmluZyhpICsgNCwgZW5kSW5kZXggLSAyKTtcblxuICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuXG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUsIFsgeyBbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0gOiBjb21tZW50IH0gXSk7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IGVuZEluZGV4O1xuICAgICAgfSBlbHNlIGlmKCB4bWxEYXRhLnN1YnN0cihpICsgMSwgMikgPT09ICchRCcpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVhZERvY1R5cGUoeG1sRGF0YSwgaSk7XG4gICAgICAgIHRoaXMuZG9jVHlwZUVudGl0aWVzID0gcmVzdWx0LmVudGl0aWVzO1xuICAgICAgICBpID0gcmVzdWx0Lmk7XG4gICAgICB9ZWxzZSBpZih4bWxEYXRhLnN1YnN0cihpICsgMSwgMikgPT09ICchWycpIHtcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCJdXT5cIiwgaSwgXCJDREFUQSBpcyBub3QgY2xvc2VkLlwiKSAtIDI7XG4gICAgICAgIGNvbnN0IHRhZ0V4cCA9IHhtbERhdGEuc3Vic3RyaW5nKGkgKyA5LGNsb3NlSW5kZXgpO1xuXG4gICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuXG4gICAgICAgIGxldCB2YWwgPSB0aGlzLnBhcnNlVGV4dERhdGEodGFnRXhwLCBjdXJyZW50Tm9kZS50YWduYW1lLCBqUGF0aCwgdHJ1ZSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICBpZih2YWwgPT0gdW5kZWZpbmVkKSB2YWwgPSBcIlwiO1xuXG4gICAgICAgIC8vY2RhdGEgc2hvdWxkIGJlIHNldCBldmVuIGlmIGl0IGlzIDAgbGVuZ3RoIHN0cmluZ1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMuY2RhdGFQcm9wTmFtZSl7XG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkKHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lLCBbIHsgW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdIDogdGFnRXhwIH0gXSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGN1cnJlbnROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpID0gY2xvc2VJbmRleCArIDI7XG4gICAgICB9ZWxzZSB7Ly9PcGVuaW5nIHRhZ1xuICAgICAgICBsZXQgcmVzdWx0ID0gcmVhZFRhZ0V4cCh4bWxEYXRhLGksIHRoaXMub3B0aW9ucy5yZW1vdmVOU1ByZWZpeCk7XG4gICAgICAgIGxldCB0YWdOYW1lPSByZXN1bHQudGFnTmFtZTtcbiAgICAgICAgY29uc3QgcmF3VGFnTmFtZSA9IHJlc3VsdC5yYXdUYWdOYW1lO1xuICAgICAgICBsZXQgdGFnRXhwID0gcmVzdWx0LnRhZ0V4cDtcbiAgICAgICAgbGV0IGF0dHJFeHBQcmVzZW50ID0gcmVzdWx0LmF0dHJFeHBQcmVzZW50O1xuICAgICAgICBsZXQgY2xvc2VJbmRleCA9IHJlc3VsdC5jbG9zZUluZGV4O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSkge1xuICAgICAgICAgIHRhZ05hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSh0YWdOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy9zYXZlIHRleHQgYXMgY2hpbGQgbm9kZVxuICAgICAgICBpZiAoY3VycmVudE5vZGUgJiYgdGV4dERhdGEpIHtcbiAgICAgICAgICBpZihjdXJyZW50Tm9kZS50YWduYW1lICE9PSAnIXhtbCcpe1xuICAgICAgICAgICAgLy93aGVuIG5lc3RlZCB0YWcgaXMgZm91bmRcbiAgICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGlmIGxhc3QgdGFnIHdhcyB1bnBhaXJlZCB0YWdcbiAgICAgICAgY29uc3QgbGFzdFRhZyA9IGN1cnJlbnROb2RlO1xuICAgICAgICBpZihsYXN0VGFnICYmIHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZihsYXN0VGFnLnRhZ25hbWUpICE9PSAtMSApe1xuICAgICAgICAgIGN1cnJlbnROb2RlID0gdGhpcy50YWdzTm9kZVN0YWNrLnBvcCgpO1xuICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyaW5nKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGFnTmFtZSAhPT0geG1sT2JqLnRhZ25hbWUpe1xuICAgICAgICAgIGpQYXRoICs9IGpQYXRoID8gXCIuXCIgKyB0YWdOYW1lIDogdGFnTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0l0U3RvcE5vZGUodGhpcy5vcHRpb25zLnN0b3BOb2RlcywgalBhdGgsIHRhZ05hbWUpKSB7XG4gICAgICAgICAgbGV0IHRhZ0NvbnRlbnQgPSBcIlwiO1xuICAgICAgICAgIC8vc2VsZi1jbG9zaW5nIHRhZ1xuICAgICAgICAgIGlmKHRhZ0V4cC5sZW5ndGggPiAwICYmIHRhZ0V4cC5sYXN0SW5kZXhPZihcIi9cIikgPT09IHRhZ0V4cC5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgIGlmKHRhZ05hbWVbdGFnTmFtZS5sZW5ndGggLSAxXSA9PT0gXCIvXCIpeyAvL3JlbW92ZSB0cmFpbGluZyAnLydcbiAgICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKDAsIHRhZ05hbWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICB0YWdFeHAgPSB0YWdOYW1lO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIHRhZ0V4cCA9IHRhZ0V4cC5zdWJzdHIoMCwgdGFnRXhwLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IHJlc3VsdC5jbG9zZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL3VucGFpcmVkIHRhZ1xuICAgICAgICAgIGVsc2UgaWYodGhpcy5vcHRpb25zLnVucGFpcmVkVGFncy5pbmRleE9mKHRhZ05hbWUpICE9PSAtMSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGkgPSByZXN1bHQuY2xvc2VJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9ub3JtYWwgdGFnXG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIC8vcmVhZCB1bnRpbCBjbG9zaW5nIHRhZyBpcyBmb3VuZFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWFkU3RvcE5vZGVEYXRhKHhtbERhdGEsIHJhd1RhZ05hbWUsIGNsb3NlSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGlmKCFyZXN1bHQpIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBlbmQgb2YgJHtyYXdUYWdOYW1lfWApO1xuICAgICAgICAgICAgaSA9IHJlc3VsdC5pO1xuICAgICAgICAgICAgdGFnQ29udGVudCA9IHJlc3VsdC50YWdDb250ZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyB4bWxOb2RlKHRhZ05hbWUpO1xuICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgalBhdGgsIHRhZ05hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0YWdDb250ZW50KSB7XG4gICAgICAgICAgICB0YWdDb250ZW50ID0gdGhpcy5wYXJzZVRleHREYXRhKHRhZ0NvbnRlbnQsIHRhZ05hbWUsIGpQYXRoLCB0cnVlLCBhdHRyRXhwUHJlc2VudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgICAgY2hpbGROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB0YWdDb250ZW50KTtcbiAgICAgICAgICBcbiAgICAgICAgICB0aGlzLmFkZENoaWxkKGN1cnJlbnROb2RlLCBjaGlsZE5vZGUsIGpQYXRoKVxuICAgICAgICB9ZWxzZXtcbiAgLy9zZWxmQ2xvc2luZyB0YWdcbiAgICAgICAgICBpZih0YWdFeHAubGVuZ3RoID4gMCAmJiB0YWdFeHAubGFzdEluZGV4T2YoXCIvXCIpID09PSB0YWdFeHAubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICBpZih0YWdOYW1lW3RhZ05hbWUubGVuZ3RoIC0gMV0gPT09IFwiL1wiKXsgLy9yZW1vdmUgdHJhaWxpbmcgJy8nXG4gICAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cigwLCB0YWdOYW1lLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICBqUGF0aCA9IGpQYXRoLnN1YnN0cigwLCBqUGF0aC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgdGFnRXhwID0gdGFnTmFtZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICB0YWdFeHAgPSB0YWdFeHAuc3Vic3RyKDAsIHRhZ0V4cC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnRyYW5zZm9ybVRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgdGFnTmFtZSA9IHRoaXMub3B0aW9ucy50cmFuc2Zvcm1UYWdOYW1lKHRhZ05hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSh0YWdOYW1lKTtcbiAgICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRXhwLCBqUGF0aCwgdGFnTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKGN1cnJlbnROb2RlLCBjaGlsZE5vZGUsIGpQYXRoKVxuICAgICAgICAgICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCwgalBhdGgubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICAgICAgICB9XG4gICAgLy9vcGVuaW5nIHRhZ1xuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSggdGFnTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnRhZ3NOb2RlU3RhY2sucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRXhwLCBqUGF0aCwgdGFnTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKGN1cnJlbnROb2RlLCBjaGlsZE5vZGUsIGpQYXRoKVxuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjaGlsZE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHREYXRhID0gXCJcIjtcbiAgICAgICAgICBpID0gY2xvc2VJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgdGV4dERhdGEgKz0geG1sRGF0YVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHhtbE9iai5jaGlsZDtcbn1cblxuZnVuY3Rpb24gYWRkQ2hpbGQoY3VycmVudE5vZGUsIGNoaWxkTm9kZSwgalBhdGgpe1xuICBjb25zdCByZXN1bHQgPSB0aGlzLm9wdGlvbnMudXBkYXRlVGFnKGNoaWxkTm9kZS50YWduYW1lLCBqUGF0aCwgY2hpbGROb2RlW1wiOkBcIl0pXG4gIGlmKHJlc3VsdCA9PT0gZmFsc2Upe1xuICB9ZWxzZSBpZih0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKXtcbiAgICBjaGlsZE5vZGUudGFnbmFtZSA9IHJlc3VsdFxuICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKGNoaWxkTm9kZSk7XG4gIH1lbHNle1xuICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKGNoaWxkTm9kZSk7XG4gIH1cbn1cblxuY29uc3QgcmVwbGFjZUVudGl0aWVzVmFsdWUgPSBmdW5jdGlvbih2YWwpe1xuXG4gIGlmKHRoaXMub3B0aW9ucy5wcm9jZXNzRW50aXRpZXMpe1xuICAgIGZvcihsZXQgZW50aXR5TmFtZSBpbiB0aGlzLmRvY1R5cGVFbnRpdGllcyl7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmRvY1R5cGVFbnRpdGllc1tlbnRpdHlOYW1lXTtcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKCBlbnRpdHkucmVneCwgZW50aXR5LnZhbCk7XG4gICAgfVxuICAgIGZvcihsZXQgZW50aXR5TmFtZSBpbiB0aGlzLmxhc3RFbnRpdGllcyl7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmxhc3RFbnRpdGllc1tlbnRpdHlOYW1lXTtcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKCBlbnRpdHkucmVnZXgsIGVudGl0eS52YWwpO1xuICAgIH1cbiAgICBpZih0aGlzLm9wdGlvbnMuaHRtbEVudGl0aWVzKXtcbiAgICAgIGZvcihsZXQgZW50aXR5TmFtZSBpbiB0aGlzLmh0bWxFbnRpdGllcyl7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuaHRtbEVudGl0aWVzW2VudGl0eU5hbWVdO1xuICAgICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFsID0gdmFsLnJlcGxhY2UoIHRoaXMuYW1wRW50aXR5LnJlZ2V4LCB0aGlzLmFtcEVudGl0eS52YWwpO1xuICB9XG4gIHJldHVybiB2YWw7XG59XG5mdW5jdGlvbiBzYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgsIGlzTGVhZk5vZGUpIHtcbiAgaWYgKHRleHREYXRhKSB7IC8vc3RvcmUgcHJldmlvdXNseSBjb2xsZWN0ZWQgZGF0YSBhcyB0ZXh0Tm9kZVxuICAgIGlmKGlzTGVhZk5vZGUgPT09IHVuZGVmaW5lZCkgaXNMZWFmTm9kZSA9IE9iamVjdC5rZXlzKGN1cnJlbnROb2RlLmNoaWxkKS5sZW5ndGggPT09IDBcbiAgICBcbiAgICB0ZXh0RGF0YSA9IHRoaXMucGFyc2VUZXh0RGF0YSh0ZXh0RGF0YSxcbiAgICAgIGN1cnJlbnROb2RlLnRhZ25hbWUsXG4gICAgICBqUGF0aCxcbiAgICAgIGZhbHNlLFxuICAgICAgY3VycmVudE5vZGVbXCI6QFwiXSA/IE9iamVjdC5rZXlzKGN1cnJlbnROb2RlW1wiOkBcIl0pLmxlbmd0aCAhPT0gMCA6IGZhbHNlLFxuICAgICAgaXNMZWFmTm9kZSk7XG5cbiAgICBpZiAodGV4dERhdGEgIT09IHVuZGVmaW5lZCAmJiB0ZXh0RGF0YSAhPT0gXCJcIilcbiAgICAgIGN1cnJlbnROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB0ZXh0RGF0YSk7XG4gICAgdGV4dERhdGEgPSBcIlwiO1xuICB9XG4gIHJldHVybiB0ZXh0RGF0YTtcbn1cblxuLy9UT0RPOiB1c2UgalBhdGggdG8gc2ltcGxpZnkgdGhlIGxvZ2ljXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmdbXX0gc3RvcE5vZGVzIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudFRhZ05hbWUgXG4gKi9cbmZ1bmN0aW9uIGlzSXRTdG9wTm9kZShzdG9wTm9kZXMsIGpQYXRoLCBjdXJyZW50VGFnTmFtZSl7XG4gIGNvbnN0IGFsbE5vZGVzRXhwID0gXCIqLlwiICsgY3VycmVudFRhZ05hbWU7XG4gIGZvciAoY29uc3Qgc3RvcE5vZGVQYXRoIGluIHN0b3BOb2Rlcykge1xuICAgIGNvbnN0IHN0b3BOb2RlRXhwID0gc3RvcE5vZGVzW3N0b3BOb2RlUGF0aF07XG4gICAgaWYoIGFsbE5vZGVzRXhwID09PSBzdG9wTm9kZUV4cCB8fCBqUGF0aCA9PT0gc3RvcE5vZGVFeHAgICkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRhZyBFeHByZXNzaW9uIGFuZCB3aGVyZSBpdCBpcyBlbmRpbmcgaGFuZGxpbmcgc2luZ2xlLWRvdWJsZSBxdW90ZXMgc2l0dWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30geG1sRGF0YSBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpIHN0YXJ0aW5nIGluZGV4XG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gdGFnRXhwV2l0aENsb3NpbmdJbmRleCh4bWxEYXRhLCBpLCBjbG9zaW5nQ2hhciA9IFwiPlwiKXtcbiAgbGV0IGF0dHJCb3VuZGFyeTtcbiAgbGV0IHRhZ0V4cCA9IFwiXCI7XG4gIGZvciAobGV0IGluZGV4ID0gaTsgaW5kZXggPCB4bWxEYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCBjaCA9IHhtbERhdGFbaW5kZXhdO1xuICAgIGlmIChhdHRyQm91bmRhcnkpIHtcbiAgICAgICAgaWYgKGNoID09PSBhdHRyQm91bmRhcnkpIGF0dHJCb3VuZGFyeSA9IFwiXCI7Ly9yZXNldFxuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09IFwiJ1wiKSB7XG4gICAgICAgIGF0dHJCb3VuZGFyeSA9IGNoO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IGNsb3NpbmdDaGFyWzBdKSB7XG4gICAgICBpZihjbG9zaW5nQ2hhclsxXSl7XG4gICAgICAgIGlmKHhtbERhdGFbaW5kZXggKyAxXSA9PT0gY2xvc2luZ0NoYXJbMV0pe1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB0YWdFeHAsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHRhZ0V4cCxcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXHQnKSB7XG4gICAgICBjaCA9IFwiIFwiXG4gICAgfVxuICAgIHRhZ0V4cCArPSBjaDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIHN0ciwgaSwgZXJyTXNnKXtcbiAgY29uc3QgY2xvc2luZ0luZGV4ID0geG1sRGF0YS5pbmRleE9mKHN0ciwgaSk7XG4gIGlmKGNsb3NpbmdJbmRleCA9PT0gLTEpe1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpXG4gIH1lbHNle1xuICAgIHJldHVybiBjbG9zaW5nSW5kZXggKyBzdHIubGVuZ3RoIC0gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkVGFnRXhwKHhtbERhdGEsaSwgcmVtb3ZlTlNQcmVmaXgsIGNsb3NpbmdDaGFyID0gXCI+XCIpe1xuICBjb25zdCByZXN1bHQgPSB0YWdFeHBXaXRoQ2xvc2luZ0luZGV4KHhtbERhdGEsIGkrMSwgY2xvc2luZ0NoYXIpO1xuICBpZighcmVzdWx0KSByZXR1cm47XG4gIGxldCB0YWdFeHAgPSByZXN1bHQuZGF0YTtcbiAgY29uc3QgY2xvc2VJbmRleCA9IHJlc3VsdC5pbmRleDtcbiAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSB0YWdFeHAuc2VhcmNoKC9cXHMvKTtcbiAgbGV0IHRhZ05hbWUgPSB0YWdFeHA7XG4gIGxldCBhdHRyRXhwUHJlc2VudCA9IHRydWU7XG4gIGlmKHNlcGFyYXRvckluZGV4ICE9PSAtMSl7Ly9zZXBhcmF0ZSB0YWcgbmFtZSBhbmQgYXR0cmlidXRlcyBleHByZXNzaW9uXG4gICAgdGFnTmFtZSA9IHRhZ0V4cC5zdWJzdHJpbmcoMCwgc2VwYXJhdG9ySW5kZXgpO1xuICAgIHRhZ0V4cCA9IHRhZ0V4cC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKS50cmltU3RhcnQoKTtcbiAgfVxuXG4gIGNvbnN0IHJhd1RhZ05hbWUgPSB0YWdOYW1lO1xuICBpZihyZW1vdmVOU1ByZWZpeCl7XG4gICAgY29uc3QgY29sb25JbmRleCA9IHRhZ05hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgaWYoY29sb25JbmRleCAhPT0gLTEpe1xuICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKGNvbG9uSW5kZXgrMSk7XG4gICAgICBhdHRyRXhwUHJlc2VudCA9IHRhZ05hbWUgIT09IHJlc3VsdC5kYXRhLnN1YnN0cihjb2xvbkluZGV4ICsgMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgIHRhZ0V4cDogdGFnRXhwLFxuICAgIGNsb3NlSW5kZXg6IGNsb3NlSW5kZXgsXG4gICAgYXR0ckV4cFByZXNlbnQ6IGF0dHJFeHBQcmVzZW50LFxuICAgIHJhd1RhZ05hbWU6IHJhd1RhZ05hbWUsXG4gIH1cbn1cbi8qKlxuICogZmluZCBwYWlyZWQgdGFnIGZvciBhIHN0b3Agbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHhtbERhdGEgXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpIFxuICovXG5mdW5jdGlvbiByZWFkU3RvcE5vZGVEYXRhKHhtbERhdGEsIHRhZ05hbWUsIGkpe1xuICBjb25zdCBzdGFydEluZGV4ID0gaTtcbiAgLy8gU3RhcnRpbmcgYXQgMSBzaW5jZSB3ZSBhbHJlYWR5IGhhdmUgYW4gb3BlbiB0YWdcbiAgbGV0IG9wZW5UYWdDb3VudCA9IDE7XG5cbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYoIHhtbERhdGFbaV0gPT09IFwiPFwiKXsgXG4gICAgICBpZiAoeG1sRGF0YVtpKzFdID09PSBcIi9cIikgey8vY2xvc2UgdGFnXG4gICAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI+XCIsIGksIGAke3RhZ05hbWV9IGlzIG5vdCBjbG9zZWRgKTtcbiAgICAgICAgICBsZXQgY2xvc2VUYWdOYW1lID0geG1sRGF0YS5zdWJzdHJpbmcoaSsyLGNsb3NlSW5kZXgpLnRyaW0oKTtcbiAgICAgICAgICBpZihjbG9zZVRhZ05hbWUgPT09IHRhZ05hbWUpe1xuICAgICAgICAgICAgb3BlblRhZ0NvdW50LS07XG4gICAgICAgICAgICBpZiAob3BlblRhZ0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGFnQ29udGVudDogeG1sRGF0YS5zdWJzdHJpbmcoc3RhcnRJbmRleCwgaSksXG4gICAgICAgICAgICAgICAgaSA6IGNsb3NlSW5kZXhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpPWNsb3NlSW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZih4bWxEYXRhW2krMV0gPT09ICc/JykgeyBcbiAgICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIj8+XCIsIGkrMSwgXCJTdG9wTm9kZSBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICAgIGk9Y2xvc2VJbmRleDtcbiAgICAgICAgfSBlbHNlIGlmKHhtbERhdGEuc3Vic3RyKGkgKyAxLCAzKSA9PT0gJyEtLScpIHsgXG4gICAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCItLT5cIiwgaSszLCBcIlN0b3BOb2RlIGlzIG5vdCBjbG9zZWQuXCIpXG4gICAgICAgICAgaT1jbG9zZUluZGV4O1xuICAgICAgICB9IGVsc2UgaWYoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDIpID09PSAnIVsnKSB7IFxuICAgICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiXV0+XCIsIGksIFwiU3RvcE5vZGUgaXMgbm90IGNsb3NlZC5cIikgLSAyO1xuICAgICAgICAgIGk9Y2xvc2VJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB0YWdEYXRhID0gcmVhZFRhZ0V4cCh4bWxEYXRhLCBpLCAnPicpXG5cbiAgICAgICAgICBpZiAodGFnRGF0YSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlblRhZ05hbWUgPSB0YWdEYXRhICYmIHRhZ0RhdGEudGFnTmFtZTtcbiAgICAgICAgICAgIGlmIChvcGVuVGFnTmFtZSA9PT0gdGFnTmFtZSAmJiB0YWdEYXRhLnRhZ0V4cFt0YWdEYXRhLnRhZ0V4cC5sZW5ndGgtMV0gIT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWdDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaT10YWdEYXRhLmNsb3NlSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gIH0vL2VuZCBmb3IgbG9vcFxufVxuXG5mdW5jdGlvbiBwYXJzZVZhbHVlKHZhbCwgc2hvdWxkUGFyc2UsIG9wdGlvbnMpIHtcbiAgaWYgKHNob3VsZFBhcnNlICYmIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgLy9jb25zb2xlLmxvZyhvcHRpb25zKVxuICAgIGNvbnN0IG5ld3ZhbCA9IHZhbC50cmltKCk7XG4gICAgaWYobmV3dmFsID09PSAndHJ1ZScgKSByZXR1cm4gdHJ1ZTtcbiAgICBlbHNlIGlmKG5ld3ZhbCA9PT0gJ2ZhbHNlJyApIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIHJldHVybiB0b051bWJlcih2YWwsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGlmICh1dGlsLmlzRXhpc3QodmFsKSkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gT3JkZXJlZE9ialBhcnNlcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBub2RlIFxuICogQHBhcmFtIHthbnl9IG9wdGlvbnMgXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gcHJldHRpZnkobm9kZSwgb3B0aW9ucyl7XG4gIHJldHVybiBjb21wcmVzcyggbm9kZSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBcbiAqIEBwYXJhbSB7c3RyaW5nfSBqUGF0aCBcbiAqIEByZXR1cm5zIG9iamVjdFxuICovXG5mdW5jdGlvbiBjb21wcmVzcyhhcnIsIG9wdGlvbnMsIGpQYXRoKXtcbiAgbGV0IHRleHQ7XG4gIGNvbnN0IGNvbXByZXNzZWRPYmogPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0YWdPYmogPSBhcnJbaV07XG4gICAgY29uc3QgcHJvcGVydHkgPSBwcm9wTmFtZSh0YWdPYmopO1xuICAgIGxldCBuZXdKcGF0aCA9IFwiXCI7XG4gICAgaWYoalBhdGggPT09IHVuZGVmaW5lZCkgbmV3SnBhdGggPSBwcm9wZXJ0eTtcbiAgICBlbHNlIG5ld0pwYXRoID0galBhdGggKyBcIi5cIiArIHByb3BlcnR5O1xuXG4gICAgaWYocHJvcGVydHkgPT09IG9wdGlvbnMudGV4dE5vZGVOYW1lKXtcbiAgICAgIGlmKHRleHQgPT09IHVuZGVmaW5lZCkgdGV4dCA9IHRhZ09ialtwcm9wZXJ0eV07XG4gICAgICBlbHNlIHRleHQgKz0gXCJcIiArIHRhZ09ialtwcm9wZXJ0eV07XG4gICAgfWVsc2UgaWYocHJvcGVydHkgPT09IHVuZGVmaW5lZCl7XG4gICAgICBjb250aW51ZTtcbiAgICB9ZWxzZSBpZih0YWdPYmpbcHJvcGVydHldKXtcbiAgICAgIFxuICAgICAgbGV0IHZhbCA9IGNvbXByZXNzKHRhZ09ialtwcm9wZXJ0eV0sIG9wdGlvbnMsIG5ld0pwYXRoKTtcbiAgICAgIGNvbnN0IGlzTGVhZiA9IGlzTGVhZlRhZyh2YWwsIG9wdGlvbnMpO1xuXG4gICAgICBpZih0YWdPYmpbXCI6QFwiXSl7XG4gICAgICAgIGFzc2lnbkF0dHJpYnV0ZXMoIHZhbCwgdGFnT2JqW1wiOkBcIl0sIG5ld0pwYXRoLCBvcHRpb25zKTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAxICYmIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gIT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSl7XG4gICAgICAgIHZhbCA9IHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICB9ZWxzZSBpZihPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGlmKG9wdGlvbnMuYWx3YXlzQ3JlYXRlVGV4dE5vZGUpIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gPSBcIlwiO1xuICAgICAgICBlbHNlIHZhbCA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmKGNvbXByZXNzZWRPYmpbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgY29tcHJlc3NlZE9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSA9IFsgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gXTtcbiAgICAgICAgfVxuICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XS5wdXNoKHZhbCk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgLy9UT0RPOiBpZiBhIG5vZGUgaXMgbm90IGFuIGFycmF5LCB0aGVuIGNoZWNrIGlmIGl0IHNob3VsZCBiZSBhbiBhcnJheVxuICAgICAgICAvL2Fsc28gZGV0ZXJtaW5lIGlmIGl0IGlzIGEgbGVhZiBub2RlXG4gICAgICAgIGlmIChvcHRpb25zLmlzQXJyYXkocHJvcGVydHksIG5ld0pwYXRoLCBpc0xlYWYgKSkge1xuICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gW3ZhbF07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICB9XG4gIC8vIGlmKHRleHQgJiYgdGV4dC5sZW5ndGggPiAwKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIGlmKHR5cGVvZiB0ZXh0ID09PSBcInN0cmluZ1wiKXtcbiAgICBpZih0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgfWVsc2UgaWYodGV4dCAhPT0gdW5kZWZpbmVkKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIHJldHVybiBjb21wcmVzc2VkT2JqO1xufVxuXG5mdW5jdGlvbiBwcm9wTmFtZShvYmope1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBpZihrZXkgIT09IFwiOkBcIikgcmV0dXJuIGtleTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25BdHRyaWJ1dGVzKG9iaiwgYXR0ck1hcCwganBhdGgsIG9wdGlvbnMpe1xuICBpZiAoYXR0ck1hcCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhdHRyTWFwKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsgLy9kb24ndCBtYWtlIGl0IGlubGluZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0cnJOYW1lID0ga2V5c1tpXTtcbiAgICAgIGlmIChvcHRpb25zLmlzQXJyYXkoYXRyck5hbWUsIGpwYXRoICsgXCIuXCIgKyBhdHJyTmFtZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IFsgYXR0ck1hcFthdHJyTmFtZV0gXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialthdHJyTmFtZV0gPSBhdHRyTWFwW2F0cnJOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMZWFmVGFnKG9iaiwgb3B0aW9ucyl7XG4gIGNvbnN0IHsgdGV4dE5vZGVOYW1lIH0gPSBvcHRpb25zO1xuICBjb25zdCBwcm9wQ291bnQgPSBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbiAgXG4gIGlmIChwcm9wQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChcbiAgICBwcm9wQ291bnQgPT09IDEgJiZcbiAgICAob2JqW3RleHROb2RlTmFtZV0gfHwgdHlwZW9mIG9ialt0ZXh0Tm9kZU5hbWVdID09PSBcImJvb2xlYW5cIiB8fCBvYmpbdGV4dE5vZGVOYW1lXSA9PT0gMClcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnByZXR0aWZ5ID0gcHJldHRpZnk7XG4iLCAiY29uc3QgeyBidWlsZE9wdGlvbnN9ID0gcmVxdWlyZShcIi4vT3B0aW9uc0J1aWxkZXJcIik7XG5jb25zdCBPcmRlcmVkT2JqUGFyc2VyID0gcmVxdWlyZShcIi4vT3JkZXJlZE9ialBhcnNlclwiKTtcbmNvbnN0IHsgcHJldHRpZnl9ID0gcmVxdWlyZShcIi4vbm9kZTJqc29uXCIpO1xuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vdmFsaWRhdG9yJyk7XG5cbmNsYXNzIFhNTFBhcnNlcntcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICAgICAgdGhpcy5leHRlcm5hbEVudGl0aWVzID0ge307XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIFhNTCBkYXRzIHRvIEpTIG9iamVjdCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IHhtbERhdGEgXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdH0gdmFsaWRhdGlvbk9wdGlvbiBcbiAgICAgKi9cbiAgICBwYXJzZSh4bWxEYXRhLHZhbGlkYXRpb25PcHRpb24pe1xuICAgICAgICBpZih0eXBlb2YgeG1sRGF0YSA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgIH1lbHNlIGlmKCB4bWxEYXRhLnRvU3RyaW5nKXtcbiAgICAgICAgICAgIHhtbERhdGEgPSB4bWxEYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWE1MIGRhdGEgaXMgYWNjZXB0ZWQgaW4gU3RyaW5nIG9yIEJ5dGVzW10gZm9ybS5cIilcbiAgICAgICAgfVxuICAgICAgICBpZiggdmFsaWRhdGlvbk9wdGlvbil7XG4gICAgICAgICAgICBpZih2YWxpZGF0aW9uT3B0aW9uID09PSB0cnVlKSB2YWxpZGF0aW9uT3B0aW9uID0ge307IC8vdmFsaWRhdGUgd2l0aCBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdG9yLnZhbGlkYXRlKHhtbERhdGEsIHZhbGlkYXRpb25PcHRpb24pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICB0aHJvdyBFcnJvciggYCR7cmVzdWx0LmVyci5tc2d9OiR7cmVzdWx0LmVyci5saW5lfToke3Jlc3VsdC5lcnIuY29sfWAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JkZXJlZE9ialBhcnNlciA9IG5ldyBPcmRlcmVkT2JqUGFyc2VyKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIG9yZGVyZWRPYmpQYXJzZXIuYWRkRXh0ZXJuYWxFbnRpdGllcyh0aGlzLmV4dGVybmFsRW50aXRpZXMpO1xuICAgICAgICBjb25zdCBvcmRlcmVkUmVzdWx0ID0gb3JkZXJlZE9ialBhcnNlci5wYXJzZVhtbCh4bWxEYXRhKTtcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLnByZXNlcnZlT3JkZXIgfHwgb3JkZXJlZFJlc3VsdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gb3JkZXJlZFJlc3VsdDtcbiAgICAgICAgZWxzZSByZXR1cm4gcHJldHRpZnkob3JkZXJlZFJlc3VsdCwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgRW50aXR5IHdoaWNoIGlzIG5vdCBieSBkZWZhdWx0IHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBcbiAgICAgKi9cbiAgICBhZGRFbnRpdHkoa2V5LCB2YWx1ZSl7XG4gICAgICAgIGlmKHZhbHVlLmluZGV4T2YoXCImXCIpICE9PSAtMSl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbnRpdHkgdmFsdWUgY2FuJ3QgaGF2ZSAnJidcIilcbiAgICAgICAgfWVsc2UgaWYoa2V5LmluZGV4T2YoXCImXCIpICE9PSAtMSB8fCBrZXkuaW5kZXhPZihcIjtcIikgIT09IC0xKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFuIGVudGl0eSBtdXN0IGJlIHNldCB3aXRob3V0ICcmJyBhbmQgJzsnLiBFZy4gdXNlICcjeEQnIGZvciAnJiN4RDsnXCIpXG4gICAgICAgIH1lbHNlIGlmKHZhbHVlID09PSBcIiZcIil7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBlbnRpdHkgd2l0aCB2YWx1ZSAnJicgaXMgbm90IHBlcm1pdHRlZFwiKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmV4dGVybmFsRW50aXRpZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFhNTFBhcnNlcjsiLCAiY29uc3QgRU9MID0gXCJcXG5cIjtcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IGpBcnJheSBcbiAqIEBwYXJhbSB7YW55fSBvcHRpb25zIFxuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIHRvWG1sKGpBcnJheSwgb3B0aW9ucykge1xuICAgIGxldCBpbmRlbnRhdGlvbiA9IFwiXCI7XG4gICAgaWYgKG9wdGlvbnMuZm9ybWF0ICYmIG9wdGlvbnMuaW5kZW50QnkubGVuZ3RoID4gMCkge1xuICAgICAgICBpbmRlbnRhdGlvbiA9IEVPTDtcbiAgICB9XG4gICAgcmV0dXJuIGFyclRvU3RyKGpBcnJheSwgb3B0aW9ucywgXCJcIiwgaW5kZW50YXRpb24pO1xufVxuXG5mdW5jdGlvbiBhcnJUb1N0cihhcnIsIG9wdGlvbnMsIGpQYXRoLCBpbmRlbnRhdGlvbikge1xuICAgIGxldCB4bWxTdHIgPSBcIlwiO1xuICAgIGxldCBpc1ByZXZpb3VzRWxlbWVudFRhZyA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gYXJyW2ldO1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gcHJvcE5hbWUodGFnT2JqKTtcbiAgICAgICAgaWYodGFnTmFtZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblxuICAgICAgICBsZXQgbmV3SlBhdGggPSBcIlwiO1xuICAgICAgICBpZiAoalBhdGgubGVuZ3RoID09PSAwKSBuZXdKUGF0aCA9IHRhZ05hbWVcbiAgICAgICAgZWxzZSBuZXdKUGF0aCA9IGAke2pQYXRofS4ke3RhZ05hbWV9YDtcblxuICAgICAgICBpZiAodGFnTmFtZSA9PT0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUpIHtcbiAgICAgICAgICAgIGxldCB0YWdUZXh0ID0gdGFnT2JqW3RhZ05hbWVdO1xuICAgICAgICAgICAgaWYgKCFpc1N0b3BOb2RlKG5ld0pQYXRoLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIHRhZ1RleHQgPSBvcHRpb25zLnRhZ1ZhbHVlUHJvY2Vzc29yKHRhZ05hbWUsIHRhZ1RleHQpO1xuICAgICAgICAgICAgICAgIHRhZ1RleHQgPSByZXBsYWNlRW50aXRpZXNWYWx1ZSh0YWdUZXh0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1ByZXZpb3VzRWxlbWVudFRhZykge1xuICAgICAgICAgICAgICAgIHhtbFN0ciArPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhtbFN0ciArPSB0YWdUZXh0O1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09IG9wdGlvbnMuY2RhdGFQcm9wTmFtZSkge1xuICAgICAgICAgICAgaWYgKGlzUHJldmlvdXNFbGVtZW50VGFnKSB7XG4gICAgICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeG1sU3RyICs9IGA8IVtDREFUQVske3RhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV19XV0+YDtcbiAgICAgICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gZmFsc2U7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0YWdOYW1lID09PSBvcHRpb25zLmNvbW1lbnRQcm9wTmFtZSkge1xuICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uICsgYDwhLS0ke3RhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV19LS0+YDtcbiAgICAgICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWVbMF0gPT09IFwiP1wiKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRTdHIgPSBhdHRyX3RvX3N0cih0YWdPYmpbXCI6QFwiXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCB0ZW1wSW5kID0gdGFnTmFtZSA9PT0gXCI/eG1sXCIgPyBcIlwiIDogaW5kZW50YXRpb247XG4gICAgICAgICAgICBsZXQgcGlUZXh0Tm9kZU5hbWUgPSB0YWdPYmpbdGFnTmFtZV1bMF1bb3B0aW9ucy50ZXh0Tm9kZU5hbWVdO1xuICAgICAgICAgICAgcGlUZXh0Tm9kZU5hbWUgPSBwaVRleHROb2RlTmFtZS5sZW5ndGggIT09IDAgPyBcIiBcIiArIHBpVGV4dE5vZGVOYW1lIDogXCJcIjsgLy9yZW1vdmUgZXh0cmEgc3BhY2luZ1xuICAgICAgICAgICAgeG1sU3RyICs9IHRlbXBJbmQgKyBgPCR7dGFnTmFtZX0ke3BpVGV4dE5vZGVOYW1lfSR7YXR0U3RyfT8+YDtcbiAgICAgICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdJZGVudGF0aW9uID0gaW5kZW50YXRpb247XG4gICAgICAgIGlmIChuZXdJZGVudGF0aW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBuZXdJZGVudGF0aW9uICs9IG9wdGlvbnMuaW5kZW50Qnk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0U3RyID0gYXR0cl90b19zdHIodGFnT2JqW1wiOkBcIl0sIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0YWdTdGFydCA9IGluZGVudGF0aW9uICsgYDwke3RhZ05hbWV9JHthdHRTdHJ9YDtcbiAgICAgICAgY29uc3QgdGFnVmFsdWUgPSBhcnJUb1N0cih0YWdPYmpbdGFnTmFtZV0sIG9wdGlvbnMsIG5ld0pQYXRoLCBuZXdJZGVudGF0aW9uKTtcbiAgICAgICAgaWYgKG9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YodGFnTmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdXBwcmVzc1VucGFpcmVkTm9kZSkgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCI+XCI7XG4gICAgICAgICAgICBlbHNlIHhtbFN0ciArPSB0YWdTdGFydCArIFwiLz5cIjtcbiAgICAgICAgfSBlbHNlIGlmICgoIXRhZ1ZhbHVlIHx8IHRhZ1ZhbHVlLmxlbmd0aCA9PT0gMCkgJiYgb3B0aW9ucy5zdXBwcmVzc0VtcHR5Tm9kZSkge1xuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCIvPlwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ1ZhbHVlICYmIHRhZ1ZhbHVlLmVuZHNXaXRoKFwiPlwiKSkge1xuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgYD4ke3RhZ1ZhbHVlfSR7aW5kZW50YXRpb259PC8ke3RhZ05hbWV9PmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIj5cIjtcbiAgICAgICAgICAgIGlmICh0YWdWYWx1ZSAmJiBpbmRlbnRhdGlvbiAhPT0gXCJcIiAmJiAodGFnVmFsdWUuaW5jbHVkZXMoXCIvPlwiKSB8fCB0YWdWYWx1ZS5pbmNsdWRlcyhcIjwvXCIpKSkge1xuICAgICAgICAgICAgICAgIHhtbFN0ciArPSBpbmRlbnRhdGlvbiArIG9wdGlvbnMuaW5kZW50QnkgKyB0YWdWYWx1ZSArIGluZGVudGF0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4bWxTdHIgKz0gdGFnVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWxTdHIgKz0gYDwvJHt0YWdOYW1lfT5gO1xuICAgICAgICB9XG4gICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4geG1sU3RyO1xufVxuXG5mdW5jdGlvbiBwcm9wTmFtZShvYmopIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGtleSAhPT0gXCI6QFwiKSByZXR1cm4ga2V5O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXR0cl90b19zdHIoYXR0ck1hcCwgb3B0aW9ucykge1xuICAgIGxldCBhdHRyU3RyID0gXCJcIjtcbiAgICBpZiAoYXR0ck1hcCAmJiAhb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzKSB7XG4gICAgICAgIGZvciAobGV0IGF0dHIgaW4gYXR0ck1hcCkge1xuICAgICAgICAgICAgaWYoIWF0dHJNYXAuaGFzT3duUHJvcGVydHkoYXR0cikpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IGF0dHJWYWwgPSBvcHRpb25zLmF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yKGF0dHIsIGF0dHJNYXBbYXR0cl0pO1xuICAgICAgICAgICAgYXR0clZhbCA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlKGF0dHJWYWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGF0dHJWYWwgPT09IHRydWUgJiYgb3B0aW9ucy5zdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgYXR0clN0ciArPSBgICR7YXR0ci5zdWJzdHIob3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4Lmxlbmd0aCl9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0clN0ciArPSBgICR7YXR0ci5zdWJzdHIob3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4Lmxlbmd0aCl9PVwiJHthdHRyVmFsfVwiYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXR0clN0cjtcbn1cblxuZnVuY3Rpb24gaXNTdG9wTm9kZShqUGF0aCwgb3B0aW9ucykge1xuICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxlbmd0aCAtIG9wdGlvbnMudGV4dE5vZGVOYW1lLmxlbmd0aCAtIDEpO1xuICAgIGxldCB0YWdOYW1lID0galBhdGguc3Vic3RyKGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSArIDEpO1xuICAgIGZvciAobGV0IGluZGV4IGluIG9wdGlvbnMuc3RvcE5vZGVzKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnN0b3BOb2Rlc1tpbmRleF0gPT09IGpQYXRoIHx8IG9wdGlvbnMuc3RvcE5vZGVzW2luZGV4XSA9PT0gXCIqLlwiICsgdGFnTmFtZSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUVudGl0aWVzVmFsdWUodGV4dFZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKHRleHRWYWx1ZSAmJiB0ZXh0VmFsdWUubGVuZ3RoID4gMCAmJiBvcHRpb25zLnByb2Nlc3NFbnRpdGllcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMuZW50aXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IG9wdGlvbnMuZW50aXRpZXNbaV07XG4gICAgICAgICAgICB0ZXh0VmFsdWUgPSB0ZXh0VmFsdWUucmVwbGFjZShlbnRpdHkucmVnZXgsIGVudGl0eS52YWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0VmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHRvWG1sO1xuIiwgIid1c2Ugc3RyaWN0Jztcbi8vcGFyc2UgRW1wdHkgTm9kZSBhcyBzZWxmIGNsb3Npbmcgbm9kZVxuY29uc3QgYnVpbGRGcm9tT3JkZXJlZEpzID0gcmVxdWlyZSgnLi9vcmRlcmVkSnMyWG1sJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhdHRyaWJ1dGVOYW1lUHJlZml4OiAnQF8nLFxuICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZSxcbiAgdGV4dE5vZGVOYW1lOiAnI3RleHQnLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlLFxuICBjZGF0YVByb3BOYW1lOiBmYWxzZSxcbiAgZm9ybWF0OiBmYWxzZSxcbiAgaW5kZW50Qnk6ICcgICcsXG4gIHN1cHByZXNzRW1wdHlOb2RlOiBmYWxzZSxcbiAgc3VwcHJlc3NVbnBhaXJlZE5vZGU6IHRydWUsXG4gIHN1cHByZXNzQm9vbGVhbkF0dHJpYnV0ZXM6IHRydWUsXG4gIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihrZXksIGEpIHtcbiAgICByZXR1cm4gYTtcbiAgfSxcbiAgYXR0cmlidXRlVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKGF0dHJOYW1lLCBhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gIHByZXNlcnZlT3JkZXI6IGZhbHNlLFxuICBjb21tZW50UHJvcE5hbWU6IGZhbHNlLFxuICB1bnBhaXJlZFRhZ3M6IFtdLFxuICBlbnRpdGllczogW1xuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCImXCIsIFwiZ1wiKSwgdmFsOiBcIiZhbXA7XCIgfSwvL2l0IG11c3QgYmUgb24gdG9wXG4gICAgeyByZWdleDogbmV3IFJlZ0V4cChcIj5cIiwgXCJnXCIpLCB2YWw6IFwiJmd0O1wiIH0sXG4gICAgeyByZWdleDogbmV3IFJlZ0V4cChcIjxcIiwgXCJnXCIpLCB2YWw6IFwiJmx0O1wiIH0sXG4gICAgeyByZWdleDogbmV3IFJlZ0V4cChcIlxcJ1wiLCBcImdcIiksIHZhbDogXCImYXBvcztcIiB9LFxuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCJcXFwiXCIsIFwiZ1wiKSwgdmFsOiBcIiZxdW90O1wiIH1cbiAgXSxcbiAgcHJvY2Vzc0VudGl0aWVzOiB0cnVlLFxuICBzdG9wTm9kZXM6IFtdLFxuICAvLyB0cmFuc2Zvcm1UYWdOYW1lOiBmYWxzZSxcbiAgLy8gdHJhbnNmb3JtQXR0cmlidXRlTmFtZTogZmFsc2UsXG4gIG9uZUxpc3RHcm91cDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIEJ1aWxkZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlQXR0cmlidXRlcyB8fCB0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSkge1xuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBmdW5jdGlvbigvKmEqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hdHRyUHJlZml4TGVuID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoO1xuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBpc0F0dHJpYnV0ZTtcbiAgfVxuXG4gIHRoaXMucHJvY2Vzc1RleHRPck9iak5vZGUgPSBwcm9jZXNzVGV4dE9yT2JqTm9kZVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuZm9ybWF0KSB7XG4gICAgdGhpcy5pbmRlbnRhdGUgPSBpbmRlbnRhdGU7XG4gICAgdGhpcy50YWdFbmRDaGFyID0gJz5cXG4nO1xuICAgIHRoaXMubmV3TGluZSA9ICdcXG4nO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaW5kZW50YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfTtcbiAgICB0aGlzLnRhZ0VuZENoYXIgPSAnPic7XG4gICAgdGhpcy5uZXdMaW5lID0gJyc7XG4gIH1cbn1cblxuQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbihqT2JqKSB7XG4gIGlmKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZU9yZGVyKXtcbiAgICByZXR1cm4gYnVpbGRGcm9tT3JkZXJlZEpzKGpPYmosIHRoaXMub3B0aW9ucyk7XG4gIH1lbHNlIHtcbiAgICBpZihBcnJheS5pc0FycmF5KGpPYmopICYmIHRoaXMub3B0aW9ucy5hcnJheU5vZGVOYW1lICYmIHRoaXMub3B0aW9ucy5hcnJheU5vZGVOYW1lLmxlbmd0aCA+IDEpe1xuICAgICAgak9iaiA9IHtcbiAgICAgICAgW3RoaXMub3B0aW9ucy5hcnJheU5vZGVOYW1lXSA6IGpPYmpcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuajJ4KGpPYmosIDApLnZhbDtcbiAgfVxufTtcblxuQnVpbGRlci5wcm90b3R5cGUuajJ4ID0gZnVuY3Rpb24oak9iaiwgbGV2ZWwpIHtcbiAgbGV0IGF0dHJTdHIgPSAnJztcbiAgbGV0IHZhbCA9ICcnO1xuICBmb3IgKGxldCBrZXkgaW4gak9iaikge1xuICAgIGlmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoak9iaiwga2V5KSkgY29udGludWU7XG4gICAgaWYgKHR5cGVvZiBqT2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBzdXByZXNzIHVuZGVmaW5lZCBub2RlIG9ubHkgaWYgaXQgaXMgbm90IGFuIGF0dHJpYnV0ZVxuICAgICAgaWYgKHRoaXMuaXNBdHRyaWJ1dGUoa2V5KSkge1xuICAgICAgICB2YWwgKz0gJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChqT2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgYXR0cmlidXRlIHNob3VsZCBiZSBpZ25vcmVkIGJ5IHRoZSBhdHRyaWJ1dGUgbGlzdCwgYnV0IHNob3VsZCBub3QgY2F1c2UgdGhlIHRhZyBjbG9zaW5nXG4gICAgICBpZiAodGhpcy5pc0F0dHJpYnV0ZShrZXkpKSB7XG4gICAgICAgIHZhbCArPSAnJztcbiAgICAgIH0gZWxzZSBpZiAoa2V5WzBdID09PSAnPycpIHtcbiAgICAgICAgdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArICc/JyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICB9XG4gICAgICAvLyB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIH0gZWxzZSBpZiAoak9ialtrZXldIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgdmFsICs9IHRoaXMuYnVpbGRUZXh0VmFsTm9kZShqT2JqW2tleV0sIGtleSwgJycsIGxldmVsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBqT2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAvL3ByZW1pdGl2ZSB0eXBlXG4gICAgICBjb25zdCBhdHRyID0gdGhpcy5pc0F0dHJpYnV0ZShrZXkpO1xuICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgYXR0clN0ciArPSB0aGlzLmJ1aWxkQXR0clBhaXJTdHIoYXR0ciwgJycgKyBqT2JqW2tleV0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICAvL3RhZyB2YWx1ZVxuICAgICAgICBpZiAoa2V5ID09PSB0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lKSB7XG4gICAgICAgICAgbGV0IG5ld3ZhbCA9IHRoaXMub3B0aW9ucy50YWdWYWx1ZVByb2Nlc3NvcihrZXksICcnICsgak9ialtrZXldKTtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZShuZXd2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCArPSB0aGlzLmJ1aWxkVGV4dFZhbE5vZGUoak9ialtrZXldLCBrZXksICcnLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoak9ialtrZXldKSkge1xuICAgICAgLy9yZXBlYXRlZCBub2Rlc1xuICAgICAgY29uc3QgYXJyTGVuID0gak9ialtrZXldLmxlbmd0aDtcbiAgICAgIGxldCBsaXN0VGFnVmFsID0gXCJcIjtcbiAgICAgIGxldCBsaXN0VGFnQXR0ciA9IFwiXCI7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFyckxlbjsgaisrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBqT2JqW2tleV1bal07XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXByZXNzIHVuZGVmaW5lZCBub2RlXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgIGlmKGtleVswXSA9PT0gXCI/XCIpIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAgICAgZWxzZSB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgICAgICAgIC8vIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYodGhpcy5vcHRpb25zLm9uZUxpc3RHcm91cCl7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmoyeChpdGVtLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgbGlzdFRhZ1ZhbCArPSByZXN1bHQudmFsO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lICYmIGl0ZW0uaGFzT3duUHJvcGVydHkodGhpcy5vcHRpb25zLmF0dHJpYnV0ZXNHcm91cE5hbWUpKSB7XG4gICAgICAgICAgICAgIGxpc3RUYWdBdHRyICs9IHJlc3VsdC5hdHRyU3RyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsaXN0VGFnVmFsICs9IHRoaXMucHJvY2Vzc1RleHRPck9iak5vZGUoaXRlbSwga2V5LCBsZXZlbClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vbmVMaXN0R3JvdXApIHtcbiAgICAgICAgICAgIGxldCB0ZXh0VmFsdWUgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3Ioa2V5LCBpdGVtKTtcbiAgICAgICAgICAgIHRleHRWYWx1ZSA9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUodGV4dFZhbHVlKTtcbiAgICAgICAgICAgIGxpc3RUYWdWYWwgKz0gdGV4dFZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0VGFnVmFsICs9IHRoaXMuYnVpbGRUZXh0VmFsTm9kZShpdGVtLCBrZXksICcnLCBsZXZlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZih0aGlzLm9wdGlvbnMub25lTGlzdEdyb3VwKXtcbiAgICAgICAgbGlzdFRhZ1ZhbCA9IHRoaXMuYnVpbGRPYmplY3ROb2RlKGxpc3RUYWdWYWwsIGtleSwgbGlzdFRhZ0F0dHIsIGxldmVsKTtcbiAgICAgIH1cbiAgICAgIHZhbCArPSBsaXN0VGFnVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25lc3RlZCBub2RlXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF0dHJpYnV0ZXNHcm91cE5hbWUgJiYga2V5ID09PSB0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSkge1xuICAgICAgICBjb25zdCBLcyA9IE9iamVjdC5rZXlzKGpPYmpba2V5XSk7XG4gICAgICAgIGNvbnN0IEwgPSBLcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgTDsgaisrKSB7XG4gICAgICAgICAgYXR0clN0ciArPSB0aGlzLmJ1aWxkQXR0clBhaXJTdHIoS3Nbal0sICcnICsgak9ialtrZXldW0tzW2pdXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCArPSB0aGlzLnByb2Nlc3NUZXh0T3JPYmpOb2RlKGpPYmpba2V5XSwga2V5LCBsZXZlbClcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHthdHRyU3RyOiBhdHRyU3RyLCB2YWw6IHZhbH07XG59O1xuXG5CdWlsZGVyLnByb3RvdHlwZS5idWlsZEF0dHJQYWlyU3RyID0gZnVuY3Rpb24oYXR0ck5hbWUsIHZhbCl7XG4gIHZhbCA9IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcihhdHRyTmFtZSwgJycgKyB2YWwpO1xuICB2YWwgPSB0aGlzLnJlcGxhY2VFbnRpdGllc1ZhbHVlKHZhbCk7XG4gIGlmICh0aGlzLm9wdGlvbnMuc3VwcHJlc3NCb29sZWFuQXR0cmlidXRlcyAmJiB2YWwgPT09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuICcgJyArIGF0dHJOYW1lO1xuICB9IGVsc2UgcmV0dXJuICcgJyArIGF0dHJOYW1lICsgJz1cIicgKyB2YWwgKyAnXCInO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVGV4dE9yT2JqTm9kZSAob2JqZWN0LCBrZXksIGxldmVsKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHRoaXMuajJ4KG9iamVjdCwgbGV2ZWwgKyAxKTtcbiAgaWYgKG9iamVjdFt0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRUZXh0VmFsTm9kZShvYmplY3RbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0sIGtleSwgcmVzdWx0LmF0dHJTdHIsIGxldmVsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZE9iamVjdE5vZGUocmVzdWx0LnZhbCwga2V5LCByZXN1bHQuYXR0clN0ciwgbGV2ZWwpO1xuICB9XG59XG5cbkJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkT2JqZWN0Tm9kZSA9IGZ1bmN0aW9uKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCkge1xuICBpZih2YWwgPT09IFwiXCIpe1xuICAgIGlmKGtleVswXSA9PT0gXCI/XCIpIHJldHVybiAgdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0cisgJz8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIgKyB0aGlzLmNsb3NlVGFnKGtleSkgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgfVxuICB9ZWxzZXtcblxuICAgIGxldCB0YWdFbmRFeHAgPSAnPC8nICsga2V5ICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIGxldCBwaUNsb3NpbmdDaGFyID0gXCJcIjtcbiAgICBcbiAgICBpZihrZXlbMF0gPT09IFwiP1wiKSB7XG4gICAgICBwaUNsb3NpbmdDaGFyID0gXCI/XCI7XG4gICAgICB0YWdFbmRFeHAgPSBcIlwiO1xuICAgIH1cbiAgXG4gICAgLy8gYXR0clN0ciBpcyBhbiBlbXB0eSBzdHJpbmcgaW4gY2FzZSB0aGUgYXR0cmlidXRlIGNhbWUgYXMgdW5kZWZpbmVkIG9yIG51bGxcbiAgICBpZiAoKGF0dHJTdHIgfHwgYXR0clN0ciA9PT0gJycpICYmIHZhbC5pbmRleE9mKCc8JykgPT09IC0xKSB7XG4gICAgICByZXR1cm4gKCB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyAga2V5ICsgYXR0clN0ciArIHBpQ2xvc2luZ0NoYXIgKyAnPicgKyB2YWwgKyB0YWdFbmRFeHAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUgIT09IGZhbHNlICYmIGtleSA9PT0gdGhpcy5vcHRpb25zLmNvbW1lbnRQcm9wTmFtZSAmJiBwaUNsb3NpbmdDaGFyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArIGA8IS0tJHt2YWx9LS0+YCArIHRoaXMubmV3TGluZTtcbiAgICB9ZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyICsgcGlDbG9zaW5nQ2hhciArIHRoaXMudGFnRW5kQ2hhciArXG4gICAgICAgIHZhbCArXG4gICAgICAgIHRoaXMuaW5kZW50YXRlKGxldmVsKSArIHRhZ0VuZEV4cCAgICApO1xuICAgIH1cbiAgfVxufVxuXG5CdWlsZGVyLnByb3RvdHlwZS5jbG9zZVRhZyA9IGZ1bmN0aW9uKGtleSl7XG4gIGxldCBjbG9zZVRhZyA9IFwiXCI7XG4gIGlmKHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZihrZXkpICE9PSAtMSl7IC8vdW5wYWlyZWRcbiAgICBpZighdGhpcy5vcHRpb25zLnN1cHByZXNzVW5wYWlyZWROb2RlKSBjbG9zZVRhZyA9IFwiL1wiXG4gIH1lbHNlIGlmKHRoaXMub3B0aW9ucy5zdXBwcmVzc0VtcHR5Tm9kZSl7IC8vZW1wdHlcbiAgICBjbG9zZVRhZyA9IFwiL1wiO1xuICB9ZWxzZXtcbiAgICBjbG9zZVRhZyA9IGA+PC8ke2tleX1gXG4gIH1cbiAgcmV0dXJuIGNsb3NlVGFnO1xufVxuXG5mdW5jdGlvbiBidWlsZEVtcHR5T2JqTm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHtcbiAgaWYgKHZhbCAhPT0gJycpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZE9iamVjdE5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKTtcbiAgfSBlbHNlIHtcbiAgICBpZihrZXlbMF0gPT09IFwiP1wiKSByZXR1cm4gIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIrICc/JyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiAgdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0ciArICcvJyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICAgIC8vIHJldHVybiB0aGlzLmJ1aWxkVGFnU3RyKGxldmVsLGtleSwgYXR0clN0cik7XG4gICAgfVxuICB9XG59XG5cbkJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkVGV4dFZhbE5vZGUgPSBmdW5jdGlvbih2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lICE9PSBmYWxzZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArIGA8IVtDREFUQVske3ZhbH1dXT5gICsgIHRoaXMubmV3TGluZTtcbiAgfWVsc2UgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUgIT09IGZhbHNlICYmIGtleSA9PT0gdGhpcy5vcHRpb25zLmNvbW1lbnRQcm9wTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyBgPCEtLSR7dmFsfS0tPmAgKyAgdGhpcy5uZXdMaW5lO1xuICB9ZWxzZSBpZihrZXlbMF0gPT09IFwiP1wiKSB7Ly9QSSB0YWdcbiAgICByZXR1cm4gIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIrICc/JyArIHRoaXMudGFnRW5kQ2hhcjsgXG4gIH1lbHNle1xuICAgIGxldCB0ZXh0VmFsdWUgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3Ioa2V5LCB2YWwpO1xuICAgIHRleHRWYWx1ZSA9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUodGV4dFZhbHVlKTtcbiAgXG4gICAgaWYoIHRleHRWYWx1ZSA9PT0gJycpe1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIgKyB0aGlzLmNsb3NlVGFnKGtleSkgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0ciArICc+JyArXG4gICAgICAgICB0ZXh0VmFsdWUgK1xuICAgICAgICAnPC8nICsga2V5ICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIH1cbiAgfVxufVxuXG5CdWlsZGVyLnByb3RvdHlwZS5yZXBsYWNlRW50aXRpZXNWYWx1ZSA9IGZ1bmN0aW9uKHRleHRWYWx1ZSl7XG4gIGlmKHRleHRWYWx1ZSAmJiB0ZXh0VmFsdWUubGVuZ3RoID4gMCAmJiB0aGlzLm9wdGlvbnMucHJvY2Vzc0VudGl0aWVzKXtcbiAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5vcHRpb25zLmVudGl0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLm9wdGlvbnMuZW50aXRpZXNbaV07XG4gICAgICB0ZXh0VmFsdWUgPSB0ZXh0VmFsdWUucmVwbGFjZShlbnRpdHkucmVnZXgsIGVudGl0eS52YWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGV4dFZhbHVlO1xufVxuXG5mdW5jdGlvbiBpbmRlbnRhdGUobGV2ZWwpIHtcbiAgcmV0dXJuIHRoaXMub3B0aW9ucy5pbmRlbnRCeS5yZXBlYXQobGV2ZWwpO1xufVxuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZShuYW1lIC8qLCBvcHRpb25zKi8pIHtcbiAgaWYgKG5hbWUuc3RhcnRzV2l0aCh0aGlzLm9wdGlvbnMuYXR0cmlidXRlTmFtZVByZWZpeCkgJiYgbmFtZSAhPT0gdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSkge1xuICAgIHJldHVybiBuYW1lLnN1YnN0cih0aGlzLmF0dHJQcmVmaXhMZW4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1aWxkZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCcuL3ZhbGlkYXRvcicpO1xuY29uc3QgWE1MUGFyc2VyID0gcmVxdWlyZSgnLi94bWxwYXJzZXIvWE1MUGFyc2VyJyk7XG5jb25zdCBYTUxCdWlsZGVyID0gcmVxdWlyZSgnLi94bWxidWlsZGVyL2pzb24yeG1sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBYTUxQYXJzZXI6IFhNTFBhcnNlcixcbiAgWE1MVmFsaWRhdG9yOiB2YWxpZGF0b3IsXG4gIFhNTEJ1aWxkZXI6IFhNTEJ1aWxkZXJcbn0iLCAiaW1wb3J0IHsgZ2V0VmFsdWVGcm9tVGV4dE5vZGUgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBYTUxQYXJzZXIgfSBmcm9tIFwiZmFzdC14bWwtcGFyc2VyXCI7XG5pbXBvcnQgeyBjb2xsZWN0Qm9keVN0cmluZyB9IGZyb20gXCIuLi9jb21tb25cIjtcbmV4cG9ydCBjb25zdCBwYXJzZVhtbEJvZHkgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHlTdHJpbmcoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoZW5jb2RlZCkgPT4ge1xuICAgIGlmIChlbmNvZGVkLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgWE1MUGFyc2VyKHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6IFwiXCIsXG4gICAgICAgICAgICBodG1sRW50aXRpZXM6IHRydWUsXG4gICAgICAgICAgICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICAgICAgICAgIGlnbm9yZURlY2xhcmF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgcGFyc2VUYWdWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICB0cmltVmFsdWVzOiBmYWxzZSxcbiAgICAgICAgICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiAoXywgdmFsKSA9PiAodmFsLnRyaW0oKSA9PT0gXCJcIiAmJiB2YWwuaW5jbHVkZXMoXCJcXG5cIikgPyBcIlwiIDogdW5kZWZpbmVkKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcnNlci5hZGRFbnRpdHkoXCIjeERcIiwgXCJcXHJcIik7XG4gICAgICAgIHBhcnNlci5hZGRFbnRpdHkoXCIjMTBcIiwgXCJcXG5cIik7XG4gICAgICAgIGxldCBwYXJzZWRPYmo7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJzZWRPYmogPSBwYXJzZXIucGFyc2UoZW5jb2RlZCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlICYmIHR5cGVvZiBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiJHJlc3BvbnNlQm9keVRleHRcIiwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW5jb2RlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGV4dE5vZGVOYW1lID0gXCIjdGV4dFwiO1xuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhwYXJzZWRPYmopWzBdO1xuICAgICAgICBjb25zdCBwYXJzZWRPYmpUb1JldHVybiA9IHBhcnNlZE9ialtrZXldO1xuICAgICAgICBpZiAocGFyc2VkT2JqVG9SZXR1cm5bdGV4dE5vZGVOYW1lXSkge1xuICAgICAgICAgICAgcGFyc2VkT2JqVG9SZXR1cm5ba2V5XSA9IHBhcnNlZE9ialRvUmV0dXJuW3RleHROb2RlTmFtZV07XG4gICAgICAgICAgICBkZWxldGUgcGFyc2VkT2JqVG9SZXR1cm5bdGV4dE5vZGVOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0VmFsdWVGcm9tVGV4dE5vZGUocGFyc2VkT2JqVG9SZXR1cm4pO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59KTtcbmV4cG9ydCBjb25zdCBwYXJzZVhtbEVycm9yQm9keSA9IGFzeW5jIChlcnJvckJvZHksIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhcnNlWG1sQm9keShlcnJvckJvZHksIGNvbnRleHQpO1xuICAgIGlmICh2YWx1ZS5FcnJvcikge1xuICAgICAgICB2YWx1ZS5FcnJvci5tZXNzYWdlID0gdmFsdWUuRXJyb3IubWVzc2FnZSA/PyB2YWx1ZS5FcnJvci5NZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuZXhwb3J0IGNvbnN0IGxvYWRSZXN0WG1sRXJyb3JDb2RlID0gKG91dHB1dCwgZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhPy5FcnJvcj8uQ29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkYXRhLkVycm9yLkNvZGU7XG4gICAgfVxuICAgIGlmIChkYXRhPy5Db2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuQ29kZTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID09IDQwNCkge1xuICAgICAgICByZXR1cm4gXCJOb3RGb3VuZFwiO1xuICAgIH1cbn07XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vY29lcmNpbmctc2VyaWFsaXplcnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzb24vYXdzRXhwZWN0VW5pb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzb24vcGFyc2VKc29uQm9keVwiO1xuZXhwb3J0ICogZnJvbSBcIi4veG1sL3BhcnNlWG1sQm9keVwiO1xuIiwgImV4cG9ydCAqIGZyb20gXCIuL3N1Ym1vZHVsZXMvY2xpZW50L2luZGV4XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdWJtb2R1bGVzL2h0dHBBdXRoU2NoZW1lcy9pbmRleFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3VibW9kdWxlcy9wcm90b2NvbHMvaW5kZXhcIjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgREVGQVVMVF9VQV9BUFBfSUQ6ICgpID0+IERFRkFVTFRfVUFfQVBQX0lELFxuICBnZXRVc2VyQWdlbnRNaWRkbGV3YXJlT3B0aW9uczogKCkgPT4gZ2V0VXNlckFnZW50TWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldFVzZXJBZ2VudFBsdWdpbjogKCkgPT4gZ2V0VXNlckFnZW50UGx1Z2luLFxuICByZXNvbHZlVXNlckFnZW50Q29uZmlnOiAoKSA9PiByZXNvbHZlVXNlckFnZW50Q29uZmlnLFxuICB1c2VyQWdlbnRNaWRkbGV3YXJlOiAoKSA9PiB1c2VyQWdlbnRNaWRkbGV3YXJlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvY29uZmlndXJhdGlvbnMudHNcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAc21pdGh5L2NvcmVcIik7XG52YXIgREVGQVVMVF9VQV9BUFBfSUQgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1ZhbGlkVXNlckFnZW50QXBwSWQoYXBwSWQpIHtcbiAgaWYgKGFwcElkID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGFwcElkID09PSBcInN0cmluZ1wiICYmIGFwcElkLmxlbmd0aCA8PSA1MDtcbn1cbl9fbmFtZShpc1ZhbGlkVXNlckFnZW50QXBwSWQsIFwiaXNWYWxpZFVzZXJBZ2VudEFwcElkXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZVVzZXJBZ2VudENvbmZpZyhpbnB1dCkge1xuICBjb25zdCBub3JtYWxpemVkQXBwSWRQcm92aWRlciA9ICgwLCBpbXBvcnRfY29yZS5ub3JtYWxpemVQcm92aWRlcikoaW5wdXQudXNlckFnZW50QXBwSWQgPz8gREVGQVVMVF9VQV9BUFBfSUQpO1xuICBjb25zdCB7IGN1c3RvbVVzZXJBZ2VudCB9ID0gaW5wdXQ7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGlucHV0LCB7XG4gICAgY3VzdG9tVXNlckFnZW50OiB0eXBlb2YgY3VzdG9tVXNlckFnZW50ID09PSBcInN0cmluZ1wiID8gW1tjdXN0b21Vc2VyQWdlbnRdXSA6IGN1c3RvbVVzZXJBZ2VudCxcbiAgICB1c2VyQWdlbnRBcHBJZDogLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhcHBJZCA9IGF3YWl0IG5vcm1hbGl6ZWRBcHBJZFByb3ZpZGVyKCk7XG4gICAgICBpZiAoIWlzVmFsaWRVc2VyQWdlbnRBcHBJZChhcHBJZCkpIHtcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gaW5wdXQubG9nZ2VyPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJOb09wTG9nZ2VyXCIgfHwgIWlucHV0LmxvZ2dlciA/IGNvbnNvbGUgOiBpbnB1dC5sb2dnZXI7XG4gICAgICAgIGlmICh0eXBlb2YgYXBwSWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBsb2dnZXI/Lndhcm4oXCJ1c2VyQWdlbnRBcHBJZCBtdXN0IGJlIGEgc3RyaW5nIG9yIHVuZGVmaW5lZC5cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoYXBwSWQubGVuZ3RoID4gNTApIHtcbiAgICAgICAgICBsb2dnZXI/Lndhcm4oXCJUaGUgcHJvdmlkZWQgdXNlckFnZW50QXBwSWQgZXhjZWVkcyB0aGUgbWF4aW11bSBsZW5ndGggb2YgNTAgY2hhcmFjdGVycy5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcHBJZDtcbiAgICB9LCBcInVzZXJBZ2VudEFwcElkXCIpXG4gIH0pO1xufVxuX19uYW1lKHJlc29sdmVVc2VyQWdlbnRDb25maWcsIFwicmVzb2x2ZVVzZXJBZ2VudENvbmZpZ1wiKTtcblxuLy8gc3JjL3VzZXItYWdlbnQtbWlkZGxld2FyZS50c1xudmFyIGltcG9ydF91dGlsX2VuZHBvaW50cyA9IHJlcXVpcmUoXCJAYXdzLXNkay91dGlsLWVuZHBvaW50c1wiKTtcbnZhciBpbXBvcnRfcHJvdG9jb2xfaHR0cCA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIik7XG5cbi8vIHNyYy9jaGVjay1mZWF0dXJlcy50c1xudmFyIGltcG9ydF9jb3JlMiA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlXCIpO1xudmFyIEFDQ09VTlRfSURfRU5EUE9JTlRfUkVHRVggPSAvXFxkezEyfVxcLmRkYi87XG5hc3luYyBmdW5jdGlvbiBjaGVja0ZlYXR1cmVzKGNvbnRleHQsIGNvbmZpZywgYXJncykge1xuICBjb25zdCByZXF1ZXN0ID0gYXJncy5yZXF1ZXN0O1xuICBpZiAocmVxdWVzdD8uaGVhZGVycz8uW1wic21pdGh5LXByb3RvY29sXCJdID09PSBcInJwYy12Mi1jYm9yXCIpIHtcbiAgICAoMCwgaW1wb3J0X2NvcmUyLnNldEZlYXR1cmUpKGNvbnRleHQsIFwiUFJPVE9DT0xfUlBDX1YyX0NCT1JcIiwgXCJNXCIpO1xuICB9XG4gIGlmICh0eXBlb2YgY29uZmlnLnJldHJ5U3RyYXRlZ3kgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IHJldHJ5U3RyYXRlZ3kgPSBhd2FpdCBjb25maWcucmV0cnlTdHJhdGVneSgpO1xuICAgIGlmICh0eXBlb2YgcmV0cnlTdHJhdGVneS5hY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHJldHJ5U3RyYXRlZ3kuY29uc3RydWN0b3I/Lm5hbWU/LmluY2x1ZGVzKFwiQWRhcHRpdmVcIikpIHtcbiAgICAgICAgKDAsIGltcG9ydF9jb3JlMi5zZXRGZWF0dXJlKShjb250ZXh0LCBcIlJFVFJZX01PREVfQURBUFRJVkVcIiwgXCJGXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIGltcG9ydF9jb3JlMi5zZXRGZWF0dXJlKShjb250ZXh0LCBcIlJFVFJZX01PREVfU1RBTkRBUkRcIiwgXCJFXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgaW1wb3J0X2NvcmUyLnNldEZlYXR1cmUpKGNvbnRleHQsIFwiUkVUUllfTU9ERV9MRUdBQ1lcIiwgXCJEXCIpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGNvbmZpZy5hY2NvdW50SWRFbmRwb2ludE1vZGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IGVuZHBvaW50VjIgPSBjb250ZXh0LmVuZHBvaW50VjI7XG4gICAgaWYgKFN0cmluZyhlbmRwb2ludFYyPy51cmw/Lmhvc3RuYW1lKS5tYXRjaChBQ0NPVU5UX0lEX0VORFBPSU5UX1JFR0VYKSkge1xuICAgICAgKDAsIGltcG9ydF9jb3JlMi5zZXRGZWF0dXJlKShjb250ZXh0LCBcIkFDQ09VTlRfSURfRU5EUE9JTlRcIiwgXCJPXCIpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGF3YWl0IGNvbmZpZy5hY2NvdW50SWRFbmRwb2ludE1vZGU/LigpKSB7XG4gICAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICAgICAgKDAsIGltcG9ydF9jb3JlMi5zZXRGZWF0dXJlKShjb250ZXh0LCBcIkFDQ09VTlRfSURfTU9ERV9ESVNBQkxFRFwiLCBcIlFcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInByZWZlcnJlZFwiOlxuICAgICAgICAoMCwgaW1wb3J0X2NvcmUyLnNldEZlYXR1cmUpKGNvbnRleHQsIFwiQUNDT1VOVF9JRF9NT0RFX1BSRUZFUlJFRFwiLCBcIlBcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJlcXVpcmVkXCI6XG4gICAgICAgICgwLCBpbXBvcnRfY29yZTIuc2V0RmVhdHVyZSkoY29udGV4dCwgXCJBQ0NPVU5UX0lEX01PREVfUkVRVUlSRURcIiwgXCJSXCIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgY29uc3QgaWRlbnRpdHkgPSBjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQ/LnNlbGVjdGVkSHR0cEF1dGhTY2hlbWU/LmlkZW50aXR5O1xuICBpZiAoaWRlbnRpdHk/LiRzb3VyY2UpIHtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IGlkZW50aXR5O1xuICAgIGlmIChjcmVkZW50aWFscy5hY2NvdW50SWQpIHtcbiAgICAgICgwLCBpbXBvcnRfY29yZTIuc2V0RmVhdHVyZSkoY29udGV4dCwgXCJSRVNPTFZFRF9BQ0NPVU5UX0lEXCIsIFwiVFwiKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY3JlZGVudGlhbHMuJHNvdXJjZSA/PyB7fSkpIHtcbiAgICAgICgwLCBpbXBvcnRfY29yZTIuc2V0RmVhdHVyZSkoY29udGV4dCwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5fX25hbWUoY2hlY2tGZWF0dXJlcywgXCJjaGVja0ZlYXR1cmVzXCIpO1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgVVNFUl9BR0VOVCA9IFwidXNlci1hZ2VudFwiO1xudmFyIFhfQU1aX1VTRVJfQUdFTlQgPSBcIngtYW16LXVzZXItYWdlbnRcIjtcbnZhciBTUEFDRSA9IFwiIFwiO1xudmFyIFVBX05BTUVfU0VQQVJBVE9SID0gXCIvXCI7XG52YXIgVUFfTkFNRV9FU0NBUEVfUkVHRVggPSAvW15cXCFcXCRcXCVcXCZcXCdcXCpcXCtcXC1cXC5cXF5cXF9cXGBcXHxcXH5cXGRcXHddL2c7XG52YXIgVUFfVkFMVUVfRVNDQVBFX1JFR0VYID0gL1teXFwhXFwkXFwlXFwmXFwnXFwqXFwrXFwtXFwuXFxeXFxfXFxgXFx8XFx+XFxkXFx3XFwjXS9nO1xudmFyIFVBX0VTQ0FQRV9DSEFSID0gXCItXCI7XG5cbi8vIHNyYy9lbmNvZGUtZmVhdHVyZXMudHNcbnZhciBCWVRFX0xJTUlUID0gMTAyNDtcbmZ1bmN0aW9uIGVuY29kZUZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gIGxldCBidWZmZXIgPSBcIlwiO1xuICBmb3IgKGNvbnN0IGtleSBpbiBmZWF0dXJlcykge1xuICAgIGNvbnN0IHZhbCA9IGZlYXR1cmVzW2tleV07XG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggKyB2YWwubGVuZ3RoICsgMSA8PSBCWVRFX0xJTUlUKSB7XG4gICAgICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBidWZmZXIgKz0gXCIsXCIgKyB2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXIgKz0gdmFsO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBidWZmZXI7XG59XG5fX25hbWUoZW5jb2RlRmVhdHVyZXMsIFwiZW5jb2RlRmVhdHVyZXNcIik7XG5cbi8vIHNyYy91c2VyLWFnZW50LW1pZGRsZXdhcmUudHNcbnZhciB1c2VyQWdlbnRNaWRkbGV3YXJlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgaWYgKCFpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG4gIH1cbiAgY29uc3QgeyBoZWFkZXJzIH0gPSByZXF1ZXN0O1xuICBjb25zdCB1c2VyQWdlbnQgPSBjb250ZXh0Py51c2VyQWdlbnQ/Lm1hcChlc2NhcGVVc2VyQWdlbnQpIHx8IFtdO1xuICBjb25zdCBkZWZhdWx0VXNlckFnZW50ID0gKGF3YWl0IG9wdGlvbnMuZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyKCkpLm1hcChlc2NhcGVVc2VyQWdlbnQpO1xuICBhd2FpdCBjaGVja0ZlYXR1cmVzKGNvbnRleHQsIG9wdGlvbnMsIGFyZ3MpO1xuICBjb25zdCBhd3NDb250ZXh0ID0gY29udGV4dDtcbiAgZGVmYXVsdFVzZXJBZ2VudC5wdXNoKFxuICAgIGBtLyR7ZW5jb2RlRmVhdHVyZXMoXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQ/LmZlYXR1cmVzLCBhd3NDb250ZXh0Ll9fYXdzX3Nka19jb250ZXh0Py5mZWF0dXJlcylcbiAgICApfWBcbiAgKTtcbiAgY29uc3QgY3VzdG9tVXNlckFnZW50ID0gb3B0aW9ucz8uY3VzdG9tVXNlckFnZW50Py5tYXAoZXNjYXBlVXNlckFnZW50KSB8fCBbXTtcbiAgY29uc3QgYXBwSWQgPSBhd2FpdCBvcHRpb25zLnVzZXJBZ2VudEFwcElkKCk7XG4gIGlmIChhcHBJZCkge1xuICAgIGRlZmF1bHRVc2VyQWdlbnQucHVzaChlc2NhcGVVc2VyQWdlbnQoW2BhcHAvJHthcHBJZH1gXSkpO1xuICB9XG4gIGNvbnN0IHByZWZpeCA9ICgwLCBpbXBvcnRfdXRpbF9lbmRwb2ludHMuZ2V0VXNlckFnZW50UHJlZml4KSgpO1xuICBjb25zdCBzZGtVc2VyQWdlbnRWYWx1ZSA9IChwcmVmaXggPyBbcHJlZml4XSA6IFtdKS5jb25jYXQoWy4uLmRlZmF1bHRVc2VyQWdlbnQsIC4uLnVzZXJBZ2VudCwgLi4uY3VzdG9tVXNlckFnZW50XSkuam9pbihTUEFDRSk7XG4gIGNvbnN0IG5vcm1hbFVBVmFsdWUgPSBbXG4gICAgLi4uZGVmYXVsdFVzZXJBZ2VudC5maWx0ZXIoKHNlY3Rpb24pID0+IHNlY3Rpb24uc3RhcnRzV2l0aChcImF3cy1zZGstXCIpKSxcbiAgICAuLi5jdXN0b21Vc2VyQWdlbnRcbiAgXS5qb2luKFNQQUNFKTtcbiAgaWYgKG9wdGlvbnMucnVudGltZSAhPT0gXCJicm93c2VyXCIpIHtcbiAgICBpZiAobm9ybWFsVUFWYWx1ZSkge1xuICAgICAgaGVhZGVyc1tYX0FNWl9VU0VSX0FHRU5UXSA9IGhlYWRlcnNbWF9BTVpfVVNFUl9BR0VOVF0gPyBgJHtoZWFkZXJzW1VTRVJfQUdFTlRdfSAke25vcm1hbFVBVmFsdWV9YCA6IG5vcm1hbFVBVmFsdWU7XG4gICAgfVxuICAgIGhlYWRlcnNbVVNFUl9BR0VOVF0gPSBzZGtVc2VyQWdlbnRWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBoZWFkZXJzW1hfQU1aX1VTRVJfQUdFTlRdID0gc2RrVXNlckFnZW50VmFsdWU7XG4gIH1cbiAgcmV0dXJuIG5leHQoe1xuICAgIC4uLmFyZ3MsXG4gICAgcmVxdWVzdFxuICB9KTtcbn0sIFwidXNlckFnZW50TWlkZGxld2FyZVwiKTtcbnZhciBlc2NhcGVVc2VyQWdlbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh1c2VyQWdlbnRQYWlyKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSB1c2VyQWdlbnRQYWlyWzBdLnNwbGl0KFVBX05BTUVfU0VQQVJBVE9SKS5tYXAoKHBhcnQpID0+IHBhcnQucmVwbGFjZShVQV9OQU1FX0VTQ0FQRV9SRUdFWCwgVUFfRVNDQVBFX0NIQVIpKS5qb2luKFVBX05BTUVfU0VQQVJBVE9SKTtcbiAgY29uc3QgdmVyc2lvbiA9IHVzZXJBZ2VudFBhaXJbMV0/LnJlcGxhY2UoVUFfVkFMVUVfRVNDQVBFX1JFR0VYLCBVQV9FU0NBUEVfQ0hBUik7XG4gIGNvbnN0IHByZWZpeFNlcGFyYXRvckluZGV4ID0gbmFtZS5pbmRleE9mKFVBX05BTUVfU0VQQVJBVE9SKTtcbiAgY29uc3QgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgcHJlZml4U2VwYXJhdG9ySW5kZXgpO1xuICBsZXQgdWFOYW1lID0gbmFtZS5zdWJzdHJpbmcocHJlZml4U2VwYXJhdG9ySW5kZXggKyAxKTtcbiAgaWYgKHByZWZpeCA9PT0gXCJhcGlcIikge1xuICAgIHVhTmFtZSA9IHVhTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIHJldHVybiBbcHJlZml4LCB1YU5hbWUsIHZlcnNpb25dLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAmJiBpdGVtLmxlbmd0aCA+IDApLnJlZHVjZSgoYWNjLCBpdGVtLCBpbmRleCkgPT4ge1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBgJHthY2N9LyR7aXRlbX1gO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGAke2FjY30jJHtpdGVtfWA7XG4gICAgfVxuICB9LCBcIlwiKTtcbn0sIFwiZXNjYXBlVXNlckFnZW50XCIpO1xudmFyIGdldFVzZXJBZ2VudE1pZGRsZXdhcmVPcHRpb25zID0ge1xuICBuYW1lOiBcImdldFVzZXJBZ2VudE1pZGRsZXdhcmVcIixcbiAgc3RlcDogXCJidWlsZFwiLFxuICBwcmlvcml0eTogXCJsb3dcIixcbiAgdGFnczogW1wiU0VUX1VTRVJfQUdFTlRcIiwgXCJVU0VSX0FHRU5UXCJdLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbnZhciBnZXRVc2VyQWdlbnRQbHVnaW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb25maWcpID0+ICh7XG4gIGFwcGx5VG9TdGFjazogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQodXNlckFnZW50TWlkZGxld2FyZShjb25maWcpLCBnZXRVc2VyQWdlbnRNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sIFwiYXBwbHlUb1N0YWNrXCIpXG59KSwgXCJnZXRVc2VyQWdlbnRQbHVnaW5cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBERUZBVUxUX1VBX0FQUF9JRCxcbiAgcmVzb2x2ZVVzZXJBZ2VudENvbmZpZyxcbiAgdXNlckFnZW50TWlkZGxld2FyZSxcbiAgZ2V0VXNlckFnZW50TWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldFVzZXJBZ2VudFBsdWdpblxufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgU2VsZWN0b3JUeXBlOiAoKSA9PiBTZWxlY3RvclR5cGUsXG4gIGJvb2xlYW5TZWxlY3RvcjogKCkgPT4gYm9vbGVhblNlbGVjdG9yLFxuICBudW1iZXJTZWxlY3RvcjogKCkgPT4gbnVtYmVyU2VsZWN0b3Jcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvYm9vbGVhblNlbGVjdG9yLnRzXG52YXIgYm9vbGVhblNlbGVjdG9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqLCBrZXksIHR5cGUpID0+IHtcbiAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgaWYgKG9ialtrZXldID09PSBcInRydWVcIilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKG9ialtrZXldID09PSBcImZhbHNlXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gXCIke2tleX1cIi4gRXhwZWN0ZWQgXCJ0cnVlXCIgb3IgXCJmYWxzZVwiLCBnb3QgJHtvYmpba2V5XX0uYCk7XG59LCBcImJvb2xlYW5TZWxlY3RvclwiKTtcblxuLy8gc3JjL251bWJlclNlbGVjdG9yLnRzXG52YXIgbnVtYmVyU2VsZWN0b3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmosIGtleSwgdHlwZSkgPT4ge1xuICBpZiAoIShrZXkgaW4gb2JqKSlcbiAgICByZXR1cm4gdm9pZCAwO1xuICBjb25zdCBudW1iZXJWYWx1ZSA9IHBhcnNlSW50KG9ialtrZXldLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4obnVtYmVyVmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ2Fubm90IGxvYWQgJHt0eXBlfSAnJHtrZXl9Jy4gRXhwZWN0ZWQgbnVtYmVyLCBnb3QgJyR7b2JqW2tleV19Jy5gKTtcbiAgfVxuICByZXR1cm4gbnVtYmVyVmFsdWU7XG59LCBcIm51bWJlclNlbGVjdG9yXCIpO1xuXG4vLyBzcmMvdHlwZXMudHNcbnZhciBTZWxlY3RvclR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChTZWxlY3RvclR5cGUyKSA9PiB7XG4gIFNlbGVjdG9yVHlwZTJbXCJFTlZcIl0gPSBcImVudlwiO1xuICBTZWxlY3RvclR5cGUyW1wiQ09ORklHXCJdID0gXCJzaGFyZWQgY29uZmlnIGVudHJ5XCI7XG4gIHJldHVybiBTZWxlY3RvclR5cGUyO1xufSkoU2VsZWN0b3JUeXBlIHx8IHt9KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGJvb2xlYW5TZWxlY3RvcixcbiAgbnVtYmVyU2VsZWN0b3IsXG4gIFNlbGVjdG9yVHlwZVxufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgQ09ORklHX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlQ6ICgpID0+IENPTkZJR19VU0VfRFVBTFNUQUNLX0VORFBPSU5ULFxuICBDT05GSUdfVVNFX0ZJUFNfRU5EUE9JTlQ6ICgpID0+IENPTkZJR19VU0VfRklQU19FTkRQT0lOVCxcbiAgREVGQVVMVF9VU0VfRFVBTFNUQUNLX0VORFBPSU5UOiAoKSA9PiBERUZBVUxUX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlQsXG4gIERFRkFVTFRfVVNFX0ZJUFNfRU5EUE9JTlQ6ICgpID0+IERFRkFVTFRfVVNFX0ZJUFNfRU5EUE9JTlQsXG4gIEVOVl9VU0VfRFVBTFNUQUNLX0VORFBPSU5UOiAoKSA9PiBFTlZfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCxcbiAgRU5WX1VTRV9GSVBTX0VORFBPSU5UOiAoKSA9PiBFTlZfVVNFX0ZJUFNfRU5EUE9JTlQsXG4gIE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlM6ICgpID0+IE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMsXG4gIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TOiAoKSA9PiBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUyxcbiAgTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TOiAoKSA9PiBOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsXG4gIE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlM6ICgpID0+IE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsXG4gIFJFR0lPTl9FTlZfTkFNRTogKCkgPT4gUkVHSU9OX0VOVl9OQU1FLFxuICBSRUdJT05fSU5JX05BTUU6ICgpID0+IFJFR0lPTl9JTklfTkFNRSxcbiAgZ2V0UmVnaW9uSW5mbzogKCkgPT4gZ2V0UmVnaW9uSW5mbyxcbiAgcmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZzogKCkgPT4gcmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZyxcbiAgcmVzb2x2ZUVuZHBvaW50c0NvbmZpZzogKCkgPT4gcmVzb2x2ZUVuZHBvaW50c0NvbmZpZyxcbiAgcmVzb2x2ZVJlZ2lvbkNvbmZpZzogKCkgPT4gcmVzb2x2ZVJlZ2lvbkNvbmZpZ1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9lbmRwb2ludHNDb25maWcvTm9kZVVzZUR1YWxzdGFja0VuZHBvaW50Q29uZmlnT3B0aW9ucy50c1xudmFyIGltcG9ydF91dGlsX2NvbmZpZ19wcm92aWRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIEVOVl9VU0VfRFVBTFNUQUNLX0VORFBPSU5UID0gXCJBV1NfVVNFX0RVQUxTVEFDS19FTkRQT0lOVFwiO1xudmFyIENPTkZJR19VU0VfRFVBTFNUQUNLX0VORFBPSU5UID0gXCJ1c2VfZHVhbHN0YWNrX2VuZHBvaW50XCI7XG52YXIgREVGQVVMVF9VU0VfRFVBTFNUQUNLX0VORFBPSU5UID0gZmFsc2U7XG52YXIgTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+ICgwLCBpbXBvcnRfdXRpbF9jb25maWdfcHJvdmlkZXIuYm9vbGVhblNlbGVjdG9yKShlbnYsIEVOVl9VU0VfRFVBTFNUQUNLX0VORFBPSU5ULCBpbXBvcnRfdXRpbF9jb25maWdfcHJvdmlkZXIuU2VsZWN0b3JUeXBlLkVOViksXG4gIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+ICgwLCBpbXBvcnRfdXRpbF9jb25maWdfcHJvdmlkZXIuYm9vbGVhblNlbGVjdG9yKShwcm9maWxlLCBDT05GSUdfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCwgaW1wb3J0X3V0aWxfY29uZmlnX3Byb3ZpZGVyLlNlbGVjdG9yVHlwZS5DT05GSUcpLFxuICBkZWZhdWx0OiBmYWxzZVxufTtcblxuLy8gc3JjL2VuZHBvaW50c0NvbmZpZy9Ob2RlVXNlRmlwc0VuZHBvaW50Q29uZmlnT3B0aW9ucy50c1xuXG52YXIgRU5WX1VTRV9GSVBTX0VORFBPSU5UID0gXCJBV1NfVVNFX0ZJUFNfRU5EUE9JTlRcIjtcbnZhciBDT05GSUdfVVNFX0ZJUFNfRU5EUE9JTlQgPSBcInVzZV9maXBzX2VuZHBvaW50XCI7XG52YXIgREVGQVVMVF9VU0VfRklQU19FTkRQT0lOVCA9IGZhbHNlO1xudmFyIE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMgPSB7XG4gIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gKDAsIGltcG9ydF91dGlsX2NvbmZpZ19wcm92aWRlci5ib29sZWFuU2VsZWN0b3IpKGVudiwgRU5WX1VTRV9GSVBTX0VORFBPSU5ULCBpbXBvcnRfdXRpbF9jb25maWdfcHJvdmlkZXIuU2VsZWN0b3JUeXBlLkVOViksXG4gIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+ICgwLCBpbXBvcnRfdXRpbF9jb25maWdfcHJvdmlkZXIuYm9vbGVhblNlbGVjdG9yKShwcm9maWxlLCBDT05GSUdfVVNFX0ZJUFNfRU5EUE9JTlQsIGltcG9ydF91dGlsX2NvbmZpZ19wcm92aWRlci5TZWxlY3RvclR5cGUuQ09ORklHKSxcbiAgZGVmYXVsdDogZmFsc2Vcbn07XG5cbi8vIHNyYy9lbmRwb2ludHNDb25maWcvcmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZy50c1xudmFyIGltcG9ydF91dGlsX21pZGRsZXdhcmUgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIik7XG52YXIgcmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiB7XG4gIGNvbnN0IHsgdGxzLCBlbmRwb2ludCwgdXJsUGFyc2VyLCB1c2VEdWFsc3RhY2tFbmRwb2ludCB9ID0gaW5wdXQ7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGlucHV0LCB7XG4gICAgdGxzOiB0bHMgPz8gdHJ1ZSxcbiAgICBlbmRwb2ludDogKDAsIGltcG9ydF91dGlsX21pZGRsZXdhcmUubm9ybWFsaXplUHJvdmlkZXIpKHR5cGVvZiBlbmRwb2ludCA9PT0gXCJzdHJpbmdcIiA/IHVybFBhcnNlcihlbmRwb2ludCkgOiBlbmRwb2ludCksXG4gICAgaXNDdXN0b21FbmRwb2ludDogdHJ1ZSxcbiAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogKDAsIGltcG9ydF91dGlsX21pZGRsZXdhcmUubm9ybWFsaXplUHJvdmlkZXIpKHVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlKVxuICB9KTtcbn0sIFwicmVzb2x2ZUN1c3RvbUVuZHBvaW50c0NvbmZpZ1wiKTtcblxuLy8gc3JjL2VuZHBvaW50c0NvbmZpZy9yZXNvbHZlRW5kcG9pbnRzQ29uZmlnLnRzXG5cblxuLy8gc3JjL2VuZHBvaW50c0NvbmZpZy91dGlscy9nZXRFbmRwb2ludEZyb21SZWdpb24udHNcbnZhciBnZXRFbmRwb2ludEZyb21SZWdpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCkgPT4ge1xuICBjb25zdCB7IHRscyA9IHRydWUgfSA9IGlucHV0O1xuICBjb25zdCByZWdpb24gPSBhd2FpdCBpbnB1dC5yZWdpb24oKTtcbiAgY29uc3QgZG5zSG9zdFJlZ2V4ID0gbmV3IFJlZ0V4cCgvXihbYS16QS1aMC05XXxbYS16QS1aMC05XVthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKSQvKTtcbiAgaWYgKCFkbnNIb3N0UmVnZXgudGVzdChyZWdpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByZWdpb24gaW4gY2xpZW50IGNvbmZpZ1wiKTtcbiAgfVxuICBjb25zdCB1c2VEdWFsc3RhY2tFbmRwb2ludCA9IGF3YWl0IGlucHV0LnVzZUR1YWxzdGFja0VuZHBvaW50KCk7XG4gIGNvbnN0IHVzZUZpcHNFbmRwb2ludCA9IGF3YWl0IGlucHV0LnVzZUZpcHNFbmRwb2ludCgpO1xuICBjb25zdCB7IGhvc3RuYW1lIH0gPSBhd2FpdCBpbnB1dC5yZWdpb25JbmZvUHJvdmlkZXIocmVnaW9uLCB7IHVzZUR1YWxzdGFja0VuZHBvaW50LCB1c2VGaXBzRW5kcG9pbnQgfSkgPz8ge307XG4gIGlmICghaG9zdG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBob3N0bmFtZSBmcm9tIGNsaWVudCBjb25maWdcIik7XG4gIH1cbiAgcmV0dXJuIGlucHV0LnVybFBhcnNlcihgJHt0bHMgPyBcImh0dHBzOlwiIDogXCJodHRwOlwifS8vJHtob3N0bmFtZX1gKTtcbn0sIFwiZ2V0RW5kcG9pbnRGcm9tUmVnaW9uXCIpO1xuXG4vLyBzcmMvZW5kcG9pbnRzQ29uZmlnL3Jlc29sdmVFbmRwb2ludHNDb25maWcudHNcbnZhciByZXNvbHZlRW5kcG9pbnRzQ29uZmlnID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IHtcbiAgY29uc3QgdXNlRHVhbHN0YWNrRW5kcG9pbnQgPSAoMCwgaW1wb3J0X3V0aWxfbWlkZGxld2FyZS5ub3JtYWxpemVQcm92aWRlcikoaW5wdXQudXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gZmFsc2UpO1xuICBjb25zdCB7IGVuZHBvaW50LCB1c2VGaXBzRW5kcG9pbnQsIHVybFBhcnNlciwgdGxzIH0gPSBpbnB1dDtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oaW5wdXQsIHtcbiAgICB0bHM6IHRscyA/PyB0cnVlLFxuICAgIGVuZHBvaW50OiBlbmRwb2ludCA/ICgwLCBpbXBvcnRfdXRpbF9taWRkbGV3YXJlLm5vcm1hbGl6ZVByb3ZpZGVyKSh0eXBlb2YgZW5kcG9pbnQgPT09IFwic3RyaW5nXCIgPyB1cmxQYXJzZXIoZW5kcG9pbnQpIDogZW5kcG9pbnQpIDogKCkgPT4gZ2V0RW5kcG9pbnRGcm9tUmVnaW9uKHsgLi4uaW5wdXQsIHVzZUR1YWxzdGFja0VuZHBvaW50LCB1c2VGaXBzRW5kcG9pbnQgfSksXG4gICAgaXNDdXN0b21FbmRwb2ludDogISFlbmRwb2ludCxcbiAgICB1c2VEdWFsc3RhY2tFbmRwb2ludFxuICB9KTtcbn0sIFwicmVzb2x2ZUVuZHBvaW50c0NvbmZpZ1wiKTtcblxuLy8gc3JjL3JlZ2lvbkNvbmZpZy9jb25maWcudHNcbnZhciBSRUdJT05fRU5WX05BTUUgPSBcIkFXU19SRUdJT05cIjtcbnZhciBSRUdJT05fSU5JX05BTUUgPSBcInJlZ2lvblwiO1xudmFyIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IGVudltSRUdJT05fRU5WX05BTUVdLFxuICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW1JFR0lPTl9JTklfTkFNRV0sXG4gIGRlZmF1bHQ6ICgpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb24gaXMgbWlzc2luZ1wiKTtcbiAgfVxufTtcbnZhciBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TID0ge1xuICBwcmVmZXJyZWRGaWxlOiBcImNyZWRlbnRpYWxzXCJcbn07XG5cbi8vIHNyYy9yZWdpb25Db25maWcvaXNGaXBzUmVnaW9uLnRzXG52YXIgaXNGaXBzUmVnaW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocmVnaW9uKSA9PiB0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiICYmIChyZWdpb24uc3RhcnRzV2l0aChcImZpcHMtXCIpIHx8IHJlZ2lvbi5lbmRzV2l0aChcIi1maXBzXCIpKSwgXCJpc0ZpcHNSZWdpb25cIik7XG5cbi8vIHNyYy9yZWdpb25Db25maWcvZ2V0UmVhbFJlZ2lvbi50c1xudmFyIGdldFJlYWxSZWdpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZWdpb24pID0+IGlzRmlwc1JlZ2lvbihyZWdpb24pID8gW1wiZmlwcy1hd3MtZ2xvYmFsXCIsIFwiYXdzLWZpcHNcIl0uaW5jbHVkZXMocmVnaW9uKSA/IFwidXMtZWFzdC0xXCIgOiByZWdpb24ucmVwbGFjZSgvZmlwcy0oZGtyLXxwcm9kLSk/fC1maXBzLywgXCJcIikgOiByZWdpb24sIFwiZ2V0UmVhbFJlZ2lvblwiKTtcblxuLy8gc3JjL3JlZ2lvbkNvbmZpZy9yZXNvbHZlUmVnaW9uQ29uZmlnLnRzXG52YXIgcmVzb2x2ZVJlZ2lvbkNvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiB7XG4gIGNvbnN0IHsgcmVnaW9uLCB1c2VGaXBzRW5kcG9pbnQgfSA9IGlucHV0O1xuICBpZiAoIXJlZ2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlZ2lvbiBpcyBtaXNzaW5nXCIpO1xuICB9XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGlucHV0LCB7XG4gICAgcmVnaW9uOiBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2V0UmVhbFJlZ2lvbihyZWdpb24pO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvdmlkZWRSZWdpb24gPSBhd2FpdCByZWdpb24oKTtcbiAgICAgIHJldHVybiBnZXRSZWFsUmVnaW9uKHByb3ZpZGVkUmVnaW9uKTtcbiAgICB9LFxuICAgIHVzZUZpcHNFbmRwb2ludDogYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvdmlkZWRSZWdpb24gPSB0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiID8gcmVnaW9uIDogYXdhaXQgcmVnaW9uKCk7XG4gICAgICBpZiAoaXNGaXBzUmVnaW9uKHByb3ZpZGVkUmVnaW9uKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdXNlRmlwc0VuZHBvaW50ICE9PSBcImZ1bmN0aW9uXCIgPyBQcm9taXNlLnJlc29sdmUoISF1c2VGaXBzRW5kcG9pbnQpIDogdXNlRmlwc0VuZHBvaW50KCk7XG4gICAgfVxuICB9KTtcbn0sIFwicmVzb2x2ZVJlZ2lvbkNvbmZpZ1wiKTtcblxuLy8gc3JjL3JlZ2lvbkluZm8vZ2V0SG9zdG5hbWVGcm9tVmFyaWFudHMudHNcbnZhciBnZXRIb3N0bmFtZUZyb21WYXJpYW50cyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhcmlhbnRzID0gW10sIHsgdXNlRmlwc0VuZHBvaW50LCB1c2VEdWFsc3RhY2tFbmRwb2ludCB9KSA9PiB2YXJpYW50cy5maW5kKFxuICAoeyB0YWdzIH0pID0+IHVzZUZpcHNFbmRwb2ludCA9PT0gdGFncy5pbmNsdWRlcyhcImZpcHNcIikgJiYgdXNlRHVhbHN0YWNrRW5kcG9pbnQgPT09IHRhZ3MuaW5jbHVkZXMoXCJkdWFsc3RhY2tcIilcbik/Lmhvc3RuYW1lLCBcImdldEhvc3RuYW1lRnJvbVZhcmlhbnRzXCIpO1xuXG4vLyBzcmMvcmVnaW9uSW5mby9nZXRSZXNvbHZlZEhvc3RuYW1lLnRzXG52YXIgZ2V0UmVzb2x2ZWRIb3N0bmFtZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHJlc29sdmVkUmVnaW9uLCB7IHJlZ2lvbkhvc3RuYW1lLCBwYXJ0aXRpb25Ib3N0bmFtZSB9KSA9PiByZWdpb25Ib3N0bmFtZSA/IHJlZ2lvbkhvc3RuYW1lIDogcGFydGl0aW9uSG9zdG5hbWUgPyBwYXJ0aXRpb25Ib3N0bmFtZS5yZXBsYWNlKFwie3JlZ2lvbn1cIiwgcmVzb2x2ZWRSZWdpb24pIDogdm9pZCAwLCBcImdldFJlc29sdmVkSG9zdG5hbWVcIik7XG5cbi8vIHNyYy9yZWdpb25JbmZvL2dldFJlc29sdmVkUGFydGl0aW9uLnRzXG52YXIgZ2V0UmVzb2x2ZWRQYXJ0aXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZWdpb24sIHsgcGFydGl0aW9uSGFzaCB9KSA9PiBPYmplY3Qua2V5cyhwYXJ0aXRpb25IYXNoIHx8IHt9KS5maW5kKChrZXkpID0+IHBhcnRpdGlvbkhhc2hba2V5XS5yZWdpb25zLmluY2x1ZGVzKHJlZ2lvbikpID8/IFwiYXdzXCIsIFwiZ2V0UmVzb2x2ZWRQYXJ0aXRpb25cIik7XG5cbi8vIHNyYy9yZWdpb25JbmZvL2dldFJlc29sdmVkU2lnbmluZ1JlZ2lvbi50c1xudmFyIGdldFJlc29sdmVkU2lnbmluZ1JlZ2lvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGhvc3RuYW1lLCB7IHNpZ25pbmdSZWdpb24sIHJlZ2lvblJlZ2V4LCB1c2VGaXBzRW5kcG9pbnQgfSkgPT4ge1xuICBpZiAoc2lnbmluZ1JlZ2lvbikge1xuICAgIHJldHVybiBzaWduaW5nUmVnaW9uO1xuICB9IGVsc2UgaWYgKHVzZUZpcHNFbmRwb2ludCkge1xuICAgIGNvbnN0IHJlZ2lvblJlZ2V4SnMgPSByZWdpb25SZWdleC5yZXBsYWNlKFwiXFxcXFxcXFxcIiwgXCJcXFxcXCIpLnJlcGxhY2UoL15cXF4vZywgXCJcXFxcLlwiKS5yZXBsYWNlKC9cXCQkL2csIFwiXFxcXC5cIik7XG4gICAgY29uc3QgcmVnaW9uUmVnZXhtYXRjaEFycmF5ID0gaG9zdG5hbWUubWF0Y2gocmVnaW9uUmVnZXhKcyk7XG4gICAgaWYgKHJlZ2lvblJlZ2V4bWF0Y2hBcnJheSkge1xuICAgICAgcmV0dXJuIHJlZ2lvblJlZ2V4bWF0Y2hBcnJheVswXS5zbGljZSgxLCAtMSk7XG4gICAgfVxuICB9XG59LCBcImdldFJlc29sdmVkU2lnbmluZ1JlZ2lvblwiKTtcblxuLy8gc3JjL3JlZ2lvbkluZm8vZ2V0UmVnaW9uSW5mby50c1xudmFyIGdldFJlZ2lvbkluZm8gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZWdpb24sIHtcbiAgdXNlRmlwc0VuZHBvaW50ID0gZmFsc2UsXG4gIHVzZUR1YWxzdGFja0VuZHBvaW50ID0gZmFsc2UsXG4gIHNpZ25pbmdTZXJ2aWNlLFxuICByZWdpb25IYXNoLFxuICBwYXJ0aXRpb25IYXNoXG59KSA9PiB7XG4gIGNvbnN0IHBhcnRpdGlvbiA9IGdldFJlc29sdmVkUGFydGl0aW9uKHJlZ2lvbiwgeyBwYXJ0aXRpb25IYXNoIH0pO1xuICBjb25zdCByZXNvbHZlZFJlZ2lvbiA9IHJlZ2lvbiBpbiByZWdpb25IYXNoID8gcmVnaW9uIDogcGFydGl0aW9uSGFzaFtwYXJ0aXRpb25dPy5lbmRwb2ludCA/PyByZWdpb247XG4gIGNvbnN0IGhvc3RuYW1lT3B0aW9ucyA9IHsgdXNlRmlwc0VuZHBvaW50LCB1c2VEdWFsc3RhY2tFbmRwb2ludCB9O1xuICBjb25zdCByZWdpb25Ib3N0bmFtZSA9IGdldEhvc3RuYW1lRnJvbVZhcmlhbnRzKHJlZ2lvbkhhc2hbcmVzb2x2ZWRSZWdpb25dPy52YXJpYW50cywgaG9zdG5hbWVPcHRpb25zKTtcbiAgY29uc3QgcGFydGl0aW9uSG9zdG5hbWUgPSBnZXRIb3N0bmFtZUZyb21WYXJpYW50cyhwYXJ0aXRpb25IYXNoW3BhcnRpdGlvbl0/LnZhcmlhbnRzLCBob3N0bmFtZU9wdGlvbnMpO1xuICBjb25zdCBob3N0bmFtZSA9IGdldFJlc29sdmVkSG9zdG5hbWUocmVzb2x2ZWRSZWdpb24sIHsgcmVnaW9uSG9zdG5hbWUsIHBhcnRpdGlvbkhvc3RuYW1lIH0pO1xuICBpZiAoaG9zdG5hbWUgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRW5kcG9pbnQgcmVzb2x1dGlvbiBmYWlsZWQgZm9yOiAke3sgcmVzb2x2ZWRSZWdpb24sIHVzZUZpcHNFbmRwb2ludCwgdXNlRHVhbHN0YWNrRW5kcG9pbnQgfX1gKTtcbiAgfVxuICBjb25zdCBzaWduaW5nUmVnaW9uID0gZ2V0UmVzb2x2ZWRTaWduaW5nUmVnaW9uKGhvc3RuYW1lLCB7XG4gICAgc2lnbmluZ1JlZ2lvbjogcmVnaW9uSGFzaFtyZXNvbHZlZFJlZ2lvbl0/LnNpZ25pbmdSZWdpb24sXG4gICAgcmVnaW9uUmVnZXg6IHBhcnRpdGlvbkhhc2hbcGFydGl0aW9uXS5yZWdpb25SZWdleCxcbiAgICB1c2VGaXBzRW5kcG9pbnRcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcGFydGl0aW9uLFxuICAgIHNpZ25pbmdTZXJ2aWNlLFxuICAgIGhvc3RuYW1lLFxuICAgIC4uLnNpZ25pbmdSZWdpb24gJiYgeyBzaWduaW5nUmVnaW9uIH0sXG4gICAgLi4ucmVnaW9uSGFzaFtyZXNvbHZlZFJlZ2lvbl0/LnNpZ25pbmdTZXJ2aWNlICYmIHtcbiAgICAgIHNpZ25pbmdTZXJ2aWNlOiByZWdpb25IYXNoW3Jlc29sdmVkUmVnaW9uXS5zaWduaW5nU2VydmljZVxuICAgIH1cbiAgfTtcbn0sIFwiZ2V0UmVnaW9uSW5mb1wiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVOVl9VU0VfRFVBTFNUQUNLX0VORFBPSU5ULFxuICBDT05GSUdfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCxcbiAgREVGQVVMVF9VU0VfRFVBTFNUQUNLX0VORFBPSU5ULFxuICBOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsXG4gIEVOVl9VU0VfRklQU19FTkRQT0lOVCxcbiAgQ09ORklHX1VTRV9GSVBTX0VORFBPSU5ULFxuICBERUZBVUxUX1VTRV9GSVBTX0VORFBPSU5ULFxuICBOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLFxuICByZXNvbHZlQ3VzdG9tRW5kcG9pbnRzQ29uZmlnLFxuICByZXNvbHZlRW5kcG9pbnRzQ29uZmlnLFxuICBSRUdJT05fRU5WX05BTUUsXG4gIFJFR0lPTl9JTklfTkFNRSxcbiAgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsXG4gIE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMsXG4gIHJlc29sdmVSZWdpb25Db25maWcsXG4gIGdldFJlZ2lvbkluZm9cbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlOiAoKSA9PiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZSxcbiAgY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zOiAoKSA9PiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldENvbnRlbnRMZW5ndGhQbHVnaW46ICgpID0+IGdldENvbnRlbnRMZW5ndGhQbHVnaW5cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbnZhciBDT05URU5UX0xFTkdUSF9IRUFERVIgPSBcImNvbnRlbnQtbGVuZ3RoXCI7XG5mdW5jdGlvbiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZShib2R5TGVuZ3RoQ2hlY2tlcikge1xuICByZXR1cm4gKG5leHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGFyZ3MucmVxdWVzdDtcbiAgICBpZiAoaW1wb3J0X3Byb3RvY29sX2h0dHAuSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgY29uc3QgeyBib2R5LCBoZWFkZXJzIH0gPSByZXF1ZXN0O1xuICAgICAgaWYgKGJvZHkgJiYgT2JqZWN0LmtleXMoaGVhZGVycykubWFwKChzdHIpID0+IHN0ci50b0xvd2VyQ2FzZSgpKS5pbmRleE9mKENPTlRFTlRfTEVOR1RIX0hFQURFUikgPT09IC0xKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbGVuZ3RoID0gYm9keUxlbmd0aENoZWNrZXIoYm9keSk7XG4gICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge1xuICAgICAgICAgICAgLi4ucmVxdWVzdC5oZWFkZXJzLFxuICAgICAgICAgICAgW0NPTlRFTlRfTEVOR1RIX0hFQURFUl06IFN0cmluZyhsZW5ndGgpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAuLi5hcmdzLFxuICAgICAgcmVxdWVzdFxuICAgIH0pO1xuICB9O1xufVxuX19uYW1lKGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlLCBcImNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlXCIpO1xudmFyIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJidWlsZFwiLFxuICB0YWdzOiBbXCJTRVRfQ09OVEVOVF9MRU5HVEhcIiwgXCJDT05URU5UX0xFTkdUSFwiXSxcbiAgbmFtZTogXCJjb250ZW50TGVuZ3RoTWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbnZhciBnZXRDb250ZW50TGVuZ3RoUGx1Z2luID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQoY29udGVudExlbmd0aE1pZGRsZXdhcmUob3B0aW9ucy5ib2R5TGVuZ3RoQ2hlY2tlciksIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH1cbn0pLCBcImdldENvbnRlbnRMZW5ndGhQbHVnaW5cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjb250ZW50TGVuZ3RoTWlkZGxld2FyZSxcbiAgY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zLFxuICBnZXRDb250ZW50TGVuZ3RoUGx1Z2luXG59KTtcblxuIiwgImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcblxubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgIHBvb2xQdHIgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJuZHM4UG9vbC5zbGljZShwb29sUHRyLCBwb29sUHRyICs9IDE2KTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsICJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCAiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICByZXR1cm4gYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwgImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnOyAvLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbmxldCBfbm9kZUlkO1xuXG5sZXQgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG5sZXQgX2xhc3RNU2VjcyA9IDA7XG5sZXQgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGxldCBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICBjb25zdCBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICBsZXQgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOyAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcblxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICBjb25zdCBzZWVkQnl0ZXMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtzZWVkQnl0ZXNbMF0gfCAweDAxLCBzZWVkQnl0ZXNbMV0sIHNlZWRCeXRlc1syXSwgc2VlZEJ5dGVzWzNdLCBzZWVkQnl0ZXNbNF0sIHNlZWRCeXRlc1s1XV07XG4gICAgfVxuXG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxXG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG4gICAgfVxuICB9IC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuXG5cbiAgbGV0IG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IERhdGUubm93KCk7IC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcblxuICBsZXQgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7IC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcblxuICBjb25zdCBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIGNvbnN0IHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjsgLy8gYHRpbWVfbWlkYFxuXG4gIGNvbnN0IHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjsgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcblxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG5cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7IC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDsgLy8gYGNsb2NrX3NlcV9sb3dgXG5cbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmOyAvLyBgbm9kZWBcblxuICBmb3IgKGxldCBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgfHwgdW5zYWZlU3RyaW5naWZ5KGIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2MTsiLCAiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiLCAiaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWVzcGFjZSA9IHBhcnNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCAiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cblxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1kNTsiLCAiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbmNvbnN0IHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiLCAiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEOiBjcnlwdG8ucmFuZG9tVVVJRFxufTsiLCAiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwgImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcywgJ3V0ZjgnKTtcbiAgfVxuXG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYTE7IiwgImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbmNvbnN0IHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7IiwgImV4cG9ydCBkZWZhdWx0ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnOyIsICJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbjsiLCAiZXhwb3J0IHsgZGVmYXVsdCBhcyB2MSB9IGZyb20gJy4vdjEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MyB9IGZyb20gJy4vdjMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NCB9IGZyb20gJy4vdjQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NSB9IGZyb20gJy4vdjUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOSUwgfSBmcm9tICcuL25pbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWxpZGF0ZSB9IGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlIH0gZnJvbSAnLi9wYXJzZS5qcyc7IiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBpc0Jyb3dzZXJOZXR3b3JrRXJyb3I6ICgpID0+IGlzQnJvd3Nlck5ldHdvcmtFcnJvcixcbiAgaXNDbG9ja1NrZXdDb3JyZWN0ZWRFcnJvcjogKCkgPT4gaXNDbG9ja1NrZXdDb3JyZWN0ZWRFcnJvcixcbiAgaXNDbG9ja1NrZXdFcnJvcjogKCkgPT4gaXNDbG9ja1NrZXdFcnJvcixcbiAgaXNSZXRyeWFibGVCeVRyYWl0OiAoKSA9PiBpc1JldHJ5YWJsZUJ5VHJhaXQsXG4gIGlzU2VydmVyRXJyb3I6ICgpID0+IGlzU2VydmVyRXJyb3IsXG4gIGlzVGhyb3R0bGluZ0Vycm9yOiAoKSA9PiBpc1Rocm90dGxpbmdFcnJvcixcbiAgaXNUcmFuc2llbnRFcnJvcjogKCkgPT4gaXNUcmFuc2llbnRFcnJvclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9jb25zdGFudHMudHNcbnZhciBDTE9DS19TS0VXX0VSUk9SX0NPREVTID0gW1xuICBcIkF1dGhGYWlsdXJlXCIsXG4gIFwiSW52YWxpZFNpZ25hdHVyZUV4Y2VwdGlvblwiLFxuICBcIlJlcXVlc3RFeHBpcmVkXCIsXG4gIFwiUmVxdWVzdEluVGhlRnV0dXJlXCIsXG4gIFwiUmVxdWVzdFRpbWVUb29Ta2V3ZWRcIixcbiAgXCJTaWduYXR1cmVEb2VzTm90TWF0Y2hcIlxuXTtcbnZhciBUSFJPVFRMSU5HX0VSUk9SX0NPREVTID0gW1xuICBcIkJhbmR3aWR0aExpbWl0RXhjZWVkZWRcIixcbiAgXCJFQzJUaHJvdHRsZWRFeGNlcHRpb25cIixcbiAgXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gIFwiUHJpb3JSZXF1ZXN0Tm90Q29tcGxldGVcIixcbiAgXCJQcm92aXNpb25lZFRocm91Z2hwdXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICBcIlJlcXVlc3RMaW1pdEV4Y2VlZGVkXCIsXG4gIFwiUmVxdWVzdFRocm90dGxlZFwiLFxuICBcIlJlcXVlc3RUaHJvdHRsZWRFeGNlcHRpb25cIixcbiAgXCJTbG93RG93blwiLFxuICBcIlRocm90dGxlZEV4Y2VwdGlvblwiLFxuICBcIlRocm90dGxpbmdcIixcbiAgXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCIsXG4gIFwiVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uXCIsXG4gIFwiVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uXCJcbiAgLy8gRHluYW1vREJcbl07XG52YXIgVFJBTlNJRU5UX0VSUk9SX0NPREVTID0gW1wiVGltZW91dEVycm9yXCIsIFwiUmVxdWVzdFRpbWVvdXRcIiwgXCJSZXF1ZXN0VGltZW91dEV4Y2VwdGlvblwiXTtcbnZhciBUUkFOU0lFTlRfRVJST1JfU1RBVFVTX0NPREVTID0gWzUwMCwgNTAyLCA1MDMsIDUwNF07XG52YXIgTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMgPSBbXCJFQ09OTlJFU0VUXCIsIFwiRUNPTk5SRUZVU0VEXCIsIFwiRVBJUEVcIiwgXCJFVElNRURPVVRcIl07XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGlzUmV0cnlhYmxlQnlUcmFpdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVycm9yKSA9PiBlcnJvci4kcmV0cnlhYmxlICE9PSB2b2lkIDAsIFwiaXNSZXRyeWFibGVCeVRyYWl0XCIpO1xudmFyIGlzQ2xvY2tTa2V3RXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnJvcikgPT4gQ0xPQ0tfU0tFV19FUlJPUl9DT0RFUy5pbmNsdWRlcyhlcnJvci5uYW1lKSwgXCJpc0Nsb2NrU2tld0Vycm9yXCIpO1xudmFyIGlzQ2xvY2tTa2V3Q29ycmVjdGVkRXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnJvcikgPT4gZXJyb3IuJG1ldGFkYXRhPy5jbG9ja1NrZXdDb3JyZWN0ZWQsIFwiaXNDbG9ja1NrZXdDb3JyZWN0ZWRFcnJvclwiKTtcbnZhciBpc0Jyb3dzZXJOZXR3b3JrRXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnJvcikgPT4ge1xuICBjb25zdCBlcnJvck1lc3NhZ2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgIFwiRmFpbGVkIHRvIGZldGNoXCIsXG4gICAgLy8gQ2hyb21lXG4gICAgXCJOZXR3b3JrRXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGZldGNoIHJlc291cmNlXCIsXG4gICAgLy8gRmlyZWZveFxuICAgIFwiVGhlIEludGVybmV0IGNvbm5lY3Rpb24gYXBwZWFycyB0byBiZSBvZmZsaW5lXCIsXG4gICAgLy8gU2FmYXJpIDE2XG4gICAgXCJMb2FkIGZhaWxlZFwiLFxuICAgIC8vIFNhZmFyaSAxNytcbiAgICBcIk5ldHdvcmsgcmVxdWVzdCBmYWlsZWRcIlxuICAgIC8vIGBjcm9zcy1mZXRjaGBcbiAgXSk7XG4gIGNvbnN0IGlzVmFsaWQgPSBlcnJvciAmJiBlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBlcnJvck1lc3NhZ2VzLmhhcyhlcnJvci5tZXNzYWdlKTtcbn0sIFwiaXNCcm93c2VyTmV0d29ya0Vycm9yXCIpO1xudmFyIGlzVGhyb3R0bGluZ0Vycm9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXJyb3IpID0+IGVycm9yLiRtZXRhZGF0YT8uaHR0cFN0YXR1c0NvZGUgPT09IDQyOSB8fCBUSFJPVFRMSU5HX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yLm5hbWUpIHx8IGVycm9yLiRyZXRyeWFibGU/LnRocm90dGxpbmcgPT0gdHJ1ZSwgXCJpc1Rocm90dGxpbmdFcnJvclwiKTtcbnZhciBpc1RyYW5zaWVudEVycm9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXJyb3IsIGRlcHRoID0gMCkgPT4gaXNDbG9ja1NrZXdDb3JyZWN0ZWRFcnJvcihlcnJvcikgfHwgVFJBTlNJRU5UX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yLm5hbWUpIHx8IE5PREVKU19USU1FT1VUX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yPy5jb2RlIHx8IFwiXCIpIHx8IFRSQU5TSUVOVF9FUlJPUl9TVEFUVVNfQ09ERVMuaW5jbHVkZXMoZXJyb3IuJG1ldGFkYXRhPy5odHRwU3RhdHVzQ29kZSB8fCAwKSB8fCBpc0Jyb3dzZXJOZXR3b3JrRXJyb3IoZXJyb3IpIHx8IGVycm9yLmNhdXNlICE9PSB2b2lkIDAgJiYgZGVwdGggPD0gMTAgJiYgaXNUcmFuc2llbnRFcnJvcihlcnJvci5jYXVzZSwgZGVwdGggKyAxKSwgXCJpc1RyYW5zaWVudEVycm9yXCIpO1xudmFyIGlzU2VydmVyRXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnJvcikgPT4ge1xuICBpZiAoZXJyb3IuJG1ldGFkYXRhPy5odHRwU3RhdHVzQ29kZSAhPT0gdm9pZCAwKSB7XG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9IGVycm9yLiRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZTtcbiAgICBpZiAoNTAwIDw9IHN0YXR1c0NvZGUgJiYgc3RhdHVzQ29kZSA8PSA1OTkgJiYgIWlzVHJhbnNpZW50RXJyb3IoZXJyb3IpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0sIFwiaXNTZXJ2ZXJFcnJvclwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUmV0cnlhYmxlQnlUcmFpdCxcbiAgaXNDbG9ja1NrZXdFcnJvcixcbiAgaXNDbG9ja1NrZXdDb3JyZWN0ZWRFcnJvcixcbiAgaXNCcm93c2VyTmV0d29ya0Vycm9yLFxuICBpc1Rocm90dGxpbmdFcnJvcixcbiAgaXNUcmFuc2llbnRFcnJvcixcbiAgaXNTZXJ2ZXJFcnJvclxufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgQWRhcHRpdmVSZXRyeVN0cmF0ZWd5OiAoKSA9PiBBZGFwdGl2ZVJldHJ5U3RyYXRlZ3ksXG4gIENvbmZpZ3VyZWRSZXRyeVN0cmF0ZWd5OiAoKSA9PiBDb25maWd1cmVkUmV0cnlTdHJhdGVneSxcbiAgREVGQVVMVF9NQVhfQVRURU1QVFM6ICgpID0+IERFRkFVTFRfTUFYX0FUVEVNUFRTLFxuICBERUZBVUxUX1JFVFJZX0RFTEFZX0JBU0U6ICgpID0+IERFRkFVTFRfUkVUUllfREVMQVlfQkFTRSxcbiAgREVGQVVMVF9SRVRSWV9NT0RFOiAoKSA9PiBERUZBVUxUX1JFVFJZX01PREUsXG4gIERlZmF1bHRSYXRlTGltaXRlcjogKCkgPT4gRGVmYXVsdFJhdGVMaW1pdGVyLFxuICBJTklUSUFMX1JFVFJZX1RPS0VOUzogKCkgPT4gSU5JVElBTF9SRVRSWV9UT0tFTlMsXG4gIElOVk9DQVRJT05fSURfSEVBREVSOiAoKSA9PiBJTlZPQ0FUSU9OX0lEX0hFQURFUixcbiAgTUFYSU1VTV9SRVRSWV9ERUxBWTogKCkgPT4gTUFYSU1VTV9SRVRSWV9ERUxBWSxcbiAgTk9fUkVUUllfSU5DUkVNRU5UOiAoKSA9PiBOT19SRVRSWV9JTkNSRU1FTlQsXG4gIFJFUVVFU1RfSEVBREVSOiAoKSA9PiBSRVFVRVNUX0hFQURFUixcbiAgUkVUUllfQ09TVDogKCkgPT4gUkVUUllfQ09TVCxcbiAgUkVUUllfTU9ERVM6ICgpID0+IFJFVFJZX01PREVTLFxuICBTdGFuZGFyZFJldHJ5U3RyYXRlZ3k6ICgpID0+IFN0YW5kYXJkUmV0cnlTdHJhdGVneSxcbiAgVEhST1RUTElOR19SRVRSWV9ERUxBWV9CQVNFOiAoKSA9PiBUSFJPVFRMSU5HX1JFVFJZX0RFTEFZX0JBU0UsXG4gIFRJTUVPVVRfUkVUUllfQ09TVDogKCkgPT4gVElNRU9VVF9SRVRSWV9DT1NUXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2NvbmZpZy50c1xudmFyIFJFVFJZX01PREVTID0gLyogQF9fUFVSRV9fICovICgoUkVUUllfTU9ERVMyKSA9PiB7XG4gIFJFVFJZX01PREVTMltcIlNUQU5EQVJEXCJdID0gXCJzdGFuZGFyZFwiO1xuICBSRVRSWV9NT0RFUzJbXCJBREFQVElWRVwiXSA9IFwiYWRhcHRpdmVcIjtcbiAgcmV0dXJuIFJFVFJZX01PREVTMjtcbn0pKFJFVFJZX01PREVTIHx8IHt9KTtcbnZhciBERUZBVUxUX01BWF9BVFRFTVBUUyA9IDM7XG52YXIgREVGQVVMVF9SRVRSWV9NT0RFID0gXCJzdGFuZGFyZFwiIC8qIFNUQU5EQVJEICovO1xuXG4vLyBzcmMvRGVmYXVsdFJhdGVMaW1pdGVyLnRzXG52YXIgaW1wb3J0X3NlcnZpY2VfZXJyb3JfY2xhc3NpZmljYXRpb24gPSByZXF1aXJlKFwiQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uXCIpO1xudmFyIERlZmF1bHRSYXRlTGltaXRlciA9IGNsYXNzIF9EZWZhdWx0UmF0ZUxpbWl0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgLy8gUHJlLXNldCBzdGF0ZSB2YXJpYWJsZXNcbiAgICB0aGlzLmN1cnJlbnRDYXBhY2l0eSA9IDA7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0TWF4UmF0ZSA9IDA7XG4gICAgdGhpcy5tZWFzdXJlZFR4UmF0ZSA9IDA7XG4gICAgdGhpcy5yZXF1ZXN0Q291bnQgPSAwO1xuICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IDA7XG4gICAgdGhpcy50aW1lV2luZG93ID0gMDtcbiAgICB0aGlzLmJldGEgPSBvcHRpb25zPy5iZXRhID8/IDAuNztcbiAgICB0aGlzLm1pbkNhcGFjaXR5ID0gb3B0aW9ucz8ubWluQ2FwYWNpdHkgPz8gMTtcbiAgICB0aGlzLm1pbkZpbGxSYXRlID0gb3B0aW9ucz8ubWluRmlsbFJhdGUgPz8gMC41O1xuICAgIHRoaXMuc2NhbGVDb25zdGFudCA9IG9wdGlvbnM/LnNjYWxlQ29uc3RhbnQgPz8gMC40O1xuICAgIHRoaXMuc21vb3RoID0gb3B0aW9ucz8uc21vb3RoID8/IDAuODtcbiAgICBjb25zdCBjdXJyZW50VGltZUluU2Vjb25kcyA9IHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKTtcbiAgICB0aGlzLmxhc3RUaHJvdHRsZVRpbWUgPSBjdXJyZW50VGltZUluU2Vjb25kcztcbiAgICB0aGlzLmxhc3RUeFJhdGVCdWNrZXQgPSBNYXRoLmZsb29yKHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKSk7XG4gICAgdGhpcy5maWxsUmF0ZSA9IHRoaXMubWluRmlsbFJhdGU7XG4gICAgdGhpcy5tYXhDYXBhY2l0eSA9IHRoaXMubWluQ2FwYWNpdHk7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEZWZhdWx0UmF0ZUxpbWl0ZXJcIik7XG4gIH1cbiAgc3RhdGljIHtcbiAgICAvKipcbiAgICAgKiBPbmx5IHVzZWQgaW4gdGVzdGluZy5cbiAgICAgKi9cbiAgICB0aGlzLnNldFRpbWVvdXRGbiA9IHNldFRpbWVvdXQ7XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCkgLyAxZTM7XG4gIH1cbiAgYXN5bmMgZ2V0U2VuZFRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmFjcXVpcmVUb2tlbkJ1Y2tldCgxKTtcbiAgfVxuICBhc3luYyBhY3F1aXJlVG9rZW5CdWNrZXQoYW1vdW50KSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZWZpbGxUb2tlbkJ1Y2tldCgpO1xuICAgIGlmIChhbW91bnQgPiB0aGlzLmN1cnJlbnRDYXBhY2l0eSkge1xuICAgICAgY29uc3QgZGVsYXkgPSAoYW1vdW50IC0gdGhpcy5jdXJyZW50Q2FwYWNpdHkpIC8gdGhpcy5maWxsUmF0ZSAqIDFlMztcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBfRGVmYXVsdFJhdGVMaW1pdGVyLnNldFRpbWVvdXRGbihyZXNvbHZlLCBkZWxheSkpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRDYXBhY2l0eSA9IHRoaXMuY3VycmVudENhcGFjaXR5IC0gYW1vdW50O1xuICB9XG4gIHJlZmlsbFRva2VuQnVja2V0KCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKTtcbiAgICBpZiAoIXRoaXMubGFzdFRpbWVzdGFtcCkge1xuICAgICAgdGhpcy5sYXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmaWxsQW1vdW50ID0gKHRpbWVzdGFtcCAtIHRoaXMubGFzdFRpbWVzdGFtcCkgKiB0aGlzLmZpbGxSYXRlO1xuICAgIHRoaXMuY3VycmVudENhcGFjaXR5ID0gTWF0aC5taW4odGhpcy5tYXhDYXBhY2l0eSwgdGhpcy5jdXJyZW50Q2FwYWNpdHkgKyBmaWxsQW1vdW50KTtcbiAgICB0aGlzLmxhc3RUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gIH1cbiAgdXBkYXRlQ2xpZW50U2VuZGluZ1JhdGUocmVzcG9uc2UpIHtcbiAgICBsZXQgY2FsY3VsYXRlZFJhdGU7XG4gICAgdGhpcy51cGRhdGVNZWFzdXJlZFJhdGUoKTtcbiAgICBpZiAoKDAsIGltcG9ydF9zZXJ2aWNlX2Vycm9yX2NsYXNzaWZpY2F0aW9uLmlzVGhyb3R0bGluZ0Vycm9yKShyZXNwb25zZSkpIHtcbiAgICAgIGNvbnN0IHJhdGVUb1VzZSA9ICF0aGlzLmVuYWJsZWQgPyB0aGlzLm1lYXN1cmVkVHhSYXRlIDogTWF0aC5taW4odGhpcy5tZWFzdXJlZFR4UmF0ZSwgdGhpcy5maWxsUmF0ZSk7XG4gICAgICB0aGlzLmxhc3RNYXhSYXRlID0gcmF0ZVRvVXNlO1xuICAgICAgdGhpcy5jYWxjdWxhdGVUaW1lV2luZG93KCk7XG4gICAgICB0aGlzLmxhc3RUaHJvdHRsZVRpbWUgPSB0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCk7XG4gICAgICBjYWxjdWxhdGVkUmF0ZSA9IHRoaXMuY3ViaWNUaHJvdHRsZShyYXRlVG9Vc2UpO1xuICAgICAgdGhpcy5lbmFibGVUb2tlbkJ1Y2tldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZVRpbWVXaW5kb3coKTtcbiAgICAgIGNhbGN1bGF0ZWRSYXRlID0gdGhpcy5jdWJpY1N1Y2Nlc3ModGhpcy5nZXRDdXJyZW50VGltZUluU2Vjb25kcygpKTtcbiAgICB9XG4gICAgY29uc3QgbmV3UmF0ZSA9IE1hdGgubWluKGNhbGN1bGF0ZWRSYXRlLCAyICogdGhpcy5tZWFzdXJlZFR4UmF0ZSk7XG4gICAgdGhpcy51cGRhdGVUb2tlbkJ1Y2tldFJhdGUobmV3UmF0ZSk7XG4gIH1cbiAgY2FsY3VsYXRlVGltZVdpbmRvdygpIHtcbiAgICB0aGlzLnRpbWVXaW5kb3cgPSB0aGlzLmdldFByZWNpc2UoTWF0aC5wb3codGhpcy5sYXN0TWF4UmF0ZSAqICgxIC0gdGhpcy5iZXRhKSAvIHRoaXMuc2NhbGVDb25zdGFudCwgMSAvIDMpKTtcbiAgfVxuICBjdWJpY1Rocm90dGxlKHJhdGVUb1VzZSkge1xuICAgIHJldHVybiB0aGlzLmdldFByZWNpc2UocmF0ZVRvVXNlICogdGhpcy5iZXRhKTtcbiAgfVxuICBjdWJpY1N1Y2Nlc3ModGltZXN0YW1wKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJlY2lzZShcbiAgICAgIHRoaXMuc2NhbGVDb25zdGFudCAqIE1hdGgucG93KHRpbWVzdGFtcCAtIHRoaXMubGFzdFRocm90dGxlVGltZSAtIHRoaXMudGltZVdpbmRvdywgMykgKyB0aGlzLmxhc3RNYXhSYXRlXG4gICAgKTtcbiAgfVxuICBlbmFibGVUb2tlbkJ1Y2tldCgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICB9XG4gIHVwZGF0ZVRva2VuQnVja2V0UmF0ZShuZXdSYXRlKSB7XG4gICAgdGhpcy5yZWZpbGxUb2tlbkJ1Y2tldCgpO1xuICAgIHRoaXMuZmlsbFJhdGUgPSBNYXRoLm1heChuZXdSYXRlLCB0aGlzLm1pbkZpbGxSYXRlKTtcbiAgICB0aGlzLm1heENhcGFjaXR5ID0gTWF0aC5tYXgobmV3UmF0ZSwgdGhpcy5taW5DYXBhY2l0eSk7XG4gICAgdGhpcy5jdXJyZW50Q2FwYWNpdHkgPSBNYXRoLm1pbih0aGlzLmN1cnJlbnRDYXBhY2l0eSwgdGhpcy5tYXhDYXBhY2l0eSk7XG4gIH1cbiAgdXBkYXRlTWVhc3VyZWRSYXRlKCkge1xuICAgIGNvbnN0IHQgPSB0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCk7XG4gICAgY29uc3QgdGltZUJ1Y2tldCA9IE1hdGguZmxvb3IodCAqIDIpIC8gMjtcbiAgICB0aGlzLnJlcXVlc3RDb3VudCsrO1xuICAgIGlmICh0aW1lQnVja2V0ID4gdGhpcy5sYXN0VHhSYXRlQnVja2V0KSB7XG4gICAgICBjb25zdCBjdXJyZW50UmF0ZSA9IHRoaXMucmVxdWVzdENvdW50IC8gKHRpbWVCdWNrZXQgLSB0aGlzLmxhc3RUeFJhdGVCdWNrZXQpO1xuICAgICAgdGhpcy5tZWFzdXJlZFR4UmF0ZSA9IHRoaXMuZ2V0UHJlY2lzZShjdXJyZW50UmF0ZSAqIHRoaXMuc21vb3RoICsgdGhpcy5tZWFzdXJlZFR4UmF0ZSAqICgxIC0gdGhpcy5zbW9vdGgpKTtcbiAgICAgIHRoaXMucmVxdWVzdENvdW50ID0gMDtcbiAgICAgIHRoaXMubGFzdFR4UmF0ZUJ1Y2tldCA9IHRpbWVCdWNrZXQ7XG4gICAgfVxuICB9XG4gIGdldFByZWNpc2UobnVtKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobnVtLnRvRml4ZWQoOCkpO1xuICB9XG59O1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFID0gMTAwO1xudmFyIE1BWElNVU1fUkVUUllfREVMQVkgPSAyMCAqIDFlMztcbnZhciBUSFJPVFRMSU5HX1JFVFJZX0RFTEFZX0JBU0UgPSA1MDA7XG52YXIgSU5JVElBTF9SRVRSWV9UT0tFTlMgPSA1MDA7XG52YXIgUkVUUllfQ09TVCA9IDU7XG52YXIgVElNRU9VVF9SRVRSWV9DT1NUID0gMTA7XG52YXIgTk9fUkVUUllfSU5DUkVNRU5UID0gMTtcbnZhciBJTlZPQ0FUSU9OX0lEX0hFQURFUiA9IFwiYW16LXNkay1pbnZvY2F0aW9uLWlkXCI7XG52YXIgUkVRVUVTVF9IRUFERVIgPSBcImFtei1zZGstcmVxdWVzdFwiO1xuXG4vLyBzcmMvZGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5LnRzXG52YXIgZ2V0RGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGxldCBkZWxheUJhc2UgPSBERUZBVUxUX1JFVFJZX0RFTEFZX0JBU0U7XG4gIGNvbnN0IGNvbXB1dGVOZXh0QmFja29mZkRlbGF5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXR0ZW1wdHMpID0+IHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1pbihNQVhJTVVNX1JFVFJZX0RFTEFZLCBNYXRoLnJhbmRvbSgpICogMiAqKiBhdHRlbXB0cyAqIGRlbGF5QmFzZSkpO1xuICB9LCBcImNvbXB1dGVOZXh0QmFja29mZkRlbGF5XCIpO1xuICBjb25zdCBzZXREZWxheUJhc2UgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkZWxheSkgPT4ge1xuICAgIGRlbGF5QmFzZSA9IGRlbGF5O1xuICB9LCBcInNldERlbGF5QmFzZVwiKTtcbiAgcmV0dXJuIHtcbiAgICBjb21wdXRlTmV4dEJhY2tvZmZEZWxheSxcbiAgICBzZXREZWxheUJhc2VcbiAgfTtcbn0sIFwiZ2V0RGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5XCIpO1xuXG4vLyBzcmMvZGVmYXVsdFJldHJ5VG9rZW4udHNcbnZhciBjcmVhdGVEZWZhdWx0UmV0cnlUb2tlbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHtcbiAgcmV0cnlEZWxheSxcbiAgcmV0cnlDb3VudCxcbiAgcmV0cnlDb3N0XG59KSA9PiB7XG4gIGNvbnN0IGdldFJldHJ5Q291bnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHJldHJ5Q291bnQsIFwiZ2V0UmV0cnlDb3VudFwiKTtcbiAgY29uc3QgZ2V0UmV0cnlEZWxheSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gTWF0aC5taW4oTUFYSU1VTV9SRVRSWV9ERUxBWSwgcmV0cnlEZWxheSksIFwiZ2V0UmV0cnlEZWxheVwiKTtcbiAgY29uc3QgZ2V0UmV0cnlDb3N0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiByZXRyeUNvc3QsIFwiZ2V0UmV0cnlDb3N0XCIpO1xuICByZXR1cm4ge1xuICAgIGdldFJldHJ5Q291bnQsXG4gICAgZ2V0UmV0cnlEZWxheSxcbiAgICBnZXRSZXRyeUNvc3RcbiAgfTtcbn0sIFwiY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW5cIik7XG5cbi8vIHNyYy9TdGFuZGFyZFJldHJ5U3RyYXRlZ3kudHNcbnZhciBTdGFuZGFyZFJldHJ5U3RyYXRlZ3kgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG1heEF0dGVtcHRzKSB7XG4gICAgdGhpcy5tYXhBdHRlbXB0cyA9IG1heEF0dGVtcHRzO1xuICAgIHRoaXMubW9kZSA9IFwic3RhbmRhcmRcIiAvKiBTVEFOREFSRCAqLztcbiAgICB0aGlzLmNhcGFjaXR5ID0gSU5JVElBTF9SRVRSWV9UT0tFTlM7XG4gICAgdGhpcy5yZXRyeUJhY2tvZmZTdHJhdGVneSA9IGdldERlZmF1bHRSZXRyeUJhY2tvZmZTdHJhdGVneSgpO1xuICAgIHRoaXMubWF4QXR0ZW1wdHNQcm92aWRlciA9IHR5cGVvZiBtYXhBdHRlbXB0cyA9PT0gXCJmdW5jdGlvblwiID8gbWF4QXR0ZW1wdHMgOiBhc3luYyAoKSA9PiBtYXhBdHRlbXB0cztcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlN0YW5kYXJkUmV0cnlTdHJhdGVneVwiKTtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGFzeW5jIGFjcXVpcmVJbml0aWFsUmV0cnlUb2tlbihyZXRyeVRva2VuU2NvcGUpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4oe1xuICAgICAgcmV0cnlEZWxheTogREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLFxuICAgICAgcmV0cnlDb3VudDogMFxuICAgIH0pO1xuICB9XG4gIGFzeW5jIHJlZnJlc2hSZXRyeVRva2VuRm9yUmV0cnkodG9rZW4sIGVycm9ySW5mbykge1xuICAgIGNvbnN0IG1heEF0dGVtcHRzID0gYXdhaXQgdGhpcy5nZXRNYXhBdHRlbXB0cygpO1xuICAgIGlmICh0aGlzLnNob3VsZFJldHJ5KHRva2VuLCBlcnJvckluZm8sIG1heEF0dGVtcHRzKSkge1xuICAgICAgY29uc3QgZXJyb3JUeXBlID0gZXJyb3JJbmZvLmVycm9yVHlwZTtcbiAgICAgIHRoaXMucmV0cnlCYWNrb2ZmU3RyYXRlZ3kuc2V0RGVsYXlCYXNlKFxuICAgICAgICBlcnJvclR5cGUgPT09IFwiVEhST1RUTElOR1wiID8gVEhST1RUTElOR19SRVRSWV9ERUxBWV9CQVNFIDogREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFXG4gICAgICApO1xuICAgICAgY29uc3QgZGVsYXlGcm9tRXJyb3JUeXBlID0gdGhpcy5yZXRyeUJhY2tvZmZTdHJhdGVneS5jb21wdXRlTmV4dEJhY2tvZmZEZWxheSh0b2tlbi5nZXRSZXRyeUNvdW50KCkpO1xuICAgICAgY29uc3QgcmV0cnlEZWxheSA9IGVycm9ySW5mby5yZXRyeUFmdGVySGludCA/IE1hdGgubWF4KGVycm9ySW5mby5yZXRyeUFmdGVySGludC5nZXRUaW1lKCkgLSBEYXRlLm5vdygpIHx8IDAsIGRlbGF5RnJvbUVycm9yVHlwZSkgOiBkZWxheUZyb21FcnJvclR5cGU7XG4gICAgICBjb25zdCBjYXBhY2l0eUNvc3QgPSB0aGlzLmdldENhcGFjaXR5Q29zdChlcnJvclR5cGUpO1xuICAgICAgdGhpcy5jYXBhY2l0eSAtPSBjYXBhY2l0eUNvc3Q7XG4gICAgICByZXR1cm4gY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4oe1xuICAgICAgICByZXRyeURlbGF5LFxuICAgICAgICByZXRyeUNvdW50OiB0b2tlbi5nZXRSZXRyeUNvdW50KCkgKyAxLFxuICAgICAgICByZXRyeUNvc3Q6IGNhcGFjaXR5Q29zdFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHJldHJ5IHRva2VuIGF2YWlsYWJsZVwiKTtcbiAgfVxuICByZWNvcmRTdWNjZXNzKHRva2VuKSB7XG4gICAgdGhpcy5jYXBhY2l0eSA9IE1hdGgubWF4KElOSVRJQUxfUkVUUllfVE9LRU5TLCB0aGlzLmNhcGFjaXR5ICsgKHRva2VuLmdldFJldHJ5Q29zdCgpID8/IE5PX1JFVFJZX0lOQ1JFTUVOVCkpO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBhdmFpbGFibGUgcmV0cnkgY2FwYWNpdHkuXG4gICAqXG4gICAqIFRoaXMgbnVtYmVyIGRlY3JlYXNlcyB3aGVuIHJldHJpZXMgYXJlIGV4ZWN1dGVkIGFuZCByZWZpbGxzIHdoZW4gcmVxdWVzdHMgb3IgcmV0cmllcyBzdWNjZWVkLlxuICAgKi9cbiAgZ2V0Q2FwYWNpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FwYWNpdHk7XG4gIH1cbiAgYXN5bmMgZ2V0TWF4QXR0ZW1wdHMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1heEF0dGVtcHRzUHJvdmlkZXIoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKGBNYXggYXR0ZW1wdHMgcHJvdmlkZXIgY291bGQgbm90IHJlc29sdmUuIFVzaW5nIGRlZmF1bHQgb2YgJHtERUZBVUxUX01BWF9BVFRFTVBUU31gKTtcbiAgICAgIHJldHVybiBERUZBVUxUX01BWF9BVFRFTVBUUztcbiAgICB9XG4gIH1cbiAgc2hvdWxkUmV0cnkodG9rZW5Ub1JlbmV3LCBlcnJvckluZm8sIG1heEF0dGVtcHRzKSB7XG4gICAgY29uc3QgYXR0ZW1wdHMgPSB0b2tlblRvUmVuZXcuZ2V0UmV0cnlDb3VudCgpICsgMTtcbiAgICByZXR1cm4gYXR0ZW1wdHMgPCBtYXhBdHRlbXB0cyAmJiB0aGlzLmNhcGFjaXR5ID49IHRoaXMuZ2V0Q2FwYWNpdHlDb3N0KGVycm9ySW5mby5lcnJvclR5cGUpICYmIHRoaXMuaXNSZXRyeWFibGVFcnJvcihlcnJvckluZm8uZXJyb3JUeXBlKTtcbiAgfVxuICBnZXRDYXBhY2l0eUNvc3QoZXJyb3JUeXBlKSB7XG4gICAgcmV0dXJuIGVycm9yVHlwZSA9PT0gXCJUUkFOU0lFTlRcIiA/IFRJTUVPVVRfUkVUUllfQ09TVCA6IFJFVFJZX0NPU1Q7XG4gIH1cbiAgaXNSZXRyeWFibGVFcnJvcihlcnJvclR5cGUpIHtcbiAgICByZXR1cm4gZXJyb3JUeXBlID09PSBcIlRIUk9UVExJTkdcIiB8fCBlcnJvclR5cGUgPT09IFwiVFJBTlNJRU5UXCI7XG4gIH1cbn07XG5cbi8vIHNyYy9BZGFwdGl2ZVJldHJ5U3RyYXRlZ3kudHNcbnZhciBBZGFwdGl2ZVJldHJ5U3RyYXRlZ3kgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG1heEF0dGVtcHRzUHJvdmlkZXIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm1heEF0dGVtcHRzUHJvdmlkZXIgPSBtYXhBdHRlbXB0c1Byb3ZpZGVyO1xuICAgIHRoaXMubW9kZSA9IFwiYWRhcHRpdmVcIiAvKiBBREFQVElWRSAqLztcbiAgICBjb25zdCB7IHJhdGVMaW1pdGVyIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIHRoaXMucmF0ZUxpbWl0ZXIgPSByYXRlTGltaXRlciA/PyBuZXcgRGVmYXVsdFJhdGVMaW1pdGVyKCk7XG4gICAgdGhpcy5zdGFuZGFyZFJldHJ5U3RyYXRlZ3kgPSBuZXcgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5KG1heEF0dGVtcHRzUHJvdmlkZXIpO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiQWRhcHRpdmVSZXRyeVN0cmF0ZWd5XCIpO1xuICB9XG4gIGFzeW5jIGFjcXVpcmVJbml0aWFsUmV0cnlUb2tlbihyZXRyeVRva2VuU2NvcGUpIHtcbiAgICBhd2FpdCB0aGlzLnJhdGVMaW1pdGVyLmdldFNlbmRUb2tlbigpO1xuICAgIHJldHVybiB0aGlzLnN0YW5kYXJkUmV0cnlTdHJhdGVneS5hY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4ocmV0cnlUb2tlblNjb3BlKTtcbiAgfVxuICBhc3luYyByZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvKSB7XG4gICAgdGhpcy5yYXRlTGltaXRlci51cGRhdGVDbGllbnRTZW5kaW5nUmF0ZShlcnJvckluZm8pO1xuICAgIHJldHVybiB0aGlzLnN0YW5kYXJkUmV0cnlTdHJhdGVneS5yZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvKTtcbiAgfVxuICByZWNvcmRTdWNjZXNzKHRva2VuKSB7XG4gICAgdGhpcy5yYXRlTGltaXRlci51cGRhdGVDbGllbnRTZW5kaW5nUmF0ZSh7fSk7XG4gICAgdGhpcy5zdGFuZGFyZFJldHJ5U3RyYXRlZ3kucmVjb3JkU3VjY2Vzcyh0b2tlbik7XG4gIH1cbn07XG5cbi8vIHNyYy9Db25maWd1cmVkUmV0cnlTdHJhdGVneS50c1xudmFyIENvbmZpZ3VyZWRSZXRyeVN0cmF0ZWd5ID0gY2xhc3MgZXh0ZW5kcyBTdGFuZGFyZFJldHJ5U3RyYXRlZ3kge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNvbmZpZ3VyZWRSZXRyeVN0cmF0ZWd5XCIpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gbWF4QXR0ZW1wdHMgLSB0aGUgbWF4aW11bSBudW1iZXIgb2YgcmV0cnkgYXR0ZW1wdHMgYWxsb3dlZC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgZS5nLiwgaWYgc2V0IHRvIDMsIHRoZW4gNCB0b3RhbCByZXF1ZXN0cyBhcmUgcG9zc2libGUuXG4gICAqIEBwYXJhbSBjb21wdXRlTmV4dEJhY2tvZmZEZWxheSAtIGEgbWlsbGlzZWNvbmQgZGVsYXkgZm9yIGVhY2ggcmV0cnkgb3IgYSBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSByZXRyeSBhdHRlbXB0XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCByZXR1cm5zIHRoZSBkZWxheS5cbiAgICpcbiAgICogQGV4YW1wbGUgZXhwb25lbnRpYWwgYmFja29mZi5cbiAgICogYGBganNcbiAgICogbmV3IENsaWVudCh7XG4gICAqICAgcmV0cnlTdHJhdGVneTogbmV3IENvbmZpZ3VyZWRSZXRyeVN0cmF0ZWd5KDMsIChhdHRlbXB0KSA9PiBhdHRlbXB0ICoqIDIpXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICogQGV4YW1wbGUgY29uc3RhbnQgZGVsYXkuXG4gICAqIGBgYGpzXG4gICAqIG5ldyBDbGllbnQoe1xuICAgKiAgIHJldHJ5U3RyYXRlZ3k6IG5ldyBDb25maWd1cmVkUmV0cnlTdHJhdGVneSgzLCAyMDAwKVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtYXhBdHRlbXB0cywgY29tcHV0ZU5leHRCYWNrb2ZmRGVsYXkgPSBERUZBVUxUX1JFVFJZX0RFTEFZX0JBU0UpIHtcbiAgICBzdXBlcih0eXBlb2YgbWF4QXR0ZW1wdHMgPT09IFwiZnVuY3Rpb25cIiA/IG1heEF0dGVtcHRzIDogYXN5bmMgKCkgPT4gbWF4QXR0ZW1wdHMpO1xuICAgIGlmICh0eXBlb2YgY29tcHV0ZU5leHRCYWNrb2ZmRGVsYXkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRoaXMuY29tcHV0ZU5leHRCYWNrb2ZmRGVsYXkgPSAoKSA9PiBjb21wdXRlTmV4dEJhY2tvZmZEZWxheTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb21wdXRlTmV4dEJhY2tvZmZEZWxheSA9IGNvbXB1dGVOZXh0QmFja29mZkRlbGF5O1xuICAgIH1cbiAgfVxuICBhc3luYyByZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvKSB7XG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBzdXBlci5yZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvKTtcbiAgICB0b2tlbi5nZXRSZXRyeURlbGF5ID0gKCkgPT4gdGhpcy5jb21wdXRlTmV4dEJhY2tvZmZEZWxheSh0b2tlbi5nZXRSZXRyeUNvdW50KCkpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFkYXB0aXZlUmV0cnlTdHJhdGVneSxcbiAgQ29uZmlndXJlZFJldHJ5U3RyYXRlZ3ksXG4gIERlZmF1bHRSYXRlTGltaXRlcixcbiAgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5LFxuICBSRVRSWV9NT0RFUyxcbiAgREVGQVVMVF9NQVhfQVRURU1QVFMsXG4gIERFRkFVTFRfUkVUUllfTU9ERSxcbiAgREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLFxuICBNQVhJTVVNX1JFVFJZX0RFTEFZLFxuICBUSFJPVFRMSU5HX1JFVFJZX0RFTEFZX0JBU0UsXG4gIElOSVRJQUxfUkVUUllfVE9LRU5TLFxuICBSRVRSWV9DT1NULFxuICBUSU1FT1VUX1JFVFJZX0NPU1QsXG4gIE5PX1JFVFJZX0lOQ1JFTUVOVCxcbiAgSU5WT0NBVElPTl9JRF9IRUFERVIsXG4gIFJFUVVFU1RfSEVBREVSXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1N0cmVhbWluZ1BheWxvYWQgPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBpc1N0cmVhbWluZ1BheWxvYWQgPSAocmVxdWVzdCkgPT4gKHJlcXVlc3QgPT09IG51bGwgfHwgcmVxdWVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxdWVzdC5ib2R5KSBpbnN0YW5jZW9mIHN0cmVhbV8xLlJlYWRhYmxlIHx8XG4gICAgKHR5cGVvZiBSZWFkYWJsZVN0cmVhbSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAocmVxdWVzdCA9PT0gbnVsbCB8fCByZXF1ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXF1ZXN0LmJvZHkpIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pO1xuZXhwb3J0cy5pc1N0cmVhbWluZ1BheWxvYWQgPSBpc1N0cmVhbWluZ1BheWxvYWQ7XG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEFkYXB0aXZlUmV0cnlTdHJhdGVneTogKCkgPT4gQWRhcHRpdmVSZXRyeVN0cmF0ZWd5LFxuICBDT05GSUdfTUFYX0FUVEVNUFRTOiAoKSA9PiBDT05GSUdfTUFYX0FUVEVNUFRTLFxuICBDT05GSUdfUkVUUllfTU9ERTogKCkgPT4gQ09ORklHX1JFVFJZX01PREUsXG4gIEVOVl9NQVhfQVRURU1QVFM6ICgpID0+IEVOVl9NQVhfQVRURU1QVFMsXG4gIEVOVl9SRVRSWV9NT0RFOiAoKSA9PiBFTlZfUkVUUllfTU9ERSxcbiAgTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUzogKCkgPT4gTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUyxcbiAgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TOiAoKSA9PiBOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gIFN0YW5kYXJkUmV0cnlTdHJhdGVneTogKCkgPT4gU3RhbmRhcmRSZXRyeVN0cmF0ZWd5LFxuICBkZWZhdWx0RGVsYXlEZWNpZGVyOiAoKSA9PiBkZWZhdWx0RGVsYXlEZWNpZGVyLFxuICBkZWZhdWx0UmV0cnlEZWNpZGVyOiAoKSA9PiBkZWZhdWx0UmV0cnlEZWNpZGVyLFxuICBnZXRPbWl0UmV0cnlIZWFkZXJzUGx1Z2luOiAoKSA9PiBnZXRPbWl0UmV0cnlIZWFkZXJzUGx1Z2luLFxuICBnZXRSZXRyeUFmdGVySGludDogKCkgPT4gZ2V0UmV0cnlBZnRlckhpbnQsXG4gIGdldFJldHJ5UGx1Z2luOiAoKSA9PiBnZXRSZXRyeVBsdWdpbixcbiAgb21pdFJldHJ5SGVhZGVyc01pZGRsZXdhcmU6ICgpID0+IG9taXRSZXRyeUhlYWRlcnNNaWRkbGV3YXJlLFxuICBvbWl0UmV0cnlIZWFkZXJzTWlkZGxld2FyZU9wdGlvbnM6ICgpID0+IG9taXRSZXRyeUhlYWRlcnNNaWRkbGV3YXJlT3B0aW9ucyxcbiAgcmVzb2x2ZVJldHJ5Q29uZmlnOiAoKSA9PiByZXNvbHZlUmV0cnlDb25maWcsXG4gIHJldHJ5TWlkZGxld2FyZTogKCkgPT4gcmV0cnlNaWRkbGV3YXJlLFxuICByZXRyeU1pZGRsZXdhcmVPcHRpb25zOiAoKSA9PiByZXRyeU1pZGRsZXdhcmVPcHRpb25zXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL0FkYXB0aXZlUmV0cnlTdHJhdGVneS50c1xuXG5cbi8vIHNyYy9TdGFuZGFyZFJldHJ5U3RyYXRlZ3kudHNcbnZhciBpbXBvcnRfcHJvdG9jb2xfaHR0cCA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIik7XG5cblxudmFyIGltcG9ydF91dWlkID0gcmVxdWlyZShcInV1aWRcIik7XG5cbi8vIHNyYy9kZWZhdWx0UmV0cnlRdW90YS50c1xudmFyIGltcG9ydF91dGlsX3JldHJ5ID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1yZXRyeVwiKTtcbnZhciBnZXREZWZhdWx0UmV0cnlRdW90YSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGluaXRpYWxSZXRyeVRva2Vucywgb3B0aW9ucykgPT4ge1xuICBjb25zdCBNQVhfQ0FQQUNJVFkgPSBpbml0aWFsUmV0cnlUb2tlbnM7XG4gIGNvbnN0IG5vUmV0cnlJbmNyZW1lbnQgPSBvcHRpb25zPy5ub1JldHJ5SW5jcmVtZW50ID8/IGltcG9ydF91dGlsX3JldHJ5Lk5PX1JFVFJZX0lOQ1JFTUVOVDtcbiAgY29uc3QgcmV0cnlDb3N0ID0gb3B0aW9ucz8ucmV0cnlDb3N0ID8/IGltcG9ydF91dGlsX3JldHJ5LlJFVFJZX0NPU1Q7XG4gIGNvbnN0IHRpbWVvdXRSZXRyeUNvc3QgPSBvcHRpb25zPy50aW1lb3V0UmV0cnlDb3N0ID8/IGltcG9ydF91dGlsX3JldHJ5LlRJTUVPVVRfUkVUUllfQ09TVDtcbiAgbGV0IGF2YWlsYWJsZUNhcGFjaXR5ID0gaW5pdGlhbFJldHJ5VG9rZW5zO1xuICBjb25zdCBnZXRDYXBhY2l0eUFtb3VudCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVycm9yKSA9PiBlcnJvci5uYW1lID09PSBcIlRpbWVvdXRFcnJvclwiID8gdGltZW91dFJldHJ5Q29zdCA6IHJldHJ5Q29zdCwgXCJnZXRDYXBhY2l0eUFtb3VudFwiKTtcbiAgY29uc3QgaGFzUmV0cnlUb2tlbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnJvcikgPT4gZ2V0Q2FwYWNpdHlBbW91bnQoZXJyb3IpIDw9IGF2YWlsYWJsZUNhcGFjaXR5LCBcImhhc1JldHJ5VG9rZW5zXCIpO1xuICBjb25zdCByZXRyaWV2ZVJldHJ5VG9rZW5zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXJyb3IpID0+IHtcbiAgICBpZiAoIWhhc1JldHJ5VG9rZW5zKGVycm9yKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gcmV0cnkgdG9rZW4gYXZhaWxhYmxlXCIpO1xuICAgIH1cbiAgICBjb25zdCBjYXBhY2l0eUFtb3VudCA9IGdldENhcGFjaXR5QW1vdW50KGVycm9yKTtcbiAgICBhdmFpbGFibGVDYXBhY2l0eSAtPSBjYXBhY2l0eUFtb3VudDtcbiAgICByZXR1cm4gY2FwYWNpdHlBbW91bnQ7XG4gIH0sIFwicmV0cmlldmVSZXRyeVRva2Vuc1wiKTtcbiAgY29uc3QgcmVsZWFzZVJldHJ5VG9rZW5zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY2FwYWNpdHlSZWxlYXNlQW1vdW50KSA9PiB7XG4gICAgYXZhaWxhYmxlQ2FwYWNpdHkgKz0gY2FwYWNpdHlSZWxlYXNlQW1vdW50ID8/IG5vUmV0cnlJbmNyZW1lbnQ7XG4gICAgYXZhaWxhYmxlQ2FwYWNpdHkgPSBNYXRoLm1pbihhdmFpbGFibGVDYXBhY2l0eSwgTUFYX0NBUEFDSVRZKTtcbiAgfSwgXCJyZWxlYXNlUmV0cnlUb2tlbnNcIik7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICBoYXNSZXRyeVRva2VucyxcbiAgICByZXRyaWV2ZVJldHJ5VG9rZW5zLFxuICAgIHJlbGVhc2VSZXRyeVRva2Vuc1xuICB9KTtcbn0sIFwiZ2V0RGVmYXVsdFJldHJ5UXVvdGFcIik7XG5cbi8vIHNyYy9kZWxheURlY2lkZXIudHNcblxudmFyIGRlZmF1bHREZWxheURlY2lkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkZWxheUJhc2UsIGF0dGVtcHRzKSA9PiBNYXRoLmZsb29yKE1hdGgubWluKGltcG9ydF91dGlsX3JldHJ5Lk1BWElNVU1fUkVUUllfREVMQVksIE1hdGgucmFuZG9tKCkgKiAyICoqIGF0dGVtcHRzICogZGVsYXlCYXNlKSksIFwiZGVmYXVsdERlbGF5RGVjaWRlclwiKTtcblxuLy8gc3JjL3JldHJ5RGVjaWRlci50c1xudmFyIGltcG9ydF9zZXJ2aWNlX2Vycm9yX2NsYXNzaWZpY2F0aW9uID0gcmVxdWlyZShcIkBzbWl0aHkvc2VydmljZS1lcnJvci1jbGFzc2lmaWNhdGlvblwiKTtcbnZhciBkZWZhdWx0UmV0cnlEZWNpZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXJyb3IpID0+IHtcbiAgaWYgKCFlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKDAsIGltcG9ydF9zZXJ2aWNlX2Vycm9yX2NsYXNzaWZpY2F0aW9uLmlzUmV0cnlhYmxlQnlUcmFpdCkoZXJyb3IpIHx8ICgwLCBpbXBvcnRfc2VydmljZV9lcnJvcl9jbGFzc2lmaWNhdGlvbi5pc0Nsb2NrU2tld0Vycm9yKShlcnJvcikgfHwgKDAsIGltcG9ydF9zZXJ2aWNlX2Vycm9yX2NsYXNzaWZpY2F0aW9uLmlzVGhyb3R0bGluZ0Vycm9yKShlcnJvcikgfHwgKDAsIGltcG9ydF9zZXJ2aWNlX2Vycm9yX2NsYXNzaWZpY2F0aW9uLmlzVHJhbnNpZW50RXJyb3IpKGVycm9yKTtcbn0sIFwiZGVmYXVsdFJldHJ5RGVjaWRlclwiKTtcblxuLy8gc3JjL3V0aWwudHNcbnZhciBhc1Nka0Vycm9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXJyb3IpID0+IHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgcmV0dXJuIGVycm9yO1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPYmplY3QpXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCksIGVycm9yKTtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gbmV3IEVycm9yKGVycm9yKTtcbiAgcmV0dXJuIG5ldyBFcnJvcihgQVdTIFNESyBlcnJvciB3cmFwcGVyIGZvciAke2Vycm9yfWApO1xufSwgXCJhc1Nka0Vycm9yXCIpO1xuXG4vLyBzcmMvU3RhbmRhcmRSZXRyeVN0cmF0ZWd5LnRzXG52YXIgU3RhbmRhcmRSZXRyeVN0cmF0ZWd5ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihtYXhBdHRlbXB0c1Byb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgdGhpcy5tYXhBdHRlbXB0c1Byb3ZpZGVyID0gbWF4QXR0ZW1wdHNQcm92aWRlcjtcbiAgICB0aGlzLm1vZGUgPSBpbXBvcnRfdXRpbF9yZXRyeS5SRVRSWV9NT0RFUy5TVEFOREFSRDtcbiAgICB0aGlzLnJldHJ5RGVjaWRlciA9IG9wdGlvbnM/LnJldHJ5RGVjaWRlciA/PyBkZWZhdWx0UmV0cnlEZWNpZGVyO1xuICAgIHRoaXMuZGVsYXlEZWNpZGVyID0gb3B0aW9ucz8uZGVsYXlEZWNpZGVyID8/IGRlZmF1bHREZWxheURlY2lkZXI7XG4gICAgdGhpcy5yZXRyeVF1b3RhID0gb3B0aW9ucz8ucmV0cnlRdW90YSA/PyBnZXREZWZhdWx0UmV0cnlRdW90YShpbXBvcnRfdXRpbF9yZXRyeS5JTklUSUFMX1JFVFJZX1RPS0VOUyk7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJTdGFuZGFyZFJldHJ5U3RyYXRlZ3lcIik7XG4gIH1cbiAgc2hvdWxkUmV0cnkoZXJyb3IsIGF0dGVtcHRzLCBtYXhBdHRlbXB0cykge1xuICAgIHJldHVybiBhdHRlbXB0cyA8IG1heEF0dGVtcHRzICYmIHRoaXMucmV0cnlEZWNpZGVyKGVycm9yKSAmJiB0aGlzLnJldHJ5UXVvdGEuaGFzUmV0cnlUb2tlbnMoZXJyb3IpO1xuICB9XG4gIGFzeW5jIGdldE1heEF0dGVtcHRzKCkge1xuICAgIGxldCBtYXhBdHRlbXB0cztcbiAgICB0cnkge1xuICAgICAgbWF4QXR0ZW1wdHMgPSBhd2FpdCB0aGlzLm1heEF0dGVtcHRzUHJvdmlkZXIoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbWF4QXR0ZW1wdHMgPSBpbXBvcnRfdXRpbF9yZXRyeS5ERUZBVUxUX01BWF9BVFRFTVBUUztcbiAgICB9XG4gICAgcmV0dXJuIG1heEF0dGVtcHRzO1xuICB9XG4gIGFzeW5jIHJldHJ5KG5leHQsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmV0cnlUb2tlbkFtb3VudDtcbiAgICBsZXQgYXR0ZW1wdHMgPSAwO1xuICAgIGxldCB0b3RhbERlbGF5ID0gMDtcbiAgICBjb25zdCBtYXhBdHRlbXB0cyA9IGF3YWl0IHRoaXMuZ2V0TWF4QXR0ZW1wdHMoKTtcbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKGltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVyc1tpbXBvcnRfdXRpbF9yZXRyeS5JTlZPQ0FUSU9OX0lEX0hFQURFUl0gPSAoMCwgaW1wb3J0X3V1aWQudjQpKCk7XG4gICAgfVxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaW1wb3J0X3Byb3RvY29sX2h0dHAuSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1tpbXBvcnRfdXRpbF9yZXRyeS5SRVFVRVNUX0hFQURFUl0gPSBgYXR0ZW1wdD0ke2F0dGVtcHRzICsgMX07IG1heD0ke21heEF0dGVtcHRzfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnM/LmJlZm9yZVJlcXVlc3QpIHtcbiAgICAgICAgICBhd2FpdCBvcHRpb25zLmJlZm9yZVJlcXVlc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHJlc3BvbnNlLCBvdXRwdXQgfSA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgICAgIGlmIChvcHRpb25zPy5hZnRlclJlcXVlc3QpIHtcbiAgICAgICAgICBvcHRpb25zLmFmdGVyUmVxdWVzdChyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXRyeVF1b3RhLnJlbGVhc2VSZXRyeVRva2VucyhyZXRyeVRva2VuQW1vdW50KTtcbiAgICAgICAgb3V0cHV0LiRtZXRhZGF0YS5hdHRlbXB0cyA9IGF0dGVtcHRzICsgMTtcbiAgICAgICAgb3V0cHV0LiRtZXRhZGF0YS50b3RhbFJldHJ5RGVsYXkgPSB0b3RhbERlbGF5O1xuICAgICAgICByZXR1cm4geyByZXNwb25zZSwgb3V0cHV0IH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IGFzU2RrRXJyb3IoZSk7XG4gICAgICAgIGF0dGVtcHRzKys7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFJldHJ5KGVyciwgYXR0ZW1wdHMsIG1heEF0dGVtcHRzKSkge1xuICAgICAgICAgIHJldHJ5VG9rZW5BbW91bnQgPSB0aGlzLnJldHJ5UXVvdGEucmV0cmlldmVSZXRyeVRva2VucyhlcnIpO1xuICAgICAgICAgIGNvbnN0IGRlbGF5RnJvbURlY2lkZXIgPSB0aGlzLmRlbGF5RGVjaWRlcihcbiAgICAgICAgICAgICgwLCBpbXBvcnRfc2VydmljZV9lcnJvcl9jbGFzc2lmaWNhdGlvbi5pc1Rocm90dGxpbmdFcnJvcikoZXJyKSA/IGltcG9ydF91dGlsX3JldHJ5LlRIUk9UVExJTkdfUkVUUllfREVMQVlfQkFTRSA6IGltcG9ydF91dGlsX3JldHJ5LkRFRkFVTFRfUkVUUllfREVMQVlfQkFTRSxcbiAgICAgICAgICAgIGF0dGVtcHRzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBkZWxheUZyb21SZXNwb25zZSA9IGdldERlbGF5RnJvbVJldHJ5QWZ0ZXJIZWFkZXIoZXJyLiRyZXNwb25zZSk7XG4gICAgICAgICAgY29uc3QgZGVsYXkgPSBNYXRoLm1heChkZWxheUZyb21SZXNwb25zZSB8fCAwLCBkZWxheUZyb21EZWNpZGVyKTtcbiAgICAgICAgICB0b3RhbERlbGF5ICs9IGRlbGF5O1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlcnIuJG1ldGFkYXRhKSB7XG4gICAgICAgICAgZXJyLiRtZXRhZGF0YSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVyci4kbWV0YWRhdGEuYXR0ZW1wdHMgPSBhdHRlbXB0cztcbiAgICAgICAgZXJyLiRtZXRhZGF0YS50b3RhbFJldHJ5RGVsYXkgPSB0b3RhbERlbGF5O1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xudmFyIGdldERlbGF5RnJvbVJldHJ5QWZ0ZXJIZWFkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXNwb25zZSkgPT4ge1xuICBpZiAoIWltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXNwb25zZS5pc0luc3RhbmNlKHJlc3BvbnNlKSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXJOYW1lID0gT2JqZWN0LmtleXMocmVzcG9uc2UuaGVhZGVycykuZmluZCgoa2V5KSA9PiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJyZXRyeS1hZnRlclwiKTtcbiAgaWYgKCFyZXRyeUFmdGVySGVhZGVyTmFtZSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHJldHJ5QWZ0ZXIgPSByZXNwb25zZS5oZWFkZXJzW3JldHJ5QWZ0ZXJIZWFkZXJOYW1lXTtcbiAgY29uc3QgcmV0cnlBZnRlclNlY29uZHMgPSBOdW1iZXIocmV0cnlBZnRlcik7XG4gIGlmICghTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXJTZWNvbmRzKSlcbiAgICByZXR1cm4gcmV0cnlBZnRlclNlY29uZHMgKiAxZTM7XG4gIGNvbnN0IHJldHJ5QWZ0ZXJEYXRlID0gbmV3IERhdGUocmV0cnlBZnRlcik7XG4gIHJldHVybiByZXRyeUFmdGVyRGF0ZS5nZXRUaW1lKCkgLSBEYXRlLm5vdygpO1xufSwgXCJnZXREZWxheUZyb21SZXRyeUFmdGVySGVhZGVyXCIpO1xuXG4vLyBzcmMvQWRhcHRpdmVSZXRyeVN0cmF0ZWd5LnRzXG52YXIgQWRhcHRpdmVSZXRyeVN0cmF0ZWd5ID0gY2xhc3MgZXh0ZW5kcyBTdGFuZGFyZFJldHJ5U3RyYXRlZ3kge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkFkYXB0aXZlUmV0cnlTdHJhdGVneVwiKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihtYXhBdHRlbXB0c1Byb3ZpZGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyByYXRlTGltaXRlciwgLi4uc3VwZXJPcHRpb25zIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIHN1cGVyKG1heEF0dGVtcHRzUHJvdmlkZXIsIHN1cGVyT3B0aW9ucyk7XG4gICAgdGhpcy5yYXRlTGltaXRlciA9IHJhdGVMaW1pdGVyID8/IG5ldyBpbXBvcnRfdXRpbF9yZXRyeS5EZWZhdWx0UmF0ZUxpbWl0ZXIoKTtcbiAgICB0aGlzLm1vZGUgPSBpbXBvcnRfdXRpbF9yZXRyeS5SRVRSWV9NT0RFUy5BREFQVElWRTtcbiAgfVxuICBhc3luYyByZXRyeShuZXh0LCBhcmdzKSB7XG4gICAgcmV0dXJuIHN1cGVyLnJldHJ5KG5leHQsIGFyZ3MsIHtcbiAgICAgIGJlZm9yZVJlcXVlc3Q6IGFzeW5jICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF0ZUxpbWl0ZXIuZ2V0U2VuZFRva2VuKCk7XG4gICAgICB9LFxuICAgICAgYWZ0ZXJSZXF1ZXN0OiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgdGhpcy5yYXRlTGltaXRlci51cGRhdGVDbGllbnRTZW5kaW5nUmF0ZShyZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb25maWd1cmF0aW9ucy50c1xudmFyIGltcG9ydF91dGlsX21pZGRsZXdhcmUgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIik7XG5cbnZhciBFTlZfTUFYX0FUVEVNUFRTID0gXCJBV1NfTUFYX0FUVEVNUFRTXCI7XG52YXIgQ09ORklHX01BWF9BVFRFTVBUUyA9IFwibWF4X2F0dGVtcHRzXCI7XG52YXIgTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUyA9IHtcbiAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBlbnZbRU5WX01BWF9BVFRFTVBUU107XG4gICAgaWYgKCF2YWx1ZSlcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgY29uc3QgbWF4QXR0ZW1wdCA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKG1heEF0dGVtcHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVudmlyb25tZW50IHZhcmlhYmxlICR7RU5WX01BWF9BVFRFTVBUU30gbWFzdCBiZSBhIG51bWJlciwgZ290IFwiJHt2YWx1ZX1cImApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4QXR0ZW1wdDtcbiAgfSxcbiAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gcHJvZmlsZVtDT05GSUdfTUFYX0FUVEVNUFRTXTtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICBjb25zdCBtYXhBdHRlbXB0ID0gcGFyc2VJbnQodmFsdWUpO1xuICAgIGlmIChOdW1iZXIuaXNOYU4obWF4QXR0ZW1wdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2hhcmVkIGNvbmZpZyBmaWxlIGVudHJ5ICR7Q09ORklHX01BWF9BVFRFTVBUU30gbWFzdCBiZSBhIG51bWJlciwgZ290IFwiJHt2YWx1ZX1cImApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4QXR0ZW1wdDtcbiAgfSxcbiAgZGVmYXVsdDogaW1wb3J0X3V0aWxfcmV0cnkuREVGQVVMVF9NQVhfQVRURU1QVFNcbn07XG52YXIgcmVzb2x2ZVJldHJ5Q29uZmlnID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IHtcbiAgY29uc3QgeyByZXRyeVN0cmF0ZWd5LCByZXRyeU1vZGU6IF9yZXRyeU1vZGUsIG1heEF0dGVtcHRzOiBfbWF4QXR0ZW1wdHMgfSA9IGlucHV0O1xuICBjb25zdCBtYXhBdHRlbXB0cyA9ICgwLCBpbXBvcnRfdXRpbF9taWRkbGV3YXJlLm5vcm1hbGl6ZVByb3ZpZGVyKShfbWF4QXR0ZW1wdHMgPz8gaW1wb3J0X3V0aWxfcmV0cnkuREVGQVVMVF9NQVhfQVRURU1QVFMpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbnB1dCwge1xuICAgIG1heEF0dGVtcHRzLFxuICAgIHJldHJ5U3RyYXRlZ3k6IGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChyZXRyeVN0cmF0ZWd5KSB7XG4gICAgICAgIHJldHVybiByZXRyeVN0cmF0ZWd5O1xuICAgICAgfVxuICAgICAgY29uc3QgcmV0cnlNb2RlID0gYXdhaXQgKDAsIGltcG9ydF91dGlsX21pZGRsZXdhcmUubm9ybWFsaXplUHJvdmlkZXIpKF9yZXRyeU1vZGUpKCk7XG4gICAgICBpZiAocmV0cnlNb2RlID09PSBpbXBvcnRfdXRpbF9yZXRyeS5SRVRSWV9NT0RFUy5BREFQVElWRSkge1xuICAgICAgICByZXR1cm4gbmV3IGltcG9ydF91dGlsX3JldHJ5LkFkYXB0aXZlUmV0cnlTdHJhdGVneShtYXhBdHRlbXB0cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGltcG9ydF91dGlsX3JldHJ5LlN0YW5kYXJkUmV0cnlTdHJhdGVneShtYXhBdHRlbXB0cyk7XG4gICAgfVxuICB9KTtcbn0sIFwicmVzb2x2ZVJldHJ5Q29uZmlnXCIpO1xudmFyIEVOVl9SRVRSWV9NT0RFID0gXCJBV1NfUkVUUllfTU9ERVwiO1xudmFyIENPTkZJR19SRVRSWV9NT0RFID0gXCJyZXRyeV9tb2RlXCI7XG52YXIgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IGVudltFTlZfUkVUUllfTU9ERV0sXG4gIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IHByb2ZpbGVbQ09ORklHX1JFVFJZX01PREVdLFxuICBkZWZhdWx0OiBpbXBvcnRfdXRpbF9yZXRyeS5ERUZBVUxUX1JFVFJZX01PREVcbn07XG5cbi8vIHNyYy9vbWl0UmV0cnlIZWFkZXJzTWlkZGxld2FyZS50c1xuXG5cbnZhciBvbWl0UmV0cnlIZWFkZXJzTWlkZGxld2FyZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gKG5leHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgaWYgKGltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW2ltcG9ydF91dGlsX3JldHJ5LklOVk9DQVRJT05fSURfSEVBREVSXTtcbiAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW2ltcG9ydF91dGlsX3JldHJ5LlJFUVVFU1RfSEVBREVSXTtcbiAgfVxuICByZXR1cm4gbmV4dChhcmdzKTtcbn0sIFwib21pdFJldHJ5SGVhZGVyc01pZGRsZXdhcmVcIik7XG52YXIgb21pdFJldHJ5SGVhZGVyc01pZGRsZXdhcmVPcHRpb25zID0ge1xuICBuYW1lOiBcIm9taXRSZXRyeUhlYWRlcnNNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIlJFVFJZXCIsIFwiSEVBREVSU1wiLCBcIk9NSVRfUkVUUllfSEVBREVSU1wiXSxcbiAgcmVsYXRpb246IFwiYmVmb3JlXCIsXG4gIHRvTWlkZGxld2FyZTogXCJhd3NBdXRoTWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZVxufTtcbnZhciBnZXRPbWl0UmV0cnlIZWFkZXJzUGx1Z2luID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGRSZWxhdGl2ZVRvKG9taXRSZXRyeUhlYWRlcnNNaWRkbGV3YXJlKCksIG9taXRSZXRyeUhlYWRlcnNNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH1cbn0pLCBcImdldE9taXRSZXRyeUhlYWRlcnNQbHVnaW5cIik7XG5cbi8vIHNyYy9yZXRyeU1pZGRsZXdhcmUudHNcblxuXG52YXIgaW1wb3J0X3NtaXRoeV9jbGllbnQgPSByZXF1aXJlKFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCIpO1xuXG5cbnZhciBpbXBvcnRfaXNTdHJlYW1pbmdQYXlsb2FkID0gcmVxdWlyZShcIi4vaXNTdHJlYW1pbmdQYXlsb2FkL2lzU3RyZWFtaW5nUGF5bG9hZFwiKTtcbnZhciByZXRyeU1pZGRsZXdhcmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgbGV0IHJldHJ5U3RyYXRlZ3kgPSBhd2FpdCBvcHRpb25zLnJldHJ5U3RyYXRlZ3koKTtcbiAgY29uc3QgbWF4QXR0ZW1wdHMgPSBhd2FpdCBvcHRpb25zLm1heEF0dGVtcHRzKCk7XG4gIGlmIChpc1JldHJ5U3RyYXRlZ3lWMihyZXRyeVN0cmF0ZWd5KSkge1xuICAgIHJldHJ5U3RyYXRlZ3kgPSByZXRyeVN0cmF0ZWd5O1xuICAgIGxldCByZXRyeVRva2VuID0gYXdhaXQgcmV0cnlTdHJhdGVneS5hY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4oY29udGV4dFtcInBhcnRpdGlvbl9pZFwiXSk7XG4gICAgbGV0IGxhc3RFcnJvciA9IG5ldyBFcnJvcigpO1xuICAgIGxldCBhdHRlbXB0cyA9IDA7XG4gICAgbGV0IHRvdGFsUmV0cnlEZWxheSA9IDA7XG4gICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGNvbnN0IGlzUmVxdWVzdCA9IGltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCk7XG4gICAgaWYgKGlzUmVxdWVzdCkge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzW2ltcG9ydF91dGlsX3JldHJ5LklOVk9DQVRJT05fSURfSEVBREVSXSA9ICgwLCBpbXBvcnRfdXVpZC52NCkoKTtcbiAgICB9XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3QpIHtcbiAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbaW1wb3J0X3V0aWxfcmV0cnkuUkVRVUVTVF9IRUFERVJdID0gYGF0dGVtcHQ9JHthdHRlbXB0cyArIDF9OyBtYXg9JHttYXhBdHRlbXB0c31gO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgcmVzcG9uc2UsIG91dHB1dCB9ID0gYXdhaXQgbmV4dChhcmdzKTtcbiAgICAgICAgcmV0cnlTdHJhdGVneS5yZWNvcmRTdWNjZXNzKHJldHJ5VG9rZW4pO1xuICAgICAgICBvdXRwdXQuJG1ldGFkYXRhLmF0dGVtcHRzID0gYXR0ZW1wdHMgKyAxO1xuICAgICAgICBvdXRwdXQuJG1ldGFkYXRhLnRvdGFsUmV0cnlEZWxheSA9IHRvdGFsUmV0cnlEZWxheTtcbiAgICAgICAgcmV0dXJuIHsgcmVzcG9uc2UsIG91dHB1dCB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCByZXRyeUVycm9ySW5mbyA9IGdldFJldHJ5RXJyb3JJbmZvKGUpO1xuICAgICAgICBsYXN0RXJyb3IgPSBhc1Nka0Vycm9yKGUpO1xuICAgICAgICBpZiAoaXNSZXF1ZXN0ICYmICgwLCBpbXBvcnRfaXNTdHJlYW1pbmdQYXlsb2FkLmlzU3RyZWFtaW5nUGF5bG9hZCkocmVxdWVzdCkpIHtcbiAgICAgICAgICAoY29udGV4dC5sb2dnZXIgaW5zdGFuY2VvZiBpbXBvcnRfc21pdGh5X2NsaWVudC5Ob09wTG9nZ2VyID8gY29uc29sZSA6IGNvbnRleHQubG9nZ2VyKT8ud2FybihcbiAgICAgICAgICAgIFwiQW4gZXJyb3Igd2FzIGVuY291bnRlcmVkIGluIGEgbm9uLXJldHJ5YWJsZSBzdHJlYW1pbmcgcmVxdWVzdC5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhyb3cgbGFzdEVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0cnlUb2tlbiA9IGF3YWl0IHJldHJ5U3RyYXRlZ3kucmVmcmVzaFJldHJ5VG9rZW5Gb3JSZXRyeShyZXRyeVRva2VuLCByZXRyeUVycm9ySW5mbyk7XG4gICAgICAgIH0gY2F0Y2ggKHJlZnJlc2hFcnJvcikge1xuICAgICAgICAgIGlmICghbGFzdEVycm9yLiRtZXRhZGF0YSkge1xuICAgICAgICAgICAgbGFzdEVycm9yLiRtZXRhZGF0YSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RXJyb3IuJG1ldGFkYXRhLmF0dGVtcHRzID0gYXR0ZW1wdHMgKyAxO1xuICAgICAgICAgIGxhc3RFcnJvci4kbWV0YWRhdGEudG90YWxSZXRyeURlbGF5ID0gdG90YWxSZXRyeURlbGF5O1xuICAgICAgICAgIHRocm93IGxhc3RFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBhdHRlbXB0cyA9IHJldHJ5VG9rZW4uZ2V0UmV0cnlDb3VudCgpO1xuICAgICAgICBjb25zdCBkZWxheSA9IHJldHJ5VG9rZW4uZ2V0UmV0cnlEZWxheSgpO1xuICAgICAgICB0b3RhbFJldHJ5RGVsYXkgKz0gZGVsYXk7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHJ5U3RyYXRlZ3kgPSByZXRyeVN0cmF0ZWd5O1xuICAgIGlmIChyZXRyeVN0cmF0ZWd5Py5tb2RlKVxuICAgICAgY29udGV4dC51c2VyQWdlbnQgPSBbLi4uY29udGV4dC51c2VyQWdlbnQgfHwgW10sIFtcImNmZy9yZXRyeS1tb2RlXCIsIHJldHJ5U3RyYXRlZ3kubW9kZV1dO1xuICAgIHJldHVybiByZXRyeVN0cmF0ZWd5LnJldHJ5KG5leHQsIGFyZ3MpO1xuICB9XG59LCBcInJldHJ5TWlkZGxld2FyZVwiKTtcbnZhciBpc1JldHJ5U3RyYXRlZ3lWMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHJldHJ5U3RyYXRlZ3kpID0+IHR5cGVvZiByZXRyeVN0cmF0ZWd5LmFjcXVpcmVJbml0aWFsUmV0cnlUb2tlbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgcmV0cnlTdHJhdGVneS5yZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByZXRyeVN0cmF0ZWd5LnJlY29yZFN1Y2Nlc3MgIT09IFwidW5kZWZpbmVkXCIsIFwiaXNSZXRyeVN0cmF0ZWd5VjJcIik7XG52YXIgZ2V0UmV0cnlFcnJvckluZm8gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlcnJvcikgPT4ge1xuICBjb25zdCBlcnJvckluZm8gPSB7XG4gICAgZXJyb3IsXG4gICAgZXJyb3JUeXBlOiBnZXRSZXRyeUVycm9yVHlwZShlcnJvcilcbiAgfTtcbiAgY29uc3QgcmV0cnlBZnRlckhpbnQgPSBnZXRSZXRyeUFmdGVySGludChlcnJvci4kcmVzcG9uc2UpO1xuICBpZiAocmV0cnlBZnRlckhpbnQpIHtcbiAgICBlcnJvckluZm8ucmV0cnlBZnRlckhpbnQgPSByZXRyeUFmdGVySGludDtcbiAgfVxuICByZXR1cm4gZXJyb3JJbmZvO1xufSwgXCJnZXRSZXRyeUVycm9ySW5mb1wiKTtcbnZhciBnZXRSZXRyeUVycm9yVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVycm9yKSA9PiB7XG4gIGlmICgoMCwgaW1wb3J0X3NlcnZpY2VfZXJyb3JfY2xhc3NpZmljYXRpb24uaXNUaHJvdHRsaW5nRXJyb3IpKGVycm9yKSlcbiAgICByZXR1cm4gXCJUSFJPVFRMSU5HXCI7XG4gIGlmICgoMCwgaW1wb3J0X3NlcnZpY2VfZXJyb3JfY2xhc3NpZmljYXRpb24uaXNUcmFuc2llbnRFcnJvcikoZXJyb3IpKVxuICAgIHJldHVybiBcIlRSQU5TSUVOVFwiO1xuICBpZiAoKDAsIGltcG9ydF9zZXJ2aWNlX2Vycm9yX2NsYXNzaWZpY2F0aW9uLmlzU2VydmVyRXJyb3IpKGVycm9yKSlcbiAgICByZXR1cm4gXCJTRVJWRVJfRVJST1JcIjtcbiAgcmV0dXJuIFwiQ0xJRU5UX0VSUk9SXCI7XG59LCBcImdldFJldHJ5RXJyb3JUeXBlXCIpO1xudmFyIHJldHJ5TWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gIG5hbWU6IFwicmV0cnlNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIlJFVFJZXCJdLFxuICBzdGVwOiBcImZpbmFsaXplUmVxdWVzdFwiLFxuICBwcmlvcml0eTogXCJoaWdoXCIsXG4gIG92ZXJyaWRlOiB0cnVlXG59O1xudmFyIGdldFJldHJ5UGx1Z2luID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQocmV0cnlNaWRkbGV3YXJlKG9wdGlvbnMpLCByZXRyeU1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfVxufSksIFwiZ2V0UmV0cnlQbHVnaW5cIik7XG52YXIgZ2V0UmV0cnlBZnRlckhpbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXNwb25zZSkgPT4ge1xuICBpZiAoIWltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXNwb25zZS5pc0luc3RhbmNlKHJlc3BvbnNlKSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXJOYW1lID0gT2JqZWN0LmtleXMocmVzcG9uc2UuaGVhZGVycykuZmluZCgoa2V5KSA9PiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJyZXRyeS1hZnRlclwiKTtcbiAgaWYgKCFyZXRyeUFmdGVySGVhZGVyTmFtZSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHJldHJ5QWZ0ZXIgPSByZXNwb25zZS5oZWFkZXJzW3JldHJ5QWZ0ZXJIZWFkZXJOYW1lXTtcbiAgY29uc3QgcmV0cnlBZnRlclNlY29uZHMgPSBOdW1iZXIocmV0cnlBZnRlcik7XG4gIGlmICghTnVtYmVyLmlzTmFOKHJldHJ5QWZ0ZXJTZWNvbmRzKSlcbiAgICByZXR1cm4gbmV3IERhdGUocmV0cnlBZnRlclNlY29uZHMgKiAxZTMpO1xuICBjb25zdCByZXRyeUFmdGVyRGF0ZSA9IG5ldyBEYXRlKHJldHJ5QWZ0ZXIpO1xuICByZXR1cm4gcmV0cnlBZnRlckRhdGU7XG59LCBcImdldFJldHJ5QWZ0ZXJIaW50XCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQWRhcHRpdmVSZXRyeVN0cmF0ZWd5LFxuICBTdGFuZGFyZFJldHJ5U3RyYXRlZ3ksXG4gIEVOVl9NQVhfQVRURU1QVFMsXG4gIENPTkZJR19NQVhfQVRURU1QVFMsXG4gIE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMsXG4gIHJlc29sdmVSZXRyeUNvbmZpZyxcbiAgRU5WX1JFVFJZX01PREUsXG4gIENPTkZJR19SRVRSWV9NT0RFLFxuICBOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gIGRlZmF1bHREZWxheURlY2lkZXIsXG4gIG9taXRSZXRyeUhlYWRlcnNNaWRkbGV3YXJlLFxuICBvbWl0UmV0cnlIZWFkZXJzTWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldE9taXRSZXRyeUhlYWRlcnNQbHVnaW4sXG4gIGRlZmF1bHRSZXRyeURlY2lkZXIsXG4gIHJldHJ5TWlkZGxld2FyZSxcbiAgcmV0cnlNaWRkbGV3YXJlT3B0aW9ucyxcbiAgZ2V0UmV0cnlQbHVnaW4sXG4gIGdldFJldHJ5QWZ0ZXJIaW50XG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSBleHBvcnRzLmRlZmF1bHREeW5hbW9EQkh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBleHBvcnRzLmRlZmF1bHREeW5hbW9EQkh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NvcmVcIik7XG5jb25zdCB1dGlsX21pZGRsZXdhcmVfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiKTtcbmNvbnN0IGRlZmF1bHREeW5hbW9EQkh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gYXN5bmMgKGNvbmZpZywgY29udGV4dCwgaW5wdXQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcGVyYXRpb246ICgwLCB1dGlsX21pZGRsZXdhcmVfMS5nZXRTbWl0aHlDb250ZXh0KShjb250ZXh0KS5vcGVyYXRpb24sXG4gICAgICAgIHJlZ2lvbjogKGF3YWl0ICgwLCB1dGlsX21pZGRsZXdhcmVfMS5ub3JtYWxpemVQcm92aWRlcikoY29uZmlnLnJlZ2lvbikoKSkgfHxcbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgYHJlZ2lvbmAgdG8gYmUgY29uZmlndXJlZCBmb3IgYGF3cy5hdXRoI3NpZ3Y0YFwiKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgfTtcbn07XG5leHBvcnRzLmRlZmF1bHREeW5hbW9EQkh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gZGVmYXVsdER5bmFtb0RCSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXI7XG5mdW5jdGlvbiBjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiBcImR5bmFtb2RiXCIsXG4gICAgICAgICAgICByZWdpb246IGF1dGhQYXJhbWV0ZXJzLnJlZ2lvbixcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydGllc0V4dHJhY3RvcjogKGNvbmZpZywgY29udGV4dCkgPT4gKHtcbiAgICAgICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuY29uc3QgZGVmYXVsdER5bmFtb0RCSHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IChhdXRoUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICBzd2l0Y2ggKGF1dGhQYXJhbWV0ZXJzLm9wZXJhdGlvbikge1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5leHBvcnRzLmRlZmF1bHREeW5hbW9EQkh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBkZWZhdWx0RHluYW1vREJIdHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuY29uc3QgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ18wID0gKDAsIGNvcmVfMS5yZXNvbHZlQXdzU2RrU2lnVjRDb25maWcpKGNvbmZpZyk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29uZmlnXzAsIHtcbiAgICAgICAgYXV0aFNjaGVtZVByZWZlcmVuY2U6ICgwLCB1dGlsX21pZGRsZXdhcmVfMS5ub3JtYWxpemVQcm92aWRlcikoY29uZmlnLmF1dGhTY2hlbWVQcmVmZXJlbmNlID8/IFtdKSxcbiAgICB9KTtcbn07XG5leHBvcnRzLnJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyA9IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SG9tZURpciA9IHZvaWQgMDtcbmNvbnN0IG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGhvbWVEaXJDYWNoZSA9IHt9O1xuY29uc3QgZ2V0SG9tZURpckNhY2hlS2V5ID0gKCkgPT4ge1xuICAgIGlmIChwcm9jZXNzICYmIHByb2Nlc3MuZ2V0ZXVpZCkge1xuICAgICAgICByZXR1cm4gYCR7cHJvY2Vzcy5nZXRldWlkKCl9YDtcbiAgICB9XG4gICAgcmV0dXJuIFwiREVGQVVMVFwiO1xufTtcbmNvbnN0IGdldEhvbWVEaXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBIT01FLCBVU0VSUFJPRklMRSwgSE9NRVBBVEgsIEhPTUVEUklWRSA9IGBDOiR7cGF0aF8xLnNlcH1gIH0gPSBwcm9jZXNzLmVudjtcbiAgICBpZiAoSE9NRSlcbiAgICAgICAgcmV0dXJuIEhPTUU7XG4gICAgaWYgKFVTRVJQUk9GSUxFKVxuICAgICAgICByZXR1cm4gVVNFUlBST0ZJTEU7XG4gICAgaWYgKEhPTUVQQVRIKVxuICAgICAgICByZXR1cm4gYCR7SE9NRURSSVZFfSR7SE9NRVBBVEh9YDtcbiAgICBjb25zdCBob21lRGlyQ2FjaGVLZXkgPSBnZXRIb21lRGlyQ2FjaGVLZXkoKTtcbiAgICBpZiAoIWhvbWVEaXJDYWNoZVtob21lRGlyQ2FjaGVLZXldKVxuICAgICAgICBob21lRGlyQ2FjaGVbaG9tZURpckNhY2hlS2V5XSA9ICgwLCBvc18xLmhvbWVkaXIpKCk7XG4gICAgcmV0dXJuIGhvbWVEaXJDYWNoZVtob21lRGlyQ2FjaGVLZXldO1xufTtcbmV4cG9ydHMuZ2V0SG9tZURpciA9IGdldEhvbWVEaXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFNTT1Rva2VuRmlsZXBhdGggPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGdldEhvbWVEaXJfMSA9IHJlcXVpcmUoXCIuL2dldEhvbWVEaXJcIik7XG5jb25zdCBnZXRTU09Ub2tlbkZpbGVwYXRoID0gKGlkKSA9PiB7XG4gICAgY29uc3QgaGFzaGVyID0gKDAsIGNyeXB0b18xLmNyZWF0ZUhhc2gpKFwic2hhMVwiKTtcbiAgICBjb25zdCBjYWNoZU5hbWUgPSBoYXNoZXIudXBkYXRlKGlkKS5kaWdlc3QoXCJoZXhcIik7XG4gICAgcmV0dXJuICgwLCBwYXRoXzEuam9pbikoKDAsIGdldEhvbWVEaXJfMS5nZXRIb21lRGlyKSgpLCBcIi5hd3NcIiwgXCJzc29cIiwgXCJjYWNoZVwiLCBgJHtjYWNoZU5hbWV9Lmpzb25gKTtcbn07XG5leHBvcnRzLmdldFNTT1Rva2VuRmlsZXBhdGggPSBnZXRTU09Ub2tlbkZpbGVwYXRoO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRTU09Ub2tlbkZyb21GaWxlID0gdm9pZCAwO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGdldFNTT1Rva2VuRmlsZXBhdGhfMSA9IHJlcXVpcmUoXCIuL2dldFNTT1Rva2VuRmlsZXBhdGhcIik7XG5jb25zdCB7IHJlYWRGaWxlIH0gPSBmc18xLnByb21pc2VzO1xuY29uc3QgZ2V0U1NPVG9rZW5Gcm9tRmlsZSA9IGFzeW5jIChpZCkgPT4ge1xuICAgIGNvbnN0IHNzb1Rva2VuRmlsZXBhdGggPSAoMCwgZ2V0U1NPVG9rZW5GaWxlcGF0aF8xLmdldFNTT1Rva2VuRmlsZXBhdGgpKGlkKTtcbiAgICBjb25zdCBzc29Ub2tlblRleHQgPSBhd2FpdCByZWFkRmlsZShzc29Ub2tlbkZpbGVwYXRoLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3NvVG9rZW5UZXh0KTtcbn07XG5leHBvcnRzLmdldFNTT1Rva2VuRnJvbUZpbGUgPSBnZXRTU09Ub2tlbkZyb21GaWxlO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zbHVycEZpbGUgPSB2b2lkIDA7XG5jb25zdCBmc18xID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgeyByZWFkRmlsZSB9ID0gZnNfMS5wcm9taXNlcztcbmNvbnN0IGZpbGVQcm9taXNlc0hhc2ggPSB7fTtcbmNvbnN0IHNsdXJwRmlsZSA9IChwYXRoLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFmaWxlUHJvbWlzZXNIYXNoW3BhdGhdIHx8IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaWdub3JlQ2FjaGUpKSB7XG4gICAgICAgIGZpbGVQcm9taXNlc0hhc2hbcGF0aF0gPSByZWFkRmlsZShwYXRoLCBcInV0ZjhcIik7XG4gICAgfVxuICAgIHJldHVybiBmaWxlUHJvbWlzZXNIYXNoW3BhdGhdO1xufTtcbmV4cG9ydHMuc2x1cnBGaWxlID0gc2x1cnBGaWxlO1xuIiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fcmVFeHBvcnQgPSAodGFyZ2V0LCBtb2QsIHNlY29uZFRhcmdldCkgPT4gKF9fY29weVByb3BzKHRhcmdldCwgbW9kLCBcImRlZmF1bHRcIiksIHNlY29uZFRhcmdldCAmJiBfX2NvcHlQcm9wcyhzZWNvbmRUYXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgQ09ORklHX1BSRUZJWF9TRVBBUkFUT1I6ICgpID0+IENPTkZJR19QUkVGSVhfU0VQQVJBVE9SLFxuICBERUZBVUxUX1BST0ZJTEU6ICgpID0+IERFRkFVTFRfUFJPRklMRSxcbiAgRU5WX1BST0ZJTEU6ICgpID0+IEVOVl9QUk9GSUxFLFxuICBnZXRQcm9maWxlTmFtZTogKCkgPT4gZ2V0UHJvZmlsZU5hbWUsXG4gIGxvYWRTaGFyZWRDb25maWdGaWxlczogKCkgPT4gbG9hZFNoYXJlZENvbmZpZ0ZpbGVzLFxuICBsb2FkU3NvU2Vzc2lvbkRhdGE6ICgpID0+IGxvYWRTc29TZXNzaW9uRGF0YSxcbiAgcGFyc2VLbm93bkZpbGVzOiAoKSA9PiBwYXJzZUtub3duRmlsZXNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vLi9nZXRIb21lRGlyXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5cbi8vIHNyYy9nZXRQcm9maWxlTmFtZS50c1xudmFyIEVOVl9QUk9GSUxFID0gXCJBV1NfUFJPRklMRVwiO1xudmFyIERFRkFVTFRfUFJPRklMRSA9IFwiZGVmYXVsdFwiO1xudmFyIGdldFByb2ZpbGVOYW1lID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5pdCkgPT4gaW5pdC5wcm9maWxlIHx8IHByb2Nlc3MuZW52W0VOVl9QUk9GSUxFXSB8fCBERUZBVUxUX1BST0ZJTEUsIFwiZ2V0UHJvZmlsZU5hbWVcIik7XG5cbi8vIHNyYy9pbmRleC50c1xuX19yZUV4cG9ydChzcmNfZXhwb3J0cywgcmVxdWlyZShcIi4vLi9nZXRTU09Ub2tlbkZpbGVwYXRoXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHNyY19leHBvcnRzLCByZXF1aXJlKFwiLi8uL2dldFNTT1Rva2VuRnJvbUZpbGVcIiksIG1vZHVsZS5leHBvcnRzKTtcblxuLy8gc3JjL2xvYWRTaGFyZWRDb25maWdGaWxlcy50c1xuXG5cbi8vIHNyYy9nZXRDb25maWdEYXRhLnRzXG52YXIgaW1wb3J0X3R5cGVzID0gcmVxdWlyZShcIkBzbWl0aHkvdHlwZXNcIik7XG52YXIgZ2V0Q29uZmlnRGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEpID0+IE9iamVjdC5lbnRyaWVzKGRhdGEpLmZpbHRlcigoW2tleV0pID0+IHtcbiAgY29uc3QgaW5kZXhPZlNlcGFyYXRvciA9IGtleS5pbmRleE9mKENPTkZJR19QUkVGSVhfU0VQQVJBVE9SKTtcbiAgaWYgKGluZGV4T2ZTZXBhcmF0b3IgPT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGltcG9ydF90eXBlcy5JbmlTZWN0aW9uVHlwZSkuaW5jbHVkZXMoa2V5LnN1YnN0cmluZygwLCBpbmRleE9mU2VwYXJhdG9yKSk7XG59KS5yZWR1Y2UoXG4gIChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IGluZGV4T2ZTZXBhcmF0b3IgPSBrZXkuaW5kZXhPZihDT05GSUdfUFJFRklYX1NFUEFSQVRPUik7XG4gICAgY29uc3QgdXBkYXRlZEtleSA9IGtleS5zdWJzdHJpbmcoMCwgaW5kZXhPZlNlcGFyYXRvcikgPT09IGltcG9ydF90eXBlcy5JbmlTZWN0aW9uVHlwZS5QUk9GSUxFID8ga2V5LnN1YnN0cmluZyhpbmRleE9mU2VwYXJhdG9yICsgMSkgOiBrZXk7XG4gICAgYWNjW3VwZGF0ZWRLZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGFjYztcbiAgfSxcbiAge1xuICAgIC8vIFBvcHVsYXRlIGRlZmF1bHQgcHJvZmlsZSwgaWYgcHJlc2VudC5cbiAgICAuLi5kYXRhLmRlZmF1bHQgJiYgeyBkZWZhdWx0OiBkYXRhLmRlZmF1bHQgfVxuICB9XG4pLCBcImdldENvbmZpZ0RhdGFcIik7XG5cbi8vIHNyYy9nZXRDb25maWdGaWxlcGF0aC50c1xudmFyIGltcG9ydF9wYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG52YXIgaW1wb3J0X2dldEhvbWVEaXIgPSByZXF1aXJlKFwiLi8uL2dldEhvbWVEaXJcIik7XG52YXIgRU5WX0NPTkZJR19QQVRIID0gXCJBV1NfQ09ORklHX0ZJTEVcIjtcbnZhciBnZXRDb25maWdGaWxlcGF0aCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gcHJvY2Vzcy5lbnZbRU5WX0NPTkZJR19QQVRIXSB8fCAoMCwgaW1wb3J0X3BhdGguam9pbikoKDAsIGltcG9ydF9nZXRIb21lRGlyLmdldEhvbWVEaXIpKCksIFwiLmF3c1wiLCBcImNvbmZpZ1wiKSwgXCJnZXRDb25maWdGaWxlcGF0aFwiKTtcblxuLy8gc3JjL2dldENyZWRlbnRpYWxzRmlsZXBhdGgudHNcblxudmFyIGltcG9ydF9nZXRIb21lRGlyMiA9IHJlcXVpcmUoXCIuLy4vZ2V0SG9tZURpclwiKTtcbnZhciBFTlZfQ1JFREVOVElBTFNfUEFUSCA9IFwiQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFXCI7XG52YXIgZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gcHJvY2Vzcy5lbnZbRU5WX0NSRURFTlRJQUxTX1BBVEhdIHx8ICgwLCBpbXBvcnRfcGF0aC5qb2luKSgoMCwgaW1wb3J0X2dldEhvbWVEaXIyLmdldEhvbWVEaXIpKCksIFwiLmF3c1wiLCBcImNyZWRlbnRpYWxzXCIpLCBcImdldENyZWRlbnRpYWxzRmlsZXBhdGhcIik7XG5cbi8vIHNyYy9sb2FkU2hhcmVkQ29uZmlnRmlsZXMudHNcbnZhciBpbXBvcnRfZ2V0SG9tZURpcjMgPSByZXF1aXJlKFwiLi8uL2dldEhvbWVEaXJcIik7XG5cbi8vIHNyYy9wYXJzZUluaS50c1xuXG52YXIgcHJlZml4S2V5UmVnZXggPSAvXihbXFx3LV0rKVxccyhbXCInXSk/KFtcXHctQFxcK1xcLiU6L10rKVxcMiQvO1xudmFyIHByb2ZpbGVOYW1lQmxvY2tMaXN0ID0gW1wiX19wcm90b19fXCIsIFwicHJvZmlsZSBfX3Byb3RvX19cIl07XG52YXIgcGFyc2VJbmkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbmlEYXRhKSA9PiB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBsZXQgY3VycmVudFNlY3Rpb247XG4gIGxldCBjdXJyZW50U3ViU2VjdGlvbjtcbiAgZm9yIChjb25zdCBpbmlMaW5lIG9mIGluaURhdGEuc3BsaXQoL1xccj9cXG4vKSkge1xuICAgIGNvbnN0IHRyaW1tZWRMaW5lID0gaW5pTGluZS5zcGxpdCgvKF58XFxzKVs7I10vKVswXS50cmltKCk7XG4gICAgY29uc3QgaXNTZWN0aW9uID0gdHJpbW1lZExpbmVbMF0gPT09IFwiW1wiICYmIHRyaW1tZWRMaW5lW3RyaW1tZWRMaW5lLmxlbmd0aCAtIDFdID09PSBcIl1cIjtcbiAgICBpZiAoaXNTZWN0aW9uKSB7XG4gICAgICBjdXJyZW50U2VjdGlvbiA9IHZvaWQgMDtcbiAgICAgIGN1cnJlbnRTdWJTZWN0aW9uID0gdm9pZCAwO1xuICAgICAgY29uc3Qgc2VjdGlvbk5hbWUgPSB0cmltbWVkTGluZS5zdWJzdHJpbmcoMSwgdHJpbW1lZExpbmUubGVuZ3RoIC0gMSk7XG4gICAgICBjb25zdCBtYXRjaGVzID0gcHJlZml4S2V5UmVnZXguZXhlYyhzZWN0aW9uTmFtZSk7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBjb25zdCBbLCBwcmVmaXgsICwgbmFtZV0gPSBtYXRjaGVzO1xuICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhpbXBvcnRfdHlwZXMuSW5pU2VjdGlvblR5cGUpLmluY2x1ZGVzKHByZWZpeCkpIHtcbiAgICAgICAgICBjdXJyZW50U2VjdGlvbiA9IFtwcmVmaXgsIG5hbWVdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50U2VjdGlvbiA9IHNlY3Rpb25OYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHByb2ZpbGVOYW1lQmxvY2tMaXN0LmluY2x1ZGVzKHNlY3Rpb25OYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvdW5kIGludmFsaWQgcHJvZmlsZSBuYW1lIFwiJHtzZWN0aW9uTmFtZX1cImApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFNlY3Rpb24pIHtcbiAgICAgIGNvbnN0IGluZGV4T2ZFcXVhbHNTaWduID0gdHJpbW1lZExpbmUuaW5kZXhPZihcIj1cIik7XG4gICAgICBpZiAoIVswLCAtMV0uaW5jbHVkZXMoaW5kZXhPZkVxdWFsc1NpZ24pKSB7XG4gICAgICAgIGNvbnN0IFtuYW1lLCB2YWx1ZV0gPSBbXG4gICAgICAgICAgdHJpbW1lZExpbmUuc3Vic3RyaW5nKDAsIGluZGV4T2ZFcXVhbHNTaWduKS50cmltKCksXG4gICAgICAgICAgdHJpbW1lZExpbmUuc3Vic3RyaW5nKGluZGV4T2ZFcXVhbHNTaWduICsgMSkudHJpbSgpXG4gICAgICAgIF07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgIGN1cnJlbnRTdWJTZWN0aW9uID0gbmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY3VycmVudFN1YlNlY3Rpb24gJiYgaW5pTGluZS50cmltU3RhcnQoKSA9PT0gaW5pTGluZSkge1xuICAgICAgICAgICAgY3VycmVudFN1YlNlY3Rpb24gPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcFtjdXJyZW50U2VjdGlvbl0gPSBtYXBbY3VycmVudFNlY3Rpb25dIHx8IHt9O1xuICAgICAgICAgIGNvbnN0IGtleSA9IGN1cnJlbnRTdWJTZWN0aW9uID8gW2N1cnJlbnRTdWJTZWN0aW9uLCBuYW1lXS5qb2luKENPTkZJR19QUkVGSVhfU0VQQVJBVE9SKSA6IG5hbWU7XG4gICAgICAgICAgbWFwW2N1cnJlbnRTZWN0aW9uXVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hcDtcbn0sIFwicGFyc2VJbmlcIik7XG5cbi8vIHNyYy9sb2FkU2hhcmVkQ29uZmlnRmlsZXMudHNcbnZhciBpbXBvcnRfc2x1cnBGaWxlID0gcmVxdWlyZShcIi4vLi9zbHVycEZpbGVcIik7XG52YXIgc3dhbGxvd0Vycm9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiAoe30pLCBcInN3YWxsb3dFcnJvclwiKTtcbnZhciBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiA9IFwiLlwiO1xudmFyIGxvYWRTaGFyZWRDb25maWdGaWxlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGluaXQgPSB7fSkgPT4ge1xuICBjb25zdCB7IGZpbGVwYXRoID0gZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCgpLCBjb25maWdGaWxlcGF0aCA9IGdldENvbmZpZ0ZpbGVwYXRoKCkgfSA9IGluaXQ7XG4gIGNvbnN0IGhvbWVEaXIgPSAoMCwgaW1wb3J0X2dldEhvbWVEaXIzLmdldEhvbWVEaXIpKCk7XG4gIGNvbnN0IHJlbGF0aXZlSG9tZURpclByZWZpeCA9IFwifi9cIjtcbiAgbGV0IHJlc29sdmVkRmlsZXBhdGggPSBmaWxlcGF0aDtcbiAgaWYgKGZpbGVwYXRoLnN0YXJ0c1dpdGgocmVsYXRpdmVIb21lRGlyUHJlZml4KSkge1xuICAgIHJlc29sdmVkRmlsZXBhdGggPSAoMCwgaW1wb3J0X3BhdGguam9pbikoaG9tZURpciwgZmlsZXBhdGguc2xpY2UoMikpO1xuICB9XG4gIGxldCByZXNvbHZlZENvbmZpZ0ZpbGVwYXRoID0gY29uZmlnRmlsZXBhdGg7XG4gIGlmIChjb25maWdGaWxlcGF0aC5zdGFydHNXaXRoKHJlbGF0aXZlSG9tZURpclByZWZpeCkpIHtcbiAgICByZXNvbHZlZENvbmZpZ0ZpbGVwYXRoID0gKDAsIGltcG9ydF9wYXRoLmpvaW4pKGhvbWVEaXIsIGNvbmZpZ0ZpbGVwYXRoLnNsaWNlKDIpKTtcbiAgfVxuICBjb25zdCBwYXJzZWRGaWxlcyA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAoMCwgaW1wb3J0X3NsdXJwRmlsZS5zbHVycEZpbGUpKHJlc29sdmVkQ29uZmlnRmlsZXBhdGgsIHtcbiAgICAgIGlnbm9yZUNhY2hlOiBpbml0Lmlnbm9yZUNhY2hlXG4gICAgfSkudGhlbihwYXJzZUluaSkudGhlbihnZXRDb25maWdEYXRhKS5jYXRjaChzd2FsbG93RXJyb3IpLFxuICAgICgwLCBpbXBvcnRfc2x1cnBGaWxlLnNsdXJwRmlsZSkocmVzb2x2ZWRGaWxlcGF0aCwge1xuICAgICAgaWdub3JlQ2FjaGU6IGluaXQuaWdub3JlQ2FjaGVcbiAgICB9KS50aGVuKHBhcnNlSW5pKS5jYXRjaChzd2FsbG93RXJyb3IpXG4gIF0pO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ0ZpbGU6IHBhcnNlZEZpbGVzWzBdLFxuICAgIGNyZWRlbnRpYWxzRmlsZTogcGFyc2VkRmlsZXNbMV1cbiAgfTtcbn0sIFwibG9hZFNoYXJlZENvbmZpZ0ZpbGVzXCIpO1xuXG4vLyBzcmMvZ2V0U3NvU2Vzc2lvbkRhdGEudHNcblxudmFyIGdldFNzb1Nlc3Npb25EYXRhID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZGF0YSkgPT4gT2JqZWN0LmVudHJpZXMoZGF0YSkuZmlsdGVyKChba2V5XSkgPT4ga2V5LnN0YXJ0c1dpdGgoaW1wb3J0X3R5cGVzLkluaVNlY3Rpb25UeXBlLlNTT19TRVNTSU9OICsgQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoeyAuLi5hY2MsIFtrZXkuc3Vic3RyaW5nKGtleS5pbmRleE9mKENPTkZJR19QUkVGSVhfU0VQQVJBVE9SKSArIDEpXTogdmFsdWUgfSksIHt9KSwgXCJnZXRTc29TZXNzaW9uRGF0YVwiKTtcblxuLy8gc3JjL2xvYWRTc29TZXNzaW9uRGF0YS50c1xudmFyIGltcG9ydF9zbHVycEZpbGUyID0gcmVxdWlyZShcIi4vLi9zbHVycEZpbGVcIik7XG52YXIgc3dhbGxvd0Vycm9yMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gKHt9KSwgXCJzd2FsbG93RXJyb3JcIik7XG52YXIgbG9hZFNzb1Nlc3Npb25EYXRhID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5pdCA9IHt9KSA9PiAoMCwgaW1wb3J0X3NsdXJwRmlsZTIuc2x1cnBGaWxlKShpbml0LmNvbmZpZ0ZpbGVwYXRoID8/IGdldENvbmZpZ0ZpbGVwYXRoKCkpLnRoZW4ocGFyc2VJbmkpLnRoZW4oZ2V0U3NvU2Vzc2lvbkRhdGEpLmNhdGNoKHN3YWxsb3dFcnJvcjIpLCBcImxvYWRTc29TZXNzaW9uRGF0YVwiKTtcblxuLy8gc3JjL21lcmdlQ29uZmlnRmlsZXMudHNcbnZhciBtZXJnZUNvbmZpZ0ZpbGVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoLi4uZmlsZXMpID0+IHtcbiAgY29uc3QgbWVyZ2VkID0ge307XG4gIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiBPYmplY3QuZW50cmllcyhmaWxlKSkge1xuICAgICAgaWYgKG1lcmdlZFtrZXldICE9PSB2b2lkIDApIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihtZXJnZWRba2V5XSwgdmFsdWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lcmdlZFtrZXldID0gdmFsdWVzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkO1xufSwgXCJtZXJnZUNvbmZpZ0ZpbGVzXCIpO1xuXG4vLyBzcmMvcGFyc2VLbm93bkZpbGVzLnRzXG52YXIgcGFyc2VLbm93bkZpbGVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5pdCkgPT4ge1xuICBjb25zdCBwYXJzZWRGaWxlcyA9IGF3YWl0IGxvYWRTaGFyZWRDb25maWdGaWxlcyhpbml0KTtcbiAgcmV0dXJuIG1lcmdlQ29uZmlnRmlsZXMocGFyc2VkRmlsZXMuY29uZmlnRmlsZSwgcGFyc2VkRmlsZXMuY3JlZGVudGlhbHNGaWxlKTtcbn0sIFwicGFyc2VLbm93bkZpbGVzXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0SG9tZURpcixcbiAgRU5WX1BST0ZJTEUsXG4gIERFRkFVTFRfUFJPRklMRSxcbiAgZ2V0UHJvZmlsZU5hbWUsXG4gIGdldFNTT1Rva2VuRmlsZXBhdGgsXG4gIGdldFNTT1Rva2VuRnJvbUZpbGUsXG4gIENPTkZJR19QUkVGSVhfU0VQQVJBVE9SLFxuICBsb2FkU2hhcmVkQ29uZmlnRmlsZXMsXG4gIGxvYWRTc29TZXNzaW9uRGF0YSxcbiAgcGFyc2VLbm93bkZpbGVzXG59KTtcblxuIiwgInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBsb2FkQ29uZmlnOiAoKSA9PiBsb2FkQ29uZmlnXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL2NvbmZpZ0xvYWRlci50c1xuXG5cbi8vIHNyYy9mcm9tRW52LnRzXG52YXIgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIik7XG5cbi8vIHNyYy9nZXRTZWxlY3Rvck5hbWUudHNcbmZ1bmN0aW9uIGdldFNlbGVjdG9yTmFtZShmdW5jdGlvblN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IGNvbnN0YW50cyA9IG5ldyBTZXQoQXJyYXkuZnJvbShmdW5jdGlvblN0cmluZy5tYXRjaCgvKFtBLVpfXSl7Myx9L2cpID8/IFtdKSk7XG4gICAgY29uc3RhbnRzLmRlbGV0ZShcIkNPTkZJR1wiKTtcbiAgICBjb25zdGFudHMuZGVsZXRlKFwiQ09ORklHX1BSRUZJWF9TRVBBUkFUT1JcIik7XG4gICAgY29uc3RhbnRzLmRlbGV0ZShcIkVOVlwiKTtcbiAgICByZXR1cm4gWy4uLmNvbnN0YW50c10uam9pbihcIiwgXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uU3RyaW5nO1xuICB9XG59XG5fX25hbWUoZ2V0U2VsZWN0b3JOYW1lLCBcImdldFNlbGVjdG9yTmFtZVwiKTtcblxuLy8gc3JjL2Zyb21FbnYudHNcbnZhciBmcm9tRW52ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZW52VmFyU2VsZWN0b3IsIGxvZ2dlcikgPT4gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGVudlZhclNlbGVjdG9yKHByb2Nlc3MuZW52KTtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXG4gICAgICBlLm1lc3NhZ2UgfHwgYE5vdCBmb3VuZCBpbiBFTlY6ICR7Z2V0U2VsZWN0b3JOYW1lKGVudlZhclNlbGVjdG9yLnRvU3RyaW5nKCkpfWAsXG4gICAgICB7IGxvZ2dlciB9XG4gICAgKTtcbiAgfVxufSwgXCJmcm9tRW52XCIpO1xuXG4vLyBzcmMvZnJvbVNoYXJlZENvbmZpZ0ZpbGVzLnRzXG5cbnZhciBpbXBvcnRfc2hhcmVkX2luaV9maWxlX2xvYWRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIik7XG52YXIgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29uZmlnU2VsZWN0b3IsIHsgcHJlZmVycmVkRmlsZSA9IFwiY29uZmlnXCIsIC4uLmluaXQgfSA9IHt9KSA9PiBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHByb2ZpbGUgPSAoMCwgaW1wb3J0X3NoYXJlZF9pbmlfZmlsZV9sb2FkZXIuZ2V0UHJvZmlsZU5hbWUpKGluaXQpO1xuICBjb25zdCB7IGNvbmZpZ0ZpbGUsIGNyZWRlbnRpYWxzRmlsZSB9ID0gYXdhaXQgKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmxvYWRTaGFyZWRDb25maWdGaWxlcykoaW5pdCk7XG4gIGNvbnN0IHByb2ZpbGVGcm9tQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc0ZpbGVbcHJvZmlsZV0gfHwge307XG4gIGNvbnN0IHByb2ZpbGVGcm9tQ29uZmlnID0gY29uZmlnRmlsZVtwcm9maWxlXSB8fCB7fTtcbiAgY29uc3QgbWVyZ2VkUHJvZmlsZSA9IHByZWZlcnJlZEZpbGUgPT09IFwiY29uZmlnXCIgPyB7IC4uLnByb2ZpbGVGcm9tQ3JlZGVudGlhbHMsIC4uLnByb2ZpbGVGcm9tQ29uZmlnIH0gOiB7IC4uLnByb2ZpbGVGcm9tQ29uZmlnLCAuLi5wcm9maWxlRnJvbUNyZWRlbnRpYWxzIH07XG4gIHRyeSB7XG4gICAgY29uc3QgY2ZnRmlsZSA9IHByZWZlcnJlZEZpbGUgPT09IFwiY29uZmlnXCIgPyBjb25maWdGaWxlIDogY3JlZGVudGlhbHNGaWxlO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gY29uZmlnU2VsZWN0b3IobWVyZ2VkUHJvZmlsZSwgY2ZnRmlsZSk7XG4gICAgaWYgKGNvbmZpZ1ZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnVmFsdWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcbiAgICAgIGUubWVzc2FnZSB8fCBgTm90IGZvdW5kIGluIGNvbmZpZyBmaWxlcyB3LyBwcm9maWxlIFske3Byb2ZpbGV9XTogJHtnZXRTZWxlY3Rvck5hbWUoY29uZmlnU2VsZWN0b3IudG9TdHJpbmcoKSl9YCxcbiAgICAgIHsgbG9nZ2VyOiBpbml0LmxvZ2dlciB9XG4gICAgKTtcbiAgfVxufSwgXCJmcm9tU2hhcmVkQ29uZmlnRmlsZXNcIik7XG5cbi8vIHNyYy9mcm9tU3RhdGljLnRzXG5cbnZhciBpc0Z1bmN0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZnVuYykgPT4gdHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIiwgXCJpc0Z1bmN0aW9uXCIpO1xudmFyIGZyb21TdGF0aWMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkZWZhdWx0VmFsdWUpID0+IGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSA/IGFzeW5jICgpID0+IGF3YWl0IGRlZmF1bHRWYWx1ZSgpIDogKDAsIGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5mcm9tU3RhdGljKShkZWZhdWx0VmFsdWUpLCBcImZyb21TdGF0aWNcIik7XG5cbi8vIHNyYy9jb25maWdMb2FkZXIudHNcbnZhciBsb2FkQ29uZmlnID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeyBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3IsIGNvbmZpZ0ZpbGVTZWxlY3RvciwgZGVmYXVsdDogZGVmYXVsdFZhbHVlIH0sIGNvbmZpZ3VyYXRpb24gPSB7fSkgPT4gKDAsIGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5tZW1vaXplKShcbiAgKDAsIGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5jaGFpbikoXG4gICAgZnJvbUVudihlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3IpLFxuICAgIGZyb21TaGFyZWRDb25maWdGaWxlcyhjb25maWdGaWxlU2VsZWN0b3IsIGNvbmZpZ3VyYXRpb24pLFxuICAgIGZyb21TdGF0aWMoZGVmYXVsdFZhbHVlKVxuICApXG4pLCBcImxvYWRDb25maWdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBsb2FkQ29uZmlnXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFbmRwb2ludFVybENvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IHNoYXJlZF9pbmlfZmlsZV9sb2FkZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIik7XG5jb25zdCBFTlZfRU5EUE9JTlRfVVJMID0gXCJBV1NfRU5EUE9JTlRfVVJMXCI7XG5jb25zdCBDT05GSUdfRU5EUE9JTlRfVVJMID0gXCJlbmRwb2ludF91cmxcIjtcbmNvbnN0IGdldEVuZHBvaW50VXJsQ29uZmlnID0gKHNlcnZpY2VJZCkgPT4gKHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IHtcbiAgICAgICAgY29uc3Qgc2VydmljZVN1ZmZpeFBhcnRzID0gc2VydmljZUlkLnNwbGl0KFwiIFwiKS5tYXAoKHcpID0+IHcudG9VcHBlckNhc2UoKSk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VFbmRwb2ludFVybCA9IGVudltbRU5WX0VORFBPSU5UX1VSTCwgLi4uc2VydmljZVN1ZmZpeFBhcnRzXS5qb2luKFwiX1wiKV07XG4gICAgICAgIGlmIChzZXJ2aWNlRW5kcG9pbnRVcmwpXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZUVuZHBvaW50VXJsO1xuICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IGVudltFTlZfRU5EUE9JTlRfVVJMXTtcbiAgICAgICAgaWYgKGVuZHBvaW50VXJsKVxuICAgICAgICAgICAgcmV0dXJuIGVuZHBvaW50VXJsO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSwgY29uZmlnKSA9PiB7XG4gICAgICAgIGlmIChjb25maWcgJiYgcHJvZmlsZS5zZXJ2aWNlcykge1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZXNTZWN0aW9uID0gY29uZmlnW1tcInNlcnZpY2VzXCIsIHByb2ZpbGUuc2VydmljZXNdLmpvaW4oc2hhcmVkX2luaV9maWxlX2xvYWRlcl8xLkNPTkZJR19QUkVGSVhfU0VQQVJBVE9SKV07XG4gICAgICAgICAgICBpZiAoc2VydmljZXNTZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZVByZWZpeFBhcnRzID0gc2VydmljZUlkLnNwbGl0KFwiIFwiKS5tYXAoKHcpID0+IHcudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kcG9pbnRVcmwgPSBzZXJ2aWNlc1NlY3Rpb25bW3NlcnZpY2VQcmVmaXhQYXJ0cy5qb2luKFwiX1wiKSwgQ09ORklHX0VORFBPSU5UX1VSTF0uam9pbihzaGFyZWRfaW5pX2ZpbGVfbG9hZGVyXzEuQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpXTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kcG9pbnRVcmwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IHByb2ZpbGVbQ09ORklHX0VORFBPSU5UX1VSTF07XG4gICAgICAgIGlmIChlbmRwb2ludFVybClcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbn0pO1xuZXhwb3J0cy5nZXRFbmRwb2ludFVybENvbmZpZyA9IGdldEVuZHBvaW50VXJsQ29uZmlnO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFbmRwb2ludEZyb21Db25maWcgPSB2b2lkIDA7XG5jb25zdCBub2RlX2NvbmZpZ19wcm92aWRlcl8xID0gcmVxdWlyZShcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIik7XG5jb25zdCBnZXRFbmRwb2ludFVybENvbmZpZ18xID0gcmVxdWlyZShcIi4vZ2V0RW5kcG9pbnRVcmxDb25maWdcIik7XG5jb25zdCBnZXRFbmRwb2ludEZyb21Db25maWcgPSBhc3luYyAoc2VydmljZUlkKSA9PiAoMCwgbm9kZV9jb25maWdfcHJvdmlkZXJfMS5sb2FkQ29uZmlnKSgoMCwgZ2V0RW5kcG9pbnRVcmxDb25maWdfMS5nZXRFbmRwb2ludFVybENvbmZpZykoc2VydmljZUlkICE9PSBudWxsICYmIHNlcnZpY2VJZCAhPT0gdm9pZCAwID8gc2VydmljZUlkIDogXCJcIikpKCk7XG5leHBvcnRzLmdldEVuZHBvaW50RnJvbUNvbmZpZyA9IGdldEVuZHBvaW50RnJvbUNvbmZpZztcbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgcGFyc2VRdWVyeVN0cmluZzogKCkgPT4gcGFyc2VRdWVyeVN0cmluZ1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5mdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5c3RyaW5nKSB7XG4gIGNvbnN0IHF1ZXJ5ID0ge307XG4gIHF1ZXJ5c3RyaW5nID0gcXVlcnlzdHJpbmcucmVwbGFjZSgvXlxcPy8sIFwiXCIpO1xuICBpZiAocXVlcnlzdHJpbmcpIHtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcXVlcnlzdHJpbmcuc3BsaXQoXCImXCIpKSB7XG4gICAgICBsZXQgW2tleSwgdmFsdWUgPSBudWxsXSA9IHBhaXIuc3BsaXQoXCI9XCIpO1xuICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKCEoa2V5IGluIHF1ZXJ5KSkge1xuICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocXVlcnlba2V5XSkpIHtcbiAgICAgICAgcXVlcnlba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5W2tleV0gPSBbcXVlcnlba2V5XSwgdmFsdWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcXVlcnk7XG59XG5fX25hbWUocGFyc2VRdWVyeVN0cmluZywgXCJwYXJzZVF1ZXJ5U3RyaW5nXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFyc2VRdWVyeVN0cmluZ1xufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgcGFyc2VVcmw6ICgpID0+IHBhcnNlVXJsXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfcXVlcnlzdHJpbmdfcGFyc2VyID0gcmVxdWlyZShcIkBzbWl0aHkvcXVlcnlzdHJpbmctcGFyc2VyXCIpO1xudmFyIHBhcnNlVXJsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodXJsKSA9PiB7XG4gIGlmICh0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHBhcnNlVXJsKG5ldyBVUkwodXJsKSk7XG4gIH1cbiAgY29uc3QgeyBob3N0bmFtZSwgcGF0aG5hbWUsIHBvcnQsIHByb3RvY29sLCBzZWFyY2ggfSA9IHVybDtcbiAgbGV0IHF1ZXJ5O1xuICBpZiAoc2VhcmNoKSB7XG4gICAgcXVlcnkgPSAoMCwgaW1wb3J0X3F1ZXJ5c3RyaW5nX3BhcnNlci5wYXJzZVF1ZXJ5U3RyaW5nKShzZWFyY2gpO1xuICB9XG4gIHJldHVybiB7XG4gICAgaG9zdG5hbWUsXG4gICAgcG9ydDogcG9ydCA/IHBhcnNlSW50KHBvcnQpIDogdm9pZCAwLFxuICAgIHByb3RvY29sLFxuICAgIHBhdGg6IHBhdGhuYW1lLFxuICAgIHF1ZXJ5XG4gIH07XG59LCBcInBhcnNlVXJsXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFyc2VVcmxcbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGVuZHBvaW50TWlkZGxld2FyZTogKCkgPT4gZW5kcG9pbnRNaWRkbGV3YXJlLFxuICBlbmRwb2ludE1pZGRsZXdhcmVPcHRpb25zOiAoKSA9PiBlbmRwb2ludE1pZGRsZXdhcmVPcHRpb25zLFxuICBnZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnM6ICgpID0+IGdldEVuZHBvaW50RnJvbUluc3RydWN0aW9ucyxcbiAgZ2V0RW5kcG9pbnRQbHVnaW46ICgpID0+IGdldEVuZHBvaW50UGx1Z2luLFxuICByZXNvbHZlRW5kcG9pbnRDb25maWc6ICgpID0+IHJlc29sdmVFbmRwb2ludENvbmZpZyxcbiAgcmVzb2x2ZVBhcmFtczogKCkgPT4gcmVzb2x2ZVBhcmFtcyxcbiAgdG9FbmRwb2ludFYxOiAoKSA9PiB0b0VuZHBvaW50VjFcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvc2VydmljZS1jdXN0b21pemF0aW9ucy9zMy50c1xudmFyIHJlc29sdmVQYXJhbXNGb3JTMyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGVuZHBvaW50UGFyYW1zKSA9PiB7XG4gIGNvbnN0IGJ1Y2tldCA9IGVuZHBvaW50UGFyYW1zPy5CdWNrZXQgfHwgXCJcIjtcbiAgaWYgKHR5cGVvZiBlbmRwb2ludFBhcmFtcy5CdWNrZXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICBlbmRwb2ludFBhcmFtcy5CdWNrZXQgPSBidWNrZXQucmVwbGFjZSgvIy9nLCBlbmNvZGVVUklDb21wb25lbnQoXCIjXCIpKS5yZXBsYWNlKC9cXD8vZywgZW5jb2RlVVJJQ29tcG9uZW50KFwiP1wiKSk7XG4gIH1cbiAgaWYgKGlzQXJuQnVja2V0TmFtZShidWNrZXQpKSB7XG4gICAgaWYgKGVuZHBvaW50UGFyYW1zLkZvcmNlUGF0aFN0eWxlID09PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXRoLXN0eWxlIGFkZHJlc3NpbmcgY2Fubm90IGJlIHVzZWQgd2l0aCBBUk4gYnVja2V0c1wiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzRG5zQ29tcGF0aWJsZUJ1Y2tldE5hbWUoYnVja2V0KSB8fCBidWNrZXQuaW5kZXhPZihcIi5cIikgIT09IC0xICYmICFTdHJpbmcoZW5kcG9pbnRQYXJhbXMuRW5kcG9pbnQpLnN0YXJ0c1dpdGgoXCJodHRwOlwiKSB8fCBidWNrZXQudG9Mb3dlckNhc2UoKSAhPT0gYnVja2V0IHx8IGJ1Y2tldC5sZW5ndGggPCAzKSB7XG4gICAgZW5kcG9pbnRQYXJhbXMuRm9yY2VQYXRoU3R5bGUgPSB0cnVlO1xuICB9XG4gIGlmIChlbmRwb2ludFBhcmFtcy5EaXNhYmxlTXVsdGlSZWdpb25BY2Nlc3NQb2ludHMpIHtcbiAgICBlbmRwb2ludFBhcmFtcy5kaXNhYmxlTXVsdGlSZWdpb25BY2Nlc3NQb2ludHMgPSB0cnVlO1xuICAgIGVuZHBvaW50UGFyYW1zLkRpc2FibGVNUkFQID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZW5kcG9pbnRQYXJhbXM7XG59LCBcInJlc29sdmVQYXJhbXNGb3JTM1wiKTtcbnZhciBET01BSU5fUEFUVEVSTiA9IC9eW2EtejAtOV1bYS16MC05XFwuXFwtXXsxLDYxfVthLXowLTldJC87XG52YXIgSVBfQUREUkVTU19QQVRURVJOID0gLyhcXGQrXFwuKXszfVxcZCsvO1xudmFyIERPVFNfUEFUVEVSTiA9IC9cXC5cXC4vO1xudmFyIGlzRG5zQ29tcGF0aWJsZUJ1Y2tldE5hbWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChidWNrZXROYW1lKSA9PiBET01BSU5fUEFUVEVSTi50ZXN0KGJ1Y2tldE5hbWUpICYmICFJUF9BRERSRVNTX1BBVFRFUk4udGVzdChidWNrZXROYW1lKSAmJiAhRE9UU19QQVRURVJOLnRlc3QoYnVja2V0TmFtZSksIFwiaXNEbnNDb21wYXRpYmxlQnVja2V0TmFtZVwiKTtcbnZhciBpc0FybkJ1Y2tldE5hbWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChidWNrZXROYW1lKSA9PiB7XG4gIGNvbnN0IFthcm4sIHBhcnRpdGlvbiwgc2VydmljZSwgLCAsIGJ1Y2tldF0gPSBidWNrZXROYW1lLnNwbGl0KFwiOlwiKTtcbiAgY29uc3QgaXNBcm4gPSBhcm4gPT09IFwiYXJuXCIgJiYgYnVja2V0TmFtZS5zcGxpdChcIjpcIikubGVuZ3RoID49IDY7XG4gIGNvbnN0IGlzVmFsaWRBcm4gPSBCb29sZWFuKGlzQXJuICYmIHBhcnRpdGlvbiAmJiBzZXJ2aWNlICYmIGJ1Y2tldCk7XG4gIGlmIChpc0FybiAmJiAhaXNWYWxpZEFybikge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBBUk46ICR7YnVja2V0TmFtZX0gd2FzIGFuIGludmFsaWQgQVJOLmApO1xuICB9XG4gIHJldHVybiBpc1ZhbGlkQXJuO1xufSwgXCJpc0FybkJ1Y2tldE5hbWVcIik7XG5cbi8vIHNyYy9hZGFwdG9ycy9jcmVhdGVDb25maWdWYWx1ZVByb3ZpZGVyLnRzXG52YXIgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbmZpZ0tleSwgY2Fub25pY2FsRW5kcG9pbnRQYXJhbUtleSwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IGNvbmZpZ1Byb3ZpZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBjb25maWdbY29uZmlnS2V5XSA/PyBjb25maWdbY2Fub25pY2FsRW5kcG9pbnRQYXJhbUtleV07XG4gICAgaWYgKHR5cGVvZiBjb25maWdWYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gY29uZmlnVmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ1ZhbHVlO1xuICB9LCBcImNvbmZpZ1Byb3ZpZGVyXCIpO1xuICBpZiAoY29uZmlnS2V5ID09PSBcImNyZWRlbnRpYWxTY29wZVwiIHx8IGNhbm9uaWNhbEVuZHBvaW50UGFyYW1LZXkgPT09IFwiQ3JlZGVudGlhbFNjb3BlXCIpIHtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSB0eXBlb2YgY29uZmlnLmNyZWRlbnRpYWxzID09PSBcImZ1bmN0aW9uXCIgPyBhd2FpdCBjb25maWcuY3JlZGVudGlhbHMoKSA6IGNvbmZpZy5jcmVkZW50aWFscztcbiAgICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gY3JlZGVudGlhbHM/LmNyZWRlbnRpYWxTY29wZSA/PyBjcmVkZW50aWFscz8uQ3JlZGVudGlhbFNjb3BlO1xuICAgICAgcmV0dXJuIGNvbmZpZ1ZhbHVlO1xuICAgIH07XG4gIH1cbiAgaWYgKGNvbmZpZ0tleSA9PT0gXCJhY2NvdW50SWRcIiB8fCBjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5ID09PSBcIkFjY291bnRJZFwiKSB7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gdHlwZW9mIGNvbmZpZy5jcmVkZW50aWFscyA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgY29uZmlnLmNyZWRlbnRpYWxzKCkgOiBjb25maWcuY3JlZGVudGlhbHM7XG4gICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGNyZWRlbnRpYWxzPy5hY2NvdW50SWQgPz8gY3JlZGVudGlhbHM/LkFjY291bnRJZDtcbiAgICAgIHJldHVybiBjb25maWdWYWx1ZTtcbiAgICB9O1xuICB9XG4gIGlmIChjb25maWdLZXkgPT09IFwiZW5kcG9pbnRcIiB8fCBjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5ID09PSBcImVuZHBvaW50XCIpIHtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBjb25maWdQcm92aWRlcigpO1xuICAgICAgaWYgKGVuZHBvaW50ICYmIHR5cGVvZiBlbmRwb2ludCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoXCJ1cmxcIiBpbiBlbmRwb2ludCkge1xuICAgICAgICAgIHJldHVybiBlbmRwb2ludC51cmwuaHJlZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJob3N0bmFtZVwiIGluIGVuZHBvaW50KSB7XG4gICAgICAgICAgY29uc3QgeyBwcm90b2NvbCwgaG9zdG5hbWUsIHBvcnQsIHBhdGggfSA9IGVuZHBvaW50O1xuICAgICAgICAgIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0ID8gXCI6XCIgKyBwb3J0IDogXCJcIn0ke3BhdGh9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVuZHBvaW50O1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGNvbmZpZ1Byb3ZpZGVyO1xufSwgXCJjcmVhdGVDb25maWdWYWx1ZVByb3ZpZGVyXCIpO1xuXG4vLyBzcmMvYWRhcHRvcnMvZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zLnRzXG52YXIgaW1wb3J0X2dldEVuZHBvaW50RnJvbUNvbmZpZyA9IHJlcXVpcmUoXCIuL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUNvbmZpZ1wiKTtcblxuLy8gc3JjL2FkYXB0b3JzL3RvRW5kcG9pbnRWMS50c1xudmFyIGltcG9ydF91cmxfcGFyc2VyID0gcmVxdWlyZShcIkBzbWl0aHkvdXJsLXBhcnNlclwiKTtcbnZhciB0b0VuZHBvaW50VjEgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbmRwb2ludCkgPT4ge1xuICBpZiAodHlwZW9mIGVuZHBvaW50ID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKFwidXJsXCIgaW4gZW5kcG9pbnQpIHtcbiAgICAgIHJldHVybiAoMCwgaW1wb3J0X3VybF9wYXJzZXIucGFyc2VVcmwpKGVuZHBvaW50LnVybCk7XG4gICAgfVxuICAgIHJldHVybiBlbmRwb2ludDtcbiAgfVxuICByZXR1cm4gKDAsIGltcG9ydF91cmxfcGFyc2VyLnBhcnNlVXJsKShlbmRwb2ludCk7XG59LCBcInRvRW5kcG9pbnRWMVwiKTtcblxuLy8gc3JjL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUluc3RydWN0aW9ucy50c1xudmFyIGdldEVuZHBvaW50RnJvbUluc3RydWN0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGNvbW1hbmRJbnB1dCwgaW5zdHJ1Y3Rpb25zU3VwcGxpZXIsIGNsaWVudENvbmZpZywgY29udGV4dCkgPT4ge1xuICBpZiAoIWNsaWVudENvbmZpZy5lbmRwb2ludCkge1xuICAgIGxldCBlbmRwb2ludEZyb21Db25maWc7XG4gICAgaWYgKGNsaWVudENvbmZpZy5zZXJ2aWNlQ29uZmlndXJlZEVuZHBvaW50KSB7XG4gICAgICBlbmRwb2ludEZyb21Db25maWcgPSBhd2FpdCBjbGllbnRDb25maWcuc2VydmljZUNvbmZpZ3VyZWRFbmRwb2ludCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmRwb2ludEZyb21Db25maWcgPSBhd2FpdCAoMCwgaW1wb3J0X2dldEVuZHBvaW50RnJvbUNvbmZpZy5nZXRFbmRwb2ludEZyb21Db25maWcpKGNsaWVudENvbmZpZy5zZXJ2aWNlSWQpO1xuICAgIH1cbiAgICBpZiAoZW5kcG9pbnRGcm9tQ29uZmlnKSB7XG4gICAgICBjbGllbnRDb25maWcuZW5kcG9pbnQgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUodG9FbmRwb2ludFYxKGVuZHBvaW50RnJvbUNvbmZpZykpO1xuICAgIH1cbiAgfVxuICBjb25zdCBlbmRwb2ludFBhcmFtcyA9IGF3YWl0IHJlc29sdmVQYXJhbXMoY29tbWFuZElucHV0LCBpbnN0cnVjdGlvbnNTdXBwbGllciwgY2xpZW50Q29uZmlnKTtcbiAgaWYgKHR5cGVvZiBjbGllbnRDb25maWcuZW5kcG9pbnRQcm92aWRlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY29uZmlnLmVuZHBvaW50UHJvdmlkZXIgaXMgbm90IHNldC5cIik7XG4gIH1cbiAgY29uc3QgZW5kcG9pbnQgPSBjbGllbnRDb25maWcuZW5kcG9pbnRQcm92aWRlcihlbmRwb2ludFBhcmFtcywgY29udGV4dCk7XG4gIHJldHVybiBlbmRwb2ludDtcbn0sIFwiZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zXCIpO1xudmFyIHJlc29sdmVQYXJhbXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChjb21tYW5kSW5wdXQsIGluc3RydWN0aW9uc1N1cHBsaWVyLCBjbGllbnRDb25maWcpID0+IHtcbiAgY29uc3QgZW5kcG9pbnRQYXJhbXMgPSB7fTtcbiAgY29uc3QgaW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zU3VwcGxpZXI/LmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zPy4oKSB8fCB7fTtcbiAgZm9yIChjb25zdCBbbmFtZSwgaW5zdHJ1Y3Rpb25dIG9mIE9iamVjdC5lbnRyaWVzKGluc3RydWN0aW9ucykpIHtcbiAgICBzd2l0Y2ggKGluc3RydWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdGF0aWNDb250ZXh0UGFyYW1zXCI6XG4gICAgICAgIGVuZHBvaW50UGFyYW1zW25hbWVdID0gaW5zdHJ1Y3Rpb24udmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNvbnRleHRQYXJhbXNcIjpcbiAgICAgICAgZW5kcG9pbnRQYXJhbXNbbmFtZV0gPSBjb21tYW5kSW5wdXRbaW5zdHJ1Y3Rpb24ubmFtZV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNsaWVudENvbnRleHRQYXJhbXNcIjpcbiAgICAgIGNhc2UgXCJidWlsdEluUGFyYW1zXCI6XG4gICAgICAgIGVuZHBvaW50UGFyYW1zW25hbWVdID0gYXdhaXQgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlcihpbnN0cnVjdGlvbi5uYW1lLCBuYW1lLCBjbGllbnRDb25maWcpKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9wZXJhdGlvbkNvbnRleHRQYXJhbXNcIjpcbiAgICAgICAgZW5kcG9pbnRQYXJhbXNbbmFtZV0gPSBpbnN0cnVjdGlvbi5nZXQoY29tbWFuZElucHV0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgZW5kcG9pbnQgcGFyYW1ldGVyIGluc3RydWN0aW9uOiBcIiArIEpTT04uc3RyaW5naWZ5KGluc3RydWN0aW9uKSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3Qua2V5cyhpbnN0cnVjdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgIE9iamVjdC5hc3NpZ24oZW5kcG9pbnRQYXJhbXMsIGNsaWVudENvbmZpZyk7XG4gIH1cbiAgaWYgKFN0cmluZyhjbGllbnRDb25maWcuc2VydmljZUlkKS50b0xvd2VyQ2FzZSgpID09PSBcInMzXCIpIHtcbiAgICBhd2FpdCByZXNvbHZlUGFyYW1zRm9yUzMoZW5kcG9pbnRQYXJhbXMpO1xuICB9XG4gIHJldHVybiBlbmRwb2ludFBhcmFtcztcbn0sIFwicmVzb2x2ZVBhcmFtc1wiKTtcblxuLy8gc3JjL2VuZHBvaW50TWlkZGxld2FyZS50c1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBzbWl0aHkvY29yZVwiKTtcbnZhciBpbXBvcnRfdXRpbF9taWRkbGV3YXJlID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCIpO1xudmFyIGVuZHBvaW50TWlkZGxld2FyZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHtcbiAgY29uZmlnLFxuICBpbnN0cnVjdGlvbnNcbn0pID0+IHtcbiAgcmV0dXJuIChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGlmIChjb25maWcuZW5kcG9pbnQpIHtcbiAgICAgICgwLCBpbXBvcnRfY29yZS5zZXRGZWF0dXJlKShjb250ZXh0LCBcIkVORFBPSU5UX09WRVJSSURFXCIsIFwiTlwiKTtcbiAgICB9XG4gICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBnZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnMoXG4gICAgICBhcmdzLmlucHV0LFxuICAgICAge1xuICAgICAgICBnZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25zO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgeyAuLi5jb25maWcgfSxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIGNvbnRleHQuZW5kcG9pbnRWMiA9IGVuZHBvaW50O1xuICAgIGNvbnRleHQuYXV0aFNjaGVtZXMgPSBlbmRwb2ludC5wcm9wZXJ0aWVzPy5hdXRoU2NoZW1lcztcbiAgICBjb25zdCBhdXRoU2NoZW1lID0gY29udGV4dC5hdXRoU2NoZW1lcz8uWzBdO1xuICAgIGlmIChhdXRoU2NoZW1lKSB7XG4gICAgICBjb250ZXh0W1wic2lnbmluZ19yZWdpb25cIl0gPSBhdXRoU2NoZW1lLnNpZ25pbmdSZWdpb247XG4gICAgICBjb250ZXh0W1wic2lnbmluZ19zZXJ2aWNlXCJdID0gYXV0aFNjaGVtZS5zaWduaW5nTmFtZTtcbiAgICAgIGNvbnN0IHNtaXRoeUNvbnRleHQgPSAoMCwgaW1wb3J0X3V0aWxfbWlkZGxld2FyZS5nZXRTbWl0aHlDb250ZXh0KShjb250ZXh0KTtcbiAgICAgIGNvbnN0IGh0dHBBdXRoT3B0aW9uID0gc21pdGh5Q29udGV4dD8uc2VsZWN0ZWRIdHRwQXV0aFNjaGVtZT8uaHR0cEF1dGhPcHRpb247XG4gICAgICBpZiAoaHR0cEF1dGhPcHRpb24pIHtcbiAgICAgICAgaHR0cEF1dGhPcHRpb24uc2lnbmluZ1Byb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIGh0dHBBdXRoT3B0aW9uLnNpZ25pbmdQcm9wZXJ0aWVzIHx8IHt9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNpZ25pbmdfcmVnaW9uOiBhdXRoU2NoZW1lLnNpZ25pbmdSZWdpb24sXG4gICAgICAgICAgICBzaWduaW5nUmVnaW9uOiBhdXRoU2NoZW1lLnNpZ25pbmdSZWdpb24sXG4gICAgICAgICAgICBzaWduaW5nX3NlcnZpY2U6IGF1dGhTY2hlbWUuc2lnbmluZ05hbWUsXG4gICAgICAgICAgICBzaWduaW5nTmFtZTogYXV0aFNjaGVtZS5zaWduaW5nTmFtZSxcbiAgICAgICAgICAgIHNpZ25pbmdSZWdpb25TZXQ6IGF1dGhTY2hlbWUuc2lnbmluZ1JlZ2lvblNldFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXV0aFNjaGVtZS5wcm9wZXJ0aWVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHtcbiAgICAgIC4uLmFyZ3NcbiAgICB9KTtcbiAgfTtcbn0sIFwiZW5kcG9pbnRNaWRkbGV3YXJlXCIpO1xuXG4vLyBzcmMvZ2V0RW5kcG9pbnRQbHVnaW4udHNcbnZhciBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZSA9IHJlcXVpcmUoXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIik7XG52YXIgZW5kcG9pbnRNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJzZXJpYWxpemVcIixcbiAgdGFnczogW1wiRU5EUE9JTlRfUEFSQU1FVEVSU1wiLCBcIkVORFBPSU5UX1YyXCIsIFwiRU5EUE9JTlRcIl0sXG4gIG5hbWU6IFwiZW5kcG9pbnRWMk1pZGRsZXdhcmVcIixcbiAgb3ZlcnJpZGU6IHRydWUsXG4gIHJlbGF0aW9uOiBcImJlZm9yZVwiLFxuICB0b01pZGRsZXdhcmU6IGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLnNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLm5hbWVcbn07XG52YXIgZ2V0RW5kcG9pbnRQbHVnaW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb25maWcsIGluc3RydWN0aW9ucykgPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGRSZWxhdGl2ZVRvKFxuICAgICAgZW5kcG9pbnRNaWRkbGV3YXJlKHtcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBpbnN0cnVjdGlvbnNcbiAgICAgIH0pLFxuICAgICAgZW5kcG9pbnRNaWRkbGV3YXJlT3B0aW9uc1xuICAgICk7XG4gIH1cbn0pLCBcImdldEVuZHBvaW50UGx1Z2luXCIpO1xuXG4vLyBzcmMvcmVzb2x2ZUVuZHBvaW50Q29uZmlnLnRzXG5cbnZhciBpbXBvcnRfZ2V0RW5kcG9pbnRGcm9tQ29uZmlnMiA9IHJlcXVpcmUoXCIuL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUNvbmZpZ1wiKTtcbnZhciByZXNvbHZlRW5kcG9pbnRDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBjb25zdCB0bHMgPSBpbnB1dC50bHMgPz8gdHJ1ZTtcbiAgY29uc3QgeyBlbmRwb2ludCwgdXNlRHVhbHN0YWNrRW5kcG9pbnQsIHVzZUZpcHNFbmRwb2ludCB9ID0gaW5wdXQ7XG4gIGNvbnN0IGN1c3RvbUVuZHBvaW50UHJvdmlkZXIgPSBlbmRwb2ludCAhPSBudWxsID8gYXN5bmMgKCkgPT4gdG9FbmRwb2ludFYxKGF3YWl0ICgwLCBpbXBvcnRfdXRpbF9taWRkbGV3YXJlLm5vcm1hbGl6ZVByb3ZpZGVyKShlbmRwb2ludCkoKSkgOiB2b2lkIDA7XG4gIGNvbnN0IGlzQ3VzdG9tRW5kcG9pbnQgPSAhIWVuZHBvaW50O1xuICBjb25zdCByZXNvbHZlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oaW5wdXQsIHtcbiAgICBlbmRwb2ludDogY3VzdG9tRW5kcG9pbnRQcm92aWRlcixcbiAgICB0bHMsXG4gICAgaXNDdXN0b21FbmRwb2ludCxcbiAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogKDAsIGltcG9ydF91dGlsX21pZGRsZXdhcmUubm9ybWFsaXplUHJvdmlkZXIpKHVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlKSxcbiAgICB1c2VGaXBzRW5kcG9pbnQ6ICgwLCBpbXBvcnRfdXRpbF9taWRkbGV3YXJlLm5vcm1hbGl6ZVByb3ZpZGVyKSh1c2VGaXBzRW5kcG9pbnQgPz8gZmFsc2UpXG4gIH0pO1xuICBsZXQgY29uZmlndXJlZEVuZHBvaW50UHJvbWlzZSA9IHZvaWQgMDtcbiAgcmVzb2x2ZWRDb25maWcuc2VydmljZUNvbmZpZ3VyZWRFbmRwb2ludCA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoaW5wdXQuc2VydmljZUlkICYmICFjb25maWd1cmVkRW5kcG9pbnRQcm9taXNlKSB7XG4gICAgICBjb25maWd1cmVkRW5kcG9pbnRQcm9taXNlID0gKDAsIGltcG9ydF9nZXRFbmRwb2ludEZyb21Db25maWcyLmdldEVuZHBvaW50RnJvbUNvbmZpZykoaW5wdXQuc2VydmljZUlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ3VyZWRFbmRwb2ludFByb21pc2U7XG4gIH07XG4gIHJldHVybiByZXNvbHZlZENvbmZpZztcbn0sIFwicmVzb2x2ZUVuZHBvaW50Q29uZmlnXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zLFxuICByZXNvbHZlUGFyYW1zLFxuICB0b0VuZHBvaW50VjEsXG4gIGVuZHBvaW50TWlkZGxld2FyZSxcbiAgZW5kcG9pbnRNaWRkbGV3YXJlT3B0aW9ucyxcbiAgZ2V0RW5kcG9pbnRQbHVnaW4sXG4gIHJlc29sdmVFbmRwb2ludENvbmZpZ1xufSk7XG5cbiIsICIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wsIEl0ZXJhdG9yICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZyA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBJdGVyYXRvciA9PT0gXCJmdW5jdGlvblwiID8gSXRlcmF0b3IgOiBPYmplY3QpLnByb3RvdHlwZSk7XG4gIHJldHVybiBnLm5leHQgPSB2ZXJiKDApLCBnW1widGhyb3dcIl0gPSB2ZXJiKDEpLCBnW1wicmV0dXJuXCJdID0gdmVyYigyKSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0gT2JqZWN0LmNyZWF0ZSgodHlwZW9mIEFzeW5jSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEFzeW5jSXRlcmF0b3IgOiBPYmplY3QpLnByb3RvdHlwZSksIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIGF3YWl0UmV0dXJuKGYpIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUodikudGhlbihmLCByZWplY3QpOyB9OyB9XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAoZ1tuXSkgeyBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyBpZiAoZikgaVtuXSA9IGYoaVtuXSk7IH0gfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxudmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgIHZhciBhciA9IFtdO1xuICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgcmV0dXJuIGFyO1xuICB9O1xuICByZXR1cm4gb3duS2V5cyhvKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2UsIGlubmVyO1xuICAgIGlmIChhc3luYykge1xuICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgICAgaWYgKGFzeW5jKSBpbm5lciA9IGRpc3Bvc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBpZiAoaW5uZXIpIGRpc3Bvc2UgPSBmdW5jdGlvbigpIHsgdHJ5IHsgaW5uZXIuY2FsbCh0aGlzKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IH0gfTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgdmFyIHIsIHMgPSAwO1xuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChyID0gZW52LnN0YWNrLnBvcCgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIXIuYXN5bmMgJiYgcyA9PT0gMSkgcmV0dXJuIHMgPSAwLCBlbnYuc3RhY2sucHVzaChyKSwgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihuZXh0KTtcbiAgICAgICAgaWYgKHIuZGlzcG9zZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSByLmRpc3Bvc2UuY2FsbChyLnZhbHVlKTtcbiAgICAgICAgICBpZiAoci5hc3luYykgcmV0dXJuIHMgfD0gMiwgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgcyB8PSAxO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMgPT09IDEpIHJldHVybiBlbnYuaGFzRXJyb3IgPyBQcm9taXNlLnJlamVjdChlbnYuZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jld3JpdGVSZWxhdGl2ZUltcG9ydEV4dGVuc2lvbihwYXRoLCBwcmVzZXJ2ZUpzeCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgJiYgL15cXC5cXC4/XFwvLy50ZXN0KHBhdGgpKSB7XG4gICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC4odHN4KSR8KCg/OlxcLmQpPykoKD86XFwuW14uL10rPyk/KVxcLihbY21dPyl0cyQvaSwgZnVuY3Rpb24gKG0sIHRzeCwgZCwgZXh0LCBjbSkge1xuICAgICAgICAgIHJldHVybiB0c3ggPyBwcmVzZXJ2ZUpzeCA/IFwiLmpzeFwiIDogXCIuanNcIiA6IGQgJiYgKCFleHQgfHwgIWNtKSA/IG0gOiAoZCArIGV4dCArIFwiLlwiICsgY20udG9Mb3dlckNhc2UoKSArIFwianNcIik7XG4gICAgICB9KTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fZXNEZWNvcmF0ZSxcbiAgX19ydW5Jbml0aWFsaXplcnMsXG4gIF9fcHJvcEtleSxcbiAgX19zZXRGdW5jdGlvbk5hbWUsXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxuICBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcbiAgX19kaXNwb3NlUmVzb3VyY2VzLFxuICBfX3Jld3JpdGVSZWxhdGl2ZUltcG9ydEV4dGVuc2lvbixcbn07XG4iLCAie1xuICBcIm5hbWVcIjogXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkFXUyBTREsgZm9yIEphdmFTY3JpcHQgRHluYW1vZGIgQ2xpZW50IGZvciBOb2RlLmpzLCBCcm93c2VyIGFuZCBSZWFjdCBOYXRpdmVcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMy43OTkuMFwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiYnVpbGRcIjogXCJjb25jdXJyZW50bHkgJ3lhcm46YnVpbGQ6Y2pzJyAneWFybjpidWlsZDplcycgJ3lhcm46YnVpbGQ6dHlwZXMnXCIsXG4gICAgXCJidWlsZDpjanNcIjogXCJub2RlIC4uLy4uL3NjcmlwdHMvY29tcGlsYXRpb24vaW5saW5lIGNsaWVudC1keW5hbW9kYlwiLFxuICAgIFwiYnVpbGQ6ZXNcIjogXCJ0c2MgLXAgdHNjb25maWcuZXMuanNvblwiLFxuICAgIFwiYnVpbGQ6aW5jbHVkZTpkZXBzXCI6IFwibGVybmEgcnVuIC0tc2NvcGUgJG5wbV9wYWNrYWdlX25hbWUgLS1pbmNsdWRlLWRlcGVuZGVuY2llcyBidWlsZFwiLFxuICAgIFwiYnVpbGQ6dHlwZXNcIjogXCJ0c2MgLXAgdHNjb25maWcudHlwZXMuanNvblwiLFxuICAgIFwiYnVpbGQ6dHlwZXM6ZG93bmxldmVsXCI6IFwiZG93bmxldmVsLWR0cyBkaXN0LXR5cGVzIGRpc3QtdHlwZXMvdHMzLjRcIixcbiAgICBcImNsZWFuXCI6IFwicmltcmFmIC4vZGlzdC0qICYmIHJpbXJhZiAqLnRzYnVpbGRpbmZvXCIsXG4gICAgXCJleHRyYWN0OmRvY3NcIjogXCJhcGktZXh0cmFjdG9yIHJ1biAtLWxvY2FsXCIsXG4gICAgXCJnZW5lcmF0ZTpjbGllbnRcIjogXCJub2RlIC4uLy4uL3NjcmlwdHMvZ2VuZXJhdGUtY2xpZW50cy9zaW5nbGUtc2VydmljZSAtLXNvbG8gZHluYW1vZGJcIlxuICB9LFxuICBcIm1haW5cIjogXCIuL2Rpc3QtY2pzL2luZGV4LmpzXCIsXG4gIFwidHlwZXNcIjogXCIuL2Rpc3QtdHlwZXMvaW5kZXguZC50c1wiLFxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC1lcy9pbmRleC5qc1wiLFxuICBcInNpZGVFZmZlY3RzXCI6IGZhbHNlLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAYXdzLWNyeXB0by9zaGEyNTYtYnJvd3NlclwiOiBcIjUuMi4wXCIsXG4gICAgXCJAYXdzLWNyeXB0by9zaGEyNTYtanNcIjogXCI1LjIuMFwiLFxuICAgIFwiQGF3cy1zZGsvY29yZVwiOiBcIjMuNzk5LjBcIixcbiAgICBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiOiBcIjMuNzk5LjBcIixcbiAgICBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtZW5kcG9pbnQtZGlzY292ZXJ5XCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1ob3N0LWhlYWRlclwiOiBcIjMuNzc1LjBcIixcbiAgICBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtbG9nZ2VyXCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uXCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCI6IFwiMy43OTkuMFwiLFxuICAgIFwiQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlclwiOiBcIjMuNzc1LjBcIixcbiAgICBcIkBhd3Mtc2RrL3R5cGVzXCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvdXRpbC1lbmRwb2ludHNcIjogXCIzLjc4Ny4wXCIsXG4gICAgXCJAYXdzLXNkay91dGlsLXVzZXItYWdlbnQtYnJvd3NlclwiOiBcIjMuNzc1LjBcIixcbiAgICBcIkBhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1ub2RlXCI6IFwiMy43OTkuMFwiLFxuICAgIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjogXCJeNC4xLjBcIixcbiAgICBcIkBzbWl0aHkvY29yZVwiOiBcIl4zLjMuMFwiLFxuICAgIFwiQHNtaXRoeS9mZXRjaC1odHRwLWhhbmRsZXJcIjogXCJeNS4wLjJcIixcbiAgICBcIkBzbWl0aHkvaGFzaC1ub2RlXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L2ludmFsaWQtZGVwZW5kZW5jeVwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjogXCJeNC4xLjFcIixcbiAgICBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiOiBcIl40LjEuMVwiLFxuICAgIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI6IFwiXjQuMC4zXCIsXG4gICAgXCJAc21pdGh5L21pZGRsZXdhcmUtc3RhY2tcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXJcIjogXCJeNC4wLjRcIixcbiAgICBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiOiBcIl41LjEuMFwiLFxuICAgIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI6IFwiXjQuMi4xXCIsXG4gICAgXCJAc21pdGh5L3R5cGVzXCI6IFwiXjQuMi4wXCIsXG4gICAgXCJAc21pdGh5L3VybC1wYXJzZXJcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIjogXCJeNC4wLjBcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1icm93c2VyXCI6IFwiXjQuMC4wXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtYm9keS1sZW5ndGgtbm9kZVwiOiBcIl40LjAuMFwiLFxuICAgIFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtYnJvd3NlclwiOiBcIl40LjAuOVwiLFxuICAgIFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZVwiOiBcIl40LjAuOVwiLFxuICAgIFwiQHNtaXRoeS91dGlsLWVuZHBvaW50c1wiOiBcIl4zLjAuMlwiLFxuICAgIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1yZXRyeVwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjogXCJeNC4wLjBcIixcbiAgICBcIkBzbWl0aHkvdXRpbC13YWl0ZXJcIjogXCJeNC4wLjNcIixcbiAgICBcIkB0eXBlcy91dWlkXCI6IFwiXjkuMC4xXCIsXG4gICAgXCJ0c2xpYlwiOiBcIl4yLjYuMlwiLFxuICAgIFwidXVpZFwiOiBcIl45LjAuMVwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkB0c2NvbmZpZy9ub2RlMThcIjogXCIxOC4yLjRcIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjE4LjE5LjY5XCIsXG4gICAgXCJjb25jdXJyZW50bHlcIjogXCI3LjAuMFwiLFxuICAgIFwiZG93bmxldmVsLWR0c1wiOiBcIjAuMTAuMVwiLFxuICAgIFwicmltcmFmXCI6IFwiMy4wLjJcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJ+NS4yLjJcIlxuICB9LFxuICBcImVuZ2luZXNcIjoge1xuICAgIFwibm9kZVwiOiBcIj49MTguMC4wXCJcbiAgfSxcbiAgXCJ0eXBlc1ZlcnNpb25zXCI6IHtcbiAgICBcIjw0LjBcIjoge1xuICAgICAgXCJkaXN0LXR5cGVzLypcIjogW1xuICAgICAgICBcImRpc3QtdHlwZXMvdHMzLjQvKlwiXG4gICAgICBdXG4gICAgfVxuICB9LFxuICBcImZpbGVzXCI6IFtcbiAgICBcImRpc3QtKi8qKlwiXG4gIF0sXG4gIFwiYXV0aG9yXCI6IHtcbiAgICBcIm5hbWVcIjogXCJBV1MgU0RLIGZvciBKYXZhU2NyaXB0IFRlYW1cIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vYXdzLmFtYXpvbi5jb20vamF2YXNjcmlwdC9cIlxuICB9LFxuICBcImxpY2Vuc2VcIjogXCJBcGFjaGUtMi4wXCIsXG4gIFwiYnJvd3NlclwiOiB7XG4gICAgXCIuL2Rpc3QtZXMvcnVudGltZUNvbmZpZ1wiOiBcIi4vZGlzdC1lcy9ydW50aW1lQ29uZmlnLmJyb3dzZXJcIlxuICB9LFxuICBcInJlYWN0LW5hdGl2ZVwiOiB7XG4gICAgXCIuL2Rpc3QtZXMvcnVudGltZUNvbmZpZ1wiOiBcIi4vZGlzdC1lcy9ydW50aW1lQ29uZmlnLm5hdGl2ZVwiXG4gIH0sXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1zZGstanMtdjMvdHJlZS9tYWluL2NsaWVudHMvY2xpZW50LWR5bmFtb2RiXCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1zZGstanMtdjMuZ2l0XCIsXG4gICAgXCJkaXJlY3RvcnlcIjogXCJjbGllbnRzL2NsaWVudC1keW5hbW9kYlwiXG4gIH1cbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgRU5WX0FDQ09VTlRfSUQ6ICgpID0+IEVOVl9BQ0NPVU5UX0lELFxuICBFTlZfQ1JFREVOVElBTF9TQ09QRTogKCkgPT4gRU5WX0NSRURFTlRJQUxfU0NPUEUsXG4gIEVOVl9FWFBJUkFUSU9OOiAoKSA9PiBFTlZfRVhQSVJBVElPTixcbiAgRU5WX0tFWTogKCkgPT4gRU5WX0tFWSxcbiAgRU5WX1NFQ1JFVDogKCkgPT4gRU5WX1NFQ1JFVCxcbiAgRU5WX1NFU1NJT046ICgpID0+IEVOVl9TRVNTSU9OLFxuICBmcm9tRW52OiAoKSA9PiBmcm9tRW52XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvZnJvbUVudi50c1xudmFyIGltcG9ydF9jbGllbnQgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZS9jbGllbnRcIik7XG52YXIgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIik7XG52YXIgRU5WX0tFWSA9IFwiQVdTX0FDQ0VTU19LRVlfSURcIjtcbnZhciBFTlZfU0VDUkVUID0gXCJBV1NfU0VDUkVUX0FDQ0VTU19LRVlcIjtcbnZhciBFTlZfU0VTU0lPTiA9IFwiQVdTX1NFU1NJT05fVE9LRU5cIjtcbnZhciBFTlZfRVhQSVJBVElPTiA9IFwiQVdTX0NSRURFTlRJQUxfRVhQSVJBVElPTlwiO1xudmFyIEVOVl9DUkVERU5USUFMX1NDT1BFID0gXCJBV1NfQ1JFREVOVElBTF9TQ09QRVwiO1xudmFyIEVOVl9BQ0NPVU5UX0lEID0gXCJBV1NfQUNDT1VOVF9JRFwiO1xudmFyIGZyb21FbnYgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbml0KSA9PiBhc3luYyAoKSA9PiB7XG4gIGluaXQ/LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWVudiAtIGZyb21FbnZcIik7XG4gIGNvbnN0IGFjY2Vzc0tleUlkID0gcHJvY2Vzcy5lbnZbRU5WX0tFWV07XG4gIGNvbnN0IHNlY3JldEFjY2Vzc0tleSA9IHByb2Nlc3MuZW52W0VOVl9TRUNSRVRdO1xuICBjb25zdCBzZXNzaW9uVG9rZW4gPSBwcm9jZXNzLmVudltFTlZfU0VTU0lPTl07XG4gIGNvbnN0IGV4cGlyeSA9IHByb2Nlc3MuZW52W0VOVl9FWFBJUkFUSU9OXTtcbiAgY29uc3QgY3JlZGVudGlhbFNjb3BlID0gcHJvY2Vzcy5lbnZbRU5WX0NSRURFTlRJQUxfU0NPUEVdO1xuICBjb25zdCBhY2NvdW50SWQgPSBwcm9jZXNzLmVudltFTlZfQUNDT1VOVF9JRF07XG4gIGlmIChhY2Nlc3NLZXlJZCAmJiBzZWNyZXRBY2Nlc3NLZXkpIHtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IHtcbiAgICAgIGFjY2Vzc0tleUlkLFxuICAgICAgc2VjcmV0QWNjZXNzS2V5LFxuICAgICAgLi4uc2Vzc2lvblRva2VuICYmIHsgc2Vzc2lvblRva2VuIH0sXG4gICAgICAuLi5leHBpcnkgJiYgeyBleHBpcmF0aW9uOiBuZXcgRGF0ZShleHBpcnkpIH0sXG4gICAgICAuLi5jcmVkZW50aWFsU2NvcGUgJiYgeyBjcmVkZW50aWFsU2NvcGUgfSxcbiAgICAgIC4uLmFjY291bnRJZCAmJiB7IGFjY291bnRJZCB9XG4gICAgfTtcbiAgICAoMCwgaW1wb3J0X2NsaWVudC5zZXRDcmVkZW50aWFsRmVhdHVyZSkoY3JlZGVudGlhbHMsIFwiQ1JFREVOVElBTFNfRU5WX1ZBUlNcIiwgXCJnXCIpO1xuICAgIHJldHVybiBjcmVkZW50aWFscztcbiAgfVxuICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcIlVuYWJsZSB0byBmaW5kIGVudmlyb25tZW50IHZhcmlhYmxlIGNyZWRlbnRpYWxzLlwiLCB7IGxvZ2dlcjogaW5pdD8ubG9nZ2VyIH0pO1xufSwgXCJmcm9tRW52XCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgRU5WX0tFWSxcbiAgRU5WX1NFQ1JFVCxcbiAgRU5WX1NFU1NJT04sXG4gIEVOVl9FWFBJUkFUSU9OLFxuICBFTlZfQ1JFREVOVElBTF9TQ09QRSxcbiAgRU5WX0FDQ09VTlRfSUQsXG4gIGZyb21FbnZcbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIERFRkFVTFRfTUFYX1JFVFJJRVM6ICgpID0+IERFRkFVTFRfTUFYX1JFVFJJRVMsXG4gIERFRkFVTFRfVElNRU9VVDogKCkgPT4gREVGQVVMVF9USU1FT1VULFxuICBFTlZfQ01EU19BVVRIX1RPS0VOOiAoKSA9PiBFTlZfQ01EU19BVVRIX1RPS0VOLFxuICBFTlZfQ01EU19GVUxMX1VSSTogKCkgPT4gRU5WX0NNRFNfRlVMTF9VUkksXG4gIEVOVl9DTURTX1JFTEFUSVZFX1VSSTogKCkgPT4gRU5WX0NNRFNfUkVMQVRJVkVfVVJJLFxuICBFbmRwb2ludDogKCkgPT4gRW5kcG9pbnQsXG4gIGZyb21Db250YWluZXJNZXRhZGF0YTogKCkgPT4gZnJvbUNvbnRhaW5lck1ldGFkYXRhLFxuICBmcm9tSW5zdGFuY2VNZXRhZGF0YTogKCkgPT4gZnJvbUluc3RhbmNlTWV0YWRhdGEsXG4gIGdldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludDogKCkgPT4gZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LFxuICBodHRwUmVxdWVzdDogKCkgPT4gaHR0cFJlcXVlc3QsXG4gIHByb3ZpZGVyQ29uZmlnRnJvbUluaXQ6ICgpID0+IHByb3ZpZGVyQ29uZmlnRnJvbUluaXRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZnJvbUNvbnRhaW5lck1ldGFkYXRhLnRzXG5cbnZhciBpbXBvcnRfdXJsID0gcmVxdWlyZShcInVybFwiKTtcblxuLy8gc3JjL3JlbW90ZVByb3ZpZGVyL2h0dHBSZXF1ZXN0LnRzXG52YXIgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIik7XG52YXIgaW1wb3J0X2J1ZmZlciA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG52YXIgaW1wb3J0X2h0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmZ1bmN0aW9uIGh0dHBSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZXEgPSAoMCwgaW1wb3J0X2h0dHAucmVxdWVzdCkoe1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIC8vIE5vZGUuanMgaHR0cCBtb2R1bGUgZG9lc24ndCBhY2NlcHQgaG9zdG5hbWUgd2l0aCBzcXVhcmUgYnJhY2tldHNcbiAgICAgIC8vIFJlZnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMzk3MzhcbiAgICAgIGhvc3RuYW1lOiBvcHRpb25zLmhvc3RuYW1lPy5yZXBsYWNlKC9eXFxbKC4rKVxcXSQvLCBcIiQxXCIpXG4gICAgfSk7XG4gICAgcmVxLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgcmVqZWN0KE9iamVjdC5hc3NpZ24obmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5Qcm92aWRlckVycm9yKFwiVW5hYmxlIHRvIGNvbm5lY3QgdG8gaW5zdGFuY2UgbWV0YWRhdGEgc2VydmljZVwiKSwgZXJyKSk7XG4gICAgICByZXEuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHJlcS5vbihcInRpbWVvdXRcIiwgKCkgPT4ge1xuICAgICAgcmVqZWN0KG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuUHJvdmlkZXJFcnJvcihcIlRpbWVvdXRFcnJvciBmcm9tIGluc3RhbmNlIG1ldGFkYXRhIHNlcnZpY2VcIikpO1xuICAgICAgcmVxLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICByZXEub24oXCJyZXNwb25zZVwiLCAocmVzKSA9PiB7XG4gICAgICBjb25zdCB7IHN0YXR1c0NvZGUgPSA0MDAgfSA9IHJlcztcbiAgICAgIGlmIChzdGF0dXNDb2RlIDwgMjAwIHx8IDMwMCA8PSBzdGF0dXNDb2RlKSB7XG4gICAgICAgIHJlamVjdChcbiAgICAgICAgICBPYmplY3QuYXNzaWduKG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuUHJvdmlkZXJFcnJvcihcIkVycm9yIHJlc3BvbnNlIHJlY2VpdmVkIGZyb20gaW5zdGFuY2UgbWV0YWRhdGEgc2VydmljZVwiKSwgeyBzdGF0dXNDb2RlIH0pXG4gICAgICAgICk7XG4gICAgICAgIHJlcS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICAgIHJlcy5vbihcImRhdGFcIiwgKGNodW5rKSA9PiB7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgIH0pO1xuICAgICAgcmVzLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShpbXBvcnRfYnVmZmVyLkJ1ZmZlci5jb25jYXQoY2h1bmtzKSk7XG4gICAgICAgIHJlcS5kZXN0cm95KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXEuZW5kKCk7XG4gIH0pO1xufVxuX19uYW1lKGh0dHBSZXF1ZXN0LCBcImh0dHBSZXF1ZXN0XCIpO1xuXG4vLyBzcmMvcmVtb3RlUHJvdmlkZXIvSW1kc0NyZWRlbnRpYWxzLnRzXG52YXIgaXNJbWRzQ3JlZGVudGlhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChhcmcpID0+IEJvb2xlYW4oYXJnKSAmJiB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBhcmcuQWNjZXNzS2V5SWQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGFyZy5TZWNyZXRBY2Nlc3NLZXkgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGFyZy5Ub2tlbiA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgYXJnLkV4cGlyYXRpb24gPT09IFwic3RyaW5nXCIsIFwiaXNJbWRzQ3JlZGVudGlhbHNcIik7XG52YXIgZnJvbUltZHNDcmVkZW50aWFscyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNyZWRzKSA9PiAoe1xuICBhY2Nlc3NLZXlJZDogY3JlZHMuQWNjZXNzS2V5SWQsXG4gIHNlY3JldEFjY2Vzc0tleTogY3JlZHMuU2VjcmV0QWNjZXNzS2V5LFxuICBzZXNzaW9uVG9rZW46IGNyZWRzLlRva2VuLFxuICBleHBpcmF0aW9uOiBuZXcgRGF0ZShjcmVkcy5FeHBpcmF0aW9uKSxcbiAgLi4uY3JlZHMuQWNjb3VudElkICYmIHsgYWNjb3VudElkOiBjcmVkcy5BY2NvdW50SWQgfVxufSksIFwiZnJvbUltZHNDcmVkZW50aWFsc1wiKTtcblxuLy8gc3JjL3JlbW90ZVByb3ZpZGVyL1JlbW90ZVByb3ZpZGVySW5pdC50c1xudmFyIERFRkFVTFRfVElNRU9VVCA9IDFlMztcbnZhciBERUZBVUxUX01BWF9SRVRSSUVTID0gMDtcbnZhciBwcm92aWRlckNvbmZpZ0Zyb21Jbml0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoe1xuICBtYXhSZXRyaWVzID0gREVGQVVMVF9NQVhfUkVUUklFUyxcbiAgdGltZW91dCA9IERFRkFVTFRfVElNRU9VVFxufSkgPT4gKHsgbWF4UmV0cmllcywgdGltZW91dCB9KSwgXCJwcm92aWRlckNvbmZpZ0Zyb21Jbml0XCIpO1xuXG4vLyBzcmMvcmVtb3RlUHJvdmlkZXIvcmV0cnkudHNcbnZhciByZXRyeSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRvUmV0cnksIG1heFJldHJpZXMpID0+IHtcbiAgbGV0IHByb21pc2UgPSB0b1JldHJ5KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4UmV0cmllczsgaSsrKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2godG9SZXRyeSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG59LCBcInJldHJ5XCIpO1xuXG4vLyBzcmMvZnJvbUNvbnRhaW5lck1ldGFkYXRhLnRzXG52YXIgRU5WX0NNRFNfRlVMTF9VUkkgPSBcIkFXU19DT05UQUlORVJfQ1JFREVOVElBTFNfRlVMTF9VUklcIjtcbnZhciBFTlZfQ01EU19SRUxBVElWRV9VUkkgPSBcIkFXU19DT05UQUlORVJfQ1JFREVOVElBTFNfUkVMQVRJVkVfVVJJXCI7XG52YXIgRU5WX0NNRFNfQVVUSF9UT0tFTiA9IFwiQVdTX0NPTlRBSU5FUl9BVVRIT1JJWkFUSU9OX1RPS0VOXCI7XG52YXIgZnJvbUNvbnRhaW5lck1ldGFkYXRhID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5pdCA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgdGltZW91dCwgbWF4UmV0cmllcyB9ID0gcHJvdmlkZXJDb25maWdGcm9tSW5pdChpbml0KTtcbiAgcmV0dXJuICgpID0+IHJldHJ5KGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IGF3YWl0IGdldENtZHNVcmkoeyBsb2dnZXI6IGluaXQubG9nZ2VyIH0pO1xuICAgIGNvbnN0IGNyZWRzUmVzcG9uc2UgPSBKU09OLnBhcnNlKGF3YWl0IHJlcXVlc3RGcm9tRWNzSW1kcyh0aW1lb3V0LCByZXF1ZXN0T3B0aW9ucykpO1xuICAgIGlmICghaXNJbWRzQ3JlZGVudGlhbHMoY3JlZHNSZXNwb25zZSkpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiSW52YWxpZCByZXNwb25zZSByZWNlaXZlZCBmcm9tIGluc3RhbmNlIG1ldGFkYXRhIHNlcnZpY2UuXCIsIHtcbiAgICAgICAgbG9nZ2VyOiBpbml0LmxvZ2dlclxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tSW1kc0NyZWRlbnRpYWxzKGNyZWRzUmVzcG9uc2UpO1xuICB9LCBtYXhSZXRyaWVzKTtcbn0sIFwiZnJvbUNvbnRhaW5lck1ldGFkYXRhXCIpO1xudmFyIHJlcXVlc3RGcm9tRWNzSW1kcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHRpbWVvdXQsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52W0VOVl9DTURTX0FVVEhfVE9LRU5dKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0ge1xuICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxuICAgICAgQXV0aG9yaXphdGlvbjogcHJvY2Vzcy5lbnZbRU5WX0NNRFNfQVVUSF9UT0tFTl1cbiAgICB9O1xuICB9XG4gIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGh0dHBSZXF1ZXN0KHtcbiAgICAuLi5vcHRpb25zLFxuICAgIHRpbWVvdXRcbiAgfSk7XG4gIHJldHVybiBidWZmZXIudG9TdHJpbmcoKTtcbn0sIFwicmVxdWVzdEZyb21FY3NJbWRzXCIpO1xudmFyIENNRFNfSVAgPSBcIjE2OS4yNTQuMTcwLjJcIjtcbnZhciBHUkVFTkdSQVNTX0hPU1RTID0ge1xuICBsb2NhbGhvc3Q6IHRydWUsXG4gIFwiMTI3LjAuMC4xXCI6IHRydWVcbn07XG52YXIgR1JFRU5HUkFTU19QUk9UT0NPTFMgPSB7XG4gIFwiaHR0cDpcIjogdHJ1ZSxcbiAgXCJodHRwczpcIjogdHJ1ZVxufTtcbnZhciBnZXRDbWRzVXJpID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoeyBsb2dnZXIgfSkgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnZbRU5WX0NNRFNfUkVMQVRJVkVfVVJJXSkge1xuICAgIHJldHVybiB7XG4gICAgICBob3N0bmFtZTogQ01EU19JUCxcbiAgICAgIHBhdGg6IHByb2Nlc3MuZW52W0VOVl9DTURTX1JFTEFUSVZFX1VSSV1cbiAgICB9O1xuICB9XG4gIGlmIChwcm9jZXNzLmVudltFTlZfQ01EU19GVUxMX1VSSV0pIHtcbiAgICBjb25zdCBwYXJzZWQgPSAoMCwgaW1wb3J0X3VybC5wYXJzZSkocHJvY2Vzcy5lbnZbRU5WX0NNRFNfRlVMTF9VUkldKTtcbiAgICBpZiAoIXBhcnNlZC5ob3N0bmFtZSB8fCAhKHBhcnNlZC5ob3N0bmFtZSBpbiBHUkVFTkdSQVNTX0hPU1RTKSkge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYCR7cGFyc2VkLmhvc3RuYW1lfSBpcyBub3QgYSB2YWxpZCBjb250YWluZXIgbWV0YWRhdGEgc2VydmljZSBob3N0bmFtZWAsIHtcbiAgICAgICAgdHJ5TmV4dExpbms6IGZhbHNlLFxuICAgICAgICBsb2dnZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIXBhcnNlZC5wcm90b2NvbCB8fCAhKHBhcnNlZC5wcm90b2NvbCBpbiBHUkVFTkdSQVNTX1BST1RPQ09MUykpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKGAke3BhcnNlZC5wcm90b2NvbH0gaXMgbm90IGEgdmFsaWQgY29udGFpbmVyIG1ldGFkYXRhIHNlcnZpY2UgcHJvdG9jb2xgLCB7XG4gICAgICAgIHRyeU5leHRMaW5rOiBmYWxzZSxcbiAgICAgICAgbG9nZ2VyXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcnNlZCxcbiAgICAgIHBvcnQ6IHBhcnNlZC5wb3J0ID8gcGFyc2VJbnQocGFyc2VkLnBvcnQsIDEwKSA6IHZvaWQgMFxuICAgIH07XG4gIH1cbiAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXG4gICAgYFRoZSBjb250YWluZXIgbWV0YWRhdGEgY3JlZGVudGlhbCBwcm92aWRlciBjYW5ub3QgYmUgdXNlZCB1bmxlc3MgdGhlICR7RU5WX0NNRFNfUkVMQVRJVkVfVVJJfSBvciAke0VOVl9DTURTX0ZVTExfVVJJfSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBzZXRgLFxuICAgIHtcbiAgICAgIHRyeU5leHRMaW5rOiBmYWxzZSxcbiAgICAgIGxvZ2dlclxuICAgIH1cbiAgKTtcbn0sIFwiZ2V0Q21kc1VyaVwiKTtcblxuLy8gc3JjL2Zyb21JbnN0YW5jZU1ldGFkYXRhLnRzXG5cblxuXG4vLyBzcmMvZXJyb3IvSW5zdGFuY2VNZXRhZGF0YVYxRmFsbGJhY2tFcnJvci50c1xuXG52YXIgSW5zdGFuY2VNZXRhZGF0YVYxRmFsbGJhY2tFcnJvciA9IGNsYXNzIF9JbnN0YW5jZU1ldGFkYXRhVjFGYWxsYmFja0Vycm9yIGV4dGVuZHMgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHRyeU5leHRMaW5rID0gdHJ1ZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIHRyeU5leHRMaW5rKTtcbiAgICB0aGlzLnRyeU5leHRMaW5rID0gdHJ5TmV4dExpbms7XG4gICAgdGhpcy5uYW1lID0gXCJJbnN0YW5jZU1ldGFkYXRhVjFGYWxsYmFja0Vycm9yXCI7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9JbnN0YW5jZU1ldGFkYXRhVjFGYWxsYmFja0Vycm9yLnByb3RvdHlwZSk7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJJbnN0YW5jZU1ldGFkYXRhVjFGYWxsYmFja0Vycm9yXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LnRzXG52YXIgaW1wb3J0X25vZGVfY29uZmlnX3Byb3ZpZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIik7XG52YXIgaW1wb3J0X3VybF9wYXJzZXIgPSByZXF1aXJlKFwiQHNtaXRoeS91cmwtcGFyc2VyXCIpO1xuXG4vLyBzcmMvY29uZmlnL0VuZHBvaW50LnRzXG52YXIgRW5kcG9pbnQgPSAvKiBAX19QVVJFX18gKi8gKChFbmRwb2ludDIpID0+IHtcbiAgRW5kcG9pbnQyW1wiSVB2NFwiXSA9IFwiaHR0cDovLzE2OS4yNTQuMTY5LjI1NFwiO1xuICBFbmRwb2ludDJbXCJJUHY2XCJdID0gXCJodHRwOi8vW2ZkMDA6ZWMyOjoyNTRdXCI7XG4gIHJldHVybiBFbmRwb2ludDI7XG59KShFbmRwb2ludCB8fCB7fSk7XG5cbi8vIHNyYy9jb25maWcvRW5kcG9pbnRDb25maWdPcHRpb25zLnRzXG52YXIgRU5WX0VORFBPSU5UX05BTUUgPSBcIkFXU19FQzJfTUVUQURBVEFfU0VSVklDRV9FTkRQT0lOVFwiO1xudmFyIENPTkZJR19FTkRQT0lOVF9OQU1FID0gXCJlYzJfbWV0YWRhdGFfc2VydmljZV9lbmRwb2ludFwiO1xudmFyIEVORFBPSU5UX0NPTkZJR19PUFRJT05TID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IGVudltFTlZfRU5EUE9JTlRfTkFNRV0sXG4gIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IHByb2ZpbGVbQ09ORklHX0VORFBPSU5UX05BTUVdLFxuICBkZWZhdWx0OiB2b2lkIDBcbn07XG5cbi8vIHNyYy9jb25maWcvRW5kcG9pbnRNb2RlLnRzXG52YXIgRW5kcG9pbnRNb2RlID0gLyogQF9fUFVSRV9fICovICgoRW5kcG9pbnRNb2RlMikgPT4ge1xuICBFbmRwb2ludE1vZGUyW1wiSVB2NFwiXSA9IFwiSVB2NFwiO1xuICBFbmRwb2ludE1vZGUyW1wiSVB2NlwiXSA9IFwiSVB2NlwiO1xuICByZXR1cm4gRW5kcG9pbnRNb2RlMjtcbn0pKEVuZHBvaW50TW9kZSB8fCB7fSk7XG5cbi8vIHNyYy9jb25maWcvRW5kcG9pbnRNb2RlQ29uZmlnT3B0aW9ucy50c1xudmFyIEVOVl9FTkRQT0lOVF9NT0RFX05BTUUgPSBcIkFXU19FQzJfTUVUQURBVEFfU0VSVklDRV9FTkRQT0lOVF9NT0RFXCI7XG52YXIgQ09ORklHX0VORFBPSU5UX01PREVfTkFNRSA9IFwiZWMyX21ldGFkYXRhX3NlcnZpY2VfZW5kcG9pbnRfbW9kZVwiO1xudmFyIEVORFBPSU5UX01PREVfQ09ORklHX09QVElPTlMgPSB7XG4gIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gZW52W0VOVl9FTkRQT0lOVF9NT0RFX05BTUVdLFxuICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW0NPTkZJR19FTkRQT0lOVF9NT0RFX05BTUVdLFxuICBkZWZhdWx0OiBcIklQdjRcIiAvKiBJUHY0ICovXG59O1xuXG4vLyBzcmMvdXRpbHMvZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LnRzXG52YXIgZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiAoMCwgaW1wb3J0X3VybF9wYXJzZXIucGFyc2VVcmwpKGF3YWl0IGdldEZyb21FbmRwb2ludENvbmZpZygpIHx8IGF3YWl0IGdldEZyb21FbmRwb2ludE1vZGVDb25maWcoKSksIFwiZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50XCIpO1xudmFyIGdldEZyb21FbmRwb2ludENvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4gKDAsIGltcG9ydF9ub2RlX2NvbmZpZ19wcm92aWRlci5sb2FkQ29uZmlnKShFTkRQT0lOVF9DT05GSUdfT1BUSU9OUykoKSwgXCJnZXRGcm9tRW5kcG9pbnRDb25maWdcIik7XG52YXIgZ2V0RnJvbUVuZHBvaW50TW9kZUNvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCBlbmRwb2ludE1vZGUgPSBhd2FpdCAoMCwgaW1wb3J0X25vZGVfY29uZmlnX3Byb3ZpZGVyLmxvYWRDb25maWcpKEVORFBPSU5UX01PREVfQ09ORklHX09QVElPTlMpKCk7XG4gIHN3aXRjaCAoZW5kcG9pbnRNb2RlKSB7XG4gICAgY2FzZSBcIklQdjRcIiAvKiBJUHY0ICovOlxuICAgICAgcmV0dXJuIFwiaHR0cDovLzE2OS4yNTQuMTY5LjI1NFwiIC8qIElQdjQgKi87XG4gICAgY2FzZSBcIklQdjZcIiAvKiBJUHY2ICovOlxuICAgICAgcmV0dXJuIFwiaHR0cDovL1tmZDAwOmVjMjo6MjU0XVwiIC8qIElQdjYgKi87XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5kcG9pbnQgbW9kZTogJHtlbmRwb2ludE1vZGV9LiBTZWxlY3QgZnJvbSAke09iamVjdC52YWx1ZXMoRW5kcG9pbnRNb2RlKX1gKTtcbiAgfVxufSwgXCJnZXRGcm9tRW5kcG9pbnRNb2RlQ29uZmlnXCIpO1xuXG4vLyBzcmMvdXRpbHMvZ2V0RXh0ZW5kZWRJbnN0YW5jZU1ldGFkYXRhQ3JlZGVudGlhbHMudHNcbnZhciBTVEFUSUNfU1RBQklMSVRZX1JFRlJFU0hfSU5URVJWQUxfU0VDT05EUyA9IDUgKiA2MDtcbnZhciBTVEFUSUNfU1RBQklMSVRZX1JFRlJFU0hfSU5URVJWQUxfSklUVEVSX1dJTkRPV19TRUNPTkRTID0gNSAqIDYwO1xudmFyIFNUQVRJQ19TVEFCSUxJVFlfRE9DX1VSTCA9IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3Nka3JlZi9sYXRlc3QvZ3VpZGUvZmVhdHVyZS1zdGF0aWMtY3JlZGVudGlhbHMuaHRtbFwiO1xudmFyIGdldEV4dGVuZGVkSW5zdGFuY2VNZXRhZGF0YUNyZWRlbnRpYWxzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY3JlZGVudGlhbHMsIGxvZ2dlcikgPT4ge1xuICBjb25zdCByZWZyZXNoSW50ZXJ2YWwgPSBTVEFUSUNfU1RBQklMSVRZX1JFRlJFU0hfSU5URVJWQUxfU0VDT05EUyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIFNUQVRJQ19TVEFCSUxJVFlfUkVGUkVTSF9JTlRFUlZBTF9KSVRURVJfV0lORE9XX1NFQ09ORFMpO1xuICBjb25zdCBuZXdFeHBpcmF0aW9uID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIHJlZnJlc2hJbnRlcnZhbCAqIDFlMyk7XG4gIGxvZ2dlci53YXJuKFxuICAgIGBBdHRlbXB0aW5nIGNyZWRlbnRpYWwgZXhwaXJhdGlvbiBleHRlbnNpb24gZHVlIHRvIGEgY3JlZGVudGlhbCBzZXJ2aWNlIGF2YWlsYWJpbGl0eSBpc3N1ZS4gQSByZWZyZXNoIG9mIHRoZXNlIGNyZWRlbnRpYWxzIHdpbGwgYmUgYXR0ZW1wdGVkIGFmdGVyICR7bmV3IERhdGUobmV3RXhwaXJhdGlvbil9LlxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHBsZWFzZSB2aXNpdDogYCArIFNUQVRJQ19TVEFCSUxJVFlfRE9DX1VSTFxuICApO1xuICBjb25zdCBvcmlnaW5hbEV4cGlyYXRpb24gPSBjcmVkZW50aWFscy5vcmlnaW5hbEV4cGlyYXRpb24gPz8gY3JlZGVudGlhbHMuZXhwaXJhdGlvbjtcbiAgcmV0dXJuIHtcbiAgICAuLi5jcmVkZW50aWFscyxcbiAgICAuLi5vcmlnaW5hbEV4cGlyYXRpb24gPyB7IG9yaWdpbmFsRXhwaXJhdGlvbiB9IDoge30sXG4gICAgZXhwaXJhdGlvbjogbmV3RXhwaXJhdGlvblxuICB9O1xufSwgXCJnZXRFeHRlbmRlZEluc3RhbmNlTWV0YWRhdGFDcmVkZW50aWFsc1wiKTtcblxuLy8gc3JjL3V0aWxzL3N0YXRpY1N0YWJpbGl0eVByb3ZpZGVyLnRzXG52YXIgc3RhdGljU3RhYmlsaXR5UHJvdmlkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwcm92aWRlciwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxvZ2dlciA9IG9wdGlvbnM/LmxvZ2dlciB8fCBjb25zb2xlO1xuICBsZXQgcGFzdENyZWRlbnRpYWxzO1xuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBjcmVkZW50aWFscztcbiAgICB0cnkge1xuICAgICAgY3JlZGVudGlhbHMgPSBhd2FpdCBwcm92aWRlcigpO1xuICAgICAgaWYgKGNyZWRlbnRpYWxzLmV4cGlyYXRpb24gJiYgY3JlZGVudGlhbHMuZXhwaXJhdGlvbi5nZXRUaW1lKCkgPCBEYXRlLm5vdygpKSB7XG4gICAgICAgIGNyZWRlbnRpYWxzID0gZ2V0RXh0ZW5kZWRJbnN0YW5jZU1ldGFkYXRhQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMsIGxvZ2dlcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHBhc3RDcmVkZW50aWFscykge1xuICAgICAgICBsb2dnZXIud2FybihcIkNyZWRlbnRpYWwgcmVuZXcgZmFpbGVkOiBcIiwgZSk7XG4gICAgICAgIGNyZWRlbnRpYWxzID0gZ2V0RXh0ZW5kZWRJbnN0YW5jZU1ldGFkYXRhQ3JlZGVudGlhbHMocGFzdENyZWRlbnRpYWxzLCBsb2dnZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGFzdENyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xuICB9O1xufSwgXCJzdGF0aWNTdGFiaWxpdHlQcm92aWRlclwiKTtcblxuLy8gc3JjL2Zyb21JbnN0YW5jZU1ldGFkYXRhLnRzXG52YXIgSU1EU19QQVRIID0gXCIvbGF0ZXN0L21ldGEtZGF0YS9pYW0vc2VjdXJpdHktY3JlZGVudGlhbHMvXCI7XG52YXIgSU1EU19UT0tFTl9QQVRIID0gXCIvbGF0ZXN0L2FwaS90b2tlblwiO1xudmFyIEFXU19FQzJfTUVUQURBVEFfVjFfRElTQUJMRUQgPSBcIkFXU19FQzJfTUVUQURBVEFfVjFfRElTQUJMRURcIjtcbnZhciBQUk9GSUxFX0FXU19FQzJfTUVUQURBVEFfVjFfRElTQUJMRUQgPSBcImVjMl9tZXRhZGF0YV92MV9kaXNhYmxlZFwiO1xudmFyIFhfQVdTX0VDMl9NRVRBREFUQV9UT0tFTiA9IFwieC1hd3MtZWMyLW1ldGFkYXRhLXRva2VuXCI7XG52YXIgZnJvbUluc3RhbmNlTWV0YWRhdGEgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbml0ID0ge30pID0+IHN0YXRpY1N0YWJpbGl0eVByb3ZpZGVyKGdldEluc3RhbmNlTWV0YWRhdGFQcm92aWRlcihpbml0KSwgeyBsb2dnZXI6IGluaXQubG9nZ2VyIH0pLCBcImZyb21JbnN0YW5jZU1ldGFkYXRhXCIpO1xudmFyIGdldEluc3RhbmNlTWV0YWRhdGFQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGluaXQgPSB7fSkgPT4ge1xuICBsZXQgZGlzYWJsZUZldGNoVG9rZW4gPSBmYWxzZTtcbiAgY29uc3QgeyBsb2dnZXIsIHByb2ZpbGUgfSA9IGluaXQ7XG4gIGNvbnN0IHsgdGltZW91dCwgbWF4UmV0cmllcyB9ID0gcHJvdmlkZXJDb25maWdGcm9tSW5pdChpbml0KTtcbiAgY29uc3QgZ2V0Q3JlZGVudGlhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChtYXhSZXRyaWVzMiwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGlzSW1kc1YxRmFsbGJhY2sgPSBkaXNhYmxlRmV0Y2hUb2tlbiB8fCBvcHRpb25zLmhlYWRlcnM/LltYX0FXU19FQzJfTUVUQURBVEFfVE9LRU5dID09IG51bGw7XG4gICAgaWYgKGlzSW1kc1YxRmFsbGJhY2spIHtcbiAgICAgIGxldCBmYWxsYmFja0Jsb2NrZWRGcm9tUHJvZmlsZSA9IGZhbHNlO1xuICAgICAgbGV0IGZhbGxiYWNrQmxvY2tlZEZyb21Qcm9jZXNzRW52ID0gZmFsc2U7XG4gICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGF3YWl0ICgwLCBpbXBvcnRfbm9kZV9jb25maWdfcHJvdmlkZXIubG9hZENvbmZpZykoXG4gICAgICAgIHtcbiAgICAgICAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVudlZhbHVlID0gZW52W0FXU19FQzJfTUVUQURBVEFfVjFfRElTQUJMRURdO1xuICAgICAgICAgICAgZmFsbGJhY2tCbG9ja2VkRnJvbVByb2Nlc3NFbnYgPSAhIWVudlZhbHVlICYmIGVudlZhbHVlICE9PSBcImZhbHNlXCI7XG4gICAgICAgICAgICBpZiAoZW52VmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcbiAgICAgICAgICAgICAgICBgJHtBV1NfRUMyX01FVEFEQVRBX1YxX0RJU0FCTEVEfSBub3Qgc2V0IGluIGVudiwgY2hlY2tpbmcgY29uZmlnIGZpbGUgbmV4dC5gLFxuICAgICAgICAgICAgICAgIHsgbG9nZ2VyOiBpbml0LmxvZ2dlciB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsbGJhY2tCbG9ja2VkRnJvbVByb2Nlc3NFbnY7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlMikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvZmlsZVZhbHVlID0gcHJvZmlsZTJbUFJPRklMRV9BV1NfRUMyX01FVEFEQVRBX1YxX0RJU0FCTEVEXTtcbiAgICAgICAgICAgIGZhbGxiYWNrQmxvY2tlZEZyb21Qcm9maWxlID0gISFwcm9maWxlVmFsdWUgJiYgcHJvZmlsZVZhbHVlICE9PSBcImZhbHNlXCI7XG4gICAgICAgICAgICByZXR1cm4gZmFsbGJhY2tCbG9ja2VkRnJvbVByb2ZpbGU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvZmlsZVxuICAgICAgICB9XG4gICAgICApKCk7XG4gICAgICBpZiAoaW5pdC5lYzJNZXRhZGF0YVYxRGlzYWJsZWQgfHwgY29uZmlnVmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2F1c2VzID0gW107XG4gICAgICAgIGlmIChpbml0LmVjMk1ldGFkYXRhVjFEaXNhYmxlZClcbiAgICAgICAgICBjYXVzZXMucHVzaChcImNyZWRlbnRpYWwgcHJvdmlkZXIgaW5pdGlhbGl6YXRpb24gKHJ1bnRpbWUgb3B0aW9uIGVjMk1ldGFkYXRhVjFEaXNhYmxlZClcIik7XG4gICAgICAgIGlmIChmYWxsYmFja0Jsb2NrZWRGcm9tUHJvZmlsZSlcbiAgICAgICAgICBjYXVzZXMucHVzaChgY29uZmlnIGZpbGUgcHJvZmlsZSAoJHtQUk9GSUxFX0FXU19FQzJfTUVUQURBVEFfVjFfRElTQUJMRUR9KWApO1xuICAgICAgICBpZiAoZmFsbGJhY2tCbG9ja2VkRnJvbVByb2Nlc3NFbnYpXG4gICAgICAgICAgY2F1c2VzLnB1c2goYHByb2Nlc3MgZW52aXJvbm1lbnQgdmFyaWFibGUgKCR7QVdTX0VDMl9NRVRBREFUQV9WMV9ESVNBQkxFRH0pYCk7XG4gICAgICAgIHRocm93IG5ldyBJbnN0YW5jZU1ldGFkYXRhVjFGYWxsYmFja0Vycm9yKFxuICAgICAgICAgIGBBV1MgRUMyIE1ldGFkYXRhIHYxIGZhbGxiYWNrIGhhcyBiZWVuIGJsb2NrZWQgYnkgQVdTIFNESyBjb25maWd1cmF0aW9uIGluIHRoZSBmb2xsb3dpbmc6IFske2NhdXNlcy5qb2luKFxuICAgICAgICAgICAgXCIsIFwiXG4gICAgICAgICAgKX1dLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW1kc1Byb2ZpbGUgPSAoYXdhaXQgcmV0cnkoYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHByb2ZpbGUyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcHJvZmlsZTIgPSBhd2FpdCBnZXRQcm9maWxlKG9wdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIuc3RhdHVzQ29kZSA9PT0gNDAxKSB7XG4gICAgICAgICAgZGlzYWJsZUZldGNoVG9rZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZmlsZTI7XG4gICAgfSwgbWF4UmV0cmllczIpKS50cmltKCk7XG4gICAgcmV0dXJuIHJldHJ5KGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjcmVkcztcbiAgICAgIHRyeSB7XG4gICAgICAgIGNyZWRzID0gYXdhaXQgZ2V0Q3JlZGVudGlhbHNGcm9tUHJvZmlsZShpbWRzUHJvZmlsZSwgb3B0aW9ucywgaW5pdCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDEpIHtcbiAgICAgICAgICBkaXNhYmxlRmV0Y2hUb2tlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVkcztcbiAgICB9LCBtYXhSZXRyaWVzMik7XG4gIH0sIFwiZ2V0Q3JlZGVudGlhbHNcIik7XG4gIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBnZXRJbnN0YW5jZU1ldGFkYXRhRW5kcG9pbnQoKTtcbiAgICBpZiAoZGlzYWJsZUZldGNoVG9rZW4pIHtcbiAgICAgIGxvZ2dlcj8uZGVidWcoXCJBV1MgU0RLIEluc3RhbmNlIE1ldGFkYXRhXCIsIFwidXNpbmcgdjEgZmFsbGJhY2sgKG5vIHRva2VuIGZldGNoKVwiKTtcbiAgICAgIHJldHVybiBnZXRDcmVkZW50aWFscyhtYXhSZXRyaWVzLCB7IC4uLmVuZHBvaW50LCB0aW1lb3V0IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdG9rZW47XG4gICAgICB0cnkge1xuICAgICAgICB0b2tlbiA9IChhd2FpdCBnZXRNZXRhZGF0YVRva2VuKHsgLi4uZW5kcG9pbnQsIHRpbWVvdXQgfSkpLnRvU3RyaW5nKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3I/LnN0YXR1c0NvZGUgPT09IDQwMCkge1xuICAgICAgICAgIHRocm93IE9iamVjdC5hc3NpZ24oZXJyb3IsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiRUMyIE1ldGFkYXRhIHRva2VuIHJlcXVlc3QgcmV0dXJuZWQgZXJyb3JcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UgPT09IFwiVGltZW91dEVycm9yXCIgfHwgWzQwMywgNDA0LCA0MDVdLmluY2x1ZGVzKGVycm9yLnN0YXR1c0NvZGUpKSB7XG4gICAgICAgICAgZGlzYWJsZUZldGNoVG9rZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlcj8uZGVidWcoXCJBV1MgU0RLIEluc3RhbmNlIE1ldGFkYXRhXCIsIFwidXNpbmcgdjEgZmFsbGJhY2sgKGluaXRpYWwpXCIpO1xuICAgICAgICByZXR1cm4gZ2V0Q3JlZGVudGlhbHMobWF4UmV0cmllcywgeyAuLi5lbmRwb2ludCwgdGltZW91dCB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRDcmVkZW50aWFscyhtYXhSZXRyaWVzLCB7XG4gICAgICAgIC4uLmVuZHBvaW50LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgW1hfQVdTX0VDMl9NRVRBREFUQV9UT0tFTl06IHRva2VuXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVvdXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0sIFwiZ2V0SW5zdGFuY2VNZXRhZGF0YVByb3ZpZGVyXCIpO1xudmFyIGdldE1ldGFkYXRhVG9rZW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvcHRpb25zKSA9PiBodHRwUmVxdWVzdCh7XG4gIC4uLm9wdGlvbnMsXG4gIHBhdGg6IElNRFNfVE9LRU5fUEFUSCxcbiAgbWV0aG9kOiBcIlBVVFwiLFxuICBoZWFkZXJzOiB7XG4gICAgXCJ4LWF3cy1lYzItbWV0YWRhdGEtdG9rZW4tdHRsLXNlY29uZHNcIjogXCIyMTYwMFwiXG4gIH1cbn0pLCBcImdldE1ldGFkYXRhVG9rZW5cIik7XG52YXIgZ2V0UHJvZmlsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG9wdGlvbnMpID0+IChhd2FpdCBodHRwUmVxdWVzdCh7IC4uLm9wdGlvbnMsIHBhdGg6IElNRFNfUEFUSCB9KSkudG9TdHJpbmcoKSwgXCJnZXRQcm9maWxlXCIpO1xudmFyIGdldENyZWRlbnRpYWxzRnJvbVByb2ZpbGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwcm9maWxlLCBvcHRpb25zLCBpbml0KSA9PiB7XG4gIGNvbnN0IGNyZWRlbnRpYWxzUmVzcG9uc2UgPSBKU09OLnBhcnNlKFxuICAgIChhd2FpdCBodHRwUmVxdWVzdCh7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgcGF0aDogSU1EU19QQVRIICsgcHJvZmlsZVxuICAgIH0pKS50b1N0cmluZygpXG4gICk7XG4gIGlmICghaXNJbWRzQ3JlZGVudGlhbHMoY3JlZGVudGlhbHNSZXNwb25zZSkpIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcIkludmFsaWQgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBpbnN0YW5jZSBtZXRhZGF0YSBzZXJ2aWNlLlwiLCB7XG4gICAgICBsb2dnZXI6IGluaXQubG9nZ2VyXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZyb21JbWRzQ3JlZGVudGlhbHMoY3JlZGVudGlhbHNSZXNwb25zZSk7XG59LCBcImdldENyZWRlbnRpYWxzRnJvbVByb2ZpbGVcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBodHRwUmVxdWVzdCxcbiAgZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LFxuICBFbmRwb2ludCxcbiAgRU5WX0NNRFNfRlVMTF9VUkksXG4gIEVOVl9DTURTX1JFTEFUSVZFX1VSSSxcbiAgRU5WX0NNRFNfQVVUSF9UT0tFTixcbiAgZnJvbUNvbnRhaW5lck1ldGFkYXRhLFxuICBmcm9tSW5zdGFuY2VNZXRhZGF0YSxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX01BWF9SRVRSSUVTLFxuICBwcm92aWRlckNvbmZpZ0Zyb21Jbml0XG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jaGVja1VybCA9IHZvaWQgMDtcbmNvbnN0IHByb3BlcnR5X3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiKTtcbmNvbnN0IExPT1BCQUNLX0NJRFJfSVB2NCA9IFwiMTI3LjAuMC4wLzhcIjtcbmNvbnN0IExPT1BCQUNLX0NJRFJfSVB2NiA9IFwiOjoxLzEyOFwiO1xuY29uc3QgRUNTX0NPTlRBSU5FUl9IT1NUID0gXCIxNjkuMjU0LjE3MC4yXCI7XG5jb25zdCBFS1NfQ09OVEFJTkVSX0hPU1RfSVB2NCA9IFwiMTY5LjI1NC4xNzAuMjNcIjtcbmNvbnN0IEVLU19DT05UQUlORVJfSE9TVF9JUHY2ID0gXCJbZmQwMDplYzI6OjIzXVwiO1xuY29uc3QgY2hlY2tVcmwgPSAodXJsLCBsb2dnZXIpID0+IHtcbiAgICBpZiAodXJsLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVybC5ob3N0bmFtZSA9PT0gRUNTX0NPTlRBSU5FUl9IT1NUIHx8XG4gICAgICAgIHVybC5ob3N0bmFtZSA9PT0gRUtTX0NPTlRBSU5FUl9IT1NUX0lQdjQgfHxcbiAgICAgICAgdXJsLmhvc3RuYW1lID09PSBFS1NfQ09OVEFJTkVSX0hPU1RfSVB2Nikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1cmwuaG9zdG5hbWUuaW5jbHVkZXMoXCJbXCIpKSB7XG4gICAgICAgIGlmICh1cmwuaG9zdG5hbWUgPT09IFwiWzo6MV1cIiB8fCB1cmwuaG9zdG5hbWUgPT09IFwiWzAwMDA6MDAwMDowMDAwOjAwMDA6MDAwMDowMDAwOjAwMDA6MDAwMV1cIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodXJsLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXBDb21wb25lbnRzID0gdXJsLmhvc3RuYW1lLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgY29uc3QgaW5SYW5nZSA9IChjb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KGNvbXBvbmVudCwgMTApO1xuICAgICAgICAgICAgcmV0dXJuIDAgPD0gbnVtICYmIG51bSA8PSAyNTU7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChpcENvbXBvbmVudHNbMF0gPT09IFwiMTI3XCIgJiZcbiAgICAgICAgICAgIGluUmFuZ2UoaXBDb21wb25lbnRzWzFdKSAmJlxuICAgICAgICAgICAgaW5SYW5nZShpcENvbXBvbmVudHNbMl0pICYmXG4gICAgICAgICAgICBpblJhbmdlKGlwQ29tcG9uZW50c1szXSkgJiZcbiAgICAgICAgICAgIGlwQ29tcG9uZW50cy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgcHJvcGVydHlfcHJvdmlkZXJfMS5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYFVSTCBub3QgYWNjZXB0ZWQuIEl0IG11c3QgZWl0aGVyIGJlIEhUVFBTIG9yIG1hdGNoIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICAtIGxvb3BiYWNrIENJRFIgMTI3LjAuMC4wLzggb3IgWzo6MS8xMjhdXG4gIC0gRUNTIGNvbnRhaW5lciBob3N0IDE2OS4yNTQuMTcwLjJcbiAgLSBFS1MgY29udGFpbmVyIGhvc3QgMTY5LjI1NC4xNzAuMjMgb3IgW2ZkMDA6ZWMyOjoyM11gLCB7IGxvZ2dlciB9KTtcbn07XG5leHBvcnRzLmNoZWNrVXJsID0gY2hlY2tVcmw7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldENyZWRlbnRpYWxzID0gZXhwb3J0cy5jcmVhdGVHZXRSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgcHJvcGVydHlfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCIpO1xuY29uc3QgcHJvdG9jb2xfaHR0cF8xID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcbmNvbnN0IHNtaXRoeV9jbGllbnRfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIik7XG5jb25zdCB1dGlsX3N0cmVhbV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1zdHJlYW1cIik7XG5mdW5jdGlvbiBjcmVhdGVHZXRSZXF1ZXN0KHVybCkge1xuICAgIHJldHVybiBuZXcgcHJvdG9jb2xfaHR0cF8xLkh0dHBSZXF1ZXN0KHtcbiAgICAgICAgcHJvdG9jb2w6IHVybC5wcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWU6IHVybC5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogTnVtYmVyKHVybC5wb3J0KSxcbiAgICAgICAgcGF0aDogdXJsLnBhdGhuYW1lLFxuICAgICAgICBxdWVyeTogQXJyYXkuZnJvbSh1cmwuc2VhcmNoUGFyYW1zLmVudHJpZXMoKSkucmVkdWNlKChhY2MsIFtrLCB2XSkgPT4ge1xuICAgICAgICAgICAgYWNjW2tdID0gdjtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KSxcbiAgICAgICAgZnJhZ21lbnQ6IHVybC5oYXNoLFxuICAgIH0pO1xufVxuZXhwb3J0cy5jcmVhdGVHZXRSZXF1ZXN0ID0gY3JlYXRlR2V0UmVxdWVzdDtcbmFzeW5jIGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzKHJlc3BvbnNlLCBsb2dnZXIpIHtcbiAgICBjb25zdCBzdHJlYW0gPSAoMCwgdXRpbF9zdHJlYW1fMS5zZGtTdHJlYW1NaXhpbikocmVzcG9uc2UuYm9keSk7XG4gICAgY29uc3Qgc3RyID0gYXdhaXQgc3RyZWFtLnRyYW5zZm9ybVRvU3RyaW5nKCk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyc2VkLkFjY2Vzc0tleUlkICE9PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICB0eXBlb2YgcGFyc2VkLlNlY3JldEFjY2Vzc0tleSAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgdHlwZW9mIHBhcnNlZC5Ub2tlbiAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgdHlwZW9mIHBhcnNlZC5FeHBpcmF0aW9uICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgcHJvcGVydHlfcHJvdmlkZXJfMS5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXCJIVFRQIGNyZWRlbnRpYWwgcHJvdmlkZXIgcmVzcG9uc2Ugbm90IG9mIHRoZSByZXF1aXJlZCBmb3JtYXQsIGFuIG9iamVjdCBtYXRjaGluZzogXCIgK1xuICAgICAgICAgICAgICAgIFwieyBBY2Nlc3NLZXlJZDogc3RyaW5nLCBTZWNyZXRBY2Nlc3NLZXk6IHN0cmluZywgVG9rZW46IHN0cmluZywgRXhwaXJhdGlvbjogc3RyaW5nKHJmYzMzMzkpIH1cIiwgeyBsb2dnZXIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY2Vzc0tleUlkOiBwYXJzZWQuQWNjZXNzS2V5SWQsXG4gICAgICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IHBhcnNlZC5TZWNyZXRBY2Nlc3NLZXksXG4gICAgICAgICAgICBzZXNzaW9uVG9rZW46IHBhcnNlZC5Ub2tlbixcbiAgICAgICAgICAgIGV4cGlyYXRpb246ICgwLCBzbWl0aHlfY2xpZW50XzEucGFyc2VSZmMzMzM5RGF0ZVRpbWUpKHBhcnNlZC5FeHBpcmF0aW9uKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gNDAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICAgICAgbGV0IHBhcnNlZEJvZHkgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhcnNlZEJvZHkgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICB0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBwcm9wZXJ0eV9wcm92aWRlcl8xLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXNDb2RlfWAsIHsgbG9nZ2VyIH0pLCB7XG4gICAgICAgICAgICBDb2RlOiBwYXJzZWRCb2R5LkNvZGUsXG4gICAgICAgICAgICBNZXNzYWdlOiBwYXJzZWRCb2R5Lk1lc3NhZ2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgcHJvcGVydHlfcHJvdmlkZXJfMS5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYFNlcnZlciByZXNwb25kZWQgd2l0aCBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX1gLCB7IGxvZ2dlciB9KTtcbn1cbmV4cG9ydHMuZ2V0Q3JlZGVudGlhbHMgPSBnZXRDcmVkZW50aWFscztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0cnlXcmFwcGVyID0gdm9pZCAwO1xuY29uc3QgcmV0cnlXcmFwcGVyID0gKHRvUmV0cnksIG1heFJldHJpZXMsIGRlbGF5TXMpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heFJldHJpZXM7ICsraSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdG9SZXRyeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheU1zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRvUmV0cnkoKTtcbiAgICB9O1xufTtcbmV4cG9ydHMucmV0cnlXcmFwcGVyID0gcmV0cnlXcmFwcGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tSHR0cCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlL2NsaWVudFwiKTtcbmNvbnN0IG5vZGVfaHR0cF9oYW5kbGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiKTtcbmNvbnN0IHByb3BlcnR5X3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiKTtcbmNvbnN0IHByb21pc2VzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMvcHJvbWlzZXNcIikpO1xuY29uc3QgY2hlY2tVcmxfMSA9IHJlcXVpcmUoXCIuL2NoZWNrVXJsXCIpO1xuY29uc3QgcmVxdWVzdEhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL3JlcXVlc3RIZWxwZXJzXCIpO1xuY29uc3QgcmV0cnlfd3JhcHBlcl8xID0gcmVxdWlyZShcIi4vcmV0cnktd3JhcHBlclwiKTtcbmNvbnN0IEFXU19DT05UQUlORVJfQ1JFREVOVElBTFNfUkVMQVRJVkVfVVJJID0gXCJBV1NfQ09OVEFJTkVSX0NSRURFTlRJQUxTX1JFTEFUSVZFX1VSSVwiO1xuY29uc3QgREVGQVVMVF9MSU5LX0xPQ0FMX0hPU1QgPSBcImh0dHA6Ly8xNjkuMjU0LjE3MC4yXCI7XG5jb25zdCBBV1NfQ09OVEFJTkVSX0NSRURFTlRJQUxTX0ZVTExfVVJJID0gXCJBV1NfQ09OVEFJTkVSX0NSRURFTlRJQUxTX0ZVTExfVVJJXCI7XG5jb25zdCBBV1NfQ09OVEFJTkVSX0FVVEhPUklaQVRJT05fVE9LRU5fRklMRSA9IFwiQVdTX0NPTlRBSU5FUl9BVVRIT1JJWkFUSU9OX1RPS0VOX0ZJTEVcIjtcbmNvbnN0IEFXU19DT05UQUlORVJfQVVUSE9SSVpBVElPTl9UT0tFTiA9IFwiQVdTX0NPTlRBSU5FUl9BVVRIT1JJWkFUSU9OX1RPS0VOXCI7XG5jb25zdCBmcm9tSHR0cCA9IChvcHRpb25zID0ge30pID0+IHtcbiAgICBvcHRpb25zLmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWh0dHAgLSBmcm9tSHR0cFwiKTtcbiAgICBsZXQgaG9zdDtcbiAgICBjb25zdCByZWxhdGl2ZSA9IG9wdGlvbnMuYXdzQ29udGFpbmVyQ3JlZGVudGlhbHNSZWxhdGl2ZVVyaSA/PyBwcm9jZXNzLmVudltBV1NfQ09OVEFJTkVSX0NSRURFTlRJQUxTX1JFTEFUSVZFX1VSSV07XG4gICAgY29uc3QgZnVsbCA9IG9wdGlvbnMuYXdzQ29udGFpbmVyQ3JlZGVudGlhbHNGdWxsVXJpID8/IHByb2Nlc3MuZW52W0FXU19DT05UQUlORVJfQ1JFREVOVElBTFNfRlVMTF9VUkldO1xuICAgIGNvbnN0IHRva2VuID0gb3B0aW9ucy5hd3NDb250YWluZXJBdXRob3JpemF0aW9uVG9rZW4gPz8gcHJvY2Vzcy5lbnZbQVdTX0NPTlRBSU5FUl9BVVRIT1JJWkFUSU9OX1RPS0VOXTtcbiAgICBjb25zdCB0b2tlbkZpbGUgPSBvcHRpb25zLmF3c0NvbnRhaW5lckF1dGhvcml6YXRpb25Ub2tlbkZpbGUgPz8gcHJvY2Vzcy5lbnZbQVdTX0NPTlRBSU5FUl9BVVRIT1JJWkFUSU9OX1RPS0VOX0ZJTEVdO1xuICAgIGNvbnN0IHdhcm4gPSBvcHRpb25zLmxvZ2dlcj8uY29uc3RydWN0b3I/Lm5hbWUgPT09IFwiTm9PcExvZ2dlclwiIHx8ICFvcHRpb25zLmxvZ2dlciA/IGNvbnNvbGUud2FybiA6IG9wdGlvbnMubG9nZ2VyLndhcm47XG4gICAgaWYgKHJlbGF0aXZlICYmIGZ1bGwpIHtcbiAgICAgICAgd2FybihcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaHR0cDogXCIgK1xuICAgICAgICAgICAgXCJ5b3UgaGF2ZSBzZXQgYm90aCBhd3NDb250YWluZXJDcmVkZW50aWFsc1JlbGF0aXZlVXJpIGFuZCBhd3NDb250YWluZXJDcmVkZW50aWFsc0Z1bGxVcmkuXCIpO1xuICAgICAgICB3YXJuKFwiYXdzQ29udGFpbmVyQ3JlZGVudGlhbHNGdWxsVXJpIHdpbGwgdGFrZSBwcmVjZWRlbmNlLlwiKTtcbiAgICB9XG4gICAgaWYgKHRva2VuICYmIHRva2VuRmlsZSkge1xuICAgICAgICB3YXJuKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1odHRwOiBcIiArXG4gICAgICAgICAgICBcInlvdSBoYXZlIHNldCBib3RoIGF3c0NvbnRhaW5lckF1dGhvcml6YXRpb25Ub2tlbiBhbmQgYXdzQ29udGFpbmVyQXV0aG9yaXphdGlvblRva2VuRmlsZS5cIik7XG4gICAgICAgIHdhcm4oXCJhd3NDb250YWluZXJBdXRob3JpemF0aW9uVG9rZW4gd2lsbCB0YWtlIHByZWNlZGVuY2UuXCIpO1xuICAgIH1cbiAgICBpZiAoZnVsbCkge1xuICAgICAgICBob3N0ID0gZnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVsYXRpdmUpIHtcbiAgICAgICAgaG9zdCA9IGAke0RFRkFVTFRfTElOS19MT0NBTF9IT1NUfSR7cmVsYXRpdmV9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBwcm9wZXJ0eV9wcm92aWRlcl8xLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgTm8gSFRUUCBjcmVkZW50aWFsIHByb3ZpZGVyIGhvc3QgcHJvdmlkZWQuXG5TZXQgQVdTX0NPTlRBSU5FUl9DUkVERU5USUFMU19GVUxMX1VSSSBvciBBV1NfQ09OVEFJTkVSX0NSRURFTlRJQUxTX1JFTEFUSVZFX1VSSS5gLCB7IGxvZ2dlcjogb3B0aW9ucy5sb2dnZXIgfSk7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoaG9zdCk7XG4gICAgKDAsIGNoZWNrVXJsXzEuY2hlY2tVcmwpKHVybCwgb3B0aW9ucy5sb2dnZXIpO1xuICAgIGNvbnN0IHJlcXVlc3RIYW5kbGVyID0gbmV3IG5vZGVfaHR0cF9oYW5kbGVyXzEuTm9kZUh0dHBIYW5kbGVyKHtcbiAgICAgICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMudGltZW91dCA/PyAxMDAwLFxuICAgICAgICBjb25uZWN0aW9uVGltZW91dDogb3B0aW9ucy50aW1lb3V0ID8/IDEwMDAsXG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCByZXRyeV93cmFwcGVyXzEucmV0cnlXcmFwcGVyKShhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSAoMCwgcmVxdWVzdEhlbHBlcnNfMS5jcmVhdGVHZXRSZXF1ZXN0KSh1cmwpO1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5BdXRob3JpemF0aW9uID0gdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG9rZW5GaWxlKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IChhd2FpdCBwcm9taXNlc18xLmRlZmF1bHQucmVhZEZpbGUodG9rZW5GaWxlKSkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVxdWVzdEhhbmRsZXIuaGFuZGxlKHJlcXVlc3QpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCByZXF1ZXN0SGVscGVyc18xLmdldENyZWRlbnRpYWxzKShyZXN1bHQucmVzcG9uc2UpLnRoZW4oKGNyZWRzKSA9PiAoMCwgY2xpZW50XzEuc2V0Q3JlZGVudGlhbEZlYXR1cmUpKGNyZWRzLCBcIkNSRURFTlRJQUxTX0hUVFBcIiwgXCJ6XCIpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHByb3BlcnR5X3Byb3ZpZGVyXzEuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFN0cmluZyhlKSwgeyBsb2dnZXI6IG9wdGlvbnMubG9nZ2VyIH0pO1xuICAgICAgICB9XG4gICAgfSwgb3B0aW9ucy5tYXhSZXRyaWVzID8/IDMsIG9wdGlvbnMudGltZW91dCA/PyAxMDAwKTtcbn07XG5leHBvcnRzLmZyb21IdHRwID0gZnJvbUh0dHA7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21IdHRwID0gdm9pZCAwO1xudmFyIGZyb21IdHRwXzEgPSByZXF1aXJlKFwiLi9mcm9tSHR0cC9mcm9tSHR0cFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21IdHRwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tSHR0cF8xLmZyb21IdHRwOyB9IH0pO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSBleHBvcnRzLmRlZmF1bHRTU09IdHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gZXhwb3J0cy5kZWZhdWx0U1NPSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZVwiKTtcbmNvbnN0IHV0aWxfbWlkZGxld2FyZV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCIpO1xuY29uc3QgZGVmYXVsdFNTT0h0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gYXN5bmMgKGNvbmZpZywgY29udGV4dCwgaW5wdXQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcGVyYXRpb246ICgwLCB1dGlsX21pZGRsZXdhcmVfMS5nZXRTbWl0aHlDb250ZXh0KShjb250ZXh0KS5vcGVyYXRpb24sXG4gICAgICAgIHJlZ2lvbjogKGF3YWl0ICgwLCB1dGlsX21pZGRsZXdhcmVfMS5ub3JtYWxpemVQcm92aWRlcikoY29uZmlnLnJlZ2lvbikoKSkgfHxcbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgYHJlZ2lvbmAgdG8gYmUgY29uZmlndXJlZCBmb3IgYGF3cy5hdXRoI3NpZ3Y0YFwiKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgfTtcbn07XG5leHBvcnRzLmRlZmF1bHRTU09IdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciA9IGRlZmF1bHRTU09IdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcjtcbmZ1bmN0aW9uIGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiYXdzc3NvcG9ydGFsXCIsXG4gICAgICAgICAgICByZWdpb246IGF1dGhQYXJhbWV0ZXJzLnJlZ2lvbixcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydGllc0V4dHJhY3RvcjogKGNvbmZpZywgY29udGV4dCkgPT4gKHtcbiAgICAgICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU21pdGh5QXBpTm9BdXRoSHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzY2hlbWVJZDogXCJzbWl0aHkuYXBpI25vQXV0aFwiLFxuICAgIH07XG59XG5jb25zdCBkZWZhdWx0U1NPSHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IChhdXRoUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICBzd2l0Y2ggKGF1dGhQYXJhbWV0ZXJzLm9wZXJhdGlvbikge1xuICAgICAgICBjYXNlIFwiR2V0Um9sZUNyZWRlbnRpYWxzXCI6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVTbWl0aHlBcGlOb0F1dGhIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkxpc3RBY2NvdW50Um9sZXNcIjoge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNyZWF0ZVNtaXRoeUFwaU5vQXV0aEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiTGlzdEFjY291bnRzXCI6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVTbWl0aHlBcGlOb0F1dGhIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkxvZ291dFwiOiB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goY3JlYXRlU21pdGh5QXBpTm9BdXRoSHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydHMuZGVmYXVsdFNTT0h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBkZWZhdWx0U1NPSHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbmNvbnN0IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25zdCBjb25maWdfMCA9ICgwLCBjb3JlXzEucmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnKShjb25maWcpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbmZpZ18wLCB7XG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiAoMCwgdXRpbF9taWRkbGV3YXJlXzEubm9ybWFsaXplUHJvdmlkZXIpKGNvbmZpZy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/PyBbXSksXG4gICAgfSk7XG59O1xuZXhwb3J0cy5yZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWc7XG4iLCAie1xuICBcIm5hbWVcIjogXCJAYXdzLXNkay9jbGllbnQtc3NvXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBV1MgU0RLIGZvciBKYXZhU2NyaXB0IFNzbyBDbGllbnQgZm9yIE5vZGUuanMsIEJyb3dzZXIgYW5kIFJlYWN0IE5hdGl2ZVwiLFxuICBcInZlcnNpb25cIjogXCIzLjc5OS4wXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiBcImNvbmN1cnJlbnRseSAneWFybjpidWlsZDpjanMnICd5YXJuOmJ1aWxkOmVzJyAneWFybjpidWlsZDp0eXBlcydcIixcbiAgICBcImJ1aWxkOmNqc1wiOiBcIm5vZGUgLi4vLi4vc2NyaXB0cy9jb21waWxhdGlvbi9pbmxpbmUgY2xpZW50LXNzb1wiLFxuICAgIFwiYnVpbGQ6ZXNcIjogXCJ0c2MgLXAgdHNjb25maWcuZXMuanNvblwiLFxuICAgIFwiYnVpbGQ6aW5jbHVkZTpkZXBzXCI6IFwibGVybmEgcnVuIC0tc2NvcGUgJG5wbV9wYWNrYWdlX25hbWUgLS1pbmNsdWRlLWRlcGVuZGVuY2llcyBidWlsZFwiLFxuICAgIFwiYnVpbGQ6dHlwZXNcIjogXCJ0c2MgLXAgdHNjb25maWcudHlwZXMuanNvblwiLFxuICAgIFwiYnVpbGQ6dHlwZXM6ZG93bmxldmVsXCI6IFwiZG93bmxldmVsLWR0cyBkaXN0LXR5cGVzIGRpc3QtdHlwZXMvdHMzLjRcIixcbiAgICBcImNsZWFuXCI6IFwicmltcmFmIC4vZGlzdC0qICYmIHJpbXJhZiAqLnRzYnVpbGRpbmZvXCIsXG4gICAgXCJleHRyYWN0OmRvY3NcIjogXCJhcGktZXh0cmFjdG9yIHJ1biAtLWxvY2FsXCIsXG4gICAgXCJnZW5lcmF0ZTpjbGllbnRcIjogXCJub2RlIC4uLy4uL3NjcmlwdHMvZ2VuZXJhdGUtY2xpZW50cy9zaW5nbGUtc2VydmljZSAtLXNvbG8gc3NvXCJcbiAgfSxcbiAgXCJtYWluXCI6IFwiLi9kaXN0LWNqcy9pbmRleC5qc1wiLFxuICBcInR5cGVzXCI6IFwiLi9kaXN0LXR5cGVzL2luZGV4LmQudHNcIixcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QtZXMvaW5kZXguanNcIixcbiAgXCJzaWRlRWZmZWN0c1wiOiBmYWxzZSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGF3cy1jcnlwdG8vc2hhMjU2LWJyb3dzZXJcIjogXCI1LjIuMFwiLFxuICAgIFwiQGF3cy1jcnlwdG8vc2hhMjU2LWpzXCI6IFwiNS4yLjBcIixcbiAgICBcIkBhd3Mtc2RrL2NvcmVcIjogXCIzLjc5OS4wXCIsXG4gICAgXCJAYXdzLXNkay9taWRkbGV3YXJlLWhvc3QtaGVhZGVyXCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1sb2dnZXJcIjogXCIzLjc3NS4wXCIsXG4gICAgXCJAYXdzLXNkay9taWRkbGV3YXJlLXJlY3Vyc2lvbi1kZXRlY3Rpb25cIjogXCIzLjc3NS4wXCIsXG4gICAgXCJAYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnRcIjogXCIzLjc5OS4wXCIsXG4gICAgXCJAYXdzLXNkay9yZWdpb24tY29uZmlnLXJlc29sdmVyXCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvdHlwZXNcIjogXCIzLjc3NS4wXCIsXG4gICAgXCJAYXdzLXNkay91dGlsLWVuZHBvaW50c1wiOiBcIjMuNzg3LjBcIixcbiAgICBcIkBhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1icm93c2VyXCI6IFwiMy43NzUuMFwiLFxuICAgIFwiQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGVcIjogXCIzLjc5OS4wXCIsXG4gICAgXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiOiBcIl40LjEuMFwiLFxuICAgIFwiQHNtaXRoeS9jb3JlXCI6IFwiXjMuMy4wXCIsXG4gICAgXCJAc21pdGh5L2ZldGNoLWh0dHAtaGFuZGxlclwiOiBcIl41LjAuMlwiLFxuICAgIFwiQHNtaXRoeS9oYXNoLW5vZGVcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvaW52YWxpZC1kZXBlbmRlbmN5XCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L21pZGRsZXdhcmUtY29udGVudC1sZW5ndGhcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiOiBcIl40LjEuMVwiLFxuICAgIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI6IFwiXjQuMS4xXCIsXG4gICAgXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjogXCJeNC4wLjNcIixcbiAgICBcIkBzbWl0aHkvbWlkZGxld2FyZS1zdGFja1wiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiOiBcIl40LjAuNFwiLFxuICAgIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI6IFwiXjUuMS4wXCIsXG4gICAgXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjogXCJeNC4yLjFcIixcbiAgICBcIkBzbWl0aHkvdHlwZXNcIjogXCJeNC4yLjBcIixcbiAgICBcIkBzbWl0aHkvdXJsLXBhcnNlclwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiOiBcIl40LjAuMFwiLFxuICAgIFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLWJyb3dzZXJcIjogXCJeNC4wLjBcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlXCI6IFwiXjQuMC4wXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1icm93c2VyXCI6IFwiXjQuMC45XCIsXG4gICAgXCJAc21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlXCI6IFwiXjQuMC45XCIsXG4gICAgXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI6IFwiXjMuMC4yXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS91dGlsLXJldHJ5XCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtdXRmOFwiOiBcIl40LjAuMFwiLFxuICAgIFwidHNsaWJcIjogXCJeMi42LjJcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdHNjb25maWcvbm9kZTE4XCI6IFwiMTguMi40XCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4xOC4xOS42OVwiLFxuICAgIFwiY29uY3VycmVudGx5XCI6IFwiNy4wLjBcIixcbiAgICBcImRvd25sZXZlbC1kdHNcIjogXCIwLjEwLjFcIixcbiAgICBcInJpbXJhZlwiOiBcIjMuMC4yXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwifjUuMi4yXCJcbiAgfSxcbiAgXCJlbmdpbmVzXCI6IHtcbiAgICBcIm5vZGVcIjogXCI+PTE4LjAuMFwiXG4gIH0sXG4gIFwidHlwZXNWZXJzaW9uc1wiOiB7XG4gICAgXCI8NC4wXCI6IHtcbiAgICAgIFwiZGlzdC10eXBlcy8qXCI6IFtcbiAgICAgICAgXCJkaXN0LXR5cGVzL3RzMy40LypcIlxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0LSovKipcIlxuICBdLFxuICBcImF1dGhvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQVdTIFNESyBmb3IgSmF2YVNjcmlwdCBUZWFtXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2F3cy5hbWF6b24uY29tL2phdmFzY3JpcHQvXCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiQXBhY2hlLTIuMFwiLFxuICBcImJyb3dzZXJcIjoge1xuICAgIFwiLi9kaXN0LWVzL3J1bnRpbWVDb25maWdcIjogXCIuL2Rpc3QtZXMvcnVudGltZUNvbmZpZy5icm93c2VyXCJcbiAgfSxcbiAgXCJyZWFjdC1uYXRpdmVcIjoge1xuICAgIFwiLi9kaXN0LWVzL3J1bnRpbWVDb25maWdcIjogXCIuL2Rpc3QtZXMvcnVudGltZUNvbmZpZy5uYXRpdmVcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzLXYzL3RyZWUvbWFpbi9jbGllbnRzL2NsaWVudC1zc29cIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLXNkay1qcy12My5naXRcIixcbiAgICBcImRpcmVjdG9yeVwiOiBcImNsaWVudHMvY2xpZW50LXNzb1wiXG4gIH1cbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgTk9ERV9BUFBfSURfQ09ORklHX09QVElPTlM6ICgpID0+IE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TLFxuICBVQV9BUFBfSURfRU5WX05BTUU6ICgpID0+IFVBX0FQUF9JRF9FTlZfTkFNRSxcbiAgVUFfQVBQX0lEX0lOSV9OQU1FOiAoKSA9PiBVQV9BUFBfSURfSU5JX05BTUUsXG4gIGNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlcjogKCkgPT4gY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyLFxuICBjcnRBdmFpbGFiaWxpdHk6ICgpID0+IGNydEF2YWlsYWJpbGl0eSxcbiAgZGVmYXVsdFVzZXJBZ2VudDogKCkgPT4gZGVmYXVsdFVzZXJBZ2VudFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTtcblxuLy8gc3JjL2RlZmF1bHRVc2VyQWdlbnQudHNcbnZhciBpbXBvcnRfb3MgPSByZXF1aXJlKFwib3NcIik7XG52YXIgaW1wb3J0X3Byb2Nlc3MgPSByZXF1aXJlKFwicHJvY2Vzc1wiKTtcblxuLy8gc3JjL2NydC1hdmFpbGFiaWxpdHkudHNcbnZhciBjcnRBdmFpbGFiaWxpdHkgPSB7XG4gIGlzQ3J0QXZhaWxhYmxlOiBmYWxzZVxufTtcblxuLy8gc3JjL2lzLWNydC1hdmFpbGFibGUudHNcbnZhciBpc0NydEF2YWlsYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICBpZiAoY3J0QXZhaWxhYmlsaXR5LmlzQ3J0QXZhaWxhYmxlKSB7XG4gICAgcmV0dXJuIFtcIm1kL2NydC1hdmFpbFwiXTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn0sIFwiaXNDcnRBdmFpbGFibGVcIik7XG5cbi8vIHNyYy9kZWZhdWx0VXNlckFnZW50LnRzXG52YXIgY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeyBzZXJ2aWNlSWQsIGNsaWVudFZlcnNpb24gfSkgPT4ge1xuICByZXR1cm4gYXN5bmMgKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IHNlY3Rpb25zID0gW1xuICAgICAgLy8gc2RrLW1ldGFkYXRhXG4gICAgICBbXCJhd3Mtc2RrLWpzXCIsIGNsaWVudFZlcnNpb25dLFxuICAgICAgLy8gdWEtbWV0YWRhdGFcbiAgICAgIFtcInVhXCIsIFwiMi4xXCJdLFxuICAgICAgLy8gb3MtbWV0YWRhdGFcbiAgICAgIFtgb3MvJHsoMCwgaW1wb3J0X29zLnBsYXRmb3JtKSgpfWAsICgwLCBpbXBvcnRfb3MucmVsZWFzZSkoKV0sXG4gICAgICAvLyBsYW5ndWFnZS1tZXRhZGF0YVxuICAgICAgLy8gRUNNQVNjcmlwdCBlZGl0aW9uIGRvZXNuJ3QgbWF0dGVyIGluIEpTLCBzbyBubyB2ZXJzaW9uIG5lZWRlZC5cbiAgICAgIFtcImxhbmcvanNcIl0sXG4gICAgICBbXCJtZC9ub2RlanNcIiwgYCR7aW1wb3J0X3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gXVxuICAgIF07XG4gICAgY29uc3QgY3J0QXZhaWxhYmxlID0gaXNDcnRBdmFpbGFibGUoKTtcbiAgICBpZiAoY3J0QXZhaWxhYmxlKSB7XG4gICAgICBzZWN0aW9ucy5wdXNoKGNydEF2YWlsYWJsZSk7XG4gICAgfVxuICAgIGlmIChzZXJ2aWNlSWQpIHtcbiAgICAgIHNlY3Rpb25zLnB1c2goW2BhcGkvJHtzZXJ2aWNlSWR9YCwgY2xpZW50VmVyc2lvbl0pO1xuICAgIH1cbiAgICBpZiAoaW1wb3J0X3Byb2Nlc3MuZW52LkFXU19FWEVDVVRJT05fRU5WKSB7XG4gICAgICBzZWN0aW9ucy5wdXNoKFtgZXhlYy1lbnYvJHtpbXBvcnRfcHJvY2Vzcy5lbnYuQVdTX0VYRUNVVElPTl9FTlZ9YF0pO1xuICAgIH1cbiAgICBjb25zdCBhcHBJZCA9IGF3YWl0IGNvbmZpZz8udXNlckFnZW50QXBwSWQ/LigpO1xuICAgIGNvbnN0IHJlc29sdmVkVXNlckFnZW50ID0gYXBwSWQgPyBbLi4uc2VjdGlvbnMsIFtgYXBwLyR7YXBwSWR9YF1dIDogWy4uLnNlY3Rpb25zXTtcbiAgICByZXR1cm4gcmVzb2x2ZWRVc2VyQWdlbnQ7XG4gIH07XG59LCBcImNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlclwiKTtcbnZhciBkZWZhdWx0VXNlckFnZW50ID0gY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyO1xuXG4vLyBzcmMvbm9kZUFwcElkQ29uZmlnT3B0aW9ucy50c1xudmFyIGltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQgPSByZXF1aXJlKFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCIpO1xudmFyIFVBX0FQUF9JRF9FTlZfTkFNRSA9IFwiQVdTX1NES19VQV9BUFBfSURcIjtcbnZhciBVQV9BUFBfSURfSU5JX05BTUUgPSBcInNka191YV9hcHBfaWRcIjtcbnZhciBVQV9BUFBfSURfSU5JX05BTUVfREVQUkVDQVRFRCA9IFwic2RrLXVhLWFwcC1pZFwiO1xudmFyIE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVudjIpID0+IGVudjJbVUFfQVBQX0lEX0VOVl9OQU1FXSwgXCJlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3JcIiksXG4gIGNvbmZpZ0ZpbGVTZWxlY3RvcjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgocHJvZmlsZSkgPT4gcHJvZmlsZVtVQV9BUFBfSURfSU5JX05BTUVdID8/IHByb2ZpbGVbVUFfQVBQX0lEX0lOSV9OQU1FX0RFUFJFQ0FURURdLCBcImNvbmZpZ0ZpbGVTZWxlY3RvclwiKSxcbiAgZGVmYXVsdDogaW1wb3J0X21pZGRsZXdhcmVfdXNlcl9hZ2VudC5ERUZBVUxUX1VBX0FQUF9JRFxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNydEF2YWlsYWJpbGl0eSxcbiAgY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyLFxuICBkZWZhdWx0VXNlckFnZW50LFxuICBVQV9BUFBfSURfRU5WX05BTUUsXG4gIFVBX0FQUF9JRF9JTklfTkFNRSxcbiAgTk9ERV9BUFBfSURfQ09ORklHX09QVElPTlNcbn0pO1xuXG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEhhc2g6ICgpID0+IEhhc2hcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF91dGlsX2J1ZmZlcl9mcm9tID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiKTtcbnZhciBpbXBvcnRfdXRpbF91dGY4ID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC11dGY4XCIpO1xudmFyIGltcG9ydF9idWZmZXIgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xudmFyIGltcG9ydF9jcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xudmFyIEhhc2ggPSBjbGFzcyB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiSGFzaFwiKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihhbGdvcml0aG1JZGVudGlmaWVyLCBzZWNyZXQpIHtcbiAgICB0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIgPSBhbGdvcml0aG1JZGVudGlmaWVyO1xuICAgIHRoaXMuc2VjcmV0ID0gc2VjcmV0O1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuICB1cGRhdGUodG9IYXNoLCBlbmNvZGluZykge1xuICAgIHRoaXMuaGFzaC51cGRhdGUoKDAsIGltcG9ydF91dGlsX3V0ZjgudG9VaW50OEFycmF5KShjYXN0U291cmNlRGF0YSh0b0hhc2gsIGVuY29kaW5nKSkpO1xuICB9XG4gIGRpZ2VzdCgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuaGFzaC5kaWdlc3QoKSk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5zZWNyZXQgPyAoMCwgaW1wb3J0X2NyeXB0by5jcmVhdGVIbWFjKSh0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIsIGNhc3RTb3VyY2VEYXRhKHRoaXMuc2VjcmV0KSkgOiAoMCwgaW1wb3J0X2NyeXB0by5jcmVhdGVIYXNoKSh0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIpO1xuICB9XG59O1xuZnVuY3Rpb24gY2FzdFNvdXJjZURhdGEodG9DYXN0LCBlbmNvZGluZykge1xuICBpZiAoaW1wb3J0X2J1ZmZlci5CdWZmZXIuaXNCdWZmZXIodG9DYXN0KSkge1xuICAgIHJldHVybiB0b0Nhc3Q7XG4gIH1cbiAgaWYgKHR5cGVvZiB0b0Nhc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gKDAsIGltcG9ydF91dGlsX2J1ZmZlcl9mcm9tLmZyb21TdHJpbmcpKHRvQ2FzdCwgZW5jb2RpbmcpO1xuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodG9DYXN0KSkge1xuICAgIHJldHVybiAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbUFycmF5QnVmZmVyKSh0b0Nhc3QuYnVmZmVyLCB0b0Nhc3QuYnl0ZU9mZnNldCwgdG9DYXN0LmJ5dGVMZW5ndGgpO1xuICB9XG4gIHJldHVybiAoMCwgaW1wb3J0X3V0aWxfYnVmZmVyX2Zyb20uZnJvbUFycmF5QnVmZmVyKSh0b0Nhc3QpO1xufVxuX19uYW1lKGNhc3RTb3VyY2VEYXRhLCBcImNhc3RTb3VyY2VEYXRhXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgSGFzaFxufSk7XG5cbiIsICJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgY2FsY3VsYXRlQm9keUxlbmd0aDogKCkgPT4gY2FsY3VsYXRlQm9keUxlbmd0aFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9jYWxjdWxhdGVCb2R5TGVuZ3RoLnRzXG52YXIgaW1wb3J0X2ZzID0gcmVxdWlyZShcImZzXCIpO1xudmFyIGNhbGN1bGF0ZUJvZHlMZW5ndGggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChib2R5KSA9PiB7XG4gIGlmICghYm9keSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmICh0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYm9keS5ieXRlTGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYm9keS5zaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGJvZHkuc2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYm9keS5zdGFydCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgYm9keS5lbmQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYm9keS5lbmQgKyAxIC0gYm9keS5zdGFydDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYm9keS5wYXRoID09PSBcInN0cmluZ1wiIHx8IEJ1ZmZlci5pc0J1ZmZlcihib2R5LnBhdGgpKSB7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfZnMubHN0YXRTeW5jKShib2R5LnBhdGgpLnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkuZmQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gKDAsIGltcG9ydF9mcy5mc3RhdFN5bmMpKGJvZHkuZmQpLnNpemU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBCb2R5IExlbmd0aCBjb21wdXRhdGlvbiBmYWlsZWQgZm9yICR7Ym9keX1gKTtcbn0sIFwiY2FsY3VsYXRlQm9keUxlbmd0aFwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhbGN1bGF0ZUJvZHlMZW5ndGhcbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJ1bGVTZXQgPSB2b2lkIDA7XG5jb25zdCB1ID0gXCJyZXF1aXJlZFwiLCB2ID0gXCJmblwiLCB3ID0gXCJhcmd2XCIsIHggPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IFwiZ2V0QXR0clwiLCBpID0geyBbdV06IGZhbHNlLCBcInR5cGVcIjogXCJTdHJpbmdcIiB9LCBqID0geyBbdV06IHRydWUsIFwiZGVmYXVsdFwiOiBmYWxzZSwgXCJ0eXBlXCI6IFwiQm9vbGVhblwiIH0sIGsgPSB7IFt4XTogXCJFbmRwb2ludFwiIH0sIGwgPSB7IFt2XTogYywgW3ddOiBbeyBbeF06IFwiVXNlRklQU1wiIH0sIHRydWVdIH0sIG0gPSB7IFt2XTogYywgW3ddOiBbeyBbeF06IFwiVXNlRHVhbFN0YWNrXCIgfSwgdHJ1ZV0gfSwgbiA9IHt9LCBvID0geyBbdl06IGgsIFt3XTogW3sgW3hdOiBnIH0sIFwic3VwcG9ydHNGSVBTXCJdIH0sIHAgPSB7IFt4XTogZyB9LCBxID0geyBbdl06IGMsIFt3XTogW3RydWUsIHsgW3ZdOiBoLCBbd106IFtwLCBcInN1cHBvcnRzRHVhbFN0YWNrXCJdIH1dIH0sIHIgPSBbbF0sIHMgPSBbbV0sIHQgPSBbeyBbeF06IFwiUmVnaW9uXCIgfV07XG5jb25zdCBfZGF0YSA9IHsgdmVyc2lvbjogXCIxLjBcIiwgcGFyYW1ldGVyczogeyBSZWdpb246IGksIFVzZUR1YWxTdGFjazogaiwgVXNlRklQUzogaiwgRW5kcG9pbnQ6IGkgfSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYiwgW3ddOiBba10gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiByLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgY29uZGl0aW9uczogcywgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBrLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBbeyBbdl06IGIsIFt3XTogdCB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogXCJhd3MucGFydGl0aW9uXCIsIFt3XTogdCwgYXNzaWduOiBnIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW2wsIG1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBjLCBbd106IFthLCBvXSB9LCBxXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3BvcnRhbC5zc28tZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBhbmQgRHVhbFN0YWNrIGFyZSBlbmFibGVkLCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBvbmUgb3IgYm90aFwiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogciwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYywgW3ddOiBbbywgYV0gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IFwic3RyaW5nRXF1YWxzXCIsIFt3XTogW3sgW3ZdOiBoLCBbd106IFtwLCBcIm5hbWVcIl0gfSwgXCJhd3MtdXMtZ292XCJdIH1dLCBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9wb3J0YWwuc3NvLntSZWdpb259LmFtYXpvbmF3cy5jb21cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vcG9ydGFsLnNzby1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJGSVBTIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRklQU1wiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogcywgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtxXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3BvcnRhbC5zc28ue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkR1YWxTdGFjayBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IER1YWxTdGFja1wiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vcG9ydGFsLnNzby57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBNaXNzaW5nIFJlZ2lvblwiLCB0eXBlOiBkIH1dIH07XG5leHBvcnRzLnJ1bGVTZXQgPSBfZGF0YTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsX2VuZHBvaW50c18xID0gcmVxdWlyZShcIkBhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzXCIpO1xuY29uc3QgdXRpbF9lbmRwb2ludHNfMiA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCIpO1xuY29uc3QgcnVsZXNldF8xID0gcmVxdWlyZShcIi4vcnVsZXNldFwiKTtcbmNvbnN0IGNhY2hlID0gbmV3IHV0aWxfZW5kcG9pbnRzXzIuRW5kcG9pbnRDYWNoZSh7XG4gICAgc2l6ZTogNTAsXG4gICAgcGFyYW1zOiBbXCJFbmRwb2ludFwiLCBcIlJlZ2lvblwiLCBcIlVzZUR1YWxTdGFja1wiLCBcIlVzZUZJUFNcIl0sXG59KTtcbmNvbnN0IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyID0gKGVuZHBvaW50UGFyYW1zLCBjb250ZXh0ID0ge30pID0+IHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KGVuZHBvaW50UGFyYW1zLCAoKSA9PiAoMCwgdXRpbF9lbmRwb2ludHNfMi5yZXNvbHZlRW5kcG9pbnQpKHJ1bGVzZXRfMS5ydWxlU2V0LCB7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zOiBlbmRwb2ludFBhcmFtcyxcbiAgICAgICAgbG9nZ2VyOiBjb250ZXh0LmxvZ2dlcixcbiAgICB9KSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0RW5kcG9pbnRSZXNvbHZlciA9IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyO1xudXRpbF9lbmRwb2ludHNfMi5jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5hd3MgPSB1dGlsX2VuZHBvaW50c18xLmF3c0VuZHBvaW50RnVuY3Rpb25zO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSdW50aW1lQ29uZmlnID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NvcmVcIik7XG5jb25zdCBjb3JlXzIgPSByZXF1aXJlKFwiQHNtaXRoeS9jb3JlXCIpO1xuY29uc3Qgc21pdGh5X2NsaWVudF8xID0gcmVxdWlyZShcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiKTtcbmNvbnN0IHVybF9wYXJzZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3VybC1wYXJzZXJcIik7XG5jb25zdCB1dGlsX2Jhc2U2NF8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIik7XG5jb25zdCB1dGlsX3V0ZjhfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtdXRmOFwiKTtcbmNvbnN0IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiKTtcbmNvbnN0IGVuZHBvaW50UmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXJcIik7XG5jb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVZlcnNpb246IFwiMjAxOS0wNi0xMFwiLFxuICAgICAgICBiYXNlNjREZWNvZGVyOiBjb25maWc/LmJhc2U2NERlY29kZXIgPz8gdXRpbF9iYXNlNjRfMS5mcm9tQmFzZTY0LFxuICAgICAgICBiYXNlNjRFbmNvZGVyOiBjb25maWc/LmJhc2U2NEVuY29kZXIgPz8gdXRpbF9iYXNlNjRfMS50b0Jhc2U2NCxcbiAgICAgICAgZGlzYWJsZUhvc3RQcmVmaXg6IGNvbmZpZz8uZGlzYWJsZUhvc3RQcmVmaXggPz8gZmFsc2UsXG4gICAgICAgIGVuZHBvaW50UHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnRQcm92aWRlciA/PyBlbmRwb2ludFJlc29sdmVyXzEuZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIsXG4gICAgICAgIGV4dGVuc2lvbnM6IGNvbmZpZz8uZXh0ZW5zaW9ucyA/PyBbXSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnPy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyID8/IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXJfMS5kZWZhdWx0U1NPSHR0cEF1dGhTY2hlbWVQcm92aWRlcixcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lcyA/PyBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyOiAoaXBjKSA9PiBpcGMuZ2V0SWRlbnRpdHlQcm92aWRlcihcImF3cy5hdXRoI3NpZ3Y0XCIpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IGNvcmVfMS5Bd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlbWVJZDogXCJzbWl0aHkuYXBpI25vQXV0aFwiLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXI6IChpcGMpID0+IGlwYy5nZXRJZGVudGl0eVByb3ZpZGVyKFwic21pdGh5LmFwaSNub0F1dGhcIikgfHwgKGFzeW5jICgpID0+ICh7fSkpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IGNvcmVfMi5Ob0F1dGhTaWduZXIoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGxvZ2dlcjogY29uZmlnPy5sb2dnZXIgPz8gbmV3IHNtaXRoeV9jbGllbnRfMS5Ob09wTG9nZ2VyKCksXG4gICAgICAgIHNlcnZpY2VJZDogY29uZmlnPy5zZXJ2aWNlSWQgPz8gXCJTU09cIixcbiAgICAgICAgdXJsUGFyc2VyOiBjb25maWc/LnVybFBhcnNlciA/PyB1cmxfcGFyc2VyXzEucGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IHV0aWxfdXRmOF8xLmZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB1dGlsX3V0ZjhfMS50b1V0ZjgsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldFJ1bnRpbWVDb25maWcgPSBnZXRSdW50aW1lQ29uZmlnO1xuIiwgInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnOiAoKSA9PiByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL3Jlc29sdmVEZWZhdWx0c01vZGVDb25maWcudHNcbnZhciBpbXBvcnRfY29uZmlnX3Jlc29sdmVyID0gcmVxdWlyZShcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCIpO1xudmFyIGltcG9ydF9ub2RlX2NvbmZpZ19wcm92aWRlciA9IHJlcXVpcmUoXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCIpO1xudmFyIGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCIpO1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgQVdTX0VYRUNVVElPTl9FTlYgPSBcIkFXU19FWEVDVVRJT05fRU5WXCI7XG52YXIgQVdTX1JFR0lPTl9FTlYgPSBcIkFXU19SRUdJT05cIjtcbnZhciBBV1NfREVGQVVMVF9SRUdJT05fRU5WID0gXCJBV1NfREVGQVVMVF9SRUdJT05cIjtcbnZhciBFTlZfSU1EU19ESVNBQkxFRCA9IFwiQVdTX0VDMl9NRVRBREFUQV9ESVNBQkxFRFwiO1xudmFyIERFRkFVTFRTX01PREVfT1BUSU9OUyA9IFtcImluLXJlZ2lvblwiLCBcImNyb3NzLXJlZ2lvblwiLCBcIm1vYmlsZVwiLCBcInN0YW5kYXJkXCIsIFwibGVnYWN5XCJdO1xudmFyIElNRFNfUkVHSU9OX1BBVEggPSBcIi9sYXRlc3QvbWV0YS1kYXRhL3BsYWNlbWVudC9yZWdpb25cIjtcblxuLy8gc3JjL2RlZmF1bHRzTW9kZUNvbmZpZy50c1xudmFyIEFXU19ERUZBVUxUU19NT0RFX0VOViA9IFwiQVdTX0RFRkFVTFRTX01PREVcIjtcbnZhciBBV1NfREVGQVVMVFNfTU9ERV9DT05GSUcgPSBcImRlZmF1bHRzX21vZGVcIjtcbnZhciBOT0RFX0RFRkFVTFRTX01PREVfQ09ORklHX09QVElPTlMgPSB7XG4gIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4ge1xuICAgIHJldHVybiBlbnZbQVdTX0RFRkFVTFRTX01PREVfRU5WXTtcbiAgfSxcbiAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4ge1xuICAgIHJldHVybiBwcm9maWxlW0FXU19ERUZBVUxUU19NT0RFX0NPTkZJR107XG4gIH0sXG4gIGRlZmF1bHQ6IFwibGVnYWN5XCJcbn07XG5cbi8vIHNyYy9yZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnLnRzXG52YXIgcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHtcbiAgcmVnaW9uID0gKDAsIGltcG9ydF9ub2RlX2NvbmZpZ19wcm92aWRlci5sb2FkQ29uZmlnKShpbXBvcnRfY29uZmlnX3Jlc29sdmVyLk5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TKSxcbiAgZGVmYXVsdHNNb2RlID0gKDAsIGltcG9ydF9ub2RlX2NvbmZpZ19wcm92aWRlci5sb2FkQ29uZmlnKShOT0RFX0RFRkFVTFRTX01PREVfQ09ORklHX09QVElPTlMpXG59ID0ge30pID0+ICgwLCBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIubWVtb2l6ZSkoYXN5bmMgKCkgPT4ge1xuICBjb25zdCBtb2RlID0gdHlwZW9mIGRlZmF1bHRzTW9kZSA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgZGVmYXVsdHNNb2RlKCkgOiBkZWZhdWx0c01vZGU7XG4gIHN3aXRjaCAobW9kZT8udG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgXCJhdXRvXCI6XG4gICAgICByZXR1cm4gcmVzb2x2ZU5vZGVEZWZhdWx0c01vZGVBdXRvKHJlZ2lvbik7XG4gICAgY2FzZSBcImluLXJlZ2lvblwiOlxuICAgIGNhc2UgXCJjcm9zcy1yZWdpb25cIjpcbiAgICBjYXNlIFwibW9iaWxlXCI6XG4gICAgY2FzZSBcInN0YW5kYXJkXCI6XG4gICAgY2FzZSBcImxlZ2FjeVwiOlxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2RlPy50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbiAgICBjYXNlIHZvaWQgMDpcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXCJsZWdhY3lcIik7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgcGFyYW1ldGVyIGZvciBcImRlZmF1bHRzTW9kZVwiLCBleHBlY3QgJHtERUZBVUxUU19NT0RFX09QVElPTlMuam9pbihcIiwgXCIpfSwgZ290ICR7bW9kZX1gXG4gICAgICApO1xuICB9XG59KSwgXCJyZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnXCIpO1xudmFyIHJlc29sdmVOb2RlRGVmYXVsdHNNb2RlQXV0byA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGNsaWVudFJlZ2lvbikgPT4ge1xuICBpZiAoY2xpZW50UmVnaW9uKSB7XG4gICAgY29uc3QgcmVzb2x2ZWRSZWdpb24gPSB0eXBlb2YgY2xpZW50UmVnaW9uID09PSBcImZ1bmN0aW9uXCIgPyBhd2FpdCBjbGllbnRSZWdpb24oKSA6IGNsaWVudFJlZ2lvbjtcbiAgICBjb25zdCBpbmZlcnJlZFJlZ2lvbiA9IGF3YWl0IGluZmVyUGh5c2ljYWxSZWdpb24oKTtcbiAgICBpZiAoIWluZmVycmVkUmVnaW9uKSB7XG4gICAgICByZXR1cm4gXCJzdGFuZGFyZFwiO1xuICAgIH1cbiAgICBpZiAocmVzb2x2ZWRSZWdpb24gPT09IGluZmVycmVkUmVnaW9uKSB7XG4gICAgICByZXR1cm4gXCJpbi1yZWdpb25cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY3Jvc3MtcmVnaW9uXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBcInN0YW5kYXJkXCI7XG59LCBcInJlc29sdmVOb2RlRGVmYXVsdHNNb2RlQXV0b1wiKTtcbnZhciBpbmZlclBoeXNpY2FsUmVnaW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudltBV1NfRVhFQ1VUSU9OX0VOVl0gJiYgKHByb2Nlc3MuZW52W0FXU19SRUdJT05fRU5WXSB8fCBwcm9jZXNzLmVudltBV1NfREVGQVVMVF9SRUdJT05fRU5WXSkpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnZbQVdTX1JFR0lPTl9FTlZdID8/IHByb2Nlc3MuZW52W0FXU19ERUZBVUxUX1JFR0lPTl9FTlZdO1xuICB9XG4gIGlmICghcHJvY2Vzcy5lbnZbRU5WX0lNRFNfRElTQUJMRURdKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LCBodHRwUmVxdWVzdCB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAc21pdGh5L2NyZWRlbnRpYWwtcHJvdmlkZXItaW1kc1wiKSkpO1xuICAgICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBnZXRJbnN0YW5jZU1ldGFkYXRhRW5kcG9pbnQoKTtcbiAgICAgIHJldHVybiAoYXdhaXQgaHR0cFJlcXVlc3QoeyAuLi5lbmRwb2ludCwgcGF0aDogSU1EU19SRUdJT05fUEFUSCB9KSkudG9TdHJpbmcoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9XG59LCBcImluZmVyUGh5c2ljYWxSZWdpb25cIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSdW50aW1lQ29uZmlnID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IHBhY2thZ2VfanNvbl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKSk7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZVwiKTtcbmNvbnN0IHV0aWxfdXNlcl9hZ2VudF9ub2RlXzEgPSByZXF1aXJlKFwiQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGVcIik7XG5jb25zdCBjb25maWdfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiKTtcbmNvbnN0IGhhc2hfbm9kZV8xID0gcmVxdWlyZShcIkBzbWl0aHkvaGFzaC1ub2RlXCIpO1xuY29uc3QgbWlkZGxld2FyZV9yZXRyeV8xID0gcmVxdWlyZShcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiKTtcbmNvbnN0IG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiKTtcbmNvbnN0IG5vZGVfaHR0cF9oYW5kbGVyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiKTtcbmNvbnN0IHV0aWxfYm9keV9sZW5ndGhfbm9kZV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlXCIpO1xuY29uc3QgdXRpbF9yZXRyeV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1yZXRyeVwiKTtcbmNvbnN0IHJ1bnRpbWVDb25maWdfc2hhcmVkXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lQ29uZmlnLnNoYXJlZFwiKTtcbmNvbnN0IHNtaXRoeV9jbGllbnRfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIik7XG5jb25zdCB1dGlsX2RlZmF1bHRzX21vZGVfbm9kZV8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLW5vZGVcIik7XG5jb25zdCBzbWl0aHlfY2xpZW50XzIgPSByZXF1aXJlKFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCIpO1xuY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICAoMCwgc21pdGh5X2NsaWVudF8yLmVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24pKHByb2Nlc3MudmVyc2lvbik7XG4gICAgY29uc3QgZGVmYXVsdHNNb2RlID0gKDAsIHV0aWxfZGVmYXVsdHNfbW9kZV9ub2RlXzEucmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZykoY29uZmlnKTtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIgPSAoKSA9PiBkZWZhdWx0c01vZGUoKS50aGVuKHNtaXRoeV9jbGllbnRfMS5sb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlKTtcbiAgICBjb25zdCBjbGllbnRTaGFyZWRWYWx1ZXMgPSAoMCwgcnVudGltZUNvbmZpZ19zaGFyZWRfMS5nZXRSdW50aW1lQ29uZmlnKShjb25maWcpO1xuICAgICgwLCBjb3JlXzEuZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbikocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBwcm9maWxlQ29uZmlnID0geyBwcm9maWxlOiBjb25maWc/LnByb2ZpbGUgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jbGllbnRTaGFyZWRWYWx1ZXMsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgcnVudGltZTogXCJub2RlXCIsXG4gICAgICAgIGRlZmF1bHRzTW9kZSxcbiAgICAgICAgYXV0aFNjaGVtZVByZWZlcmVuY2U6IGNvbmZpZz8uYXV0aFNjaGVtZVByZWZlcmVuY2UgPz8gKDAsIG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEubG9hZENvbmZpZykoY29yZV8xLk5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TLCBwcm9maWxlQ29uZmlnKSxcbiAgICAgICAgYm9keUxlbmd0aENoZWNrZXI6IGNvbmZpZz8uYm9keUxlbmd0aENoZWNrZXIgPz8gdXRpbF9ib2R5X2xlbmd0aF9ub2RlXzEuY2FsY3VsYXRlQm9keUxlbmd0aCxcbiAgICAgICAgZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyOiBjb25maWc/LmRlZmF1bHRVc2VyQWdlbnRQcm92aWRlciA/P1xuICAgICAgICAgICAgKDAsIHV0aWxfdXNlcl9hZ2VudF9ub2RlXzEuY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyKSh7IHNlcnZpY2VJZDogY2xpZW50U2hhcmVkVmFsdWVzLnNlcnZpY2VJZCwgY2xpZW50VmVyc2lvbjogcGFja2FnZV9qc29uXzEuZGVmYXVsdC52ZXJzaW9uIH0pLFxuICAgICAgICBtYXhBdHRlbXB0czogY29uZmlnPy5tYXhBdHRlbXB0cyA/PyAoMCwgbm9kZV9jb25maWdfcHJvdmlkZXJfMS5sb2FkQ29uZmlnKShtaWRkbGV3YXJlX3JldHJ5XzEuTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgY29uZmlnKSxcbiAgICAgICAgcmVnaW9uOiBjb25maWc/LnJlZ2lvbiA/P1xuICAgICAgICAgICAgKDAsIG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEubG9hZENvbmZpZykoY29uZmlnX3Jlc29sdmVyXzEuTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIHsgLi4uY29uZmlnX3Jlc29sdmVyXzEuTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUywgLi4ucHJvZmlsZUNvbmZpZyB9KSxcbiAgICAgICAgcmVxdWVzdEhhbmRsZXI6IG5vZGVfaHR0cF9oYW5kbGVyXzEuTm9kZUh0dHBIYW5kbGVyLmNyZWF0ZShjb25maWc/LnJlcXVlc3RIYW5kbGVyID8/IGRlZmF1bHRDb25maWdQcm92aWRlciksXG4gICAgICAgIHJldHJ5TW9kZTogY29uZmlnPy5yZXRyeU1vZGUgPz9cbiAgICAgICAgICAgICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKHtcbiAgICAgICAgICAgICAgICAuLi5taWRkbGV3YXJlX3JldHJ5XzEuTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGFzeW5jICgpID0+IChhd2FpdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIoKSkucmV0cnlNb2RlIHx8IHV0aWxfcmV0cnlfMS5ERUZBVUxUX1JFVFJZX01PREUsXG4gICAgICAgICAgICB9LCBjb25maWcpLFxuICAgICAgICBzaGEyNTY6IGNvbmZpZz8uc2hhMjU2ID8/IGhhc2hfbm9kZV8xLkhhc2guYmluZChudWxsLCBcInNoYTI1NlwiKSxcbiAgICAgICAgc3RyZWFtQ29sbGVjdG9yOiBjb25maWc/LnN0cmVhbUNvbGxlY3RvciA/PyBub2RlX2h0dHBfaGFuZGxlcl8xLnN0cmVhbUNvbGxlY3RvcixcbiAgICAgICAgdXNlRHVhbHN0YWNrRW5kcG9pbnQ6IGNvbmZpZz8udXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gKDAsIG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEubG9hZENvbmZpZykoY29uZmlnX3Jlc29sdmVyXzEuTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBwcm9maWxlQ29uZmlnKSxcbiAgICAgICAgdXNlRmlwc0VuZHBvaW50OiBjb25maWc/LnVzZUZpcHNFbmRwb2ludCA/PyAoMCwgbm9kZV9jb25maWdfcHJvdmlkZXJfMS5sb2FkQ29uZmlnKShjb25maWdfcmVzb2x2ZXJfMS5OT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBwcm9maWxlQ29uZmlnKSxcbiAgICAgICAgdXNlckFnZW50QXBwSWQ6IGNvbmZpZz8udXNlckFnZW50QXBwSWQgPz8gKDAsIG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEubG9hZENvbmZpZykodXRpbF91c2VyX2FnZW50X25vZGVfMS5OT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgfTtcbn07XG5leHBvcnRzLmdldFJ1bnRpbWVDb25maWcgPSBnZXRSdW50aW1lQ29uZmlnO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TOiAoKSA9PiBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLFxuICBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUzogKCkgPT4gTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsXG4gIFJFR0lPTl9FTlZfTkFNRTogKCkgPT4gUkVHSU9OX0VOVl9OQU1FLFxuICBSRUdJT05fSU5JX05BTUU6ICgpID0+IFJFR0lPTl9JTklfTkFNRSxcbiAgZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbjogKCkgPT4gZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbixcbiAgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb246ICgpID0+IHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLFxuICByZXNvbHZlUmVnaW9uQ29uZmlnOiAoKSA9PiByZXNvbHZlUmVnaW9uQ29uZmlnXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvZXh0ZW5zaW9ucy9pbmRleC50c1xudmFyIGdldEF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChydW50aW1lQ29uZmlnKSA9PiB7XG4gIHJldHVybiB7XG4gICAgc2V0UmVnaW9uKHJlZ2lvbikge1xuICAgICAgcnVudGltZUNvbmZpZy5yZWdpb24gPSByZWdpb247XG4gICAgfSxcbiAgICByZWdpb24oKSB7XG4gICAgICByZXR1cm4gcnVudGltZUNvbmZpZy5yZWdpb247XG4gICAgfVxuICB9O1xufSwgXCJnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uXCIpO1xudmFyIHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikgPT4ge1xuICByZXR1cm4ge1xuICAgIHJlZ2lvbjogYXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbi5yZWdpb24oKVxuICB9O1xufSwgXCJyZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiKTtcblxuLy8gc3JjL3JlZ2lvbkNvbmZpZy9jb25maWcudHNcbnZhciBSRUdJT05fRU5WX05BTUUgPSBcIkFXU19SRUdJT05cIjtcbnZhciBSRUdJT05fSU5JX05BTUUgPSBcInJlZ2lvblwiO1xudmFyIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TID0ge1xuICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVudikgPT4gZW52W1JFR0lPTl9FTlZfTkFNRV0sIFwiZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yXCIpLFxuICBjb25maWdGaWxlU2VsZWN0b3I6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHByb2ZpbGUpID0+IHByb2ZpbGVbUkVHSU9OX0lOSV9OQU1FXSwgXCJjb25maWdGaWxlU2VsZWN0b3JcIiksXG4gIGRlZmF1bHQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlZ2lvbiBpcyBtaXNzaW5nXCIpO1xuICB9LCBcImRlZmF1bHRcIilcbn07XG52YXIgTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUyA9IHtcbiAgcHJlZmVycmVkRmlsZTogXCJjcmVkZW50aWFsc1wiXG59O1xuXG4vLyBzcmMvcmVnaW9uQ29uZmlnL2lzRmlwc1JlZ2lvbi50c1xudmFyIGlzRmlwc1JlZ2lvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHJlZ2lvbikgPT4gdHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIiAmJiAocmVnaW9uLnN0YXJ0c1dpdGgoXCJmaXBzLVwiKSB8fCByZWdpb24uZW5kc1dpdGgoXCItZmlwc1wiKSksIFwiaXNGaXBzUmVnaW9uXCIpO1xuXG4vLyBzcmMvcmVnaW9uQ29uZmlnL2dldFJlYWxSZWdpb24udHNcbnZhciBnZXRSZWFsUmVnaW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocmVnaW9uKSA9PiBpc0ZpcHNSZWdpb24ocmVnaW9uKSA/IFtcImZpcHMtYXdzLWdsb2JhbFwiLCBcImF3cy1maXBzXCJdLmluY2x1ZGVzKHJlZ2lvbikgPyBcInVzLWVhc3QtMVwiIDogcmVnaW9uLnJlcGxhY2UoL2ZpcHMtKGRrci18cHJvZC0pP3wtZmlwcy8sIFwiXCIpIDogcmVnaW9uLCBcImdldFJlYWxSZWdpb25cIik7XG5cbi8vIHNyYy9yZWdpb25Db25maWcvcmVzb2x2ZVJlZ2lvbkNvbmZpZy50c1xudmFyIHJlc29sdmVSZWdpb25Db25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4ge1xuICBjb25zdCB7IHJlZ2lvbiwgdXNlRmlwc0VuZHBvaW50IH0gPSBpbnB1dDtcbiAgaWYgKCFyZWdpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb24gaXMgbWlzc2luZ1wiKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbnB1dCwge1xuICAgIHJlZ2lvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2V0UmVhbFJlZ2lvbihyZWdpb24pO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvdmlkZWRSZWdpb24gPSBhd2FpdCByZWdpb24oKTtcbiAgICAgIHJldHVybiBnZXRSZWFsUmVnaW9uKHByb3ZpZGVkUmVnaW9uKTtcbiAgICB9LCBcInJlZ2lvblwiKSxcbiAgICB1c2VGaXBzRW5kcG9pbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvdmlkZWRSZWdpb24gPSB0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiID8gcmVnaW9uIDogYXdhaXQgcmVnaW9uKCk7XG4gICAgICBpZiAoaXNGaXBzUmVnaW9uKHByb3ZpZGVkUmVnaW9uKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdXNlRmlwc0VuZHBvaW50ICE9PSBcImZ1bmN0aW9uXCIgPyBQcm9taXNlLnJlc29sdmUoISF1c2VGaXBzRW5kcG9pbnQpIDogdXNlRmlwc0VuZHBvaW50KCk7XG4gICAgfSwgXCJ1c2VGaXBzRW5kcG9pbnRcIilcbiAgfSk7XG59LCBcInJlc29sdmVSZWdpb25Db25maWdcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLFxuICByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbixcbiAgUkVHSU9OX0VOVl9OQU1FLFxuICBSRUdJT05fSU5JX05BTUUsXG4gIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLFxuICBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLFxuICByZXNvbHZlUmVnaW9uQ29uZmlnXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kOiAoKSA9PiBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kLFxuICBHZXRSb2xlQ3JlZGVudGlhbHNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nOiAoKSA9PiBHZXRSb2xlQ3JlZGVudGlhbHNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICBHZXRSb2xlQ3JlZGVudGlhbHNSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZzogKCkgPT4gR2V0Um9sZUNyZWRlbnRpYWxzUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2csXG4gIEludmFsaWRSZXF1ZXN0RXhjZXB0aW9uOiAoKSA9PiBJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbixcbiAgTGlzdEFjY291bnRSb2xlc0NvbW1hbmQ6ICgpID0+IExpc3RBY2NvdW50Um9sZXNDb21tYW5kLFxuICBMaXN0QWNjb3VudFJvbGVzUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZzogKCkgPT4gTGlzdEFjY291bnRSb2xlc1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csXG4gIExpc3RBY2NvdW50c0NvbW1hbmQ6ICgpID0+IExpc3RBY2NvdW50c0NvbW1hbmQsXG4gIExpc3RBY2NvdW50c1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2c6ICgpID0+IExpc3RBY2NvdW50c1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csXG4gIExvZ291dENvbW1hbmQ6ICgpID0+IExvZ291dENvbW1hbmQsXG4gIExvZ291dFJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2c6ICgpID0+IExvZ291dFJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csXG4gIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb246ICgpID0+IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24sXG4gIFJvbGVDcmVkZW50aWFsc0ZpbHRlclNlbnNpdGl2ZUxvZzogKCkgPT4gUm9sZUNyZWRlbnRpYWxzRmlsdGVyU2Vuc2l0aXZlTG9nLFxuICBTU086ICgpID0+IFNTTyxcbiAgU1NPQ2xpZW50OiAoKSA9PiBTU09DbGllbnQsXG4gIFNTT1NlcnZpY2VFeGNlcHRpb246ICgpID0+IFNTT1NlcnZpY2VFeGNlcHRpb24sXG4gIFRvb01hbnlSZXF1ZXN0c0V4Y2VwdGlvbjogKCkgPT4gVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uLFxuICBVbmF1dGhvcml6ZWRFeGNlcHRpb246ICgpID0+IFVuYXV0aG9yaXplZEV4Y2VwdGlvbixcbiAgX19DbGllbnQ6ICgpID0+IGltcG9ydF9zbWl0aHlfY2xpZW50LkNsaWVudCxcbiAgcGFnaW5hdGVMaXN0QWNjb3VudFJvbGVzOiAoKSA9PiBwYWdpbmF0ZUxpc3RBY2NvdW50Um9sZXMsXG4gIHBhZ2luYXRlTGlzdEFjY291bnRzOiAoKSA9PiBwYWdpbmF0ZUxpc3RBY2NvdW50c1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTtcblxuLy8gc3JjL1NTT0NsaWVudC50c1xudmFyIGltcG9ydF9taWRkbGV3YXJlX2hvc3RfaGVhZGVyID0gcmVxdWlyZShcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIik7XG52YXIgaW1wb3J0X21pZGRsZXdhcmVfbG9nZ2VyID0gcmVxdWlyZShcIkBhd3Mtc2RrL21pZGRsZXdhcmUtbG9nZ2VyXCIpO1xudmFyIGltcG9ydF9taWRkbGV3YXJlX3JlY3Vyc2lvbl9kZXRlY3Rpb24gPSByZXF1aXJlKFwiQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uXCIpO1xudmFyIGltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQgPSByZXF1aXJlKFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCIpO1xudmFyIGltcG9ydF9jb25maWdfcmVzb2x2ZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIik7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQHNtaXRoeS9jb3JlXCIpO1xudmFyIGltcG9ydF9taWRkbGV3YXJlX2NvbnRlbnRfbGVuZ3RoID0gcmVxdWlyZShcIkBzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aFwiKTtcbnZhciBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludCA9IHJlcXVpcmUoXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIik7XG52YXIgaW1wb3J0X21pZGRsZXdhcmVfcmV0cnkgPSByZXF1aXJlKFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCIpO1xuXG52YXIgaW1wb3J0X2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSByZXF1aXJlKFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIik7XG5cbi8vIHNyYy9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnMudHNcbnZhciByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4ge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgdXNlRHVhbHN0YWNrRW5kcG9pbnQ6IG9wdGlvbnMudXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gZmFsc2UsXG4gICAgdXNlRmlwc0VuZHBvaW50OiBvcHRpb25zLnVzZUZpcHNFbmRwb2ludCA/PyBmYWxzZSxcbiAgICBkZWZhdWx0U2lnbmluZ05hbWU6IFwiYXdzc3NvcG9ydGFsXCJcbiAgfSk7XG59LCBcInJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnNcIik7XG52YXIgY29tbW9uUGFyYW1zID0ge1xuICBVc2VGSVBTOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUZpcHNFbmRwb2ludFwiIH0sXG4gIEVuZHBvaW50OiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcImVuZHBvaW50XCIgfSxcbiAgUmVnaW9uOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInJlZ2lvblwiIH0sXG4gIFVzZUR1YWxTdGFjazogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VEdWFsc3RhY2tFbmRwb2ludFwiIH1cbn07XG5cbi8vIHNyYy9TU09DbGllbnQudHNcbnZhciBpbXBvcnRfcnVudGltZUNvbmZpZyA9IHJlcXVpcmUoXCIuLy4vcnVudGltZUNvbmZpZ1wiKTtcblxuLy8gc3JjL3J1bnRpbWVFeHRlbnNpb25zLnRzXG52YXIgaW1wb3J0X3JlZ2lvbl9jb25maWdfcmVzb2x2ZXIgPSByZXF1aXJlKFwiQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlclwiKTtcbnZhciBpbXBvcnRfcHJvdG9jb2xfaHR0cCA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIik7XG52YXIgaW1wb3J0X3NtaXRoeV9jbGllbnQgPSByZXF1aXJlKFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCIpO1xuXG4vLyBzcmMvYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24udHNcbnZhciBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChydW50aW1lQ29uZmlnKSA9PiB7XG4gIGNvbnN0IF9odHRwQXV0aFNjaGVtZXMgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lcztcbiAgbGV0IF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICBsZXQgX2NyZWRlbnRpYWxzID0gcnVudGltZUNvbmZpZy5jcmVkZW50aWFscztcbiAgcmV0dXJuIHtcbiAgICBzZXRIdHRwQXV0aFNjaGVtZShodHRwQXV0aFNjaGVtZSkge1xuICAgICAgY29uc3QgaW5kZXggPSBfaHR0cEF1dGhTY2hlbWVzLmZpbmRJbmRleCgoc2NoZW1lKSA9PiBzY2hlbWUuc2NoZW1lSWQgPT09IGh0dHBBdXRoU2NoZW1lLnNjaGVtZUlkKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5wdXNoKGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9odHRwQXV0aFNjaGVtZXMuc3BsaWNlKGluZGV4LCAxLCBodHRwQXV0aFNjaGVtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBodHRwQXV0aFNjaGVtZXMoKSB7XG4gICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lcztcbiAgICB9LFxuICAgIHNldEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoaHR0cEF1dGhTY2hlbWVQcm92aWRlcikge1xuICAgICAgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBodHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgIH0sXG4gICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpIHtcbiAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICB9LFxuICAgIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICBfY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICB9LFxuICAgIGNyZWRlbnRpYWxzKCkge1xuICAgICAgcmV0dXJuIF9jcmVkZW50aWFscztcbiAgICB9XG4gIH07XG59LCBcImdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiKTtcbnZhciByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29uZmlnKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWcuaHR0cEF1dGhTY2hlbWVzKCksXG4gICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSxcbiAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzKClcbiAgfTtcbn0sIFwicmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZ1wiKTtcblxuLy8gc3JjL3J1bnRpbWVFeHRlbnNpb25zLnRzXG52YXIgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocnVudGltZUNvbmZpZywgZXh0ZW5zaW9ucykgPT4ge1xuICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihcbiAgICAoMCwgaW1wb3J0X3JlZ2lvbl9jb25maWdfcmVzb2x2ZXIuZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikocnVudGltZUNvbmZpZyksXG4gICAgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uKShydW50aW1lQ29uZmlnKSxcbiAgICAoMCwgaW1wb3J0X3Byb3RvY29sX2h0dHAuZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uKShydW50aW1lQ29uZmlnKSxcbiAgICBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZylcbiAgKTtcbiAgZXh0ZW5zaW9ucy5mb3JFYWNoKChleHRlbnNpb24pID0+IGV4dGVuc2lvbi5jb25maWd1cmUoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbikpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICBydW50aW1lQ29uZmlnLFxuICAgICgwLCBpbXBvcnRfcmVnaW9uX2NvbmZpZ19yZXNvbHZlci5yZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZykoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgKDAsIGltcG9ydF9wcm90b2NvbF9odHRwLnJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcpKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbilcbiAgKTtcbn0sIFwicmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zXCIpO1xuXG4vLyBzcmMvU1NPQ2xpZW50LnRzXG52YXIgU1NPQ2xpZW50ID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5DbGllbnQge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlNTT0NsaWVudFwiKTtcbiAgfVxuICAvKipcbiAgICogVGhlIHJlc29sdmVkIGNvbmZpZ3VyYXRpb24gb2YgU1NPQ2xpZW50IGNsYXNzLiBUaGlzIGlzIHJlc29sdmVkIGFuZCBub3JtYWxpemVkIGZyb20gdGhlIHtAbGluayBTU09DbGllbnRDb25maWcgfCBjb25zdHJ1Y3RvciBjb25maWd1cmF0aW9uIGludGVyZmFjZX0uXG4gICAqL1xuICBjb25maWc7XG4gIGNvbnN0cnVjdG9yKC4uLltjb25maWd1cmF0aW9uXSkge1xuICAgIGNvbnN0IF9jb25maWdfMCA9ICgwLCBpbXBvcnRfcnVudGltZUNvbmZpZy5nZXRSdW50aW1lQ29uZmlnKShjb25maWd1cmF0aW9uIHx8IHt9KTtcbiAgICBzdXBlcihfY29uZmlnXzApO1xuICAgIHRoaXMuaW5pdENvbmZpZyA9IF9jb25maWdfMDtcbiAgICBjb25zdCBfY29uZmlnXzEgPSByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzKF9jb25maWdfMCk7XG4gICAgY29uc3QgX2NvbmZpZ18yID0gKDAsIGltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQucmVzb2x2ZVVzZXJBZ2VudENvbmZpZykoX2NvbmZpZ18xKTtcbiAgICBjb25zdCBfY29uZmlnXzMgPSAoMCwgaW1wb3J0X21pZGRsZXdhcmVfcmV0cnkucmVzb2x2ZVJldHJ5Q29uZmlnKShfY29uZmlnXzIpO1xuICAgIGNvbnN0IF9jb25maWdfNCA9ICgwLCBpbXBvcnRfY29uZmlnX3Jlc29sdmVyLnJlc29sdmVSZWdpb25Db25maWcpKF9jb25maWdfMyk7XG4gICAgY29uc3QgX2NvbmZpZ181ID0gKDAsIGltcG9ydF9taWRkbGV3YXJlX2hvc3RfaGVhZGVyLnJlc29sdmVIb3N0SGVhZGVyQ29uZmlnKShfY29uZmlnXzQpO1xuICAgIGNvbnN0IF9jb25maWdfNiA9ICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5yZXNvbHZlRW5kcG9pbnRDb25maWcpKF9jb25maWdfNSk7XG4gICAgY29uc3QgX2NvbmZpZ183ID0gKDAsIGltcG9ydF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyLnJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZykoX2NvbmZpZ182KTtcbiAgICBjb25zdCBfY29uZmlnXzggPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ183LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICB0aGlzLmNvbmZpZyA9IF9jb25maWdfODtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoKDAsIGltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQuZ2V0VXNlckFnZW50UGx1Z2luKSh0aGlzLmNvbmZpZykpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZSgoMCwgaW1wb3J0X21pZGRsZXdhcmVfcmV0cnkuZ2V0UmV0cnlQbHVnaW4pKHRoaXMuY29uZmlnKSk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKCgwLCBpbXBvcnRfbWlkZGxld2FyZV9jb250ZW50X2xlbmd0aC5nZXRDb250ZW50TGVuZ3RoUGx1Z2luKSh0aGlzLmNvbmZpZykpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZSgoMCwgaW1wb3J0X21pZGRsZXdhcmVfaG9zdF9oZWFkZXIuZ2V0SG9zdEhlYWRlclBsdWdpbikodGhpcy5jb25maWcpKTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoKDAsIGltcG9ydF9taWRkbGV3YXJlX2xvZ2dlci5nZXRMb2dnZXJQbHVnaW4pKHRoaXMuY29uZmlnKSk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKCgwLCBpbXBvcnRfbWlkZGxld2FyZV9yZWN1cnNpb25fZGV0ZWN0aW9uLmdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbikodGhpcy5jb25maWcpKTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoXG4gICAgICAoMCwgaW1wb3J0X2NvcmUuZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4pKHRoaXMuY29uZmlnLCB7XG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiBpbXBvcnRfaHR0cEF1dGhTY2hlbWVQcm92aWRlci5kZWZhdWx0U1NPSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsXG4gICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcjogLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoY29uZmlnKSA9PiBuZXcgaW1wb3J0X2NvcmUuRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcoe1xuICAgICAgICAgIFwiYXdzLmF1dGgjc2lndjRcIjogY29uZmlnLmNyZWRlbnRpYWxzXG4gICAgICAgIH0pLCBcImlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlclwiKVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZSgoMCwgaW1wb3J0X2NvcmUuZ2V0SHR0cFNpZ25pbmdQbHVnaW4pKHRoaXMuY29uZmlnKSk7XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3kgdW5kZXJseWluZyByZXNvdXJjZXMsIGxpa2Ugc29ja2V0cy4gSXQncyB1c3VhbGx5IG5vdCBuZWNlc3NhcnkgdG8gZG8gdGhpcy5cbiAgICogSG93ZXZlciBpbiBOb2RlLmpzLCBpdCdzIGJlc3QgdG8gZXhwbGljaXRseSBzaHV0IGRvd24gdGhlIGNsaWVudCdzIGFnZW50IHdoZW4gaXQgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cbiAgICogT3RoZXJ3aXNlLCBzb2NrZXRzIG1pZ2h0IHN0YXkgb3BlbiBmb3IgcXVpdGUgYSBsb25nIHRpbWUgYmVmb3JlIHRoZSBzZXJ2ZXIgdGVybWluYXRlcyB0aGVtLlxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gIH1cbn07XG5cbi8vIHNyYy9TU08udHNcblxuXG4vLyBzcmMvY29tbWFuZHMvR2V0Um9sZUNyZWRlbnRpYWxzQ29tbWFuZC50c1xuXG52YXIgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUgPSByZXF1aXJlKFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCIpO1xuXG5cbi8vIHNyYy9tb2RlbHMvbW9kZWxzXzAudHNcblxuXG4vLyBzcmMvbW9kZWxzL1NTT1NlcnZpY2VFeGNlcHRpb24udHNcblxudmFyIFNTT1NlcnZpY2VFeGNlcHRpb24gPSBjbGFzcyBfU1NPU2VydmljZUV4Y2VwdGlvbiBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlNTT1NlcnZpY2VFeGNlcHRpb25cIik7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfU1NPU2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xuXG4vLyBzcmMvbW9kZWxzL21vZGVsc18wLnRzXG52YXIgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24gPSBjbGFzcyBfSW52YWxpZFJlcXVlc3RFeGNlcHRpb24gZXh0ZW5kcyBTU09TZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfSW52YWxpZFJlcXVlc3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uID0gY2xhc3MgX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBTU09TZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIFRvb01hbnlSZXF1ZXN0c0V4Y2VwdGlvbiA9IGNsYXNzIF9Ub29NYW55UmVxdWVzdHNFeGNlcHRpb24gZXh0ZW5kcyBTU09TZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJUb29NYW55UmVxdWVzdHNFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIlRvb01hbnlSZXF1ZXN0c0V4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgVW5hdXRob3JpemVkRXhjZXB0aW9uID0gY2xhc3MgX1VuYXV0aG9yaXplZEV4Y2VwdGlvbiBleHRlbmRzIFNTT1NlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlVuYXV0aG9yaXplZEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJVbmF1dGhvcml6ZWRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiVW5hdXRob3JpemVkRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9VbmF1dGhvcml6ZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBHZXRSb2xlQ3JlZGVudGlhbHNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqKSA9PiAoe1xuICAuLi5vYmosXG4gIC4uLm9iai5hY2Nlc3NUb2tlbiAmJiB7IGFjY2Vzc1Rva2VuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5TRU5TSVRJVkVfU1RSSU5HIH1cbn0pLCBcIkdldFJvbGVDcmVkZW50aWFsc1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2dcIik7XG52YXIgUm9sZUNyZWRlbnRpYWxzRmlsdGVyU2Vuc2l0aXZlTG9nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqKSA9PiAoe1xuICAuLi5vYmosXG4gIC4uLm9iai5zZWNyZXRBY2Nlc3NLZXkgJiYgeyBzZWNyZXRBY2Nlc3NLZXk6IGltcG9ydF9zbWl0aHlfY2xpZW50LlNFTlNJVElWRV9TVFJJTkcgfSxcbiAgLi4ub2JqLnNlc3Npb25Ub2tlbiAmJiB7IHNlc3Npb25Ub2tlbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuU0VOU0lUSVZFX1NUUklORyB9XG59KSwgXCJSb2xlQ3JlZGVudGlhbHNGaWx0ZXJTZW5zaXRpdmVMb2dcIik7XG52YXIgR2V0Um9sZUNyZWRlbnRpYWxzUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmopID0+ICh7XG4gIC4uLm9iaixcbiAgLi4ub2JqLnJvbGVDcmVkZW50aWFscyAmJiB7IHJvbGVDcmVkZW50aWFsczogUm9sZUNyZWRlbnRpYWxzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5yb2xlQ3JlZGVudGlhbHMpIH1cbn0pLCBcIkdldFJvbGVDcmVkZW50aWFsc1Jlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nXCIpO1xudmFyIExpc3RBY2NvdW50Um9sZXNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqKSA9PiAoe1xuICAuLi5vYmosXG4gIC4uLm9iai5hY2Nlc3NUb2tlbiAmJiB7IGFjY2Vzc1Rva2VuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5TRU5TSVRJVkVfU1RSSU5HIH1cbn0pLCBcIkxpc3RBY2NvdW50Um9sZXNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nXCIpO1xudmFyIExpc3RBY2NvdW50c1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmopID0+ICh7XG4gIC4uLm9iaixcbiAgLi4ub2JqLmFjY2Vzc1Rva2VuICYmIHsgYWNjZXNzVG9rZW46IGltcG9ydF9zbWl0aHlfY2xpZW50LlNFTlNJVElWRV9TVFJJTkcgfVxufSksIFwiTGlzdEFjY291bnRzUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZ1wiKTtcbnZhciBMb2dvdXRSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqKSA9PiAoe1xuICAuLi5vYmosXG4gIC4uLm9iai5hY2Nlc3NUb2tlbiAmJiB7IGFjY2Vzc1Rva2VuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5TRU5TSVRJVkVfU1RSSU5HIH1cbn0pLCBcIkxvZ291dFJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2dcIik7XG5cbi8vIHNyYy9wcm90b2NvbHMvQXdzX3Jlc3RKc29uMS50c1xudmFyIGltcG9ydF9jb3JlMiA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlXCIpO1xuXG5cbnZhciBzZV9HZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYiA9ICgwLCBpbXBvcnRfY29yZS5yZXF1ZXN0QnVpbGRlcikoaW5wdXQsIGNvbnRleHQpO1xuICBjb25zdCBoZWFkZXJzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Lm1hcCkoe30sIGltcG9ydF9zbWl0aHlfY2xpZW50LmlzU2VyaWFsaXphYmxlSGVhZGVyVmFsdWUsIHtcbiAgICBbX3hhc2J0XTogaW5wdXRbX2FUXVxuICB9KTtcbiAgYi5icChcIi9mZWRlcmF0aW9uL2NyZWRlbnRpYWxzXCIpO1xuICBjb25zdCBxdWVyeSA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHtcbiAgICBbX3JuXTogWywgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKGlucHV0W19yTl0sIGByb2xlTmFtZWApXSxcbiAgICBbX2FpXTogWywgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKGlucHV0W19hSV0sIGBhY2NvdW50SWRgKV1cbiAgfSk7XG4gIGxldCBib2R5O1xuICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICByZXR1cm4gYi5idWlsZCgpO1xufSwgXCJzZV9HZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kXCIpO1xudmFyIHNlX0xpc3RBY2NvdW50Um9sZXNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYiA9ICgwLCBpbXBvcnRfY29yZS5yZXF1ZXN0QnVpbGRlcikoaW5wdXQsIGNvbnRleHQpO1xuICBjb25zdCBoZWFkZXJzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Lm1hcCkoe30sIGltcG9ydF9zbWl0aHlfY2xpZW50LmlzU2VyaWFsaXphYmxlSGVhZGVyVmFsdWUsIHtcbiAgICBbX3hhc2J0XTogaW5wdXRbX2FUXVxuICB9KTtcbiAgYi5icChcIi9hc3NpZ25tZW50L3JvbGVzXCIpO1xuICBjb25zdCBxdWVyeSA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHtcbiAgICBbX250XTogWywgaW5wdXRbX25UXV0sXG4gICAgW19tcl06IFsoKSA9PiBpbnB1dC5tYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19tUl0udG9TdHJpbmcoKV0sXG4gICAgW19haV06IFssICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKShpbnB1dFtfYUldLCBgYWNjb3VudElkYCldXG4gIH0pO1xuICBsZXQgYm9keTtcbiAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgcmV0dXJuIGIuYnVpbGQoKTtcbn0sIFwic2VfTGlzdEFjY291bnRSb2xlc0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdEFjY291bnRzQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGIgPSAoMCwgaW1wb3J0X2NvcmUucmVxdWVzdEJ1aWxkZXIpKGlucHV0LCBjb250ZXh0KTtcbiAgY29uc3QgaGVhZGVycyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHt9LCBpbXBvcnRfc21pdGh5X2NsaWVudC5pc1NlcmlhbGl6YWJsZUhlYWRlclZhbHVlLCB7XG4gICAgW194YXNidF06IGlucHV0W19hVF1cbiAgfSk7XG4gIGIuYnAoXCIvYXNzaWdubWVudC9hY2NvdW50c1wiKTtcbiAgY29uc3QgcXVlcnkgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQubWFwKSh7XG4gICAgW19udF06IFssIGlucHV0W19uVF1dLFxuICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQubWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfbVJdLnRvU3RyaW5nKCldXG4gIH0pO1xuICBsZXQgYm9keTtcbiAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgcmV0dXJuIGIuYnVpbGQoKTtcbn0sIFwic2VfTGlzdEFjY291bnRzQ29tbWFuZFwiKTtcbnZhciBzZV9Mb2dvdXRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYiA9ICgwLCBpbXBvcnRfY29yZS5yZXF1ZXN0QnVpbGRlcikoaW5wdXQsIGNvbnRleHQpO1xuICBjb25zdCBoZWFkZXJzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Lm1hcCkoe30sIGltcG9ydF9zbWl0aHlfY2xpZW50LmlzU2VyaWFsaXphYmxlSGVhZGVyVmFsdWUsIHtcbiAgICBbX3hhc2J0XTogaW5wdXRbX2FUXVxuICB9KTtcbiAgYi5icChcIi9sb2dvdXRcIik7XG4gIGxldCBib2R5O1xuICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgcmV0dXJuIGIuYnVpbGQoKTtcbn0sIFwic2VfTG9nb3V0Q29tbWFuZFwiKTtcbnZhciBkZV9HZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KVxuICB9KTtcbiAgY29uc3QgZGF0YSA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0T2JqZWN0KShhd2FpdCAoMCwgaW1wb3J0X2NvcmUyLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgY29uc3QgZG9jID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGRhdGEsIHtcbiAgICByb2xlQ3JlZGVudGlhbHM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uXG4gIH0pO1xuICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICByZXR1cm4gY29udGVudHM7XG59LCBcImRlX0dldFJvbGVDcmVkZW50aWFsc0NvbW1hbmRcIik7XG52YXIgZGVfTGlzdEFjY291bnRSb2xlc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Lm1hcCkoe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpXG4gIH0pO1xuICBjb25zdCBkYXRhID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RPYmplY3QpKGF3YWl0ICgwLCBpbXBvcnRfY29yZTIucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICBjb25zdCBkb2MgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoZGF0YSwge1xuICAgIG5leHRUb2tlbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIHJvbGVMaXN0OiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvblxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgcmV0dXJuIGNvbnRlbnRzO1xufSwgXCJkZV9MaXN0QWNjb3VudFJvbGVzQ29tbWFuZFwiKTtcbnZhciBkZV9MaXN0QWNjb3VudHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KVxuICB9KTtcbiAgY29uc3QgZGF0YSA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0T2JqZWN0KShhd2FpdCAoMCwgaW1wb3J0X2NvcmUyLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgY29uc3QgZG9jID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGRhdGEsIHtcbiAgICBhY2NvdW50TGlzdDogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgbmV4dFRva2VuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gIHJldHVybiBjb250ZW50cztcbn0sIFwiZGVfTGlzdEFjY291bnRzQ29tbWFuZFwiKTtcbnZhciBkZV9Mb2dvdXRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KVxuICB9KTtcbiAgYXdhaXQgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmNvbGxlY3RCb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIHJldHVybiBjb250ZW50cztcbn0sIFwiZGVfTG9nb3V0Q29tbWFuZFwiKTtcbnZhciBkZV9Db21tYW5kRXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcGFyc2VkT3V0cHV0ID0ge1xuICAgIC4uLm91dHB1dCxcbiAgICBib2R5OiBhd2FpdCAoMCwgaW1wb3J0X2NvcmUyLnBhcnNlSnNvbkVycm9yQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpXG4gIH07XG4gIGNvbnN0IGVycm9yQ29kZSA9ICgwLCBpbXBvcnRfY29yZTIubG9hZFJlc3RKc29uRXJyb3JDb2RlKShvdXRwdXQsIHBhcnNlZE91dHB1dC5ib2R5KTtcbiAgc3dpdGNoIChlcnJvckNvZGUpIHtcbiAgICBjYXNlIFwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zc28jSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRSZXF1ZXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zc28jUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgIGNhc2UgXCJUb29NYW55UmVxdWVzdHNFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zc28jVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9Ub29NYW55UmVxdWVzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICBjYXNlIFwiVW5hdXRob3JpemVkRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3NvI1VuYXV0aG9yaXplZEV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfVW5hdXRob3JpemVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgIG91dHB1dCxcbiAgICAgICAgcGFyc2VkQm9keSxcbiAgICAgICAgZXJyb3JDb2RlXG4gICAgICB9KTtcbiAgfVxufSwgXCJkZV9Db21tYW5kRXJyb3JcIik7XG52YXIgdGhyb3dEZWZhdWx0RXJyb3IgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQud2l0aEJhc2VFeGNlcHRpb24pKFNTT1NlcnZpY2VFeGNlcHRpb24pO1xudmFyIGRlX0ludmFsaWRSZXF1ZXN0RXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Lm1hcCkoe30pO1xuICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRvYyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShkYXRhLCB7XG4gICAgbWVzc2FnZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xuICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59LCBcImRlX0ludmFsaWRSZXF1ZXN0RXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgY29udGVudHMgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQubWFwKSh7fSk7XG4gIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZG9jID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGRhdGEsIHtcbiAgICBtZXNzYWdlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufSwgXCJkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1Rvb01hbnlSZXF1ZXN0c0V4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHt9KTtcbiAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkb2MgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoZGF0YSwge1xuICAgIG1lc3NhZ2U6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRvb01hbnlSZXF1ZXN0c0V4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn0sIFwiZGVfVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1VuYXV0aG9yaXplZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5tYXApKHt9KTtcbiAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkb2MgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoZGF0YSwge1xuICAgIG1lc3NhZ2U6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn0sIFwiZGVfVW5hdXRob3JpemVkRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlc2VyaWFsaXplTWV0YWRhdGEgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQpID0+ICh7XG4gIGh0dHBTdGF0dXNDb2RlOiBvdXRwdXQuc3RhdHVzQ29kZSxcbiAgcmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0aWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdC1pZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16LXJlcXVlc3QtaWRcIl0sXG4gIGV4dGVuZGVkUmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWlkLTJcIl0sXG4gIGNmSWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotY2YtaWRcIl1cbn0pLCBcImRlc2VyaWFsaXplTWV0YWRhdGFcIik7XG52YXIgX2FJID0gXCJhY2NvdW50SWRcIjtcbnZhciBfYVQgPSBcImFjY2Vzc1Rva2VuXCI7XG52YXIgX2FpID0gXCJhY2NvdW50X2lkXCI7XG52YXIgX21SID0gXCJtYXhSZXN1bHRzXCI7XG52YXIgX21yID0gXCJtYXhfcmVzdWx0XCI7XG52YXIgX25UID0gXCJuZXh0VG9rZW5cIjtcbnZhciBfbnQgPSBcIm5leHRfdG9rZW5cIjtcbnZhciBfck4gPSBcInJvbGVOYW1lXCI7XG52YXIgX3JuID0gXCJyb2xlX25hbWVcIjtcbnZhciBfeGFzYnQgPSBcIngtYW16LXNzb19iZWFyZXJfdG9rZW5cIjtcblxuLy8gc3JjL2NvbW1hbmRzL0dldFJvbGVDcmVkZW50aWFsc0NvbW1hbmQudHNcbnZhciBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKGNvbW1vblBhcmFtcykubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIlNXQlBvcnRhbFNlcnZpY2VcIiwgXCJHZXRSb2xlQ3JlZGVudGlhbHNcIiwge30pLm4oXCJTU09DbGllbnRcIiwgXCJHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kXCIpLmYoR2V0Um9sZUNyZWRlbnRpYWxzUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZywgR2V0Um9sZUNyZWRlbnRpYWxzUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cpLnNlcihzZV9HZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kKS5kZShkZV9HZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvTGlzdEFjY291bnRSb2xlc0NvbW1hbmQudHNcblxuXG5cbnZhciBMaXN0QWNjb3VudFJvbGVzQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcChjb21tb25QYXJhbXMpLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJTV0JQb3J0YWxTZXJ2aWNlXCIsIFwiTGlzdEFjY291bnRSb2xlc1wiLCB7fSkubihcIlNTT0NsaWVudFwiLCBcIkxpc3RBY2NvdW50Um9sZXNDb21tYW5kXCIpLmYoTGlzdEFjY291bnRSb2xlc1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csIHZvaWQgMCkuc2VyKHNlX0xpc3RBY2NvdW50Um9sZXNDb21tYW5kKS5kZShkZV9MaXN0QWNjb3VudFJvbGVzQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiTGlzdEFjY291bnRSb2xlc0NvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9MaXN0QWNjb3VudHNDb21tYW5kLnRzXG5cblxuXG52YXIgTGlzdEFjY291bnRzQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcChjb21tb25QYXJhbXMpLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJTV0JQb3J0YWxTZXJ2aWNlXCIsIFwiTGlzdEFjY291bnRzXCIsIHt9KS5uKFwiU1NPQ2xpZW50XCIsIFwiTGlzdEFjY291bnRzQ29tbWFuZFwiKS5mKExpc3RBY2NvdW50c1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csIHZvaWQgMCkuc2VyKHNlX0xpc3RBY2NvdW50c0NvbW1hbmQpLmRlKGRlX0xpc3RBY2NvdW50c0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkxpc3RBY2NvdW50c0NvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9Mb2dvdXRDb21tYW5kLnRzXG5cblxuXG52YXIgTG9nb3V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcChjb21tb25QYXJhbXMpLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJTV0JQb3J0YWxTZXJ2aWNlXCIsIFwiTG9nb3V0XCIsIHt9KS5uKFwiU1NPQ2xpZW50XCIsIFwiTG9nb3V0Q29tbWFuZFwiKS5mKExvZ291dFJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csIHZvaWQgMCkuc2VyKHNlX0xvZ291dENvbW1hbmQpLmRlKGRlX0xvZ291dENvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkxvZ291dENvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9TU08udHNcbnZhciBjb21tYW5kcyA9IHtcbiAgR2V0Um9sZUNyZWRlbnRpYWxzQ29tbWFuZCxcbiAgTGlzdEFjY291bnRSb2xlc0NvbW1hbmQsXG4gIExpc3RBY2NvdW50c0NvbW1hbmQsXG4gIExvZ291dENvbW1hbmRcbn07XG52YXIgU1NPID0gY2xhc3MgZXh0ZW5kcyBTU09DbGllbnQge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlNTT1wiKTtcbiAgfVxufTtcbigwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5jcmVhdGVBZ2dyZWdhdGVkQ2xpZW50KShjb21tYW5kcywgU1NPKTtcblxuLy8gc3JjL3BhZ2luYXRpb24vTGlzdEFjY291bnRSb2xlc1BhZ2luYXRvci50c1xuXG52YXIgcGFnaW5hdGVMaXN0QWNjb3VudFJvbGVzID0gKDAsIGltcG9ydF9jb3JlLmNyZWF0ZVBhZ2luYXRvcikoU1NPQ2xpZW50LCBMaXN0QWNjb3VudFJvbGVzQ29tbWFuZCwgXCJuZXh0VG9rZW5cIiwgXCJuZXh0VG9rZW5cIiwgXCJtYXhSZXN1bHRzXCIpO1xuXG4vLyBzcmMvcGFnaW5hdGlvbi9MaXN0QWNjb3VudHNQYWdpbmF0b3IudHNcblxudmFyIHBhZ2luYXRlTGlzdEFjY291bnRzID0gKDAsIGltcG9ydF9jb3JlLmNyZWF0ZVBhZ2luYXRvcikoU1NPQ2xpZW50LCBMaXN0QWNjb3VudHNDb21tYW5kLCBcIm5leHRUb2tlblwiLCBcIm5leHRUb2tlblwiLCBcIm1heFJlc3VsdHNcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBTU09TZXJ2aWNlRXhjZXB0aW9uLFxuICBfX0NsaWVudCxcbiAgU1NPQ2xpZW50LFxuICBTU08sXG4gICRDb21tYW5kLFxuICBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kLFxuICBMaXN0QWNjb3VudFJvbGVzQ29tbWFuZCxcbiAgTGlzdEFjY291bnRzQ29tbWFuZCxcbiAgTG9nb3V0Q29tbWFuZCxcbiAgcGFnaW5hdGVMaXN0QWNjb3VudFJvbGVzLFxuICBwYWdpbmF0ZUxpc3RBY2NvdW50cyxcbiAgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24sXG4gIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24sXG4gIFRvb01hbnlSZXF1ZXN0c0V4Y2VwdGlvbixcbiAgVW5hdXRob3JpemVkRXhjZXB0aW9uLFxuICBHZXRSb2xlQ3JlZGVudGlhbHNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICBSb2xlQ3JlZGVudGlhbHNGaWx0ZXJTZW5zaXRpdmVMb2csXG4gIEdldFJvbGVDcmVkZW50aWFsc1Jlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nLFxuICBMaXN0QWNjb3VudFJvbGVzUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgTGlzdEFjY291bnRzUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZyxcbiAgTG9nb3V0UmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZ1xufSk7XG5cbiIsICJpbXBvcnQgeyByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQsIG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdFNTT09JRENIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciA9IGFzeW5jIChjb25maWcsIGNvbnRleHQsIGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3BlcmF0aW9uOiBnZXRTbWl0aHlDb250ZXh0KGNvbnRleHQpLm9wZXJhdGlvbixcbiAgICAgICAgcmVnaW9uOiAoYXdhaXQgbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnJlZ2lvbikoKSkgfHxcbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgYHJlZ2lvbmAgdG8gYmUgY29uZmlndXJlZCBmb3IgYGF3cy5hdXRoI3NpZ3Y0YFwiKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgfTtcbn07XG5mdW5jdGlvbiBjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiBcInNzby1vYXV0aFwiLFxuICAgICAgICAgICAgcmVnaW9uOiBhdXRoUGFyYW1ldGVycy5yZWdpb24sXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnRpZXNFeHRyYWN0b3I6IChjb25maWcsIGNvbnRleHQpID0+ICh7XG4gICAgICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNtaXRoeUFwaU5vQXV0aEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lSWQ6IFwic21pdGh5LmFwaSNub0F1dGhcIixcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTU09PSURDSHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IChhdXRoUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICBzd2l0Y2ggKGF1dGhQYXJhbWV0ZXJzLm9wZXJhdGlvbikge1xuICAgICAgICBjYXNlIFwiQ3JlYXRlVG9rZW5cIjoge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNyZWF0ZVNtaXRoeUFwaU5vQXV0aEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ18wID0gcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnKGNvbmZpZyk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29uZmlnXzAsIHtcbiAgICAgICAgYXV0aFNjaGVtZVByZWZlcmVuY2U6IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/PyBbXSksXG4gICAgfSk7XG59O1xuIiwgImV4cG9ydCBjb25zdCByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBvcHRpb25zLnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IG9wdGlvbnMudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICBkZWZhdWx0U2lnbmluZ05hbWU6IFwic3NvLW9hdXRoXCIsXG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IGNvbW1vblBhcmFtcyA9IHtcbiAgICBVc2VGSVBTOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUZpcHNFbmRwb2ludFwiIH0sXG4gICAgRW5kcG9pbnQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwiZW5kcG9pbnRcIiB9LFxuICAgIFJlZ2lvbjogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJyZWdpb25cIiB9LFxuICAgIFVzZUR1YWxTdGFjazogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VEdWFsc3RhY2tFbmRwb2ludFwiIH0sXG59O1xuIiwgIntcbiAgXCJuYW1lXCI6IFwiQGF3cy1zZGsvbmVzdGVkLWNsaWVudHNcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMy43OTkuMFwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiTmVzdGVkIGNsaWVudHMgZm9yIEFXUyBTREsgcGFja2FnZXMuXCIsXG4gIFwibWFpblwiOiBcIi4vZGlzdC1janMvaW5kZXguanNcIixcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QtZXMvaW5kZXguanNcIixcbiAgXCJ0eXBlc1wiOiBcIi4vZGlzdC10eXBlcy9pbmRleC5kLnRzXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiBcInlhcm4gbGludCAmJiBjb25jdXJyZW50bHkgJ3lhcm46YnVpbGQ6Y2pzJyAneWFybjpidWlsZDplcycgJ3lhcm46YnVpbGQ6dHlwZXMnXCIsXG4gICAgXCJidWlsZDpjanNcIjogXCJub2RlIC4uLy4uL3NjcmlwdHMvY29tcGlsYXRpb24vaW5saW5lIG5lc3RlZC1jbGllbnRzXCIsXG4gICAgXCJidWlsZDplc1wiOiBcInRzYyAtcCB0c2NvbmZpZy5lcy5qc29uXCIsXG4gICAgXCJidWlsZDppbmNsdWRlOmRlcHNcIjogXCJsZXJuYSBydW4gLS1zY29wZSAkbnBtX3BhY2thZ2VfbmFtZSAtLWluY2x1ZGUtZGVwZW5kZW5jaWVzIGJ1aWxkXCIsXG4gICAgXCJidWlsZDp0eXBlc1wiOiBcInRzYyAtcCB0c2NvbmZpZy50eXBlcy5qc29uXCIsXG4gICAgXCJidWlsZDp0eXBlczpkb3dubGV2ZWxcIjogXCJkb3dubGV2ZWwtZHRzIGRpc3QtdHlwZXMgZGlzdC10eXBlcy90czMuNFwiLFxuICAgIFwiY2xlYW5cIjogXCJyaW1yYWYgLi9kaXN0LSogJiYgcmltcmFmICoudHNidWlsZGluZm9cIixcbiAgICBcImxpbnRcIjogXCJub2RlIC4uLy4uL3NjcmlwdHMvdmFsaWRhdGlvbi9zdWJtb2R1bGVzLWxpbnRlci5qcyAtLXBrZyBuZXN0ZWQtY2xpZW50c1wiLFxuICAgIFwidGVzdFwiOiBcInlhcm4gZzp2aXRlc3QgcnVuXCIsXG4gICAgXCJ0ZXN0OndhdGNoXCI6IFwieWFybiBnOnZpdGVzdCB3YXRjaFwiXG4gIH0sXG4gIFwiZW5naW5lc1wiOiB7XG4gICAgXCJub2RlXCI6IFwiPj0xOC4wLjBcIlxuICB9LFxuICBcImF1dGhvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiQVdTIFNESyBmb3IgSmF2YVNjcmlwdCBUZWFtXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2F3cy5hbWF6b24uY29tL2phdmFzY3JpcHQvXCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiQXBhY2hlLTIuMFwiLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAYXdzLWNyeXB0by9zaGEyNTYtYnJvd3NlclwiOiBcIjUuMi4wXCIsXG4gICAgXCJAYXdzLWNyeXB0by9zaGEyNTYtanNcIjogXCI1LjIuMFwiLFxuICAgIFwiQGF3cy1zZGsvY29yZVwiOiBcIjMuNzk5LjBcIixcbiAgICBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIjogXCIzLjc3NS4wXCIsXG4gICAgXCJAYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlclwiOiBcIjMuNzc1LjBcIixcbiAgICBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvblwiOiBcIjMuNzc1LjBcIixcbiAgICBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudFwiOiBcIjMuNzk5LjBcIixcbiAgICBcIkBhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXJcIjogXCIzLjc3NS4wXCIsXG4gICAgXCJAYXdzLXNkay90eXBlc1wiOiBcIjMuNzc1LjBcIixcbiAgICBcIkBhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzXCI6IFwiMy43ODcuMFwiLFxuICAgIFwiQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LWJyb3dzZXJcIjogXCIzLjc3NS4wXCIsXG4gICAgXCJAYXdzLXNkay91dGlsLXVzZXItYWdlbnQtbm9kZVwiOiBcIjMuNzk5LjBcIixcbiAgICBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI6IFwiXjQuMS4wXCIsXG4gICAgXCJAc21pdGh5L2NvcmVcIjogXCJeMy4zLjBcIixcbiAgICBcIkBzbWl0aHkvZmV0Y2gtaHR0cC1oYW5kbGVyXCI6IFwiXjUuMC4yXCIsXG4gICAgXCJAc21pdGh5L2hhc2gtbm9kZVwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS9pbnZhbGlkLWRlcGVuZGVuY3lcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aFwiOiBcIl40LjAuMlwiLFxuICAgIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI6IFwiXjQuMS4xXCIsXG4gICAgXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIjogXCJeNC4xLjFcIixcbiAgICBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiOiBcIl40LjAuM1wiLFxuICAgIFwiQHNtaXRoeS9taWRkbGV3YXJlLXN0YWNrXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCI6IFwiXjQuMC40XCIsXG4gICAgXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjogXCJeNS4xLjBcIixcbiAgICBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiOiBcIl40LjIuMVwiLFxuICAgIFwiQHNtaXRoeS90eXBlc1wiOiBcIl40LjIuMFwiLFxuICAgIFwiQHNtaXRoeS91cmwtcGFyc2VyXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtYmFzZTY0XCI6IFwiXjQuMC4wXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtYm9keS1sZW5ndGgtYnJvd3NlclwiOiBcIl40LjAuMFwiLFxuICAgIFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGVcIjogXCJeNC4wLjBcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLWJyb3dzZXJcIjogXCJeNC4wLjlcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLW5vZGVcIjogXCJeNC4wLjlcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1lbmRwb2ludHNcIjogXCJeMy4wLjJcIixcbiAgICBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI6IFwiXjQuMC4yXCIsXG4gICAgXCJAc21pdGh5L3V0aWwtcmV0cnlcIjogXCJeNC4wLjJcIixcbiAgICBcIkBzbWl0aHkvdXRpbC11dGY4XCI6IFwiXjQuMC4wXCIsXG4gICAgXCJ0c2xpYlwiOiBcIl4yLjYuMlwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImNvbmN1cnJlbnRseVwiOiBcIjcuMC4wXCIsXG4gICAgXCJkb3dubGV2ZWwtZHRzXCI6IFwiMC4xMC4xXCIsXG4gICAgXCJyaW1yYWZcIjogXCIzLjAuMlwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIn41LjIuMlwiXG4gIH0sXG4gIFwidHlwZXNWZXJzaW9uc1wiOiB7XG4gICAgXCI8NC4wXCI6IHtcbiAgICAgIFwiZGlzdC10eXBlcy8qXCI6IFtcbiAgICAgICAgXCJkaXN0LXR5cGVzL3RzMy40LypcIlxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCIuL3Nzby1vaWRjLmQudHNcIixcbiAgICBcIi4vc3NvLW9pZGMuanNcIixcbiAgICBcIi4vc3RzLmQudHNcIixcbiAgICBcIi4vc3RzLmpzXCIsXG4gICAgXCJkaXN0LSovKipcIlxuICBdLFxuICBcImJyb3dzZXJcIjoge1xuICAgIFwiLi9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvcnVudGltZUNvbmZpZ1wiOiBcIi4vZGlzdC1lcy9zdWJtb2R1bGVzL3Nzby1vaWRjL3J1bnRpbWVDb25maWcuYnJvd3NlclwiLFxuICAgIFwiLi9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL3J1bnRpbWVDb25maWdcIjogXCIuL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvcnVudGltZUNvbmZpZy5icm93c2VyXCJcbiAgfSxcbiAgXCJyZWFjdC1uYXRpdmVcIjoge30sXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1zZGstanMtdjMvdHJlZS9tYWluL3BhY2thZ2VzL25lc3RlZC1jbGllbnRzXCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1zZGstanMtdjMuZ2l0XCIsXG4gICAgXCJkaXJlY3RvcnlcIjogXCJwYWNrYWdlcy9uZXN0ZWQtY2xpZW50c1wiXG4gIH0sXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuL3Nzby1vaWRjXCI6IHtcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QtdHlwZXMvc3VibW9kdWxlcy9zc28tb2lkYy9pbmRleC5kLnRzXCIsXG4gICAgICBcIm1vZHVsZVwiOiBcIi4vZGlzdC1lcy9zdWJtb2R1bGVzL3Nzby1vaWRjL2luZGV4LmpzXCIsXG4gICAgICBcIm5vZGVcIjogXCIuL2Rpc3QtY2pzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvaW5kZXguanNcIixcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0LWVzL3N1Ym1vZHVsZXMvc3NvLW9pZGMvaW5kZXguanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC1janMvc3VibW9kdWxlcy9zc28tb2lkYy9pbmRleC5qc1wiXG4gICAgfSxcbiAgICBcIi4vc3RzXCI6IHtcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QtdHlwZXMvc3VibW9kdWxlcy9zdHMvaW5kZXguZC50c1wiLFxuICAgICAgXCJtb2R1bGVcIjogXCIuL2Rpc3QtZXMvc3VibW9kdWxlcy9zdHMvaW5kZXguanNcIixcbiAgICAgIFwibm9kZVwiOiBcIi4vZGlzdC1janMvc3VibW9kdWxlcy9zdHMvaW5kZXguanNcIixcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0LWVzL3N1Ym1vZHVsZXMvc3RzL2luZGV4LmpzXCIsXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QtY2pzL3N1Ym1vZHVsZXMvc3RzL2luZGV4LmpzXCJcbiAgICB9XG4gIH1cbn1cbiIsICJjb25zdCB1ID0gXCJyZXF1aXJlZFwiLCB2ID0gXCJmblwiLCB3ID0gXCJhcmd2XCIsIHggPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IFwiZ2V0QXR0clwiLCBpID0geyBbdV06IGZhbHNlLCBcInR5cGVcIjogXCJTdHJpbmdcIiB9LCBqID0geyBbdV06IHRydWUsIFwiZGVmYXVsdFwiOiBmYWxzZSwgXCJ0eXBlXCI6IFwiQm9vbGVhblwiIH0sIGsgPSB7IFt4XTogXCJFbmRwb2ludFwiIH0sIGwgPSB7IFt2XTogYywgW3ddOiBbeyBbeF06IFwiVXNlRklQU1wiIH0sIHRydWVdIH0sIG0gPSB7IFt2XTogYywgW3ddOiBbeyBbeF06IFwiVXNlRHVhbFN0YWNrXCIgfSwgdHJ1ZV0gfSwgbiA9IHt9LCBvID0geyBbdl06IGgsIFt3XTogW3sgW3hdOiBnIH0sIFwic3VwcG9ydHNGSVBTXCJdIH0sIHAgPSB7IFt4XTogZyB9LCBxID0geyBbdl06IGMsIFt3XTogW3RydWUsIHsgW3ZdOiBoLCBbd106IFtwLCBcInN1cHBvcnRzRHVhbFN0YWNrXCJdIH1dIH0sIHIgPSBbbF0sIHMgPSBbbV0sIHQgPSBbeyBbeF06IFwiUmVnaW9uXCIgfV07XG5jb25zdCBfZGF0YSA9IHsgdmVyc2lvbjogXCIxLjBcIiwgcGFyYW1ldGVyczogeyBSZWdpb246IGksIFVzZUR1YWxTdGFjazogaiwgVXNlRklQUzogaiwgRW5kcG9pbnQ6IGkgfSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYiwgW3ddOiBba10gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiByLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgY29uZGl0aW9uczogcywgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBrLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBbeyBbdl06IGIsIFt3XTogdCB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogXCJhd3MucGFydGl0aW9uXCIsIFt3XTogdCwgYXNzaWduOiBnIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW2wsIG1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBjLCBbd106IFthLCBvXSB9LCBxXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL29pZGMtZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBhbmQgRHVhbFN0YWNrIGFyZSBlbmFibGVkLCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBvbmUgb3IgYm90aFwiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogciwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYywgW3ddOiBbbywgYV0gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IFwic3RyaW5nRXF1YWxzXCIsIFt3XTogW3sgW3ZdOiBoLCBbd106IFtwLCBcIm5hbWVcIl0gfSwgXCJhd3MtdXMtZ292XCJdIH1dLCBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9vaWRjLntSZWdpb259LmFtYXpvbmF3cy5jb21cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vb2lkYy1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJGSVBTIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRklQU1wiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogcywgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtxXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL29pZGMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkR1YWxTdGFjayBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IER1YWxTdGFja1wiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vb2lkYy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBNaXNzaW5nIFJlZ2lvblwiLCB0eXBlOiBkIH1dIH07XG5leHBvcnQgY29uc3QgcnVsZVNldCA9IF9kYXRhO1xuIiwgImltcG9ydCB7IGF3c0VuZHBvaW50RnVuY3Rpb25zIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucywgRW5kcG9pbnRDYWNoZSwgcmVzb2x2ZUVuZHBvaW50IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IHJ1bGVTZXQgfSBmcm9tIFwiLi9ydWxlc2V0XCI7XG5jb25zdCBjYWNoZSA9IG5ldyBFbmRwb2ludENhY2hlKHtcbiAgICBzaXplOiA1MCxcbiAgICBwYXJhbXM6IFtcIkVuZHBvaW50XCIsIFwiUmVnaW9uXCIsIFwiVXNlRHVhbFN0YWNrXCIsIFwiVXNlRklQU1wiXSxcbn0pO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyID0gKGVuZHBvaW50UGFyYW1zLCBjb250ZXh0ID0ge30pID0+IHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KGVuZHBvaW50UGFyYW1zLCAoKSA9PiByZXNvbHZlRW5kcG9pbnQocnVsZVNldCwge1xuICAgICAgICBlbmRwb2ludFBhcmFtczogZW5kcG9pbnRQYXJhbXMsXG4gICAgICAgIGxvZ2dlcjogY29udGV4dC5sb2dnZXIsXG4gICAgfSkpO1xufTtcbmN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLmF3cyA9IGF3c0VuZHBvaW50RnVuY3Rpb25zO1xuIiwgImltcG9ydCB7IEF3c1Nka1NpZ1Y0U2lnbmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IE5vQXV0aFNpZ25lciB9IGZyb20gXCJAc21pdGh5L2NvcmVcIjtcbmltcG9ydCB7IE5vT3BMb2dnZXIgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBwYXJzZVVybCB9IGZyb20gXCJAc21pdGh5L3VybC1wYXJzZXJcIjtcbmltcG9ydCB7IGZyb21CYXNlNjQsIHRvQmFzZTY0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIjtcbmltcG9ydCB7IGZyb21VdGY4LCB0b1V0ZjggfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmltcG9ydCB7IGRlZmF1bHRTU09PSURDSHR0cEF1dGhTY2hlbWVQcm92aWRlciB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgfSBmcm9tIFwiLi9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyXCI7XG5leHBvcnQgY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlWZXJzaW9uOiBcIjIwMTktMDYtMTBcIixcbiAgICAgICAgYmFzZTY0RGVjb2RlcjogY29uZmlnPy5iYXNlNjREZWNvZGVyID8/IGZyb21CYXNlNjQsXG4gICAgICAgIGJhc2U2NEVuY29kZXI6IGNvbmZpZz8uYmFzZTY0RW5jb2RlciA/PyB0b0Jhc2U2NCxcbiAgICAgICAgZGlzYWJsZUhvc3RQcmVmaXg6IGNvbmZpZz8uZGlzYWJsZUhvc3RQcmVmaXggPz8gZmFsc2UsXG4gICAgICAgIGVuZHBvaW50UHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnRQcm92aWRlciA/PyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlcixcbiAgICAgICAgZXh0ZW5zaW9uczogY29uZmlnPy5leHRlbnNpb25zID8/IFtdLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPz8gZGVmYXVsdFNTT09JRENIdHRwQXV0aFNjaGVtZVByb3ZpZGVyLFxuICAgICAgICBodHRwQXV0aFNjaGVtZXM6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVzID8/IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlbWVJZDogXCJhd3MuYXV0aCNzaWd2NFwiLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXI6IChpcGMpID0+IGlwYy5nZXRJZGVudGl0eVByb3ZpZGVyKFwiYXdzLmF1dGgjc2lndjRcIiksXG4gICAgICAgICAgICAgICAgc2lnbmVyOiBuZXcgQXdzU2RrU2lnVjRTaWduZXIoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZW1lSWQ6IFwic21pdGh5LmFwaSNub0F1dGhcIixcbiAgICAgICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyOiAoaXBjKSA9PiBpcGMuZ2V0SWRlbnRpdHlQcm92aWRlcihcInNtaXRoeS5hcGkjbm9BdXRoXCIpIHx8IChhc3luYyAoKSA9PiAoe30pKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBOb0F1dGhTaWduZXIoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGxvZ2dlcjogY29uZmlnPy5sb2dnZXIgPz8gbmV3IE5vT3BMb2dnZXIoKSxcbiAgICAgICAgc2VydmljZUlkOiBjb25maWc/LnNlcnZpY2VJZCA/PyBcIlNTTyBPSURDXCIsXG4gICAgICAgIHVybFBhcnNlcjogY29uZmlnPy51cmxQYXJzZXIgPz8gcGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IGZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB0b1V0ZjgsXG4gICAgfTtcbn07XG4iLCAiaW1wb3J0IHBhY2thZ2VJbmZvIGZyb20gXCIuLi8uLi8uLi9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB7IE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TLCBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIGFzIGF3c0NoZWNrVmVyc2lvbiB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBOT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUywgY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCB9IGZyb20gXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgSGFzaCB9IGZyb20gXCJAc21pdGh5L2hhc2gtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZyBhcyBsb2FkTm9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBOb2RlSHR0cEhhbmRsZXIgYXMgUmVxdWVzdEhhbmRsZXIsIHN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVCb2R5TGVuZ3RoIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlXCI7XG5pbXBvcnQgeyBERUZBVUxUX1JFVFJZX01PREUgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXJldHJ5XCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIGdldFNoYXJlZFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9ydW50aW1lQ29uZmlnLnNoYXJlZFwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZSB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZVwiO1xuaW1wb3J0IHsgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBkZWZhdWx0c01vZGUgPSByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyID0gKCkgPT4gZGVmYXVsdHNNb2RlKCkudGhlbihsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlKTtcbiAgICBjb25zdCBjbGllbnRTaGFyZWRWYWx1ZXMgPSBnZXRTaGFyZWRSdW50aW1lQ29uZmlnKGNvbmZpZyk7XG4gICAgYXdzQ2hlY2tWZXJzaW9uKHByb2Nlc3MudmVyc2lvbik7XG4gICAgY29uc3QgcHJvZmlsZUNvbmZpZyA9IHsgcHJvZmlsZTogY29uZmlnPy5wcm9maWxlIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY2xpZW50U2hhcmVkVmFsdWVzLFxuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIHJ1bnRpbWU6IFwibm9kZVwiLFxuICAgICAgICBkZWZhdWx0c01vZGUsXG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiBjb25maWc/LmF1dGhTY2hlbWVQcmVmZXJlbmNlID8/IGxvYWROb2RlQ29uZmlnKE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TLCBwcm9maWxlQ29uZmlnKSxcbiAgICAgICAgYm9keUxlbmd0aENoZWNrZXI6IGNvbmZpZz8uYm9keUxlbmd0aENoZWNrZXIgPz8gY2FsY3VsYXRlQm9keUxlbmd0aCxcbiAgICAgICAgZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyOiBjb25maWc/LmRlZmF1bHRVc2VyQWdlbnRQcm92aWRlciA/P1xuICAgICAgICAgICAgY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyKHsgc2VydmljZUlkOiBjbGllbnRTaGFyZWRWYWx1ZXMuc2VydmljZUlkLCBjbGllbnRWZXJzaW9uOiBwYWNrYWdlSW5mby52ZXJzaW9uIH0pLFxuICAgICAgICBtYXhBdHRlbXB0czogY29uZmlnPy5tYXhBdHRlbXB0cyA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBjb25maWcpLFxuICAgICAgICByZWdpb246IGNvbmZpZz8ucmVnaW9uID8/XG4gICAgICAgICAgICBsb2FkTm9kZUNvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgeyAuLi5OT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCAuLi5wcm9maWxlQ29uZmlnIH0pLFxuICAgICAgICByZXF1ZXN0SGFuZGxlcjogUmVxdWVzdEhhbmRsZXIuY3JlYXRlKGNvbmZpZz8ucmVxdWVzdEhhbmRsZXIgPz8gZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKSxcbiAgICAgICAgcmV0cnlNb2RlOiBjb25maWc/LnJldHJ5TW9kZSA/P1xuICAgICAgICAgICAgbG9hZE5vZGVDb25maWcoe1xuICAgICAgICAgICAgICAgIC4uLk5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBhc3luYyAoKSA9PiAoYXdhaXQgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKCkpLnJldHJ5TW9kZSB8fCBERUZBVUxUX1JFVFJZX01PREUsXG4gICAgICAgICAgICB9LCBjb25maWcpLFxuICAgICAgICBzaGEyNTY6IGNvbmZpZz8uc2hhMjU2ID8/IEhhc2guYmluZChudWxsLCBcInNoYTI1NlwiKSxcbiAgICAgICAgc3RyZWFtQ29sbGVjdG9yOiBjb25maWc/LnN0cmVhbUNvbGxlY3RvciA/PyBzdHJlYW1Db2xsZWN0b3IsXG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBjb25maWc/LnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogY29uZmlnPy51c2VGaXBzRW5kcG9pbnQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgICAgIHVzZXJBZ2VudEFwcElkOiBjb25maWc/LnVzZXJBZ2VudEFwcElkID8/IGxvYWROb2RlQ29uZmlnKE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TLCBwcm9maWxlQ29uZmlnKSxcbiAgICB9O1xufTtcbiIsICJleHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICBjb25zdCBfaHR0cEF1dGhTY2hlbWVzID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZXM7XG4gICAgbGV0IF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgIGxldCBfY3JlZGVudGlhbHMgPSBydW50aW1lQ29uZmlnLmNyZWRlbnRpYWxzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lKGh0dHBBdXRoU2NoZW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IF9odHRwQXV0aFNjaGVtZXMuZmluZEluZGV4KChzY2hlbWUpID0+IHNjaGVtZS5zY2hlbWVJZCA9PT0gaHR0cEF1dGhTY2hlbWUuc2NoZW1lSWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMucHVzaChodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnNwbGljZShpbmRleCwgMSwgaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWVQcm92aWRlcihodHRwQXV0aFNjaGVtZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBfY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWcuaHR0cEF1dGhTY2hlbWVzKCksXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyKCksXG4gICAgICAgIGNyZWRlbnRpYWxzOiBjb25maWcuY3JlZGVudGlhbHMoKSxcbiAgICB9O1xufTtcbiIsICJpbXBvcnQgeyBnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgfSBmcm9tIFwiQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gKHJ1bnRpbWVDb25maWcsIGV4dGVuc2lvbnMpID0+IHtcbiAgICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpO1xuICAgIGV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uKSA9PiBleHRlbnNpb24uY29uZmlndXJlKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihydW50aW1lQ29uZmlnLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbn07XG4iLCAiaW1wb3J0IHsgZ2V0SG9zdEhlYWRlclBsdWdpbiwgcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIjtcbmltcG9ydCB7IGdldExvZ2dlclBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlclwiO1xuaW1wb3J0IHsgZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvblwiO1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50UGx1Z2luLCByZXNvbHZlVXNlckFnZW50Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnRcIjtcbmltcG9ydCB7IHJlc29sdmVSZWdpb25Db25maWcgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnLCBnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiwgZ2V0SHR0cFNpZ25pbmdQbHVnaW4sIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgZ2V0Q29udGVudExlbmd0aFBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtY29udGVudC1sZW5ndGhcIjtcbmltcG9ydCB7IHJlc29sdmVFbmRwb2ludENvbmZpZyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjtcbmltcG9ydCB7IGdldFJldHJ5UGx1Z2luLCByZXNvbHZlUmV0cnlDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBDbGllbnQgYXMgX19DbGllbnQsIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgZGVmYXVsdFNTT09JRENIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciwgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnLCB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycywgfSBmcm9tIFwiLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgX19nZXRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcnVudGltZUNvbmZpZ1wiO1xuaW1wb3J0IHsgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zIH0gZnJvbSBcIi4vcnVudGltZUV4dGVuc2lvbnNcIjtcbmV4cG9ydCB7IF9fQ2xpZW50IH07XG5leHBvcnQgY2xhc3MgU1NPT0lEQ0NsaWVudCBleHRlbmRzIF9fQ2xpZW50IHtcbiAgICBjb25maWc7XG4gICAgY29uc3RydWN0b3IoLi4uW2NvbmZpZ3VyYXRpb25dKSB7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMCA9IF9fZ2V0UnVudGltZUNvbmZpZyhjb25maWd1cmF0aW9uIHx8IHt9KTtcbiAgICAgICAgc3VwZXIoX2NvbmZpZ18wKTtcbiAgICAgICAgdGhpcy5pbml0Q29uZmlnID0gX2NvbmZpZ18wO1xuICAgICAgICBjb25zdCBfY29uZmlnXzEgPSByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzKF9jb25maWdfMCk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMiA9IHJlc29sdmVVc2VyQWdlbnRDb25maWcoX2NvbmZpZ18xKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18zID0gcmVzb2x2ZVJldHJ5Q29uZmlnKF9jb25maWdfMik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNCA9IHJlc29sdmVSZWdpb25Db25maWcoX2NvbmZpZ18zKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ181ID0gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcoX2NvbmZpZ180KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ182ID0gcmVzb2x2ZUVuZHBvaW50Q29uZmlnKF9jb25maWdfNSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNyA9IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyhfY29uZmlnXzYpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzggPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ183LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfY29uZmlnXzg7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRVc2VyQWdlbnRQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJldHJ5UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRDb250ZW50TGVuZ3RoUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIb3N0SGVhZGVyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRMb2dnZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4odGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiBkZWZhdWx0U1NPT0lEQ0h0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyOiBhc3luYyAoY29uZmlnKSA9PiBuZXcgRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcoe1xuICAgICAgICAgICAgICAgIFwiYXdzLmF1dGgjc2lndjRcIjogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEh0dHBTaWduaW5nUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgU2VydmljZUV4Y2VwdGlvbiBhcyBfX1NlcnZpY2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IHsgX19TZXJ2aWNlRXhjZXB0aW9uIH07XG5leHBvcnQgY2xhc3MgU1NPT0lEQ1NlcnZpY2VFeGNlcHRpb24gZXh0ZW5kcyBfX1NlcnZpY2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTU09PSURDU2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBTRU5TSVRJVkVfU1RSSU5HIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgU1NPT0lEQ1NlcnZpY2VFeGNlcHRpb24gYXMgX19CYXNlRXhjZXB0aW9uIH0gZnJvbSBcIi4vU1NPT0lEQ1NlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjbGFzcyBBY2Nlc3NEZW5pZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkFjY2Vzc0RlbmllZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgZXJyb3I7XG4gICAgZXJyb3JfZGVzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkFjY2Vzc0RlbmllZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBY2Nlc3NEZW5pZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IG9wdHMuZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBvcHRzLmVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBdXRob3JpemF0aW9uUGVuZGluZ0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQXV0aG9yaXphdGlvblBlbmRpbmdFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGVycm9yO1xuICAgIGVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJBdXRob3JpemF0aW9uUGVuZGluZ0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBdXRob3JpemF0aW9uUGVuZGluZ0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLmVycm9yID0gb3B0cy5lcnJvcjtcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IG9wdHMuZXJyb3JfZGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IENyZWF0ZVRva2VuUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouY2xpZW50U2VjcmV0ICYmIHsgY2xpZW50U2VjcmV0OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmoucmVmcmVzaFRva2VuICYmIHsgcmVmcmVzaFRva2VuOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouY29kZVZlcmlmaWVyICYmIHsgY29kZVZlcmlmaWVyOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlVG9rZW5SZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouYWNjZXNzVG9rZW4gJiYgeyBhY2Nlc3NUb2tlbjogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLnJlZnJlc2hUb2tlbiAmJiB7IHJlZnJlc2hUb2tlbjogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLmlkVG9rZW4gJiYgeyBpZFRva2VuOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY2xhc3MgRXhwaXJlZFRva2VuRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJFeHBpcmVkVG9rZW5FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGVycm9yO1xuICAgIGVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFeHBpcmVkVG9rZW5FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRXhwaXJlZFRva2VuRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBvcHRzLmVycm9yO1xuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gb3B0cy5lcnJvcl9kZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludGVybmFsU2VydmVyRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJzZXJ2ZXJcIjtcbiAgICBlcnJvcjtcbiAgICBlcnJvcl9kZXNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJzZXJ2ZXJcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IG9wdHMuZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBvcHRzLmVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQ2xpZW50RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkQ2xpZW50RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBlcnJvcjtcbiAgICBlcnJvcl9kZXNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZENsaWVudEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkQ2xpZW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBvcHRzLmVycm9yO1xuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gb3B0cy5lcnJvcl9kZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEdyYW50RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkR3JhbnRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGVycm9yO1xuICAgIGVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkR3JhbnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEdyYW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBvcHRzLmVycm9yO1xuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gb3B0cy5lcnJvcl9kZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBlcnJvcjtcbiAgICBlcnJvcl9kZXNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IG9wdHMuZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBvcHRzLmVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkU2NvcGVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRTY29wZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgZXJyb3I7XG4gICAgZXJyb3JfZGVzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRTY29wZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkU2NvcGVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IG9wdHMuZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBvcHRzLmVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTbG93RG93bkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiU2xvd0Rvd25FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGVycm9yO1xuICAgIGVycm9yX2Rlc2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJTbG93RG93bkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTbG93RG93bkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLmVycm9yID0gb3B0cy5lcnJvcjtcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IG9wdHMuZXJyb3JfZGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFVuYXV0aG9yaXplZENsaWVudEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiVW5hdXRob3JpemVkQ2xpZW50RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBlcnJvcjtcbiAgICBlcnJvcl9kZXNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiVW5hdXRob3JpemVkQ2xpZW50RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuYXV0aG9yaXplZENsaWVudEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLmVycm9yID0gb3B0cy5lcnJvcjtcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IG9wdHMuZXJyb3JfZGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFVuc3VwcG9ydGVkR3JhbnRUeXBlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJVbnN1cHBvcnRlZEdyYW50VHlwZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgZXJyb3I7XG4gICAgZXJyb3JfZGVzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlVuc3VwcG9ydGVkR3JhbnRUeXBlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuc3VwcG9ydGVkR3JhbnRUeXBlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBvcHRzLmVycm9yO1xuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gb3B0cy5lcnJvcl9kZXNjcmlwdGlvbjtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgbG9hZFJlc3RKc29uRXJyb3JDb2RlLCBwYXJzZUpzb25Cb2R5IGFzIHBhcnNlQm9keSwgcGFyc2VKc29uRXJyb3JCb2R5IGFzIHBhcnNlRXJyb3JCb2R5IH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IHJlcXVlc3RCdWlsZGVyIGFzIHJiIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgX2pzb24sIGNvbGxlY3RCb2R5LCBkZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24gYXMgX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24sIGV4cGVjdEludDMyIGFzIF9fZXhwZWN0SW50MzIsIGV4cGVjdE5vbk51bGwgYXMgX19leHBlY3ROb25OdWxsLCBleHBlY3RPYmplY3QgYXMgX19leHBlY3RPYmplY3QsIGV4cGVjdFN0cmluZyBhcyBfX2V4cGVjdFN0cmluZywgbWFwLCB0YWtlLCB3aXRoQmFzZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBBY2Nlc3NEZW5pZWRFeGNlcHRpb24sIEF1dGhvcml6YXRpb25QZW5kaW5nRXhjZXB0aW9uLCBFeHBpcmVkVG9rZW5FeGNlcHRpb24sIEludGVybmFsU2VydmVyRXhjZXB0aW9uLCBJbnZhbGlkQ2xpZW50RXhjZXB0aW9uLCBJbnZhbGlkR3JhbnRFeGNlcHRpb24sIEludmFsaWRSZXF1ZXN0RXhjZXB0aW9uLCBJbnZhbGlkU2NvcGVFeGNlcHRpb24sIFNsb3dEb3duRXhjZXB0aW9uLCBVbmF1dGhvcml6ZWRDbGllbnRFeGNlcHRpb24sIFVuc3VwcG9ydGVkR3JhbnRUeXBlRXhjZXB0aW9uLCB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXzBcIjtcbmltcG9ydCB7IFNTT09JRENTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuLi9tb2RlbHMvU1NPT0lEQ1NlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVUb2tlbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi90b2tlblwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBjbGllbnRJZDogW10sXG4gICAgICAgIGNsaWVudFNlY3JldDogW10sXG4gICAgICAgIGNvZGU6IFtdLFxuICAgICAgICBjb2RlVmVyaWZpZXI6IFtdLFxuICAgICAgICBkZXZpY2VDb2RlOiBbXSxcbiAgICAgICAgZ3JhbnRUeXBlOiBbXSxcbiAgICAgICAgcmVkaXJlY3RVcmk6IFtdLFxuICAgICAgICByZWZyZXNoVG9rZW46IFtdLFxuICAgICAgICBzY29wZTogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUb2tlbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIGFjY2Vzc1Rva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgZXhwaXJlc0luOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBpZFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgcmVmcmVzaFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgdG9rZW5UeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Db21tYW5kRXJyb3IgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcGFyc2VkT3V0cHV0ID0ge1xuICAgICAgICAuLi5vdXRwdXQsXG4gICAgICAgIGJvZHk6IGF3YWl0IHBhcnNlRXJyb3JCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSxcbiAgICB9O1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGxvYWRSZXN0SnNvbkVycm9yQ29kZShvdXRwdXQsIHBhcnNlZE91dHB1dC5ib2R5KTtcbiAgICBzd2l0Y2ggKGVycm9yQ29kZSkge1xuICAgICAgICBjYXNlIFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNzb29pZGMjQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkF1dGhvcml6YXRpb25QZW5kaW5nRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNzb29pZGMjQXV0aG9yaXphdGlvblBlbmRpbmdFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0F1dGhvcml6YXRpb25QZW5kaW5nRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFeHBpcmVkVG9rZW5FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3Nvb2lkYyNFeHBpcmVkVG9rZW5FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0V4cGlyZWRUb2tlbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3Nvb2lkYyNJbnRlcm5hbFNlcnZlckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRDbGllbnRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3Nvb2lkYyNJbnZhbGlkQ2xpZW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkQ2xpZW50RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkR3JhbnRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3Nvb2lkYyNJbnZhbGlkR3JhbnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRHcmFudEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3Nvb2lkYyNJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFJlcXVlc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTY29wZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zc29vaWRjI0ludmFsaWRTY29wZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFNjb3BlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJTbG93RG93bkV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zc29vaWRjI1Nsb3dEb3duRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9TbG93RG93bkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiVW5hdXRob3JpemVkQ2xpZW50RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNzb29pZGMjVW5hdXRob3JpemVkQ2xpZW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9VbmF1dGhvcml6ZWRDbGllbnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlVuc3VwcG9ydGVkR3JhbnRUeXBlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNzb29pZGMjVW5zdXBwb3J0ZWRHcmFudFR5cGVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Vuc3VwcG9ydGVkR3JhbnRUeXBlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRCb2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dEZWZhdWx0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBwYXJzZWRCb2R5LFxuICAgICAgICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9IHdpdGhCYXNlRXhjZXB0aW9uKF9fQmFzZUV4Y2VwdGlvbik7XG5jb25zdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgZXJyb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQWNjZXNzRGVuaWVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9BdXRob3JpemF0aW9uUGVuZGluZ0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBlcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIGVycm9yX2Rlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBdXRob3JpemF0aW9uUGVuZGluZ0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfRXhwaXJlZFRva2VuRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIGVycm9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEV4cGlyZWRUb2tlbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgZXJyb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDbGllbnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgZXJyb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZENsaWVudEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEdyYW50RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIGVycm9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRHcmFudEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFJlcXVlc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgZXJyb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTY29wZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBlcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIGVycm9yX2Rlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkU2NvcGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Nsb3dEb3duRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIGVycm9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFNsb3dEb3duRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9VbmF1dGhvcml6ZWRDbGllbnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgZXJyb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVW5hdXRob3JpemVkQ2xpZW50RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9VbnN1cHBvcnRlZEdyYW50VHlwZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBlcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIGVycm9yX2Rlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBVbnN1cHBvcnRlZEdyYW50VHlwZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVzZXJpYWxpemVNZXRhZGF0YSA9IChvdXRwdXQpID0+ICh7XG4gICAgaHR0cFN0YXR1c0NvZGU6IG91dHB1dC5zdGF0dXNDb2RlLFxuICAgIHJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdGlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3QtaWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1yZXF1ZXN0LWlkXCJdLFxuICAgIGV4dGVuZGVkUmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWlkLTJcIl0sXG4gICAgY2ZJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1jZi1pZFwiXSxcbn0pO1xuY29uc3QgY29sbGVjdEJvZHlTdHJpbmcgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHkoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoYm9keSkgPT4gY29udGV4dC51dGY4RW5jb2Rlcihib2R5KSk7XG4iLCAiaW1wb3J0IHsgZ2V0RW5kcG9pbnRQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRTZXJkZVBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgJENvbW1hbmQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBjb21tb25QYXJhbXMgfSBmcm9tIFwiLi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBDcmVhdGVUb2tlblJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csIENyZWF0ZVRva2VuUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2csIH0gZnJvbSBcIi4uL21vZGVscy9tb2RlbHNfMFwiO1xuaW1wb3J0IHsgZGVfQ3JlYXRlVG9rZW5Db21tYW5kLCBzZV9DcmVhdGVUb2tlbkNvbW1hbmQgfSBmcm9tIFwiLi4vcHJvdG9jb2xzL0F3c19yZXN0SnNvbjFcIjtcbmV4cG9ydCB7ICRDb21tYW5kIH07XG5leHBvcnQgY2xhc3MgQ3JlYXRlVG9rZW5Db21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoY29tbW9uUGFyYW1zKVxuICAgIC5tKGZ1bmN0aW9uIChDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZ2V0U2VyZGVQbHVnaW4oY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgICAgIGdldEVuZHBvaW50UGx1Z2luKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKSxcbiAgICBdO1xufSlcbiAgICAucyhcIkFXU1NTT09JRENTZXJ2aWNlXCIsIFwiQ3JlYXRlVG9rZW5cIiwge30pXG4gICAgLm4oXCJTU09PSURDQ2xpZW50XCIsIFwiQ3JlYXRlVG9rZW5Db21tYW5kXCIpXG4gICAgLmYoQ3JlYXRlVG9rZW5SZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nLCBDcmVhdGVUb2tlblJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nKVxuICAgIC5zZXIoc2VfQ3JlYXRlVG9rZW5Db21tYW5kKVxuICAgIC5kZShkZV9DcmVhdGVUb2tlbkNvbW1hbmQpXG4gICAgLmJ1aWxkKCkge1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZUFnZ3JlZ2F0ZWRDbGllbnQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBDcmVhdGVUb2tlbkNvbW1hbmQgfSBmcm9tIFwiLi9jb21tYW5kcy9DcmVhdGVUb2tlbkNvbW1hbmRcIjtcbmltcG9ydCB7IFNTT09JRENDbGllbnQgfSBmcm9tIFwiLi9TU09PSURDQ2xpZW50XCI7XG5jb25zdCBjb21tYW5kcyA9IHtcbiAgICBDcmVhdGVUb2tlbkNvbW1hbmQsXG59O1xuZXhwb3J0IGNsYXNzIFNTT09JREMgZXh0ZW5kcyBTU09PSURDQ2xpZW50IHtcbn1cbmNyZWF0ZUFnZ3JlZ2F0ZWRDbGllbnQoY29tbWFuZHMsIFNTT09JREMpO1xuIiwgImV4cG9ydCAqIGZyb20gXCIuL0NyZWF0ZVRva2VuQ29tbWFuZFwiO1xuIiwgImV4cG9ydCAqIGZyb20gXCIuL21vZGVsc18wXCI7XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vU1NPT0lEQ0NsaWVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU1NPT0lEQ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29tbWFuZHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vZGVsc1wiO1xuZXhwb3J0IHsgU1NPT0lEQ1NlcnZpY2VFeGNlcHRpb24gfSBmcm9tIFwiLi9tb2RlbHMvU1NPT0lEQ1NlcnZpY2VFeGNlcHRpb25cIjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgZnJvbVNzbzogKCkgPT4gZnJvbVNzbyxcbiAgZnJvbVN0YXRpYzogKCkgPT4gZnJvbVN0YXRpYyxcbiAgbm9kZVByb3ZpZGVyOiAoKSA9PiBub2RlUHJvdmlkZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG5cbi8vIHNyYy9mcm9tU3NvLnRzXG5cblxuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgRVhQSVJFX1dJTkRPV19NUyA9IDUgKiA2MCAqIDFlMztcbnZhciBSRUZSRVNIX01FU1NBR0UgPSBgVG8gcmVmcmVzaCB0aGlzIFNTTyBzZXNzaW9uIHJ1biAnYXdzIHNzbyBsb2dpbicgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9maWxlLmA7XG5cbi8vIHNyYy9nZXRTc29PaWRjQ2xpZW50LnRzXG52YXIgZ2V0U3NvT2lkY0NsaWVudCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHNzb1JlZ2lvbiwgaW5pdCA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgU1NPT0lEQ0NsaWVudCB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAYXdzLXNkay9uZXN0ZWQtY2xpZW50cy9zc28tb2lkY1wiKSkpO1xuICBjb25zdCBzc29PaWRjQ2xpZW50ID0gbmV3IFNTT09JRENDbGllbnQoXG4gICAgT2JqZWN0LmFzc2lnbih7fSwgaW5pdC5jbGllbnRDb25maWcgPz8ge30sIHtcbiAgICAgIHJlZ2lvbjogc3NvUmVnaW9uID8/IGluaXQuY2xpZW50Q29uZmlnPy5yZWdpb24sXG4gICAgICBsb2dnZXI6IGluaXQuY2xpZW50Q29uZmlnPy5sb2dnZXIgPz8gaW5pdC5wYXJlbnRDbGllbnRDb25maWc/LmxvZ2dlclxuICAgIH0pXG4gICk7XG4gIHJldHVybiBzc29PaWRjQ2xpZW50O1xufSwgXCJnZXRTc29PaWRjQ2xpZW50XCIpO1xuXG4vLyBzcmMvZ2V0TmV3U3NvT2lkY1Rva2VuLnRzXG52YXIgZ2V0TmV3U3NvT2lkY1Rva2VuID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoc3NvVG9rZW4sIHNzb1JlZ2lvbiwgaW5pdCA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgQ3JlYXRlVG9rZW5Db21tYW5kIH0gPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9fdG9FU00ocmVxdWlyZShcIkBhd3Mtc2RrL25lc3RlZC1jbGllbnRzL3Nzby1vaWRjXCIpKSk7XG4gIGNvbnN0IHNzb09pZGNDbGllbnQgPSBhd2FpdCBnZXRTc29PaWRjQ2xpZW50KHNzb1JlZ2lvbiwgaW5pdCk7XG4gIHJldHVybiBzc29PaWRjQ2xpZW50LnNlbmQoXG4gICAgbmV3IENyZWF0ZVRva2VuQ29tbWFuZCh7XG4gICAgICBjbGllbnRJZDogc3NvVG9rZW4uY2xpZW50SWQsXG4gICAgICBjbGllbnRTZWNyZXQ6IHNzb1Rva2VuLmNsaWVudFNlY3JldCxcbiAgICAgIHJlZnJlc2hUb2tlbjogc3NvVG9rZW4ucmVmcmVzaFRva2VuLFxuICAgICAgZ3JhbnRUeXBlOiBcInJlZnJlc2hfdG9rZW5cIlxuICAgIH0pXG4gICk7XG59LCBcImdldE5ld1Nzb09pZGNUb2tlblwiKTtcblxuLy8gc3JjL3ZhbGlkYXRlVG9rZW5FeHBpcnkudHNcbnZhciBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiKTtcbnZhciB2YWxpZGF0ZVRva2VuRXhwaXJ5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodG9rZW4pID0+IHtcbiAgaWYgKHRva2VuLmV4cGlyYXRpb24gJiYgdG9rZW4uZXhwaXJhdGlvbi5nZXRUaW1lKCkgPCBEYXRlLm5vdygpKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5Ub2tlblByb3ZpZGVyRXJyb3IoYFRva2VuIGlzIGV4cGlyZWQuICR7UkVGUkVTSF9NRVNTQUdFfWAsIGZhbHNlKTtcbiAgfVxufSwgXCJ2YWxpZGF0ZVRva2VuRXhwaXJ5XCIpO1xuXG4vLyBzcmMvdmFsaWRhdGVUb2tlbktleS50c1xuXG52YXIgdmFsaWRhdGVUb2tlbktleSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGtleSwgdmFsdWUsIGZvclJlZnJlc2ggPSBmYWxzZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5Ub2tlblByb3ZpZGVyRXJyb3IoXG4gICAgICBgVmFsdWUgbm90IHByZXNlbnQgZm9yICcke2tleX0nIGluIFNTTyBUb2tlbiR7Zm9yUmVmcmVzaCA/IFwiLiBDYW5ub3QgcmVmcmVzaFwiIDogXCJcIn0uICR7UkVGUkVTSF9NRVNTQUdFfWAsXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH1cbn0sIFwidmFsaWRhdGVUb2tlbktleVwiKTtcblxuLy8gc3JjL3dyaXRlU1NPVG9rZW5Ub0ZpbGUudHNcbnZhciBpbXBvcnRfc2hhcmVkX2luaV9maWxlX2xvYWRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIik7XG52YXIgaW1wb3J0X2ZzID0gcmVxdWlyZShcImZzXCIpO1xudmFyIHsgd3JpdGVGaWxlIH0gPSBpbXBvcnRfZnMucHJvbWlzZXM7XG52YXIgd3JpdGVTU09Ub2tlblRvRmlsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlkLCBzc29Ub2tlbikgPT4ge1xuICBjb25zdCB0b2tlbkZpbGVwYXRoID0gKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmdldFNTT1Rva2VuRmlsZXBhdGgpKGlkKTtcbiAgY29uc3QgdG9rZW5TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShzc29Ub2tlbiwgbnVsbCwgMik7XG4gIHJldHVybiB3cml0ZUZpbGUodG9rZW5GaWxlcGF0aCwgdG9rZW5TdHJpbmcpO1xufSwgXCJ3cml0ZVNTT1Rva2VuVG9GaWxlXCIpO1xuXG4vLyBzcmMvZnJvbVNzby50c1xudmFyIGxhc3RSZWZyZXNoQXR0ZW1wdFRpbWUgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoMCk7XG52YXIgZnJvbVNzbyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF9pbml0ID0ge30pID0+IGFzeW5jICh7IGNhbGxlckNsaWVudENvbmZpZyB9ID0ge30pID0+IHtcbiAgY29uc3QgaW5pdCA9IHtcbiAgICAuLi5faW5pdCxcbiAgICBwYXJlbnRDbGllbnRDb25maWc6IHtcbiAgICAgIC4uLmNhbGxlckNsaWVudENvbmZpZyxcbiAgICAgIC4uLl9pbml0LnBhcmVudENsaWVudENvbmZpZ1xuICAgIH1cbiAgfTtcbiAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvdG9rZW4tcHJvdmlkZXJzIC0gZnJvbVNzb1wiKTtcbiAgY29uc3QgcHJvZmlsZXMgPSBhd2FpdCAoMCwgaW1wb3J0X3NoYXJlZF9pbmlfZmlsZV9sb2FkZXIucGFyc2VLbm93bkZpbGVzKShpbml0KTtcbiAgY29uc3QgcHJvZmlsZU5hbWUgPSAoMCwgaW1wb3J0X3NoYXJlZF9pbmlfZmlsZV9sb2FkZXIuZ2V0UHJvZmlsZU5hbWUpKHtcbiAgICBwcm9maWxlOiBpbml0LnByb2ZpbGUgPz8gY2FsbGVyQ2xpZW50Q29uZmlnPy5wcm9maWxlXG4gIH0pO1xuICBjb25zdCBwcm9maWxlID0gcHJvZmlsZXNbcHJvZmlsZU5hbWVdO1xuICBpZiAoIXByb2ZpbGUpIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLlRva2VuUHJvdmlkZXJFcnJvcihgUHJvZmlsZSAnJHtwcm9maWxlTmFtZX0nIGNvdWxkIG5vdCBiZSBmb3VuZCBpbiBzaGFyZWQgY3JlZGVudGlhbHMgZmlsZS5gLCBmYWxzZSk7XG4gIH0gZWxzZSBpZiAoIXByb2ZpbGVbXCJzc29fc2Vzc2lvblwiXSkge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuVG9rZW5Qcm92aWRlckVycm9yKGBQcm9maWxlICcke3Byb2ZpbGVOYW1lfScgaXMgbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSAnc3NvX3Nlc3Npb24nLmApO1xuICB9XG4gIGNvbnN0IHNzb1Nlc3Npb25OYW1lID0gcHJvZmlsZVtcInNzb19zZXNzaW9uXCJdO1xuICBjb25zdCBzc29TZXNzaW9ucyA9IGF3YWl0ICgwLCBpbXBvcnRfc2hhcmVkX2luaV9maWxlX2xvYWRlci5sb2FkU3NvU2Vzc2lvbkRhdGEpKGluaXQpO1xuICBjb25zdCBzc29TZXNzaW9uID0gc3NvU2Vzc2lvbnNbc3NvU2Vzc2lvbk5hbWVdO1xuICBpZiAoIXNzb1Nlc3Npb24pIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLlRva2VuUHJvdmlkZXJFcnJvcihcbiAgICAgIGBTc28gc2Vzc2lvbiAnJHtzc29TZXNzaW9uTmFtZX0nIGNvdWxkIG5vdCBiZSBmb3VuZCBpbiBzaGFyZWQgY3JlZGVudGlhbHMgZmlsZS5gLFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9XG4gIGZvciAoY29uc3Qgc3NvU2Vzc2lvblJlcXVpcmVkS2V5IG9mIFtcInNzb19zdGFydF91cmxcIiwgXCJzc29fcmVnaW9uXCJdKSB7XG4gICAgaWYgKCFzc29TZXNzaW9uW3Nzb1Nlc3Npb25SZXF1aXJlZEtleV0pIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuVG9rZW5Qcm92aWRlckVycm9yKFxuICAgICAgICBgU3NvIHNlc3Npb24gJyR7c3NvU2Vzc2lvbk5hbWV9JyBpcyBtaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5ICcke3Nzb1Nlc3Npb25SZXF1aXJlZEtleX0nLmAsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBzc29TdGFydFVybCA9IHNzb1Nlc3Npb25bXCJzc29fc3RhcnRfdXJsXCJdO1xuICBjb25zdCBzc29SZWdpb24gPSBzc29TZXNzaW9uW1wic3NvX3JlZ2lvblwiXTtcbiAgbGV0IHNzb1Rva2VuO1xuICB0cnkge1xuICAgIHNzb1Rva2VuID0gYXdhaXQgKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmdldFNTT1Rva2VuRnJvbUZpbGUpKHNzb1Nlc3Npb25OYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuVG9rZW5Qcm92aWRlckVycm9yKFxuICAgICAgYFRoZSBTU08gc2Vzc2lvbiB0b2tlbiBhc3NvY2lhdGVkIHdpdGggcHJvZmlsZT0ke3Byb2ZpbGVOYW1lfSB3YXMgbm90IGZvdW5kIG9yIGlzIGludmFsaWQuICR7UkVGUkVTSF9NRVNTQUdFfWAsXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH1cbiAgdmFsaWRhdGVUb2tlbktleShcImFjY2Vzc1Rva2VuXCIsIHNzb1Rva2VuLmFjY2Vzc1Rva2VuKTtcbiAgdmFsaWRhdGVUb2tlbktleShcImV4cGlyZXNBdFwiLCBzc29Ub2tlbi5leHBpcmVzQXQpO1xuICBjb25zdCB7IGFjY2Vzc1Rva2VuLCBleHBpcmVzQXQgfSA9IHNzb1Rva2VuO1xuICBjb25zdCBleGlzdGluZ1Rva2VuID0geyB0b2tlbjogYWNjZXNzVG9rZW4sIGV4cGlyYXRpb246IG5ldyBEYXRlKGV4cGlyZXNBdCkgfTtcbiAgaWYgKGV4aXN0aW5nVG9rZW4uZXhwaXJhdGlvbi5nZXRUaW1lKCkgLSBEYXRlLm5vdygpID4gRVhQSVJFX1dJTkRPV19NUykge1xuICAgIHJldHVybiBleGlzdGluZ1Rva2VuO1xuICB9XG4gIGlmIChEYXRlLm5vdygpIC0gbGFzdFJlZnJlc2hBdHRlbXB0VGltZS5nZXRUaW1lKCkgPCAzMCAqIDFlMykge1xuICAgIHZhbGlkYXRlVG9rZW5FeHBpcnkoZXhpc3RpbmdUb2tlbik7XG4gICAgcmV0dXJuIGV4aXN0aW5nVG9rZW47XG4gIH1cbiAgdmFsaWRhdGVUb2tlbktleShcImNsaWVudElkXCIsIHNzb1Rva2VuLmNsaWVudElkLCB0cnVlKTtcbiAgdmFsaWRhdGVUb2tlbktleShcImNsaWVudFNlY3JldFwiLCBzc29Ub2tlbi5jbGllbnRTZWNyZXQsIHRydWUpO1xuICB2YWxpZGF0ZVRva2VuS2V5KFwicmVmcmVzaFRva2VuXCIsIHNzb1Rva2VuLnJlZnJlc2hUb2tlbiwgdHJ1ZSk7XG4gIHRyeSB7XG4gICAgbGFzdFJlZnJlc2hBdHRlbXB0VGltZS5zZXRUaW1lKERhdGUubm93KCkpO1xuICAgIGNvbnN0IG5ld1Nzb09pZGNUb2tlbiA9IGF3YWl0IGdldE5ld1Nzb09pZGNUb2tlbihzc29Ub2tlbiwgc3NvUmVnaW9uLCBpbml0KTtcbiAgICB2YWxpZGF0ZVRva2VuS2V5KFwiYWNjZXNzVG9rZW5cIiwgbmV3U3NvT2lkY1Rva2VuLmFjY2Vzc1Rva2VuKTtcbiAgICB2YWxpZGF0ZVRva2VuS2V5KFwiZXhwaXJlc0luXCIsIG5ld1Nzb09pZGNUb2tlbi5leHBpcmVzSW4pO1xuICAgIGNvbnN0IG5ld1Rva2VuRXhwaXJhdGlvbiA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBuZXdTc29PaWRjVG9rZW4uZXhwaXJlc0luICogMWUzKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd3JpdGVTU09Ub2tlblRvRmlsZShzc29TZXNzaW9uTmFtZSwge1xuICAgICAgICAuLi5zc29Ub2tlbixcbiAgICAgICAgYWNjZXNzVG9rZW46IG5ld1Nzb09pZGNUb2tlbi5hY2Nlc3NUb2tlbixcbiAgICAgICAgZXhwaXJlc0F0OiBuZXdUb2tlbkV4cGlyYXRpb24udG9JU09TdHJpbmcoKSxcbiAgICAgICAgcmVmcmVzaFRva2VuOiBuZXdTc29PaWRjVG9rZW4ucmVmcmVzaFRva2VuXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW46IG5ld1Nzb09pZGNUb2tlbi5hY2Nlc3NUb2tlbixcbiAgICAgIGV4cGlyYXRpb246IG5ld1Rva2VuRXhwaXJhdGlvblxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFsaWRhdGVUb2tlbkV4cGlyeShleGlzdGluZ1Rva2VuKTtcbiAgICByZXR1cm4gZXhpc3RpbmdUb2tlbjtcbiAgfVxufSwgXCJmcm9tU3NvXCIpO1xuXG4vLyBzcmMvZnJvbVN0YXRpYy50c1xuXG52YXIgZnJvbVN0YXRpYyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHsgdG9rZW4sIGxvZ2dlciB9KSA9PiBhc3luYyAoKSA9PiB7XG4gIGxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay90b2tlbi1wcm92aWRlcnMgLSBmcm9tU3RhdGljXCIpO1xuICBpZiAoIXRva2VuIHx8ICF0b2tlbi50b2tlbikge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuVG9rZW5Qcm92aWRlckVycm9yKGBQbGVhc2UgcGFzcyBhIHZhbGlkIHRva2VuIHRvIGZyb21TdGF0aWNgLCBmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIHRva2VuO1xufSwgXCJmcm9tU3RhdGljXCIpO1xuXG4vLyBzcmMvbm9kZVByb3ZpZGVyLnRzXG5cbnZhciBub2RlUHJvdmlkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbml0ID0ge30pID0+ICgwLCBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIubWVtb2l6ZSkoXG4gICgwLCBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuY2hhaW4pKGZyb21Tc28oaW5pdCksIGFzeW5jICgpID0+IHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLlRva2VuUHJvdmlkZXJFcnJvcihcIkNvdWxkIG5vdCBsb2FkIHRva2VuIGZyb20gYW55IHByb3ZpZGVyc1wiLCBmYWxzZSk7XG4gIH0pLFxuICAodG9rZW4pID0+IHRva2VuLmV4cGlyYXRpb24gIT09IHZvaWQgMCAmJiB0b2tlbi5leHBpcmF0aW9uLmdldFRpbWUoKSAtIERhdGUubm93KCkgPCAzZTUsXG4gICh0b2tlbikgPT4gdG9rZW4uZXhwaXJhdGlvbiAhPT0gdm9pZCAwXG4pLCBcIm5vZGVQcm92aWRlclwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21Tc28sXG4gIGZyb21TdGF0aWMsXG4gIG5vZGVQcm92aWRlclxufSk7XG5cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXNtID0gKGZuLCByZXMpID0+IGZ1bmN0aW9uIF9faW5pdCgpIHtcbiAgcmV0dXJuIGZuICYmIChyZXMgPSAoMCwgZm5bX19nZXRPd25Qcm9wTmFtZXMoZm4pWzBdXSkoZm4gPSAwKSksIHJlcztcbn07XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2xvYWRTc28udHNcbnZhciBsb2FkU3NvX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGxvYWRTc29fZXhwb3J0cywge1xuICBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kOiAoKSA9PiBpbXBvcnRfY2xpZW50X3Nzby5HZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kLFxuICBTU09DbGllbnQ6ICgpID0+IGltcG9ydF9jbGllbnRfc3NvLlNTT0NsaWVudFxufSk7XG52YXIgaW1wb3J0X2NsaWVudF9zc287XG52YXIgaW5pdF9sb2FkU3NvID0gX19lc20oe1xuICBcInNyYy9sb2FkU3NvLnRzXCIoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaW1wb3J0X2NsaWVudF9zc28gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LXNzb1wiKTtcbiAgfVxufSk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgZnJvbVNTTzogKCkgPT4gZnJvbVNTTyxcbiAgaXNTc29Qcm9maWxlOiAoKSA9PiBpc1Nzb1Byb2ZpbGUsXG4gIHZhbGlkYXRlU3NvUHJvZmlsZTogKCkgPT4gdmFsaWRhdGVTc29Qcm9maWxlXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvZnJvbVNTTy50c1xuXG5cblxuLy8gc3JjL2lzU3NvUHJvZmlsZS50c1xudmFyIGlzU3NvUHJvZmlsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGFyZykgPT4gYXJnICYmICh0eXBlb2YgYXJnLnNzb19zdGFydF91cmwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZy5zc29fYWNjb3VudF9pZCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgYXJnLnNzb19zZXNzaW9uID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBhcmcuc3NvX3JlZ2lvbiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgYXJnLnNzb19yb2xlX25hbWUgPT09IFwic3RyaW5nXCIpLCBcImlzU3NvUHJvZmlsZVwiKTtcblxuLy8gc3JjL3Jlc29sdmVTU09DcmVkZW50aWFscy50c1xudmFyIGltcG9ydF9jbGllbnQgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZS9jbGllbnRcIik7XG52YXIgaW1wb3J0X3Rva2VuX3Byb3ZpZGVycyA9IHJlcXVpcmUoXCJAYXdzLXNkay90b2tlbi1wcm92aWRlcnNcIik7XG52YXIgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIik7XG52YXIgaW1wb3J0X3NoYXJlZF9pbmlfZmlsZV9sb2FkZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyXCIpO1xudmFyIFNIT1VMRF9GQUlMX0NSRURFTlRJQUxfQ0hBSU4gPSBmYWxzZTtcbnZhciByZXNvbHZlU1NPQ3JlZGVudGlhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICh7XG4gIHNzb1N0YXJ0VXJsLFxuICBzc29TZXNzaW9uLFxuICBzc29BY2NvdW50SWQsXG4gIHNzb1JlZ2lvbixcbiAgc3NvUm9sZU5hbWUsXG4gIHNzb0NsaWVudCxcbiAgY2xpZW50Q29uZmlnLFxuICBwYXJlbnRDbGllbnRDb25maWcsXG4gIHByb2ZpbGUsXG4gIGxvZ2dlclxufSkgPT4ge1xuICBsZXQgdG9rZW47XG4gIGNvbnN0IHJlZnJlc2hNZXNzYWdlID0gYFRvIHJlZnJlc2ggdGhpcyBTU08gc2Vzc2lvbiBydW4gYXdzIHNzbyBsb2dpbiB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb2ZpbGUuYDtcbiAgaWYgKHNzb1Nlc3Npb24pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgX3Rva2VuID0gYXdhaXQgKDAsIGltcG9ydF90b2tlbl9wcm92aWRlcnMuZnJvbVNzbykoeyBwcm9maWxlIH0pKCk7XG4gICAgICB0b2tlbiA9IHtcbiAgICAgICAgYWNjZXNzVG9rZW46IF90b2tlbi50b2tlbixcbiAgICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShfdG9rZW4uZXhwaXJhdGlvbikudG9JU09TdHJpbmcoKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihlLm1lc3NhZ2UsIHtcbiAgICAgICAgdHJ5TmV4dExpbms6IFNIT1VMRF9GQUlMX0NSRURFTlRJQUxfQ0hBSU4sXG4gICAgICAgIGxvZ2dlclxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB0b2tlbiA9IGF3YWl0ICgwLCBpbXBvcnRfc2hhcmVkX2luaV9maWxlX2xvYWRlci5nZXRTU09Ub2tlbkZyb21GaWxlKShzc29TdGFydFVybCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYFRoZSBTU08gc2Vzc2lvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBwcm9maWxlIGlzIGludmFsaWQuICR7cmVmcmVzaE1lc3NhZ2V9YCwge1xuICAgICAgICB0cnlOZXh0TGluazogU0hPVUxEX0ZBSUxfQ1JFREVOVElBTF9DSEFJTixcbiAgICAgICAgbG9nZ2VyXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKG5ldyBEYXRlKHRva2VuLmV4cGlyZXNBdCkuZ2V0VGltZSgpIC0gRGF0ZS5ub3coKSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYFRoZSBTU08gc2Vzc2lvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBwcm9maWxlIGhhcyBleHBpcmVkLiAke3JlZnJlc2hNZXNzYWdlfWAsIHtcbiAgICAgIHRyeU5leHRMaW5rOiBTSE9VTERfRkFJTF9DUkVERU5USUFMX0NIQUlOLFxuICAgICAgbG9nZ2VyXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgeyBhY2Nlc3NUb2tlbiB9ID0gdG9rZW47XG4gIGNvbnN0IHsgU1NPQ2xpZW50OiBTU09DbGllbnQyLCBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kOiBHZXRSb2xlQ3JlZGVudGlhbHNDb21tYW5kMiB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiAoaW5pdF9sb2FkU3NvKCksIGxvYWRTc29fZXhwb3J0cykpO1xuICBjb25zdCBzc28gPSBzc29DbGllbnQgfHwgbmV3IFNTT0NsaWVudDIoXG4gICAgT2JqZWN0LmFzc2lnbih7fSwgY2xpZW50Q29uZmlnID8/IHt9LCB7XG4gICAgICBsb2dnZXI6IGNsaWVudENvbmZpZz8ubG9nZ2VyID8/IHBhcmVudENsaWVudENvbmZpZz8ubG9nZ2VyLFxuICAgICAgcmVnaW9uOiBjbGllbnRDb25maWc/LnJlZ2lvbiA/PyBzc29SZWdpb25cbiAgICB9KVxuICApO1xuICBsZXQgc3NvUmVzcDtcbiAgdHJ5IHtcbiAgICBzc29SZXNwID0gYXdhaXQgc3NvLnNlbmQoXG4gICAgICBuZXcgR2V0Um9sZUNyZWRlbnRpYWxzQ29tbWFuZDIoe1xuICAgICAgICBhY2NvdW50SWQ6IHNzb0FjY291bnRJZCxcbiAgICAgICAgcm9sZU5hbWU6IHNzb1JvbGVOYW1lLFxuICAgICAgICBhY2Nlc3NUb2tlblxuICAgICAgfSlcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoZSwge1xuICAgICAgdHJ5TmV4dExpbms6IFNIT1VMRF9GQUlMX0NSRURFTlRJQUxfQ0hBSU4sXG4gICAgICBsb2dnZXJcbiAgICB9KTtcbiAgfVxuICBjb25zdCB7XG4gICAgcm9sZUNyZWRlbnRpYWxzOiB7IGFjY2Vzc0tleUlkLCBzZWNyZXRBY2Nlc3NLZXksIHNlc3Npb25Ub2tlbiwgZXhwaXJhdGlvbiwgY3JlZGVudGlhbFNjb3BlLCBhY2NvdW50SWQgfSA9IHt9XG4gIH0gPSBzc29SZXNwO1xuICBpZiAoIWFjY2Vzc0tleUlkIHx8ICFzZWNyZXRBY2Nlc3NLZXkgfHwgIXNlc3Npb25Ub2tlbiB8fCAhZXhwaXJhdGlvbikge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiU1NPIHJldHVybnMgYW4gaW52YWxpZCB0ZW1wb3JhcnkgY3JlZGVudGlhbC5cIiwge1xuICAgICAgdHJ5TmV4dExpbms6IFNIT1VMRF9GQUlMX0NSRURFTlRJQUxfQ0hBSU4sXG4gICAgICBsb2dnZXJcbiAgICB9KTtcbiAgfVxuICBjb25zdCBjcmVkZW50aWFscyA9IHtcbiAgICBhY2Nlc3NLZXlJZCxcbiAgICBzZWNyZXRBY2Nlc3NLZXksXG4gICAgc2Vzc2lvblRva2VuLFxuICAgIGV4cGlyYXRpb246IG5ldyBEYXRlKGV4cGlyYXRpb24pLFxuICAgIC4uLmNyZWRlbnRpYWxTY29wZSAmJiB7IGNyZWRlbnRpYWxTY29wZSB9LFxuICAgIC4uLmFjY291bnRJZCAmJiB7IGFjY291bnRJZCB9XG4gIH07XG4gIGlmIChzc29TZXNzaW9uKSB7XG4gICAgKDAsIGltcG9ydF9jbGllbnQuc2V0Q3JlZGVudGlhbEZlYXR1cmUpKGNyZWRlbnRpYWxzLCBcIkNSRURFTlRJQUxTX1NTT1wiLCBcInNcIik7XG4gIH0gZWxzZSB7XG4gICAgKDAsIGltcG9ydF9jbGllbnQuc2V0Q3JlZGVudGlhbEZlYXR1cmUpKGNyZWRlbnRpYWxzLCBcIkNSRURFTlRJQUxTX1NTT19MRUdBQ1lcIiwgXCJ1XCIpO1xuICB9XG4gIHJldHVybiBjcmVkZW50aWFscztcbn0sIFwicmVzb2x2ZVNTT0NyZWRlbnRpYWxzXCIpO1xuXG4vLyBzcmMvdmFsaWRhdGVTc29Qcm9maWxlLnRzXG5cbnZhciB2YWxpZGF0ZVNzb1Byb2ZpbGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwcm9maWxlLCBsb2dnZXIpID0+IHtcbiAgY29uc3QgeyBzc29fc3RhcnRfdXJsLCBzc29fYWNjb3VudF9pZCwgc3NvX3JlZ2lvbiwgc3NvX3JvbGVfbmFtZSB9ID0gcHJvZmlsZTtcbiAgaWYgKCFzc29fc3RhcnRfdXJsIHx8ICFzc29fYWNjb3VudF9pZCB8fCAhc3NvX3JlZ2lvbiB8fCAhc3NvX3JvbGVfbmFtZSkge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFxuICAgICAgYFByb2ZpbGUgaXMgY29uZmlndXJlZCB3aXRoIGludmFsaWQgU1NPIGNyZWRlbnRpYWxzLiBSZXF1aXJlZCBwYXJhbWV0ZXJzIFwic3NvX2FjY291bnRfaWRcIiwgXCJzc29fcmVnaW9uXCIsIFwic3NvX3JvbGVfbmFtZVwiLCBcInNzb19zdGFydF91cmxcIi4gR290ICR7T2JqZWN0LmtleXMocHJvZmlsZSkuam9pbihcbiAgICAgICAgXCIsIFwiXG4gICAgICApfVxuUmVmZXJlbmNlOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY2xpL2xhdGVzdC91c2VyZ3VpZGUvY2xpLWNvbmZpZ3VyZS1zc28uaHRtbGAsXG4gICAgICB7IHRyeU5leHRMaW5rOiBmYWxzZSwgbG9nZ2VyIH1cbiAgICApO1xuICB9XG4gIHJldHVybiBwcm9maWxlO1xufSwgXCJ2YWxpZGF0ZVNzb1Byb2ZpbGVcIik7XG5cbi8vIHNyYy9mcm9tU1NPLnRzXG52YXIgZnJvbVNTTyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGluaXQgPSB7fSkgPT4gYXN5bmMgKHsgY2FsbGVyQ2xpZW50Q29uZmlnIH0gPSB7fSkgPT4ge1xuICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXNzbyAtIGZyb21TU09cIik7XG4gIGNvbnN0IHsgc3NvU3RhcnRVcmwsIHNzb0FjY291bnRJZCwgc3NvUmVnaW9uLCBzc29Sb2xlTmFtZSwgc3NvU2Vzc2lvbiB9ID0gaW5pdDtcbiAgY29uc3QgeyBzc29DbGllbnQgfSA9IGluaXQ7XG4gIGNvbnN0IHByb2ZpbGVOYW1lID0gKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmdldFByb2ZpbGVOYW1lKSh7XG4gICAgcHJvZmlsZTogaW5pdC5wcm9maWxlID8/IGNhbGxlckNsaWVudENvbmZpZz8ucHJvZmlsZVxuICB9KTtcbiAgaWYgKCFzc29TdGFydFVybCAmJiAhc3NvQWNjb3VudElkICYmICFzc29SZWdpb24gJiYgIXNzb1JvbGVOYW1lICYmICFzc29TZXNzaW9uKSB7XG4gICAgY29uc3QgcHJvZmlsZXMgPSBhd2FpdCAoMCwgaW1wb3J0X3NoYXJlZF9pbmlfZmlsZV9sb2FkZXIucGFyc2VLbm93bkZpbGVzKShpbml0KTtcbiAgICBjb25zdCBwcm9maWxlID0gcHJvZmlsZXNbcHJvZmlsZU5hbWVdO1xuICAgIGlmICghcHJvZmlsZSkge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoYFByb2ZpbGUgJHtwcm9maWxlTmFtZX0gd2FzIG5vdCBmb3VuZC5gLCB7IGxvZ2dlcjogaW5pdC5sb2dnZXIgfSk7XG4gICAgfVxuICAgIGlmICghaXNTc29Qcm9maWxlKHByb2ZpbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBpcyBub3QgY29uZmlndXJlZCB3aXRoIFNTTyBjcmVkZW50aWFscy5gLCB7XG4gICAgICAgIGxvZ2dlcjogaW5pdC5sb2dnZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocHJvZmlsZT8uc3NvX3Nlc3Npb24pIHtcbiAgICAgIGNvbnN0IHNzb1Nlc3Npb25zID0gYXdhaXQgKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmxvYWRTc29TZXNzaW9uRGF0YSkoaW5pdCk7XG4gICAgICBjb25zdCBzZXNzaW9uID0gc3NvU2Vzc2lvbnNbcHJvZmlsZS5zc29fc2Vzc2lvbl07XG4gICAgICBjb25zdCBjb25mbGljdE1zZyA9IGAgY29uZmlndXJhdGlvbnMgaW4gcHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBhbmQgc3NvLXNlc3Npb24gJHtwcm9maWxlLnNzb19zZXNzaW9ufWA7XG4gICAgICBpZiAoc3NvUmVnaW9uICYmIHNzb1JlZ2lvbiAhPT0gc2Vzc2lvbi5zc29fcmVnaW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKGBDb25mbGljdGluZyBTU08gcmVnaW9uYCArIGNvbmZsaWN0TXNnLCB7XG4gICAgICAgICAgdHJ5TmV4dExpbms6IGZhbHNlLFxuICAgICAgICAgIGxvZ2dlcjogaW5pdC5sb2dnZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc3NvU3RhcnRVcmwgJiYgc3NvU3RhcnRVcmwgIT09IHNlc3Npb24uc3NvX3N0YXJ0X3VybCkge1xuICAgICAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgQ29uZmxpY3RpbmcgU1NPIHN0YXJ0X3VybGAgKyBjb25mbGljdE1zZywge1xuICAgICAgICAgIHRyeU5leHRMaW5rOiBmYWxzZSxcbiAgICAgICAgICBsb2dnZXI6IGluaXQubG9nZ2VyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcHJvZmlsZS5zc29fcmVnaW9uID0gc2Vzc2lvbi5zc29fcmVnaW9uO1xuICAgICAgcHJvZmlsZS5zc29fc3RhcnRfdXJsID0gc2Vzc2lvbi5zc29fc3RhcnRfdXJsO1xuICAgIH1cbiAgICBjb25zdCB7IHNzb19zdGFydF91cmwsIHNzb19hY2NvdW50X2lkLCBzc29fcmVnaW9uLCBzc29fcm9sZV9uYW1lLCBzc29fc2Vzc2lvbiB9ID0gdmFsaWRhdGVTc29Qcm9maWxlKFxuICAgICAgcHJvZmlsZSxcbiAgICAgIGluaXQubG9nZ2VyXG4gICAgKTtcbiAgICByZXR1cm4gcmVzb2x2ZVNTT0NyZWRlbnRpYWxzKHtcbiAgICAgIHNzb1N0YXJ0VXJsOiBzc29fc3RhcnRfdXJsLFxuICAgICAgc3NvU2Vzc2lvbjogc3NvX3Nlc3Npb24sXG4gICAgICBzc29BY2NvdW50SWQ6IHNzb19hY2NvdW50X2lkLFxuICAgICAgc3NvUmVnaW9uOiBzc29fcmVnaW9uLFxuICAgICAgc3NvUm9sZU5hbWU6IHNzb19yb2xlX25hbWUsXG4gICAgICBzc29DbGllbnQsXG4gICAgICBjbGllbnRDb25maWc6IGluaXQuY2xpZW50Q29uZmlnLFxuICAgICAgcGFyZW50Q2xpZW50Q29uZmlnOiBpbml0LnBhcmVudENsaWVudENvbmZpZyxcbiAgICAgIHByb2ZpbGU6IHByb2ZpbGVOYW1lXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIXNzb1N0YXJ0VXJsIHx8ICFzc29BY2NvdW50SWQgfHwgIXNzb1JlZ2lvbiB8fCAhc3NvUm9sZU5hbWUpIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcbiAgICAgICdJbmNvbXBsZXRlIGNvbmZpZ3VyYXRpb24uIFRoZSBmcm9tU1NPKCkgYXJndW1lbnQgaGFzaCBtdXN0IGluY2x1ZGUgXCJzc29TdGFydFVybFwiLCBcInNzb0FjY291bnRJZFwiLCBcInNzb1JlZ2lvblwiLCBcInNzb1JvbGVOYW1lXCInLFxuICAgICAgeyB0cnlOZXh0TGluazogZmFsc2UsIGxvZ2dlcjogaW5pdC5sb2dnZXIgfVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc29sdmVTU09DcmVkZW50aWFscyh7XG4gICAgICBzc29TdGFydFVybCxcbiAgICAgIHNzb1Nlc3Npb24sXG4gICAgICBzc29BY2NvdW50SWQsXG4gICAgICBzc29SZWdpb24sXG4gICAgICBzc29Sb2xlTmFtZSxcbiAgICAgIHNzb0NsaWVudCxcbiAgICAgIGNsaWVudENvbmZpZzogaW5pdC5jbGllbnRDb25maWcsXG4gICAgICBwYXJlbnRDbGllbnRDb25maWc6IGluaXQucGFyZW50Q2xpZW50Q29uZmlnLFxuICAgICAgcHJvZmlsZTogcHJvZmlsZU5hbWVcbiAgICB9KTtcbiAgfVxufSwgXCJmcm9tU1NPXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbVNTTyxcbiAgaXNTc29Qcm9maWxlLFxuICB2YWxpZGF0ZVNzb1Byb2ZpbGVcbn0pO1xuXG4iLCAiaW1wb3J0IHsgcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0LCBub3JtYWxpemVQcm92aWRlciB9IGZyb20gXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiO1xuaW1wb3J0IHsgU1RTQ2xpZW50IH0gZnJvbSBcIi4uL1NUU0NsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRTVFNIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciA9IGFzeW5jIChjb25maWcsIGNvbnRleHQsIGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3BlcmF0aW9uOiBnZXRTbWl0aHlDb250ZXh0KGNvbnRleHQpLm9wZXJhdGlvbixcbiAgICAgICAgcmVnaW9uOiAoYXdhaXQgbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnJlZ2lvbikoKSkgfHxcbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgYHJlZ2lvbmAgdG8gYmUgY29uZmlndXJlZCBmb3IgYGF3cy5hdXRoI3NpZ3Y0YFwiKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgfTtcbn07XG5mdW5jdGlvbiBjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiBcInN0c1wiLFxuICAgICAgICAgICAgcmVnaW9uOiBhdXRoUGFyYW1ldGVycy5yZWdpb24sXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnRpZXNFeHRyYWN0b3I6IChjb25maWcsIGNvbnRleHQpID0+ICh7XG4gICAgICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNtaXRoeUFwaU5vQXV0aEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lSWQ6IFwic21pdGh5LmFwaSNub0F1dGhcIixcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTVFNIdHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gKGF1dGhQYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgIHN3aXRjaCAoYXV0aFBhcmFtZXRlcnMub3BlcmF0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5XCI6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVTbWl0aHlBcGlOb0F1dGhIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVTdHNBdXRoQ29uZmlnID0gKGlucHV0KSA9PiBPYmplY3QuYXNzaWduKGlucHV0LCB7XG4gICAgc3RzQ2xpZW50Q3RvcjogU1RTQ2xpZW50LFxufSk7XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ18wID0gcmVzb2x2ZVN0c0F1dGhDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBjb25maWdfMSA9IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyhjb25maWdfMCk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY29uZmlnXzEsIHtcbiAgICAgICAgYXV0aFNjaGVtZVByZWZlcmVuY2U6IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/PyBbXSksXG4gICAgfSk7XG59O1xuIiwgImV4cG9ydCBjb25zdCByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBvcHRpb25zLnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IG9wdGlvbnMudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICB1c2VHbG9iYWxFbmRwb2ludDogb3B0aW9ucy51c2VHbG9iYWxFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFNpZ25pbmdOYW1lOiBcInN0c1wiLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBjb21tb25QYXJhbXMgPSB7XG4gICAgVXNlR2xvYmFsRW5kcG9pbnQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlR2xvYmFsRW5kcG9pbnRcIiB9LFxuICAgIFVzZUZJUFM6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlRmlwc0VuZHBvaW50XCIgfSxcbiAgICBFbmRwb2ludDogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJlbmRwb2ludFwiIH0sXG4gICAgUmVnaW9uOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInJlZ2lvblwiIH0sXG4gICAgVXNlRHVhbFN0YWNrOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUR1YWxzdGFja0VuZHBvaW50XCIgfSxcbn07XG4iLCAiY29uc3QgRiA9IFwicmVxdWlyZWRcIiwgRyA9IFwidHlwZVwiLCBIID0gXCJmblwiLCBJID0gXCJhcmd2XCIsIEogPSBcInJlZlwiO1xuY29uc3QgYSA9IGZhbHNlLCBiID0gdHJ1ZSwgYyA9IFwiYm9vbGVhbkVxdWFsc1wiLCBkID0gXCJzdHJpbmdFcXVhbHNcIiwgZSA9IFwic2lndjRcIiwgZiA9IFwic3RzXCIsIGcgPSBcInVzLWVhc3QtMVwiLCBoID0gXCJlbmRwb2ludFwiLCBpID0gXCJodHRwczovL3N0cy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgaiA9IFwidHJlZVwiLCBrID0gXCJlcnJvclwiLCBsID0gXCJnZXRBdHRyXCIsIG0gPSB7IFtGXTogZmFsc2UsIFtHXTogXCJTdHJpbmdcIiB9LCBuID0geyBbRl06IHRydWUsIFwiZGVmYXVsdFwiOiBmYWxzZSwgW0ddOiBcIkJvb2xlYW5cIiB9LCBvID0geyBbSl06IFwiRW5kcG9pbnRcIiB9LCBwID0geyBbSF06IFwiaXNTZXRcIiwgW0ldOiBbeyBbSl06IFwiUmVnaW9uXCIgfV0gfSwgcSA9IHsgW0pdOiBcIlJlZ2lvblwiIH0sIHIgPSB7IFtIXTogXCJhd3MucGFydGl0aW9uXCIsIFtJXTogW3FdLCBcImFzc2lnblwiOiBcIlBhcnRpdGlvblJlc3VsdFwiIH0sIHMgPSB7IFtKXTogXCJVc2VGSVBTXCIgfSwgdCA9IHsgW0pdOiBcIlVzZUR1YWxTdGFja1wiIH0sIHUgPSB7IFwidXJsXCI6IFwiaHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbVwiLCBcInByb3BlcnRpZXNcIjogeyBcImF1dGhTY2hlbWVzXCI6IFt7IFwibmFtZVwiOiBlLCBcInNpZ25pbmdOYW1lXCI6IGYsIFwic2lnbmluZ1JlZ2lvblwiOiBnIH1dIH0sIFwiaGVhZGVyc1wiOiB7fSB9LCB2ID0ge30sIHcgPSB7IFwiY29uZGl0aW9uc1wiOiBbeyBbSF06IGQsIFtJXTogW3EsIFwiYXdzLWdsb2JhbFwiXSB9XSwgW2hdOiB1LCBbR106IGggfSwgeCA9IHsgW0hdOiBjLCBbSV06IFtzLCB0cnVlXSB9LCB5ID0geyBbSF06IGMsIFtJXTogW3QsIHRydWVdIH0sIHogPSB7IFtIXTogbCwgW0ldOiBbeyBbSl06IFwiUGFydGl0aW9uUmVzdWx0XCIgfSwgXCJzdXBwb3J0c0ZJUFNcIl0gfSwgQSA9IHsgW0pdOiBcIlBhcnRpdGlvblJlc3VsdFwiIH0sIEIgPSB7IFtIXTogYywgW0ldOiBbdHJ1ZSwgeyBbSF06IGwsIFtJXTogW0EsIFwic3VwcG9ydHNEdWFsU3RhY2tcIl0gfV0gfSwgQyA9IFt7IFtIXTogXCJpc1NldFwiLCBbSV06IFtvXSB9XSwgRCA9IFt4XSwgRSA9IFt5XTtcbmNvbnN0IF9kYXRhID0geyB2ZXJzaW9uOiBcIjEuMFwiLCBwYXJhbWV0ZXJzOiB7IFJlZ2lvbjogbSwgVXNlRHVhbFN0YWNrOiBuLCBVc2VGSVBTOiBuLCBFbmRwb2ludDogbSwgVXNlR2xvYmFsRW5kcG9pbnQ6IG4gfSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFtIXTogYywgW0ldOiBbeyBbSl06IFwiVXNlR2xvYmFsRW5kcG9pbnRcIiB9LCBiXSB9LCB7IFtIXTogXCJub3RcIiwgW0ldOiBDIH0sIHAsIHIsIHsgW0hdOiBjLCBbSV06IFtzLCBhXSB9LCB7IFtIXTogYywgW0ldOiBbdCwgYV0gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbSF06IGQsIFtJXTogW3EsIFwiYXAtbm9ydGhlYXN0LTFcIl0gfV0sIGVuZHBvaW50OiB1LCBbR106IGggfSwgeyBjb25kaXRpb25zOiBbeyBbSF06IGQsIFtJXTogW3EsIFwiYXAtc291dGgtMVwiXSB9XSwgZW5kcG9pbnQ6IHUsIFtHXTogaCB9LCB7IGNvbmRpdGlvbnM6IFt7IFtIXTogZCwgW0ldOiBbcSwgXCJhcC1zb3V0aGVhc3QtMVwiXSB9XSwgZW5kcG9pbnQ6IHUsIFtHXTogaCB9LCB7IGNvbmRpdGlvbnM6IFt7IFtIXTogZCwgW0ldOiBbcSwgXCJhcC1zb3V0aGVhc3QtMlwiXSB9XSwgZW5kcG9pbnQ6IHUsIFtHXTogaCB9LCB3LCB7IGNvbmRpdGlvbnM6IFt7IFtIXTogZCwgW0ldOiBbcSwgXCJjYS1jZW50cmFsLTFcIl0gfV0sIGVuZHBvaW50OiB1LCBbR106IGggfSwgeyBjb25kaXRpb25zOiBbeyBbSF06IGQsIFtJXTogW3EsIFwiZXUtY2VudHJhbC0xXCJdIH1dLCBlbmRwb2ludDogdSwgW0ddOiBoIH0sIHsgY29uZGl0aW9uczogW3sgW0hdOiBkLCBbSV06IFtxLCBcImV1LW5vcnRoLTFcIl0gfV0sIGVuZHBvaW50OiB1LCBbR106IGggfSwgeyBjb25kaXRpb25zOiBbeyBbSF06IGQsIFtJXTogW3EsIFwiZXUtd2VzdC0xXCJdIH1dLCBlbmRwb2ludDogdSwgW0ddOiBoIH0sIHsgY29uZGl0aW9uczogW3sgW0hdOiBkLCBbSV06IFtxLCBcImV1LXdlc3QtMlwiXSB9XSwgZW5kcG9pbnQ6IHUsIFtHXTogaCB9LCB7IGNvbmRpdGlvbnM6IFt7IFtIXTogZCwgW0ldOiBbcSwgXCJldS13ZXN0LTNcIl0gfV0sIGVuZHBvaW50OiB1LCBbR106IGggfSwgeyBjb25kaXRpb25zOiBbeyBbSF06IGQsIFtJXTogW3EsIFwic2EtZWFzdC0xXCJdIH1dLCBlbmRwb2ludDogdSwgW0ddOiBoIH0sIHsgY29uZGl0aW9uczogW3sgW0hdOiBkLCBbSV06IFtxLCBnXSB9XSwgZW5kcG9pbnQ6IHUsIFtHXTogaCB9LCB7IGNvbmRpdGlvbnM6IFt7IFtIXTogZCwgW0ldOiBbcSwgXCJ1cy1lYXN0LTJcIl0gfV0sIGVuZHBvaW50OiB1LCBbR106IGggfSwgeyBjb25kaXRpb25zOiBbeyBbSF06IGQsIFtJXTogW3EsIFwidXMtd2VzdC0xXCJdIH1dLCBlbmRwb2ludDogdSwgW0ddOiBoIH0sIHsgY29uZGl0aW9uczogW3sgW0hdOiBkLCBbSV06IFtxLCBcInVzLXdlc3QtMlwiXSB9XSwgZW5kcG9pbnQ6IHUsIFtHXTogaCB9LCB7IGVuZHBvaW50OiB7IHVybDogaSwgcHJvcGVydGllczogeyBhdXRoU2NoZW1lczogW3sgbmFtZTogZSwgc2lnbmluZ05hbWU6IGYsIHNpZ25pbmdSZWdpb246IFwie1JlZ2lvbn1cIiB9XSB9LCBoZWFkZXJzOiB2IH0sIFtHXTogaCB9XSwgW0ddOiBqIH0sIHsgY29uZGl0aW9uczogQywgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IEQsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRklQUyBhbmQgY3VzdG9tIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIFtHXTogayB9LCB7IGNvbmRpdGlvbnM6IEUsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRHVhbHN0YWNrIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgW0ddOiBrIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBvLCBwcm9wZXJ0aWVzOiB2LCBoZWFkZXJzOiB2IH0sIFtHXTogaCB9XSwgW0ddOiBqIH0sIHsgY29uZGl0aW9uczogW3BdLCBydWxlczogW3sgY29uZGl0aW9uczogW3JdLCBydWxlczogW3sgY29uZGl0aW9uczogW3gsIHldLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW0hdOiBjLCBbSV06IFtiLCB6XSB9LCBCXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3N0cy1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiB2LCBoZWFkZXJzOiB2IH0sIFtHXTogaCB9XSwgW0ddOiBqIH0sIHsgZXJyb3I6IFwiRklQUyBhbmQgRHVhbFN0YWNrIGFyZSBlbmFibGVkLCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBvbmUgb3IgYm90aFwiLCBbR106IGsgfV0sIFtHXTogaiB9LCB7IGNvbmRpdGlvbnM6IEQsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbSF06IGMsIFtJXTogW3osIGJdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW0hdOiBkLCBbSV06IFt7IFtIXTogbCwgW0ldOiBbQSwgXCJuYW1lXCJdIH0sIFwiYXdzLXVzLWdvdlwiXSB9XSwgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vc3RzLntSZWdpb259LmFtYXpvbmF3cy5jb21cIiwgcHJvcGVydGllczogdiwgaGVhZGVyczogdiB9LCBbR106IGggfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9zdHMtZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogdiwgaGVhZGVyczogdiB9LCBbR106IGggfV0sIFtHXTogaiB9LCB7IGVycm9yOiBcIkZJUFMgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBGSVBTXCIsIFtHXTogayB9XSwgW0ddOiBqIH0sIHsgY29uZGl0aW9uczogRSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtCXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3N0cy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogdiwgaGVhZGVyczogdiB9LCBbR106IGggfV0sIFtHXTogaiB9LCB7IGVycm9yOiBcIkR1YWxTdGFjayBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IER1YWxTdGFja1wiLCBbR106IGsgfV0sIFtHXTogaiB9LCB3LCB7IGVuZHBvaW50OiB7IHVybDogaSwgcHJvcGVydGllczogdiwgaGVhZGVyczogdiB9LCBbR106IGggfV0sIFtHXTogaiB9XSwgW0ddOiBqIH0sIHsgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBNaXNzaW5nIFJlZ2lvblwiLCBbR106IGsgfV0gfTtcbmV4cG9ydCBjb25zdCBydWxlU2V0ID0gX2RhdGE7XG4iLCAiaW1wb3J0IHsgYXdzRW5kcG9pbnRGdW5jdGlvbnMgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLCBFbmRwb2ludENhY2hlLCByZXNvbHZlRW5kcG9pbnQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWVuZHBvaW50c1wiO1xuaW1wb3J0IHsgcnVsZVNldCB9IGZyb20gXCIuL3J1bGVzZXRcIjtcbmNvbnN0IGNhY2hlID0gbmV3IEVuZHBvaW50Q2FjaGUoe1xuICAgIHNpemU6IDUwLFxuICAgIHBhcmFtczogW1wiRW5kcG9pbnRcIiwgXCJSZWdpb25cIiwgXCJVc2VEdWFsU3RhY2tcIiwgXCJVc2VGSVBTXCIsIFwiVXNlR2xvYmFsRW5kcG9pbnRcIl0sXG59KTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciA9IChlbmRwb2ludFBhcmFtcywgY29udGV4dCA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChlbmRwb2ludFBhcmFtcywgKCkgPT4gcmVzb2x2ZUVuZHBvaW50KHJ1bGVTZXQsIHtcbiAgICAgICAgZW5kcG9pbnRQYXJhbXM6IGVuZHBvaW50UGFyYW1zLFxuICAgICAgICBsb2dnZXI6IGNvbnRleHQubG9nZ2VyLFxuICAgIH0pKTtcbn07XG5jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5hd3MgPSBhd3NFbmRwb2ludEZ1bmN0aW9ucztcbiIsICJpbXBvcnQgeyBBd3NTZGtTaWdWNFNpZ25lciB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBOb0F1dGhTaWduZXIgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBOb09wTG9nZ2VyIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tIFwiQHNtaXRoeS91cmwtcGFyc2VyXCI7XG5pbXBvcnQgeyBmcm9tQmFzZTY0LCB0b0Jhc2U2NCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYmFzZTY0XCI7XG5pbXBvcnQgeyBmcm9tVXRmOCwgdG9VdGY4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBkZWZhdWx0U1RTSHR0cEF1dGhTY2hlbWVQcm92aWRlciB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgfSBmcm9tIFwiLi9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyXCI7XG5leHBvcnQgY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlWZXJzaW9uOiBcIjIwMTEtMDYtMTVcIixcbiAgICAgICAgYmFzZTY0RGVjb2RlcjogY29uZmlnPy5iYXNlNjREZWNvZGVyID8/IGZyb21CYXNlNjQsXG4gICAgICAgIGJhc2U2NEVuY29kZXI6IGNvbmZpZz8uYmFzZTY0RW5jb2RlciA/PyB0b0Jhc2U2NCxcbiAgICAgICAgZGlzYWJsZUhvc3RQcmVmaXg6IGNvbmZpZz8uZGlzYWJsZUhvc3RQcmVmaXggPz8gZmFsc2UsXG4gICAgICAgIGVuZHBvaW50UHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnRQcm92aWRlciA/PyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlcixcbiAgICAgICAgZXh0ZW5zaW9uczogY29uZmlnPy5leHRlbnNpb25zID8/IFtdLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPz8gZGVmYXVsdFNUU0h0dHBBdXRoU2NoZW1lUHJvdmlkZXIsXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBBd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlbWVJZDogXCJzbWl0aHkuYXBpI25vQXV0aFwiLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXI6IChpcGMpID0+IGlwYy5nZXRJZGVudGl0eVByb3ZpZGVyKFwic21pdGh5LmFwaSNub0F1dGhcIikgfHwgKGFzeW5jICgpID0+ICh7fSkpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IE5vQXV0aFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbG9nZ2VyOiBjb25maWc/LmxvZ2dlciA/PyBuZXcgTm9PcExvZ2dlcigpLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbmZpZz8uc2VydmljZUlkID8/IFwiU1RTXCIsXG4gICAgICAgIHVybFBhcnNlcjogY29uZmlnPy51cmxQYXJzZXIgPz8gcGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IGZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB0b1V0ZjgsXG4gICAgfTtcbn07XG4iLCAiaW1wb3J0IHBhY2thZ2VJbmZvIGZyb20gXCIuLi8uLi8uLi9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB7IEF3c1Nka1NpZ1Y0U2lnbmVyLCBOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUywgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiBhcyBhd3NDaGVja1ZlcnNpb24sIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TLCBjcmVhdGVEZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGVcIjtcbmltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMsIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBOb0F1dGhTaWduZXIgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBIYXNoIH0gZnJvbSBcIkBzbWl0aHkvaGFzaC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnIGFzIGxvYWROb2RlQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIjtcbmltcG9ydCB7IE5vZGVIdHRwSGFuZGxlciBhcyBSZXF1ZXN0SGFuZGxlciwgc3RyZWFtQ29sbGVjdG9yIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXJcIjtcbmltcG9ydCB7IGNhbGN1bGF0ZUJvZHlMZW5ndGggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGVcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfTU9ERSB9IGZyb20gXCJAc21pdGh5L3V0aWwtcmV0cnlcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgZ2V0U2hhcmVkUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWcuc2hhcmVkXCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlXCI7XG5pbXBvcnQgeyBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGdldFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbihwcm9jZXNzLnZlcnNpb24pO1xuICAgIGNvbnN0IGRlZmF1bHRzTW9kZSA9IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIgPSAoKSA9PiBkZWZhdWx0c01vZGUoKS50aGVuKGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUpO1xuICAgIGNvbnN0IGNsaWVudFNoYXJlZFZhbHVlcyA9IGdldFNoYXJlZFJ1bnRpbWVDb25maWcoY29uZmlnKTtcbiAgICBhd3NDaGVja1ZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBwcm9maWxlQ29uZmlnID0geyBwcm9maWxlOiBjb25maWc/LnByb2ZpbGUgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jbGllbnRTaGFyZWRWYWx1ZXMsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgcnVudGltZTogXCJub2RlXCIsXG4gICAgICAgIGRlZmF1bHRzTW9kZSxcbiAgICAgICAgYXV0aFNjaGVtZVByZWZlcmVuY2U6IGNvbmZpZz8uYXV0aFNjaGVtZVByZWZlcmVuY2UgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX09QVElPTlMsIHByb2ZpbGVDb25maWcpLFxuICAgICAgICBib2R5TGVuZ3RoQ2hlY2tlcjogY29uZmlnPy5ib2R5TGVuZ3RoQ2hlY2tlciA/PyBjYWxjdWxhdGVCb2R5TGVuZ3RoLFxuICAgICAgICBkZWZhdWx0VXNlckFnZW50UHJvdmlkZXI6IGNvbmZpZz8uZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyID8/XG4gICAgICAgICAgICBjcmVhdGVEZWZhdWx0VXNlckFnZW50UHJvdmlkZXIoeyBzZXJ2aWNlSWQ6IGNsaWVudFNoYXJlZFZhbHVlcy5zZXJ2aWNlSWQsIGNsaWVudFZlcnNpb246IHBhY2thZ2VJbmZvLnZlcnNpb24gfSksXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSB8fFxuICAgICAgICAgICAgICAgICAgICAoYXN5bmMgKGlkUHJvcHMpID0+IGF3YWl0IGNvbmZpZy5jcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyKGlkUHJvcHM/Ll9fY29uZmlnIHx8IHt9KSgpKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBBd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlbWVJZDogXCJzbWl0aHkuYXBpI25vQXV0aFwiLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXI6IChpcGMpID0+IGlwYy5nZXRJZGVudGl0eVByb3ZpZGVyKFwic21pdGh5LmFwaSNub0F1dGhcIikgfHwgKGFzeW5jICgpID0+ICh7fSkpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IE5vQXV0aFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbWF4QXR0ZW1wdHM6IGNvbmZpZz8ubWF4QXR0ZW1wdHMgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgY29uZmlnKSxcbiAgICAgICAgcmVnaW9uOiBjb25maWc/LnJlZ2lvbiA/P1xuICAgICAgICAgICAgbG9hZE5vZGVDb25maWcoTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIHsgLi4uTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUywgLi4ucHJvZmlsZUNvbmZpZyB9KSxcbiAgICAgICAgcmVxdWVzdEhhbmRsZXI6IFJlcXVlc3RIYW5kbGVyLmNyZWF0ZShjb25maWc/LnJlcXVlc3RIYW5kbGVyID8/IGRlZmF1bHRDb25maWdQcm92aWRlciksXG4gICAgICAgIHJldHJ5TW9kZTogY29uZmlnPy5yZXRyeU1vZGUgPz9cbiAgICAgICAgICAgIGxvYWROb2RlQ29uZmlnKHtcbiAgICAgICAgICAgICAgICAuLi5OT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYXN5bmMgKCkgPT4gKGF3YWl0IGRlZmF1bHRDb25maWdQcm92aWRlcigpKS5yZXRyeU1vZGUgfHwgREVGQVVMVF9SRVRSWV9NT0RFLFxuICAgICAgICAgICAgfSwgY29uZmlnKSxcbiAgICAgICAgc2hhMjU2OiBjb25maWc/LnNoYTI1NiA/PyBIYXNoLmJpbmQobnVsbCwgXCJzaGEyNTZcIiksXG4gICAgICAgIHN0cmVhbUNvbGxlY3RvcjogY29uZmlnPy5zdHJlYW1Db2xsZWN0b3IgPz8gc3RyZWFtQ29sbGVjdG9yLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogY29uZmlnPy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIHByb2ZpbGVDb25maWcpLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGNvbmZpZz8udXNlRmlwc0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIHByb2ZpbGVDb25maWcpLFxuICAgICAgICB1c2VyQWdlbnRBcHBJZDogY29uZmlnPy51c2VyQWdlbnRBcHBJZCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgfTtcbn07XG4iLCAiZXhwb3J0IGNvbnN0IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgY29uc3QgX2h0dHBBdXRoU2NoZW1lcyA9IHJ1bnRpbWVDb25maWcuaHR0cEF1dGhTY2hlbWVzO1xuICAgIGxldCBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IHJ1bnRpbWVDb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICBsZXQgX2NyZWRlbnRpYWxzID0gcnVudGltZUNvbmZpZy5jcmVkZW50aWFscztcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRIdHRwQXV0aFNjaGVtZShodHRwQXV0aFNjaGVtZSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBfaHR0cEF1dGhTY2hlbWVzLmZpbmRJbmRleCgoc2NoZW1lKSA9PiBzY2hlbWUuc2NoZW1lSWQgPT09IGh0dHBBdXRoU2NoZW1lLnNjaGVtZUlkKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnB1c2goaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5zcGxpY2UoaW5kZXgsIDEsIGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9odHRwQXV0aFNjaGVtZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoaHR0cEF1dGhTY2hlbWVQcm92aWRlcikge1xuICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBodHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXRDcmVkZW50aWFscyhjcmVkZW50aWFscykge1xuICAgICAgICAgICAgX2NyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnLmh0dHBBdXRoU2NoZW1lcygpLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpLFxuICAgICAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzKCksXG4gICAgfTtcbn07XG4iLCAiaW1wb3J0IHsgZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIH0gZnJvbSBcIkBhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyA9IChydW50aW1lQ29uZmlnLCBleHRlbnNpb25zKSA9PiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyksIGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKTtcbiAgICBleHRlbnNpb25zLmZvckVhY2goKGV4dGVuc2lvbikgPT4gZXh0ZW5zaW9uLmNvbmZpZ3VyZShleHRlbnNpb25Db25maWd1cmF0aW9uKSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocnVudGltZUNvbmZpZywgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24oZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSk7XG59O1xuIiwgImltcG9ydCB7IGdldEhvc3RIZWFkZXJQbHVnaW4sIHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWhvc3QtaGVhZGVyXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXJQbHVnaW4gfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1sb2dnZXJcIjtcbmltcG9ydCB7IGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXJlY3Vyc2lvbi1kZXRlY3Rpb25cIjtcbmltcG9ydCB7IGdldFVzZXJBZ2VudFBsdWdpbiwgcmVzb2x2ZVVzZXJBZ2VudENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyByZXNvbHZlUmVnaW9uQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZywgZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4sIGdldEh0dHBTaWduaW5nUGx1Z2luLCB9IGZyb20gXCJAc21pdGh5L2NvcmVcIjtcbmltcG9ydCB7IGdldENvbnRlbnRMZW5ndGhQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoXCI7XG5pbXBvcnQgeyByZXNvbHZlRW5kcG9pbnRDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRSZXRyeVBsdWdpbiwgcmVzb2x2ZVJldHJ5Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgQ2xpZW50IGFzIF9fQ2xpZW50LCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGRlZmF1bHRTVFNIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciwgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnLCB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycywgfSBmcm9tIFwiLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgX19nZXRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcnVudGltZUNvbmZpZ1wiO1xuaW1wb3J0IHsgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zIH0gZnJvbSBcIi4vcnVudGltZUV4dGVuc2lvbnNcIjtcbmV4cG9ydCB7IF9fQ2xpZW50IH07XG5leHBvcnQgY2xhc3MgU1RTQ2xpZW50IGV4dGVuZHMgX19DbGllbnQge1xuICAgIGNvbmZpZztcbiAgICBjb25zdHJ1Y3RvciguLi5bY29uZmlndXJhdGlvbl0pIHtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18wID0gX19nZXRSdW50aW1lQ29uZmlnKGNvbmZpZ3VyYXRpb24gfHwge30pO1xuICAgICAgICBzdXBlcihfY29uZmlnXzApO1xuICAgICAgICB0aGlzLmluaXRDb25maWcgPSBfY29uZmlnXzA7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMSA9IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMoX2NvbmZpZ18wKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18yID0gcmVzb2x2ZVVzZXJBZ2VudENvbmZpZyhfY29uZmlnXzEpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzMgPSByZXNvbHZlUmV0cnlDb25maWcoX2NvbmZpZ18yKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ180ID0gcmVzb2x2ZVJlZ2lvbkNvbmZpZyhfY29uZmlnXzMpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzUgPSByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhfY29uZmlnXzQpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzYgPSByZXNvbHZlRW5kcG9pbnRDb25maWcoX2NvbmZpZ181KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ183ID0gcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnKF9jb25maWdfNik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfOCA9IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyhfY29uZmlnXzcsIGNvbmZpZ3VyYXRpb24/LmV4dGVuc2lvbnMgfHwgW10pO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IF9jb25maWdfODtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFVzZXJBZ2VudFBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0UmV0cnlQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldENvbnRlbnRMZW5ndGhQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEhvc3RIZWFkZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldExvZ2dlclBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbih0aGlzLmNvbmZpZywge1xuICAgICAgICAgICAgaHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXI6IGRlZmF1bHRTVFNIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcixcbiAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcjogYXN5bmMgKGNvbmZpZykgPT4gbmV3IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnKHtcbiAgICAgICAgICAgICAgICBcImF3cy5hdXRoI3NpZ3Y0XCI6IGNvbmZpZy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIdHRwU2lnbmluZ1BsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFNlcnZpY2VFeGNlcHRpb24gYXMgX19TZXJ2aWNlRXhjZXB0aW9uLCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmV4cG9ydCB7IF9fU2VydmljZUV4Y2VwdGlvbiB9O1xuZXhwb3J0IGNsYXNzIFNUU1NlcnZpY2VFeGNlcHRpb24gZXh0ZW5kcyBfX1NlcnZpY2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTVFNTZXJ2aWNlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFNFTlNJVElWRV9TVFJJTkcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBTVFNTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuL1NUU1NlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjb25zdCBDcmVkZW50aWFsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2VjcmV0QWNjZXNzS2V5ICYmIHsgU2VjcmV0QWNjZXNzS2V5OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQXNzdW1lUm9sZVJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DcmVkZW50aWFscyAmJiB7IENyZWRlbnRpYWxzOiBDcmVkZW50aWFsc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3JlZGVudGlhbHMpIH0pLFxufSk7XG5leHBvcnQgY2xhc3MgRXhwaXJlZFRva2VuRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJFeHBpcmVkVG9rZW5FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFeHBpcmVkVG9rZW5FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRXhwaXJlZFRva2VuRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJNYWxmb3JtZWRQb2xpY3lEb2N1bWVudEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk1hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE1hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBhY2tlZFBvbGljeVRvb0xhcmdlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJQYWNrZWRQb2xpY3lUb29MYXJnZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlBhY2tlZFBvbGljeVRvb0xhcmdlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFBhY2tlZFBvbGljeVRvb0xhcmdlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlZ2lvbkRpc2FibGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJSZWdpb25EaXNhYmxlZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlZ2lvbkRpc2FibGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlZ2lvbkRpc2FibGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIElEUFJlamVjdGVkQ2xhaW1FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIklEUFJlamVjdGVkQ2xhaW1FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJRFBSZWplY3RlZENsYWltRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIElEUFJlamVjdGVkQ2xhaW1FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZElkZW50aXR5VG9rZW5FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRJZGVudGl0eVRva2VuRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZElkZW50aXR5VG9rZW5FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZElkZW50aXR5VG9rZW5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eVJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLldlYklkZW50aXR5VG9rZW4gJiYgeyBXZWJJZGVudGl0eVRva2VuOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eVJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DcmVkZW50aWFscyAmJiB7IENyZWRlbnRpYWxzOiBDcmVkZW50aWFsc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3JlZGVudGlhbHMpIH0pLFxufSk7XG5leHBvcnQgY2xhc3MgSURQQ29tbXVuaWNhdGlvbkVycm9yRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJRFBDb21tdW5pY2F0aW9uRXJyb3JFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJRFBDb21tdW5pY2F0aW9uRXJyb3JFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSURQQ29tbXVuaWNhdGlvbkVycm9yRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IHBhcnNlWG1sQm9keSBhcyBwYXJzZUJvZHksIHBhcnNlWG1sRXJyb3JCb2R5IGFzIHBhcnNlRXJyb3JCb2R5IH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IEh0dHBSZXF1ZXN0IGFzIF9fSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBjb2xsZWN0Qm9keSwgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uLCBleHBlY3ROb25OdWxsIGFzIF9fZXhwZWN0Tm9uTnVsbCwgZXhwZWN0U3RyaW5nIGFzIF9fZXhwZWN0U3RyaW5nLCBleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCBhcyBfX2V4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50LCBwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQgYXMgX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQsIHN0cmljdFBhcnNlSW50MzIgYXMgX19zdHJpY3RQYXJzZUludDMyLCB3aXRoQmFzZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBFeHBpcmVkVG9rZW5FeGNlcHRpb24sIElEUENvbW11bmljYXRpb25FcnJvckV4Y2VwdGlvbiwgSURQUmVqZWN0ZWRDbGFpbUV4Y2VwdGlvbiwgSW52YWxpZElkZW50aXR5VG9rZW5FeGNlcHRpb24sIE1hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uLCBQYWNrZWRQb2xpY3lUb29MYXJnZUV4Y2VwdGlvbiwgUmVnaW9uRGlzYWJsZWRFeGNlcHRpb24sIH0gZnJvbSBcIi4uL21vZGVscy9tb2RlbHNfMFwiO1xuaW1wb3J0IHsgU1RTU2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL1NUU1NlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjb25zdCBzZV9Bc3N1bWVSb2xlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Fzc3VtZVJvbGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0FSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Fzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0FSV1dJLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBkZV9Bc3N1bWVSb2xlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9Bc3N1bWVSb2xlUmVzcG9uc2UoZGF0YS5Bc3N1bWVSb2xlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5UmVzcG9uc2UoZGF0YS5Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IGRlX0NvbW1hbmRFcnJvciA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBwYXJzZWRPdXRwdXQgPSB7XG4gICAgICAgIC4uLm91dHB1dCxcbiAgICAgICAgYm9keTogYXdhaXQgcGFyc2VFcnJvckJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3JDb2RlID0gbG9hZFF1ZXJ5RXJyb3JDb2RlKG91dHB1dCwgcGFyc2VkT3V0cHV0LmJvZHkpO1xuICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgXCJFeHBpcmVkVG9rZW5FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3RzI0V4cGlyZWRUb2tlbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXhwaXJlZFRva2VuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJNYWxmb3JtZWRQb2xpY3lEb2N1bWVudFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zdHMjTWFsZm9ybWVkUG9saWN5RG9jdW1lbnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX01hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJQYWNrZWRQb2xpY3lUb29MYXJnZVwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zdHMjUGFja2VkUG9saWN5VG9vTGFyZ2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1BhY2tlZFBvbGljeVRvb0xhcmdlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZWdpb25EaXNhYmxlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zdHMjUmVnaW9uRGlzYWJsZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1JlZ2lvbkRpc2FibGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJRFBDb21tdW5pY2F0aW9uRXJyb3JcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc3RzI0lEUENvbW11bmljYXRpb25FcnJvckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSURQQ29tbXVuaWNhdGlvbkVycm9yRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJRFBSZWplY3RlZENsYWltXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnN0cyNJRFBSZWplY3RlZENsYWltRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JRFBSZWplY3RlZENsYWltRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkSWRlbnRpdHlUb2tlblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zdHMjSW52YWxpZElkZW50aXR5VG9rZW5FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRJZGVudGl0eVRva2VuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRCb2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dEZWZhdWx0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBwYXJzZWRCb2R5OiBwYXJzZWRCb2R5LkVycm9yLFxuICAgICAgICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCBkZV9FeHBpcmVkVG9rZW5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0V4cGlyZWRUb2tlbkV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXhwaXJlZFRva2VuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JRFBDb21tdW5pY2F0aW9uRXJyb3JFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0lEUENvbW11bmljYXRpb25FcnJvckV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSURQQ29tbXVuaWNhdGlvbkVycm9yRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JRFBSZWplY3RlZENsYWltRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JRFBSZWplY3RlZENsYWltRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJRFBSZWplY3RlZENsYWltRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkSWRlbnRpdHlUb2tlbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZElkZW50aXR5VG9rZW5FeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRJZGVudGl0eVRva2VuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9NYWxmb3JtZWRQb2xpY3lEb2N1bWVudEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfTWFsZm9ybWVkUG9saWN5RG9jdW1lbnRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE1hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9QYWNrZWRQb2xpY3lUb29MYXJnZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfUGFja2VkUG9saWN5VG9vTGFyZ2VFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFBhY2tlZFBvbGljeVRvb0xhcmdlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SZWdpb25EaXNhYmxlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfUmVnaW9uRGlzYWJsZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlZ2lvbkRpc2FibGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBzZV9Bc3N1bWVSb2xlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JBXSA9IGlucHV0W19SQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfcG9saWN5RGVzY3JpcHRvckxpc3RUeXBlKGlucHV0W19QQV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1BBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlBvbGljeUFybnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBQb2xpY3lBcm5zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EU10gPSBpbnB1dFtfRFNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX3RhZ0xpc3RUeXBlKGlucHV0W19UXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UYWdzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RUS10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfdGFnS2V5TGlzdFR5cGUoaW5wdXRbX1RUS10sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RUS10/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UcmFuc2l0aXZlVGFnS2V5cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRyYW5zaXRpdmVUYWdLZXlzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRUldID0gaW5wdXRbX0VJXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TTl0gPSBpbnB1dFtfU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RDXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RDXSA9IGlucHV0W19UQ107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU0ldID0gaW5wdXRbX1NJXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QQ10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUHJvdmlkZWRDb250ZXh0c0xpc3RUeXBlKGlucHV0W19QQ10sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1BDXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlByb3ZpZGVkQ29udGV4dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBQcm92aWRlZENvbnRleHRzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Fzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUkFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFdID0gaW5wdXRbX1JBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1dJVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19XSVRdID0gaW5wdXRbX1dJVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUEldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUEldID0gaW5wdXRbX1BJXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfcG9saWN5RGVzY3JpcHRvckxpc3RUeXBlKGlucHV0W19QQV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1BBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlBvbGljeUFybnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBQb2xpY3lBcm5zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EU10gPSBpbnB1dFtfRFNdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9wb2xpY3lEZXNjcmlwdG9yTGlzdFR5cGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUG9saWN5RGVzY3JpcHRvclR5cGUoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1BvbGljeURlc2NyaXB0b3JUeXBlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19hXSA9IGlucHV0W19hXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHJvdmlkZWRDb250ZXh0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUEFyXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BBcl0gPSBpbnB1dFtfUEFyXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DQV0gPSBpbnB1dFtfQ0FdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Qcm92aWRlZENvbnRleHRzTGlzdFR5cGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUHJvdmlkZWRDb250ZXh0KGVudHJ5LCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfS4ke2tleX1gXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9UYWcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19LXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0tdID0gaW5wdXRbX0tdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1ZhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ZhXSA9IGlucHV0W19WYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX3RhZ0tleUxpc3RUeXBlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX3RhZ0xpc3RUeXBlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZyhlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3QgZGVfQXNzdW1lZFJvbGVVc2VyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQVJJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BUkldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BUkldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQXJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FyXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQXJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Fzc3VtZVJvbGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NdID0gZGVfQ3JlZGVudGlhbHMob3V0cHV0W19DXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FSVV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVJVXSA9IGRlX0Fzc3VtZWRSb2xlVXNlcihvdXRwdXRbX0FSVV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19QUFNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1BQU10gPSBfX3N0cmljdFBhcnNlSW50MzIob3V0cHV0W19QUFNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NJXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU0ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Fzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NdID0gZGVfQ3JlZGVudGlhbHMob3V0cHV0W19DXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NGV0lUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TRldJVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NGV0lUXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FSVV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVJVXSA9IGRlX0Fzc3VtZWRSb2xlVXNlcihvdXRwdXRbX0FSVV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19QUFNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1BQU10gPSBfX3N0cmljdFBhcnNlSW50MzIob3V0cHV0W19QUFNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUHJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ByXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfUHJdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQXVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0F1XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQXVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NJXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU0ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0NyZWRlbnRpYWxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQUtJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BS0ldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BS0ldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0FLXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQUtdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TQUtdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1RdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NUXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU1RdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRV0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19FXSkpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRXhwaXJlZFRva2VuRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0lEUENvbW11bmljYXRpb25FcnJvckV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JRFBSZWplY3RlZENsYWltRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRJZGVudGl0eVRva2VuRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01hbGZvcm1lZFBvbGljeURvY3VtZW50RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1BhY2tlZFBvbGljeVRvb0xhcmdlRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1JlZ2lvbkRpc2FibGVkRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlc2VyaWFsaXplTWV0YWRhdGEgPSAob3V0cHV0KSA9PiAoe1xuICAgIGh0dHBTdGF0dXNDb2RlOiBvdXRwdXQuc3RhdHVzQ29kZSxcbiAgICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgICBleHRlbmRlZFJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdLFxuICAgIGNmSWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotY2YtaWRcIl0sXG59KTtcbmNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHksIGNvbnRleHQpID0+IGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuY29uc3QgdGhyb3dEZWZhdWx0RXJyb3IgPSB3aXRoQmFzZUV4Y2VwdGlvbihfX0Jhc2VFeGNlcHRpb24pO1xuY29uc3QgYnVpbGRIdHRwUnBjUmVxdWVzdCA9IGFzeW5jIChjb250ZXh0LCBoZWFkZXJzLCBwYXRoLCByZXNvbHZlZEhvc3RuYW1lLCBib2R5KSA9PiB7XG4gICAgY29uc3QgeyBob3N0bmFtZSwgcHJvdG9jb2wgPSBcImh0dHBzXCIsIHBvcnQsIHBhdGg6IGJhc2VQYXRoIH0gPSBhd2FpdCBjb250ZXh0LmVuZHBvaW50KCk7XG4gICAgY29uc3QgY29udGVudHMgPSB7XG4gICAgICAgIHByb3RvY29sLFxuICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgcG9ydCxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgcGF0aDogYmFzZVBhdGguZW5kc1dpdGgoXCIvXCIpID8gYmFzZVBhdGguc2xpY2UoMCwgLTEpICsgcGF0aCA6IGJhc2VQYXRoICsgcGF0aCxcbiAgICAgICAgaGVhZGVycyxcbiAgICB9O1xuICAgIGlmIChyZXNvbHZlZEhvc3RuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGVudHMuaG9zdG5hbWUgPSByZXNvbHZlZEhvc3RuYW1lO1xuICAgIH1cbiAgICBpZiAoYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRlbnRzLmJvZHkgPSBib2R5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9fSHR0cFJlcXVlc3QoY29udGVudHMpO1xufTtcbmNvbnN0IFNIQVJFRF9IRUFERVJTID0ge1xuICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG59O1xuY29uc3QgXyA9IFwiMjAxMS0wNi0xNVwiO1xuY29uc3QgX0EgPSBcIkFjdGlvblwiO1xuY29uc3QgX0FLSSA9IFwiQWNjZXNzS2V5SWRcIjtcbmNvbnN0IF9BUiA9IFwiQXNzdW1lUm9sZVwiO1xuY29uc3QgX0FSSSA9IFwiQXNzdW1lZFJvbGVJZFwiO1xuY29uc3QgX0FSVSA9IFwiQXNzdW1lZFJvbGVVc2VyXCI7XG5jb25zdCBfQVJXV0kgPSBcIkFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlcIjtcbmNvbnN0IF9BciA9IFwiQXJuXCI7XG5jb25zdCBfQXUgPSBcIkF1ZGllbmNlXCI7XG5jb25zdCBfQyA9IFwiQ3JlZGVudGlhbHNcIjtcbmNvbnN0IF9DQSA9IFwiQ29udGV4dEFzc2VydGlvblwiO1xuY29uc3QgX0RTID0gXCJEdXJhdGlvblNlY29uZHNcIjtcbmNvbnN0IF9FID0gXCJFeHBpcmF0aW9uXCI7XG5jb25zdCBfRUkgPSBcIkV4dGVybmFsSWRcIjtcbmNvbnN0IF9LID0gXCJLZXlcIjtcbmNvbnN0IF9QID0gXCJQb2xpY3lcIjtcbmNvbnN0IF9QQSA9IFwiUG9saWN5QXJuc1wiO1xuY29uc3QgX1BBciA9IFwiUHJvdmlkZXJBcm5cIjtcbmNvbnN0IF9QQyA9IFwiUHJvdmlkZWRDb250ZXh0c1wiO1xuY29uc3QgX1BJID0gXCJQcm92aWRlcklkXCI7XG5jb25zdCBfUFBTID0gXCJQYWNrZWRQb2xpY3lTaXplXCI7XG5jb25zdCBfUHIgPSBcIlByb3ZpZGVyXCI7XG5jb25zdCBfUkEgPSBcIlJvbGVBcm5cIjtcbmNvbnN0IF9SU04gPSBcIlJvbGVTZXNzaW9uTmFtZVwiO1xuY29uc3QgX1NBSyA9IFwiU2VjcmV0QWNjZXNzS2V5XCI7XG5jb25zdCBfU0ZXSVQgPSBcIlN1YmplY3RGcm9tV2ViSWRlbnRpdHlUb2tlblwiO1xuY29uc3QgX1NJID0gXCJTb3VyY2VJZGVudGl0eVwiO1xuY29uc3QgX1NOID0gXCJTZXJpYWxOdW1iZXJcIjtcbmNvbnN0IF9TVCA9IFwiU2Vzc2lvblRva2VuXCI7XG5jb25zdCBfVCA9IFwiVGFnc1wiO1xuY29uc3QgX1RDID0gXCJUb2tlbkNvZGVcIjtcbmNvbnN0IF9UVEsgPSBcIlRyYW5zaXRpdmVUYWdLZXlzXCI7XG5jb25zdCBfViA9IFwiVmVyc2lvblwiO1xuY29uc3QgX1ZhID0gXCJWYWx1ZVwiO1xuY29uc3QgX1dJVCA9IFwiV2ViSWRlbnRpdHlUb2tlblwiO1xuY29uc3QgX2EgPSBcImFyblwiO1xuY29uc3QgX20gPSBcIm1lc3NhZ2VcIjtcbmNvbnN0IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcgPSAoZm9ybUVudHJpZXMpID0+IE9iamVjdC5lbnRyaWVzKGZvcm1FbnRyaWVzKVxuICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gX19leHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBfX2V4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAuam9pbihcIiZcIik7XG5jb25zdCBsb2FkUXVlcnlFcnJvckNvZGUgPSAob3V0cHV0LCBkYXRhKSA9PiB7XG4gICAgaWYgKGRhdGEuRXJyb3I/LkNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZGF0YS5FcnJvci5Db2RlO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPT0gNDA0KSB7XG4gICAgICAgIHJldHVybiBcIk5vdEZvdW5kXCI7XG4gICAgfVxufTtcbiIsICJpbXBvcnQgeyBnZXRFbmRwb2ludFBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjtcbmltcG9ydCB7IGdldFNlcmRlUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGNvbW1vblBhcmFtcyB9IGZyb20gXCIuLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IEFzc3VtZVJvbGVSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXzBcIjtcbmltcG9ydCB7IGRlX0Fzc3VtZVJvbGVDb21tYW5kLCBzZV9Bc3N1bWVSb2xlQ29tbWFuZCB9IGZyb20gXCIuLi9wcm90b2NvbHMvQXdzX3F1ZXJ5XCI7XG5leHBvcnQgeyAkQ29tbWFuZCB9O1xuZXhwb3J0IGNsYXNzIEFzc3VtZVJvbGVDb21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoY29tbW9uUGFyYW1zKVxuICAgIC5tKGZ1bmN0aW9uIChDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZ2V0U2VyZGVQbHVnaW4oY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgICAgIGdldEVuZHBvaW50UGx1Z2luKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKSxcbiAgICBdO1xufSlcbiAgICAucyhcIkFXU1NlY3VyaXR5VG9rZW5TZXJ2aWNlVjIwMTEwNjE1XCIsIFwiQXNzdW1lUm9sZVwiLCB7fSlcbiAgICAubihcIlNUU0NsaWVudFwiLCBcIkFzc3VtZVJvbGVDb21tYW5kXCIpXG4gICAgLmYodm9pZCAwLCBBc3N1bWVSb2xlUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cpXG4gICAgLnNlcihzZV9Bc3N1bWVSb2xlQ29tbWFuZClcbiAgICAuZGUoZGVfQXNzdW1lUm9sZUNvbW1hbmQpXG4gICAgLmJ1aWxkKCkge1xufVxuIiwgImltcG9ydCB7IGdldEVuZHBvaW50UGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0U2VyZGVQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgY29tbW9uUGFyYW1zIH0gZnJvbSBcIi4uL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eVJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2csIEFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZywgfSBmcm9tIFwiLi4vbW9kZWxzL21vZGVsc18wXCI7XG5pbXBvcnQgeyBkZV9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZCwgc2VfQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eUNvbW1hbmQgfSBmcm9tIFwiLi4vcHJvdG9jb2xzL0F3c19xdWVyeVwiO1xuZXhwb3J0IHsgJENvbW1hbmQgfTtcbmV4cG9ydCBjbGFzcyBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZCBleHRlbmRzICRDb21tYW5kXG4gICAgLmNsYXNzQnVpbGRlcigpXG4gICAgLmVwKGNvbW1vblBhcmFtcylcbiAgICAubShmdW5jdGlvbiAoQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICAgIHJldHVybiBbXG4gICAgICAgIGdldFNlcmRlUGx1Z2luKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICAgICBnZXRFbmRwb2ludFBsdWdpbihjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSksXG4gICAgXTtcbn0pXG4gICAgLnMoXCJBV1NTZWN1cml0eVRva2VuU2VydmljZVYyMDExMDYxNVwiLCBcIkFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlcIiwge30pXG4gICAgLm4oXCJTVFNDbGllbnRcIiwgXCJBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZFwiKVxuICAgIC5mKEFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nLCBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5UmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cpXG4gICAgLnNlcihzZV9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZClcbiAgICAuZGUoZGVfQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eUNvbW1hbmQpXG4gICAgLmJ1aWxkKCkge1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZUFnZ3JlZ2F0ZWRDbGllbnQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBBc3N1bWVSb2xlQ29tbWFuZCB9IGZyb20gXCIuL2NvbW1hbmRzL0Fzc3VtZVJvbGVDb21tYW5kXCI7XG5pbXBvcnQgeyBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZCwgfSBmcm9tIFwiLi9jb21tYW5kcy9Bc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZFwiO1xuaW1wb3J0IHsgU1RTQ2xpZW50IH0gZnJvbSBcIi4vU1RTQ2xpZW50XCI7XG5jb25zdCBjb21tYW5kcyA9IHtcbiAgICBBc3N1bWVSb2xlQ29tbWFuZCxcbiAgICBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Q29tbWFuZCxcbn07XG5leHBvcnQgY2xhc3MgU1RTIGV4dGVuZHMgU1RTQ2xpZW50IHtcbn1cbmNyZWF0ZUFnZ3JlZ2F0ZWRDbGllbnQoY29tbWFuZHMsIFNUUyk7XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vQXNzdW1lUm9sZUNvbW1hbmRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Fzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHlDb21tYW5kXCI7XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vbW9kZWxzXzBcIjtcbiIsICJpbXBvcnQgeyBzZXRDcmVkZW50aWFsRmVhdHVyZSB9IGZyb20gXCJAYXdzLXNkay9jb3JlL2NsaWVudFwiO1xuaW1wb3J0IHsgQXNzdW1lUm9sZUNvbW1hbmQgfSBmcm9tIFwiLi9jb21tYW5kcy9Bc3N1bWVSb2xlQ29tbWFuZFwiO1xuaW1wb3J0IHsgQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eUNvbW1hbmQsIH0gZnJvbSBcIi4vY29tbWFuZHMvQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eUNvbW1hbmRcIjtcbmNvbnN0IEFTU1VNRV9ST0xFX0RFRkFVTFRfUkVHSU9OID0gXCJ1cy1lYXN0LTFcIjtcbmNvbnN0IGdldEFjY291bnRJZEZyb21Bc3N1bWVkUm9sZVVzZXIgPSAoYXNzdW1lZFJvbGVVc2VyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBhc3N1bWVkUm9sZVVzZXI/LkFybiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBhcm5Db21wb25lbnRzID0gYXNzdW1lZFJvbGVVc2VyLkFybi5zcGxpdChcIjpcIik7XG4gICAgICAgIGlmIChhcm5Db21wb25lbnRzLmxlbmd0aCA+IDQgJiYgYXJuQ29tcG9uZW50c1s0XSAhPT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGFybkNvbXBvbmVudHNbNF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5jb25zdCByZXNvbHZlUmVnaW9uID0gYXN5bmMgKF9yZWdpb24sIF9wYXJlbnRSZWdpb24sIGNyZWRlbnRpYWxQcm92aWRlckxvZ2dlcikgPT4ge1xuICAgIGNvbnN0IHJlZ2lvbiA9IHR5cGVvZiBfcmVnaW9uID09PSBcImZ1bmN0aW9uXCIgPyBhd2FpdCBfcmVnaW9uKCkgOiBfcmVnaW9uO1xuICAgIGNvbnN0IHBhcmVudFJlZ2lvbiA9IHR5cGVvZiBfcGFyZW50UmVnaW9uID09PSBcImZ1bmN0aW9uXCIgPyBhd2FpdCBfcGFyZW50UmVnaW9uKCkgOiBfcGFyZW50UmVnaW9uO1xuICAgIGNyZWRlbnRpYWxQcm92aWRlckxvZ2dlcj8uZGVidWc/LihcIkBhd3Mtc2RrL2NsaWVudC1zdHM6OnJlc29sdmVSZWdpb25cIiwgXCJhY2NlcHRpbmcgZmlyc3Qgb2Y6XCIsIGAke3JlZ2lvbn0gKHByb3ZpZGVyKWAsIGAke3BhcmVudFJlZ2lvbn0gKHBhcmVudCBjbGllbnQpYCwgYCR7QVNTVU1FX1JPTEVfREVGQVVMVF9SRUdJT059IChTVFMgZGVmYXVsdClgKTtcbiAgICByZXR1cm4gcmVnaW9uID8/IHBhcmVudFJlZ2lvbiA/PyBBU1NVTUVfUk9MRV9ERUZBVUxUX1JFR0lPTjtcbn07XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFJvbGVBc3N1bWVyID0gKHN0c09wdGlvbnMsIFNUU0NsaWVudCkgPT4ge1xuICAgIGxldCBzdHNDbGllbnQ7XG4gICAgbGV0IGNsb3N1cmVTb3VyY2VDcmVkcztcbiAgICByZXR1cm4gYXN5bmMgKHNvdXJjZUNyZWRzLCBwYXJhbXMpID0+IHtcbiAgICAgICAgY2xvc3VyZVNvdXJjZUNyZWRzID0gc291cmNlQ3JlZHM7XG4gICAgICAgIGlmICghc3RzQ2xpZW50KSB7XG4gICAgICAgICAgICBjb25zdCB7IGxvZ2dlciA9IHN0c09wdGlvbnM/LnBhcmVudENsaWVudENvbmZpZz8ubG9nZ2VyLCByZWdpb24sIHJlcXVlc3RIYW5kbGVyID0gc3RzT3B0aW9ucz8ucGFyZW50Q2xpZW50Q29uZmlnPy5yZXF1ZXN0SGFuZGxlciwgY3JlZGVudGlhbFByb3ZpZGVyTG9nZ2VyLCB9ID0gc3RzT3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkUmVnaW9uID0gYXdhaXQgcmVzb2x2ZVJlZ2lvbihyZWdpb24sIHN0c09wdGlvbnM/LnBhcmVudENsaWVudENvbmZpZz8ucmVnaW9uLCBjcmVkZW50aWFsUHJvdmlkZXJMb2dnZXIpO1xuICAgICAgICAgICAgY29uc3QgaXNDb21wYXRpYmxlUmVxdWVzdEhhbmRsZXIgPSAhaXNIMihyZXF1ZXN0SGFuZGxlcik7XG4gICAgICAgICAgICBzdHNDbGllbnQgPSBuZXcgU1RTQ2xpZW50KHtcbiAgICAgICAgICAgICAgICBwcm9maWxlOiBzdHNPcHRpb25zPy5wYXJlbnRDbGllbnRDb25maWc/LnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcjogKCkgPT4gYXN5bmMgKCkgPT4gY2xvc3VyZVNvdXJjZUNyZWRzLFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVzb2x2ZWRSZWdpb24sXG4gICAgICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXI6IGlzQ29tcGF0aWJsZVJlcXVlc3RIYW5kbGVyID8gcmVxdWVzdEhhbmRsZXIgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbG9nZ2VyOiBsb2dnZXIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IENyZWRlbnRpYWxzLCBBc3N1bWVkUm9sZVVzZXIgfSA9IGF3YWl0IHN0c0NsaWVudC5zZW5kKG5ldyBBc3N1bWVSb2xlQ29tbWFuZChwYXJhbXMpKTtcbiAgICAgICAgaWYgKCFDcmVkZW50aWFscyB8fCAhQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQgfHwgIUNyZWRlbnRpYWxzLlNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGZyb20gU1RTLmFzc3VtZVJvbGUgY2FsbCB3aXRoIHJvbGUgJHtwYXJhbXMuUm9sZUFybn1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY2NvdW50SWQgPSBnZXRBY2NvdW50SWRGcm9tQXNzdW1lZFJvbGVVc2VyKEFzc3VtZWRSb2xlVXNlcik7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0ge1xuICAgICAgICAgICAgYWNjZXNzS2V5SWQ6IENyZWRlbnRpYWxzLkFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiBDcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXksXG4gICAgICAgICAgICBzZXNzaW9uVG9rZW46IENyZWRlbnRpYWxzLlNlc3Npb25Ub2tlbixcbiAgICAgICAgICAgIGV4cGlyYXRpb246IENyZWRlbnRpYWxzLkV4cGlyYXRpb24sXG4gICAgICAgICAgICAuLi4oQ3JlZGVudGlhbHMuQ3JlZGVudGlhbFNjb3BlICYmIHsgY3JlZGVudGlhbFNjb3BlOiBDcmVkZW50aWFscy5DcmVkZW50aWFsU2NvcGUgfSksXG4gICAgICAgICAgICAuLi4oYWNjb3VudElkICYmIHsgYWNjb3VudElkIH0pLFxuICAgICAgICB9O1xuICAgICAgICBzZXRDcmVkZW50aWFsRmVhdHVyZShjcmVkZW50aWFscywgXCJDUkVERU5USUFMU19TVFNfQVNTVU1FX1JPTEVcIiwgXCJpXCIpO1xuICAgICAgICByZXR1cm4gY3JlZGVudGlhbHM7XG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5ID0gKHN0c09wdGlvbnMsIFNUU0NsaWVudCkgPT4ge1xuICAgIGxldCBzdHNDbGllbnQ7XG4gICAgcmV0dXJuIGFzeW5jIChwYXJhbXMpID0+IHtcbiAgICAgICAgaWYgKCFzdHNDbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbG9nZ2VyID0gc3RzT3B0aW9ucz8ucGFyZW50Q2xpZW50Q29uZmlnPy5sb2dnZXIsIHJlZ2lvbiwgcmVxdWVzdEhhbmRsZXIgPSBzdHNPcHRpb25zPy5wYXJlbnRDbGllbnRDb25maWc/LnJlcXVlc3RIYW5kbGVyLCBjcmVkZW50aWFsUHJvdmlkZXJMb2dnZXIsIH0gPSBzdHNPcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRSZWdpb24gPSBhd2FpdCByZXNvbHZlUmVnaW9uKHJlZ2lvbiwgc3RzT3B0aW9ucz8ucGFyZW50Q2xpZW50Q29uZmlnPy5yZWdpb24sIGNyZWRlbnRpYWxQcm92aWRlckxvZ2dlcik7XG4gICAgICAgICAgICBjb25zdCBpc0NvbXBhdGlibGVSZXF1ZXN0SGFuZGxlciA9ICFpc0gyKHJlcXVlc3RIYW5kbGVyKTtcbiAgICAgICAgICAgIHN0c0NsaWVudCA9IG5ldyBTVFNDbGllbnQoe1xuICAgICAgICAgICAgICAgIHByb2ZpbGU6IHN0c09wdGlvbnM/LnBhcmVudENsaWVudENvbmZpZz8ucHJvZmlsZSxcbiAgICAgICAgICAgICAgICByZWdpb246IHJlc29sdmVkUmVnaW9uLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RIYW5kbGVyOiBpc0NvbXBhdGlibGVSZXF1ZXN0SGFuZGxlciA/IHJlcXVlc3RIYW5kbGVyIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogbG9nZ2VyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBDcmVkZW50aWFscywgQXNzdW1lZFJvbGVVc2VyIH0gPSBhd2FpdCBzdHNDbGllbnQuc2VuZChuZXcgQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eUNvbW1hbmQocGFyYW1zKSk7XG4gICAgICAgIGlmICghQ3JlZGVudGlhbHMgfHwgIUNyZWRlbnRpYWxzLkFjY2Vzc0tleUlkIHx8ICFDcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCByZXNwb25zZSBmcm9tIFNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5IGNhbGwgd2l0aCByb2xlICR7cGFyYW1zLlJvbGVBcm59YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWNjb3VudElkID0gZ2V0QWNjb3VudElkRnJvbUFzc3VtZWRSb2xlVXNlcihBc3N1bWVkUm9sZVVzZXIpO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgIGFjY2Vzc0tleUlkOiBDcmVkZW50aWFscy5BY2Nlc3NLZXlJZCxcbiAgICAgICAgICAgIHNlY3JldEFjY2Vzc0tleTogQ3JlZGVudGlhbHMuU2VjcmV0QWNjZXNzS2V5LFxuICAgICAgICAgICAgc2Vzc2lvblRva2VuOiBDcmVkZW50aWFscy5TZXNzaW9uVG9rZW4sXG4gICAgICAgICAgICBleHBpcmF0aW9uOiBDcmVkZW50aWFscy5FeHBpcmF0aW9uLFxuICAgICAgICAgICAgLi4uKENyZWRlbnRpYWxzLkNyZWRlbnRpYWxTY29wZSAmJiB7IGNyZWRlbnRpYWxTY29wZTogQ3JlZGVudGlhbHMuQ3JlZGVudGlhbFNjb3BlIH0pLFxuICAgICAgICAgICAgLi4uKGFjY291bnRJZCAmJiB7IGFjY291bnRJZCB9KSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFjY291bnRJZCkge1xuICAgICAgICAgICAgc2V0Q3JlZGVudGlhbEZlYXR1cmUoY3JlZGVudGlhbHMsIFwiUkVTT0xWRURfQUNDT1VOVF9JRFwiLCBcIlRcIik7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Q3JlZGVudGlhbEZlYXR1cmUoY3JlZGVudGlhbHMsIFwiQ1JFREVOVElBTFNfU1RTX0FTU1VNRV9ST0xFX1dFQl9JRFwiLCBcImtcIik7XG4gICAgICAgIHJldHVybiBjcmVkZW50aWFscztcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBkZWNvcmF0ZURlZmF1bHRDcmVkZW50aWFsUHJvdmlkZXIgPSAocHJvdmlkZXIpID0+IChpbnB1dCkgPT4gcHJvdmlkZXIoe1xuICAgIHJvbGVBc3N1bWVyOiBnZXREZWZhdWx0Um9sZUFzc3VtZXIoaW5wdXQsIGlucHV0LnN0c0NsaWVudEN0b3IpLFxuICAgIHJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5OiBnZXREZWZhdWx0Um9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkoaW5wdXQsIGlucHV0LnN0c0NsaWVudEN0b3IpLFxuICAgIC4uLmlucHV0LFxufSk7XG5jb25zdCBpc0gyID0gKHJlcXVlc3RIYW5kbGVyKSA9PiB7XG4gICAgcmV0dXJuIHJlcXVlc3RIYW5kbGVyPy5tZXRhZGF0YT8uaGFuZGxlclByb3RvY29sID09PSBcImgyXCI7XG59O1xuIiwgImltcG9ydCB7IGdldERlZmF1bHRSb2xlQXNzdW1lciBhcyBTdHNHZXREZWZhdWx0Um9sZUFzc3VtZXIsIGdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSBhcyBTdHNHZXREZWZhdWx0Um9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHksIH0gZnJvbSBcIi4vZGVmYXVsdFN0c1JvbGVBc3N1bWVyc1wiO1xuaW1wb3J0IHsgU1RTQ2xpZW50IH0gZnJvbSBcIi4vU1RTQ2xpZW50XCI7XG5jb25zdCBnZXRDdXN0b21pemFibGVTdHNDbGllbnRDdG9yID0gKGJhc2VDdG9yLCBjdXN0b21pemF0aW9ucykgPT4ge1xuICAgIGlmICghY3VzdG9taXphdGlvbnMpXG4gICAgICAgIHJldHVybiBiYXNlQ3RvcjtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBjbGFzcyBDdXN0b21pemFibGVTVFNDbGllbnQgZXh0ZW5kcyBiYXNlQ3RvciB7XG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgICAgICAgICBzdXBlcihjb25maWcpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY3VzdG9taXphdGlvbiBvZiBjdXN0b21pemF0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoY3VzdG9taXphdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0Um9sZUFzc3VtZXIgPSAoc3RzT3B0aW9ucyA9IHt9LCBzdHNQbHVnaW5zKSA9PiBTdHNHZXREZWZhdWx0Um9sZUFzc3VtZXIoc3RzT3B0aW9ucywgZ2V0Q3VzdG9taXphYmxlU3RzQ2xpZW50Q3RvcihTVFNDbGllbnQsIHN0c1BsdWdpbnMpKTtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0Um9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkgPSAoc3RzT3B0aW9ucyA9IHt9LCBzdHNQbHVnaW5zKSA9PiBTdHNHZXREZWZhdWx0Um9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkoc3RzT3B0aW9ucywgZ2V0Q3VzdG9taXphYmxlU3RzQ2xpZW50Q3RvcihTVFNDbGllbnQsIHN0c1BsdWdpbnMpKTtcbmV4cG9ydCBjb25zdCBkZWNvcmF0ZURlZmF1bHRDcmVkZW50aWFsUHJvdmlkZXIgPSAocHJvdmlkZXIpID0+IChpbnB1dCkgPT4gcHJvdmlkZXIoe1xuICAgIHJvbGVBc3N1bWVyOiBnZXREZWZhdWx0Um9sZUFzc3VtZXIoaW5wdXQpLFxuICAgIHJvbGVBc3N1bWVyV2l0aFdlYklkZW50aXR5OiBnZXREZWZhdWx0Um9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkoaW5wdXQpLFxuICAgIC4uLmlucHV0LFxufSk7XG4iLCAiZXhwb3J0ICogZnJvbSBcIi4vU1RTQ2xpZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TVFNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NvbW1hbmRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb2RlbHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RlZmF1bHRSb2xlQXNzdW1lcnNcIjtcbmV4cG9ydCB7IFNUU1NlcnZpY2VFeGNlcHRpb24gfSBmcm9tIFwiLi9tb2RlbHMvU1RTU2VydmljZUV4Y2VwdGlvblwiO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBmcm9tUHJvY2VzczogKCkgPT4gZnJvbVByb2Nlc3Ncbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG5cbi8vIHNyYy9mcm9tUHJvY2Vzcy50c1xudmFyIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlclwiKTtcblxuLy8gc3JjL3Jlc29sdmVQcm9jZXNzQ3JlZGVudGlhbHMudHNcbnZhciBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiKTtcbnZhciBpbXBvcnRfY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xudmFyIGltcG9ydF91dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5cbi8vIHNyYy9nZXRWYWxpZGF0ZWRQcm9jZXNzQ3JlZGVudGlhbHMudHNcbnZhciBpbXBvcnRfY2xpZW50ID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NvcmUvY2xpZW50XCIpO1xudmFyIGdldFZhbGlkYXRlZFByb2Nlc3NDcmVkZW50aWFscyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHByb2ZpbGVOYW1lLCBkYXRhLCBwcm9maWxlcykgPT4ge1xuICBpZiAoZGF0YS5WZXJzaW9uICE9PSAxKSB7XG4gICAgdGhyb3cgRXJyb3IoYFByb2ZpbGUgJHtwcm9maWxlTmFtZX0gY3JlZGVudGlhbF9wcm9jZXNzIGRpZCBub3QgcmV0dXJuIFZlcnNpb24gMS5gKTtcbiAgfVxuICBpZiAoZGF0YS5BY2Nlc3NLZXlJZCA9PT0gdm9pZCAwIHx8IGRhdGEuU2VjcmV0QWNjZXNzS2V5ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBjcmVkZW50aWFsX3Byb2Nlc3MgcmV0dXJuZWQgaW52YWxpZCBjcmVkZW50aWFscy5gKTtcbiAgfVxuICBpZiAoZGF0YS5FeHBpcmF0aW9uKSB7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICBjb25zdCBleHBpcmVUaW1lID0gbmV3IERhdGUoZGF0YS5FeHBpcmF0aW9uKTtcbiAgICBpZiAoZXhwaXJlVGltZSA8IGN1cnJlbnRUaW1lKSB7XG4gICAgICB0aHJvdyBFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBjcmVkZW50aWFsX3Byb2Nlc3MgcmV0dXJuZWQgZXhwaXJlZCBjcmVkZW50aWFscy5gKTtcbiAgICB9XG4gIH1cbiAgbGV0IGFjY291bnRJZCA9IGRhdGEuQWNjb3VudElkO1xuICBpZiAoIWFjY291bnRJZCAmJiBwcm9maWxlcz8uW3Byb2ZpbGVOYW1lXT8uYXdzX2FjY291bnRfaWQpIHtcbiAgICBhY2NvdW50SWQgPSBwcm9maWxlc1twcm9maWxlTmFtZV0uYXdzX2FjY291bnRfaWQ7XG4gIH1cbiAgY29uc3QgY3JlZGVudGlhbHMgPSB7XG4gICAgYWNjZXNzS2V5SWQ6IGRhdGEuQWNjZXNzS2V5SWQsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBkYXRhLlNlY3JldEFjY2Vzc0tleSxcbiAgICAuLi5kYXRhLlNlc3Npb25Ub2tlbiAmJiB7IHNlc3Npb25Ub2tlbjogZGF0YS5TZXNzaW9uVG9rZW4gfSxcbiAgICAuLi5kYXRhLkV4cGlyYXRpb24gJiYgeyBleHBpcmF0aW9uOiBuZXcgRGF0ZShkYXRhLkV4cGlyYXRpb24pIH0sXG4gICAgLi4uZGF0YS5DcmVkZW50aWFsU2NvcGUgJiYgeyBjcmVkZW50aWFsU2NvcGU6IGRhdGEuQ3JlZGVudGlhbFNjb3BlIH0sXG4gICAgLi4uYWNjb3VudElkICYmIHsgYWNjb3VudElkIH1cbiAgfTtcbiAgKDAsIGltcG9ydF9jbGllbnQuc2V0Q3JlZGVudGlhbEZlYXR1cmUpKGNyZWRlbnRpYWxzLCBcIkNSRURFTlRJQUxTX1BST0NFU1NcIiwgXCJ3XCIpO1xuICByZXR1cm4gY3JlZGVudGlhbHM7XG59LCBcImdldFZhbGlkYXRlZFByb2Nlc3NDcmVkZW50aWFsc1wiKTtcblxuLy8gc3JjL3Jlc29sdmVQcm9jZXNzQ3JlZGVudGlhbHMudHNcbnZhciByZXNvbHZlUHJvY2Vzc0NyZWRlbnRpYWxzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocHJvZmlsZU5hbWUsIHByb2ZpbGVzLCBsb2dnZXIpID0+IHtcbiAgY29uc3QgcHJvZmlsZSA9IHByb2ZpbGVzW3Byb2ZpbGVOYW1lXTtcbiAgaWYgKHByb2ZpbGVzW3Byb2ZpbGVOYW1lXSkge1xuICAgIGNvbnN0IGNyZWRlbnRpYWxQcm9jZXNzID0gcHJvZmlsZVtcImNyZWRlbnRpYWxfcHJvY2Vzc1wiXTtcbiAgICBpZiAoY3JlZGVudGlhbFByb2Nlc3MgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgZXhlY1Byb21pc2UgPSAoMCwgaW1wb3J0X3V0aWwucHJvbWlzaWZ5KShpbXBvcnRfY2hpbGRfcHJvY2Vzcy5leGVjKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgc3Rkb3V0IH0gPSBhd2FpdCBleGVjUHJvbWlzZShjcmVkZW50aWFsUHJvY2Vzcyk7XG4gICAgICAgIGxldCBkYXRhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHN0ZG91dC50cmltKCkpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBjcmVkZW50aWFsX3Byb2Nlc3MgcmV0dXJuZWQgaW52YWxpZCBKU09OLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRWYWxpZGF0ZWRQcm9jZXNzQ3JlZGVudGlhbHMocHJvZmlsZU5hbWUsIGRhdGEsIHByb2ZpbGVzKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKGVycm9yLm1lc3NhZ2UsIHsgbG9nZ2VyIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBkaWQgbm90IGNvbnRhaW4gY3JlZGVudGlhbF9wcm9jZXNzLmAsIHsgbG9nZ2VyIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihgUHJvZmlsZSAke3Byb2ZpbGVOYW1lfSBjb3VsZCBub3QgYmUgZm91bmQgaW4gc2hhcmVkIGNyZWRlbnRpYWxzIGZpbGUuYCwge1xuICAgICAgbG9nZ2VyXG4gICAgfSk7XG4gIH1cbn0sIFwicmVzb2x2ZVByb2Nlc3NDcmVkZW50aWFsc1wiKTtcblxuLy8gc3JjL2Zyb21Qcm9jZXNzLnRzXG52YXIgZnJvbVByb2Nlc3MgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbml0ID0ge30pID0+IGFzeW5jICh7IGNhbGxlckNsaWVudENvbmZpZyB9ID0ge30pID0+IHtcbiAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1wcm9jZXNzIC0gZnJvbVByb2Nlc3NcIik7XG4gIGNvbnN0IHByb2ZpbGVzID0gYXdhaXQgKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLnBhcnNlS25vd25GaWxlcykoaW5pdCk7XG4gIHJldHVybiByZXNvbHZlUHJvY2Vzc0NyZWRlbnRpYWxzKFxuICAgICgwLCBpbXBvcnRfc2hhcmVkX2luaV9maWxlX2xvYWRlci5nZXRQcm9maWxlTmFtZSkoe1xuICAgICAgcHJvZmlsZTogaW5pdC5wcm9maWxlID8/IGNhbGxlckNsaWVudENvbmZpZz8ucHJvZmlsZVxuICAgIH0pLFxuICAgIHByb2ZpbGVzLFxuICAgIGluaXQubG9nZ2VyXG4gICk7XG59LCBcImZyb21Qcm9jZXNzXCIpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbVByb2Nlc3Ncbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVdlYlRva2VuID0gdm9pZCAwO1xuY29uc3QgZnJvbVdlYlRva2VuID0gKGluaXQpID0+IGFzeW5jIChhd3NJZGVudGl0eVByb3BlcnRpZXMpID0+IHtcbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXdlYi1pZGVudGl0eSAtIGZyb21XZWJUb2tlblwiKTtcbiAgICBjb25zdCB7IHJvbGVBcm4sIHJvbGVTZXNzaW9uTmFtZSwgd2ViSWRlbnRpdHlUb2tlbiwgcHJvdmlkZXJJZCwgcG9saWN5QXJucywgcG9saWN5LCBkdXJhdGlvblNlY29uZHMgfSA9IGluaXQ7XG4gICAgbGV0IHsgcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHkgfSA9IGluaXQ7XG4gICAgaWYgKCFyb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSkge1xuICAgICAgICBjb25zdCB7IGdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX2ltcG9ydFN0YXIocmVxdWlyZShcIkBhd3Mtc2RrL25lc3RlZC1jbGllbnRzL3N0c1wiKSkpO1xuICAgICAgICByb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSA9IGdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSh7XG4gICAgICAgICAgICAuLi5pbml0LmNsaWVudENvbmZpZyxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxQcm92aWRlckxvZ2dlcjogaW5pdC5sb2dnZXIsXG4gICAgICAgICAgICBwYXJlbnRDbGllbnRDb25maWc6IHtcbiAgICAgICAgICAgICAgICAuLi5hd3NJZGVudGl0eVByb3BlcnRpZXM/LmNhbGxlckNsaWVudENvbmZpZyxcbiAgICAgICAgICAgICAgICAuLi5pbml0LnBhcmVudENsaWVudENvbmZpZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIGluaXQuY2xpZW50UGx1Z2lucyk7XG4gICAgfVxuICAgIHJldHVybiByb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSh7XG4gICAgICAgIFJvbGVBcm46IHJvbGVBcm4sXG4gICAgICAgIFJvbGVTZXNzaW9uTmFtZTogcm9sZVNlc3Npb25OYW1lID8/IGBhd3Mtc2RrLWpzLXNlc3Npb24tJHtEYXRlLm5vdygpfWAsXG4gICAgICAgIFdlYklkZW50aXR5VG9rZW46IHdlYklkZW50aXR5VG9rZW4sXG4gICAgICAgIFByb3ZpZGVySWQ6IHByb3ZpZGVySWQsXG4gICAgICAgIFBvbGljeUFybnM6IHBvbGljeUFybnMsXG4gICAgICAgIFBvbGljeTogcG9saWN5LFxuICAgICAgICBEdXJhdGlvblNlY29uZHM6IGR1cmF0aW9uU2Vjb25kcyxcbiAgICB9KTtcbn07XG5leHBvcnRzLmZyb21XZWJUb2tlbiA9IGZyb21XZWJUb2tlbjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVRva2VuRmlsZSA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NvcmUvY2xpZW50XCIpO1xuY29uc3QgcHJvcGVydHlfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCIpO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGZyb21XZWJUb2tlbl8xID0gcmVxdWlyZShcIi4vZnJvbVdlYlRva2VuXCIpO1xuY29uc3QgRU5WX1RPS0VOX0ZJTEUgPSBcIkFXU19XRUJfSURFTlRJVFlfVE9LRU5fRklMRVwiO1xuY29uc3QgRU5WX1JPTEVfQVJOID0gXCJBV1NfUk9MRV9BUk5cIjtcbmNvbnN0IEVOVl9ST0xFX1NFU1NJT05fTkFNRSA9IFwiQVdTX1JPTEVfU0VTU0lPTl9OQU1FXCI7XG5jb25zdCBmcm9tVG9rZW5GaWxlID0gKGluaXQgPSB7fSkgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItd2ViLWlkZW50aXR5IC0gZnJvbVRva2VuRmlsZVwiKTtcbiAgICBjb25zdCB3ZWJJZGVudGl0eVRva2VuRmlsZSA9IGluaXQ/LndlYklkZW50aXR5VG9rZW5GaWxlID8/IHByb2Nlc3MuZW52W0VOVl9UT0tFTl9GSUxFXTtcbiAgICBjb25zdCByb2xlQXJuID0gaW5pdD8ucm9sZUFybiA/PyBwcm9jZXNzLmVudltFTlZfUk9MRV9BUk5dO1xuICAgIGNvbnN0IHJvbGVTZXNzaW9uTmFtZSA9IGluaXQ/LnJvbGVTZXNzaW9uTmFtZSA/PyBwcm9jZXNzLmVudltFTlZfUk9MRV9TRVNTSU9OX05BTUVdO1xuICAgIGlmICghd2ViSWRlbnRpdHlUb2tlbkZpbGUgfHwgIXJvbGVBcm4pIHtcbiAgICAgICAgdGhyb3cgbmV3IHByb3BlcnR5X3Byb3ZpZGVyXzEuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiV2ViIGlkZW50aXR5IGNvbmZpZ3VyYXRpb24gbm90IHNwZWNpZmllZFwiLCB7XG4gICAgICAgICAgICBsb2dnZXI6IGluaXQubG9nZ2VyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSBhd2FpdCAoMCwgZnJvbVdlYlRva2VuXzEuZnJvbVdlYlRva2VuKSh7XG4gICAgICAgIC4uLmluaXQsXG4gICAgICAgIHdlYklkZW50aXR5VG9rZW46ICgwLCBmc18xLnJlYWRGaWxlU3luYykod2ViSWRlbnRpdHlUb2tlbkZpbGUsIHsgZW5jb2Rpbmc6IFwiYXNjaWlcIiB9KSxcbiAgICAgICAgcm9sZUFybixcbiAgICAgICAgcm9sZVNlc3Npb25OYW1lLFxuICAgIH0pKCk7XG4gICAgaWYgKHdlYklkZW50aXR5VG9rZW5GaWxlID09PSBwcm9jZXNzLmVudltFTlZfVE9LRU5fRklMRV0pIHtcbiAgICAgICAgKDAsIGNsaWVudF8xLnNldENyZWRlbnRpYWxGZWF0dXJlKShjcmVkZW50aWFscywgXCJDUkVERU5USUFMU19FTlZfVkFSU19TVFNfV0VCX0lEX1RPS0VOXCIsIFwiaFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufTtcbmV4cG9ydHMuZnJvbVRva2VuRmlsZSA9IGZyb21Ub2tlbkZpbGU7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3JlRXhwb3J0ID0gKHRhcmdldCwgbW9kLCBzZWNvbmRUYXJnZXQpID0+IChfX2NvcHlQcm9wcyh0YXJnZXQsIG1vZCwgXCJkZWZhdWx0XCIpLCBzZWNvbmRUYXJnZXQgJiYgX19jb3B5UHJvcHMoc2Vjb25kVGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuLy4vZnJvbVRva2VuRmlsZVwiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydChpbmRleF9leHBvcnRzLCByZXF1aXJlKFwiLi8uL2Zyb21XZWJUb2tlblwiKSwgbW9kdWxlLmV4cG9ydHMpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuXG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbVRva2VuRmlsZSxcbiAgZnJvbVdlYlRva2VuXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBmcm9tSW5pOiAoKSA9PiBmcm9tSW5pXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvZnJvbUluaS50c1xuXG5cbi8vIHNyYy9yZXNvbHZlUHJvZmlsZURhdGEudHNcblxuXG4vLyBzcmMvcmVzb2x2ZUFzc3VtZVJvbGVDcmVkZW50aWFscy50c1xuXG5cbnZhciBpbXBvcnRfc2hhcmVkX2luaV9maWxlX2xvYWRlciA9IHJlcXVpcmUoXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIik7XG5cbi8vIHNyYy9yZXNvbHZlQ3JlZGVudGlhbFNvdXJjZS50c1xudmFyIGltcG9ydF9jbGllbnQgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZS9jbGllbnRcIik7XG52YXIgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIik7XG52YXIgcmVzb2x2ZUNyZWRlbnRpYWxTb3VyY2UgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjcmVkZW50aWFsU291cmNlLCBwcm9maWxlTmFtZSwgbG9nZ2VyKSA9PiB7XG4gIGNvbnN0IHNvdXJjZVByb3ZpZGVyc01hcCA9IHtcbiAgICBFY3NDb250YWluZXI6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHsgZnJvbUh0dHAgfSA9IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX190b0VTTShyZXF1aXJlKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1odHRwXCIpKSk7XG4gICAgICBjb25zdCB7IGZyb21Db250YWluZXJNZXRhZGF0YSB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAc21pdGh5L2NyZWRlbnRpYWwtcHJvdmlkZXItaW1kc1wiKSkpO1xuICAgICAgbG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaW5pIC0gY3JlZGVudGlhbF9zb3VyY2UgaXMgRWNzQ29udGFpbmVyXCIpO1xuICAgICAgcmV0dXJuIGFzeW5jICgpID0+ICgwLCBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuY2hhaW4pKGZyb21IdHRwKG9wdGlvbnMgPz8ge30pLCBmcm9tQ29udGFpbmVyTWV0YWRhdGEob3B0aW9ucykpKCkudGhlbihzZXROYW1lZFByb3ZpZGVyKTtcbiAgICB9LCBcIkVjc0NvbnRhaW5lclwiKSxcbiAgICBFYzJJbnN0YW5jZU1ldGFkYXRhOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICBsb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1pbmkgLSBjcmVkZW50aWFsX3NvdXJjZSBpcyBFYzJJbnN0YW5jZU1ldGFkYXRhXCIpO1xuICAgICAgY29uc3QgeyBmcm9tSW5zdGFuY2VNZXRhZGF0YSB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAc21pdGh5L2NyZWRlbnRpYWwtcHJvdmlkZXItaW1kc1wiKSkpO1xuICAgICAgcmV0dXJuIGFzeW5jICgpID0+IGZyb21JbnN0YW5jZU1ldGFkYXRhKG9wdGlvbnMpKCkudGhlbihzZXROYW1lZFByb3ZpZGVyKTtcbiAgICB9LCBcIkVjMkluc3RhbmNlTWV0YWRhdGFcIiksXG4gICAgRW52aXJvbm1lbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgIGxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWluaSAtIGNyZWRlbnRpYWxfc291cmNlIGlzIEVudmlyb25tZW50XCIpO1xuICAgICAgY29uc3QgeyBmcm9tRW52IH0gPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9fdG9FU00ocmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItZW52XCIpKSk7XG4gICAgICByZXR1cm4gYXN5bmMgKCkgPT4gZnJvbUVudihvcHRpb25zKSgpLnRoZW4oc2V0TmFtZWRQcm92aWRlcik7XG4gICAgfSwgXCJFbnZpcm9ubWVudFwiKVxuICB9O1xuICBpZiAoY3JlZGVudGlhbFNvdXJjZSBpbiBzb3VyY2VQcm92aWRlcnNNYXApIHtcbiAgICByZXR1cm4gc291cmNlUHJvdmlkZXJzTWFwW2NyZWRlbnRpYWxTb3VyY2VdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFxuICAgICAgYFVuc3VwcG9ydGVkIGNyZWRlbnRpYWwgc291cmNlIGluIHByb2ZpbGUgJHtwcm9maWxlTmFtZX0uIEdvdCAke2NyZWRlbnRpYWxTb3VyY2V9LCBleHBlY3RlZCBFY3NDb250YWluZXIgb3IgRWMySW5zdGFuY2VNZXRhZGF0YSBvciBFbnZpcm9ubWVudC5gLFxuICAgICAgeyBsb2dnZXIgfVxuICAgICk7XG4gIH1cbn0sIFwicmVzb2x2ZUNyZWRlbnRpYWxTb3VyY2VcIik7XG52YXIgc2V0TmFtZWRQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNyZWRzKSA9PiAoMCwgaW1wb3J0X2NsaWVudC5zZXRDcmVkZW50aWFsRmVhdHVyZSkoY3JlZHMsIFwiQ1JFREVOVElBTFNfUFJPRklMRV9OQU1FRF9QUk9WSURFUlwiLCBcInBcIiksIFwic2V0TmFtZWRQcm92aWRlclwiKTtcblxuLy8gc3JjL3Jlc29sdmVBc3N1bWVSb2xlQ3JlZGVudGlhbHMudHNcbnZhciBpc0Fzc3VtZVJvbGVQcm9maWxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXJnLCB7IHByb2ZpbGUgPSBcImRlZmF1bHRcIiwgbG9nZ2VyIH0gPSB7fSkgPT4ge1xuICByZXR1cm4gQm9vbGVhbihhcmcpICYmIHR5cGVvZiBhcmcgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGFyZy5yb2xlX2FybiA9PT0gXCJzdHJpbmdcIiAmJiBbXCJ1bmRlZmluZWRcIiwgXCJzdHJpbmdcIl0uaW5kZXhPZih0eXBlb2YgYXJnLnJvbGVfc2Vzc2lvbl9uYW1lKSA+IC0xICYmIFtcInVuZGVmaW5lZFwiLCBcInN0cmluZ1wiXS5pbmRleE9mKHR5cGVvZiBhcmcuZXh0ZXJuYWxfaWQpID4gLTEgJiYgW1widW5kZWZpbmVkXCIsIFwic3RyaW5nXCJdLmluZGV4T2YodHlwZW9mIGFyZy5tZmFfc2VyaWFsKSA+IC0xICYmIChpc0Fzc3VtZVJvbGVXaXRoU291cmNlUHJvZmlsZShhcmcsIHsgcHJvZmlsZSwgbG9nZ2VyIH0pIHx8IGlzQ3JlZGVudGlhbFNvdXJjZVByb2ZpbGUoYXJnLCB7IHByb2ZpbGUsIGxvZ2dlciB9KSk7XG59LCBcImlzQXNzdW1lUm9sZVByb2ZpbGVcIik7XG52YXIgaXNBc3N1bWVSb2xlV2l0aFNvdXJjZVByb2ZpbGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChhcmcsIHsgcHJvZmlsZSwgbG9nZ2VyIH0pID0+IHtcbiAgY29uc3Qgd2l0aFNvdXJjZVByb2ZpbGUgPSB0eXBlb2YgYXJnLnNvdXJjZV9wcm9maWxlID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBhcmcuY3JlZGVudGlhbF9zb3VyY2UgPT09IFwidW5kZWZpbmVkXCI7XG4gIGlmICh3aXRoU291cmNlUHJvZmlsZSkge1xuICAgIGxvZ2dlcj8uZGVidWc/LihgICAgICR7cHJvZmlsZX0gaXNBc3N1bWVSb2xlV2l0aFNvdXJjZVByb2ZpbGUgc291cmNlX3Byb2ZpbGU9JHthcmcuc291cmNlX3Byb2ZpbGV9YCk7XG4gIH1cbiAgcmV0dXJuIHdpdGhTb3VyY2VQcm9maWxlO1xufSwgXCJpc0Fzc3VtZVJvbGVXaXRoU291cmNlUHJvZmlsZVwiKTtcbnZhciBpc0NyZWRlbnRpYWxTb3VyY2VQcm9maWxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXJnLCB7IHByb2ZpbGUsIGxvZ2dlciB9KSA9PiB7XG4gIGNvbnN0IHdpdGhQcm92aWRlclByb2ZpbGUgPSB0eXBlb2YgYXJnLmNyZWRlbnRpYWxfc291cmNlID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBhcmcuc291cmNlX3Byb2ZpbGUgPT09IFwidW5kZWZpbmVkXCI7XG4gIGlmICh3aXRoUHJvdmlkZXJQcm9maWxlKSB7XG4gICAgbG9nZ2VyPy5kZWJ1Zz8uKGAgICAgJHtwcm9maWxlfSBpc0NyZWRlbnRpYWxTb3VyY2VQcm9maWxlIGNyZWRlbnRpYWxfc291cmNlPSR7YXJnLmNyZWRlbnRpYWxfc291cmNlfWApO1xuICB9XG4gIHJldHVybiB3aXRoUHJvdmlkZXJQcm9maWxlO1xufSwgXCJpc0NyZWRlbnRpYWxTb3VyY2VQcm9maWxlXCIpO1xudmFyIHJlc29sdmVBc3N1bWVSb2xlQ3JlZGVudGlhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwcm9maWxlTmFtZSwgcHJvZmlsZXMsIG9wdGlvbnMsIHZpc2l0ZWRQcm9maWxlcyA9IHt9KSA9PiB7XG4gIG9wdGlvbnMubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaW5pIC0gcmVzb2x2ZUFzc3VtZVJvbGVDcmVkZW50aWFscyAoU1RTKVwiKTtcbiAgY29uc3QgcHJvZmlsZURhdGEgPSBwcm9maWxlc1twcm9maWxlTmFtZV07XG4gIGNvbnN0IHsgc291cmNlX3Byb2ZpbGUsIHJlZ2lvbiB9ID0gcHJvZmlsZURhdGE7XG4gIGlmICghb3B0aW9ucy5yb2xlQXNzdW1lcikge1xuICAgIGNvbnN0IHsgZ2V0RGVmYXVsdFJvbGVBc3N1bWVyIH0gPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9fdG9FU00ocmVxdWlyZShcIkBhd3Mtc2RrL25lc3RlZC1jbGllbnRzL3N0c1wiKSkpO1xuICAgIG9wdGlvbnMucm9sZUFzc3VtZXIgPSBnZXREZWZhdWx0Um9sZUFzc3VtZXIoXG4gICAgICB7XG4gICAgICAgIC4uLm9wdGlvbnMuY2xpZW50Q29uZmlnLFxuICAgICAgICBjcmVkZW50aWFsUHJvdmlkZXJMb2dnZXI6IG9wdGlvbnMubG9nZ2VyLFxuICAgICAgICBwYXJlbnRDbGllbnRDb25maWc6IHtcbiAgICAgICAgICAuLi5vcHRpb25zPy5wYXJlbnRDbGllbnRDb25maWcsXG4gICAgICAgICAgcmVnaW9uOiByZWdpb24gPz8gb3B0aW9ucz8ucGFyZW50Q2xpZW50Q29uZmlnPy5yZWdpb25cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9wdGlvbnMuY2xpZW50UGx1Z2luc1xuICAgICk7XG4gIH1cbiAgaWYgKHNvdXJjZV9wcm9maWxlICYmIHNvdXJjZV9wcm9maWxlIGluIHZpc2l0ZWRQcm9maWxlcykge1xuICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFxuICAgICAgYERldGVjdGVkIGEgY3ljbGUgYXR0ZW1wdGluZyB0byByZXNvbHZlIGNyZWRlbnRpYWxzIGZvciBwcm9maWxlICR7KDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmdldFByb2ZpbGVOYW1lKShvcHRpb25zKX0uIFByb2ZpbGVzIHZpc2l0ZWQ6IGAgKyBPYmplY3Qua2V5cyh2aXNpdGVkUHJvZmlsZXMpLmpvaW4oXCIsIFwiKSxcbiAgICAgIHsgbG9nZ2VyOiBvcHRpb25zLmxvZ2dlciB9XG4gICAgKTtcbiAgfVxuICBvcHRpb25zLmxvZ2dlcj8uZGVidWcoXG4gICAgYEBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaW5pIC0gZmluZGluZyBjcmVkZW50aWFsIHJlc29sdmVyIHVzaW5nICR7c291cmNlX3Byb2ZpbGUgPyBgc291cmNlX3Byb2ZpbGU9WyR7c291cmNlX3Byb2ZpbGV9XWAgOiBgcHJvZmlsZT1bJHtwcm9maWxlTmFtZX1dYH1gXG4gICk7XG4gIGNvbnN0IHNvdXJjZUNyZWRzUHJvdmlkZXIgPSBzb3VyY2VfcHJvZmlsZSA/IHJlc29sdmVQcm9maWxlRGF0YShcbiAgICBzb3VyY2VfcHJvZmlsZSxcbiAgICBwcm9maWxlcyxcbiAgICBvcHRpb25zLFxuICAgIHtcbiAgICAgIC4uLnZpc2l0ZWRQcm9maWxlcyxcbiAgICAgIFtzb3VyY2VfcHJvZmlsZV06IHRydWVcbiAgICB9LFxuICAgIGlzQ3JlZGVudGlhbFNvdXJjZVdpdGhvdXRSb2xlQXJuKHByb2ZpbGVzW3NvdXJjZV9wcm9maWxlXSA/PyB7fSlcbiAgKSA6IChhd2FpdCByZXNvbHZlQ3JlZGVudGlhbFNvdXJjZShwcm9maWxlRGF0YS5jcmVkZW50aWFsX3NvdXJjZSwgcHJvZmlsZU5hbWUsIG9wdGlvbnMubG9nZ2VyKShvcHRpb25zKSkoKTtcbiAgaWYgKGlzQ3JlZGVudGlhbFNvdXJjZVdpdGhvdXRSb2xlQXJuKHByb2ZpbGVEYXRhKSkge1xuICAgIHJldHVybiBzb3VyY2VDcmVkc1Byb3ZpZGVyLnRoZW4oKGNyZWRzKSA9PiAoMCwgaW1wb3J0X2NsaWVudC5zZXRDcmVkZW50aWFsRmVhdHVyZSkoY3JlZHMsIFwiQ1JFREVOVElBTFNfUFJPRklMRV9TT1VSQ0VfUFJPRklMRVwiLCBcIm9cIikpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgIFJvbGVBcm46IHByb2ZpbGVEYXRhLnJvbGVfYXJuLFxuICAgICAgUm9sZVNlc3Npb25OYW1lOiBwcm9maWxlRGF0YS5yb2xlX3Nlc3Npb25fbmFtZSB8fCBgYXdzLXNkay1qcy0ke0RhdGUubm93KCl9YCxcbiAgICAgIEV4dGVybmFsSWQ6IHByb2ZpbGVEYXRhLmV4dGVybmFsX2lkLFxuICAgICAgRHVyYXRpb25TZWNvbmRzOiBwYXJzZUludChwcm9maWxlRGF0YS5kdXJhdGlvbl9zZWNvbmRzIHx8IFwiMzYwMFwiLCAxMClcbiAgICB9O1xuICAgIGNvbnN0IHsgbWZhX3NlcmlhbCB9ID0gcHJvZmlsZURhdGE7XG4gICAgaWYgKG1mYV9zZXJpYWwpIHtcbiAgICAgIGlmICghb3B0aW9ucy5tZmFDb2RlUHJvdmlkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXG4gICAgICAgICAgYFByb2ZpbGUgJHtwcm9maWxlTmFtZX0gcmVxdWlyZXMgbXVsdGktZmFjdG9yIGF1dGhlbnRpY2F0aW9uLCBidXQgbm8gTUZBIGNvZGUgY2FsbGJhY2sgd2FzIHByb3ZpZGVkLmAsXG4gICAgICAgICAgeyBsb2dnZXI6IG9wdGlvbnMubG9nZ2VyLCB0cnlOZXh0TGluazogZmFsc2UgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcGFyYW1zLlNlcmlhbE51bWJlciA9IG1mYV9zZXJpYWw7XG4gICAgICBwYXJhbXMuVG9rZW5Db2RlID0gYXdhaXQgb3B0aW9ucy5tZmFDb2RlUHJvdmlkZXIobWZhX3NlcmlhbCk7XG4gICAgfVxuICAgIGNvbnN0IHNvdXJjZUNyZWRzID0gYXdhaXQgc291cmNlQ3JlZHNQcm92aWRlcjtcbiAgICByZXR1cm4gb3B0aW9ucy5yb2xlQXNzdW1lcihzb3VyY2VDcmVkcywgcGFyYW1zKS50aGVuKFxuICAgICAgKGNyZWRzKSA9PiAoMCwgaW1wb3J0X2NsaWVudC5zZXRDcmVkZW50aWFsRmVhdHVyZSkoY3JlZHMsIFwiQ1JFREVOVElBTFNfUFJPRklMRV9TT1VSQ0VfUFJPRklMRVwiLCBcIm9cIilcbiAgICApO1xuICB9XG59LCBcInJlc29sdmVBc3N1bWVSb2xlQ3JlZGVudGlhbHNcIik7XG52YXIgaXNDcmVkZW50aWFsU291cmNlV2l0aG91dFJvbGVBcm4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzZWN0aW9uKSA9PiB7XG4gIHJldHVybiAhc2VjdGlvbi5yb2xlX2FybiAmJiAhIXNlY3Rpb24uY3JlZGVudGlhbF9zb3VyY2U7XG59LCBcImlzQ3JlZGVudGlhbFNvdXJjZVdpdGhvdXRSb2xlQXJuXCIpO1xuXG4vLyBzcmMvcmVzb2x2ZVByb2Nlc3NDcmVkZW50aWFscy50c1xuXG52YXIgaXNQcm9jZXNzUHJvZmlsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGFyZykgPT4gQm9vbGVhbihhcmcpICYmIHR5cGVvZiBhcmcgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGFyZy5jcmVkZW50aWFsX3Byb2Nlc3MgPT09IFwic3RyaW5nXCIsIFwiaXNQcm9jZXNzUHJvZmlsZVwiKTtcbnZhciByZXNvbHZlUHJvY2Vzc0NyZWRlbnRpYWxzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3B0aW9ucywgcHJvZmlsZSkgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXByb2Nlc3NcIikpKS50aGVuKFxuICAoeyBmcm9tUHJvY2VzcyB9KSA9PiBmcm9tUHJvY2Vzcyh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBwcm9maWxlXG4gIH0pKCkudGhlbigoY3JlZHMpID0+ICgwLCBpbXBvcnRfY2xpZW50LnNldENyZWRlbnRpYWxGZWF0dXJlKShjcmVkcywgXCJDUkVERU5USUFMU19QUk9GSUxFX1BST0NFU1NcIiwgXCJ2XCIpKVxuKSwgXCJyZXNvbHZlUHJvY2Vzc0NyZWRlbnRpYWxzXCIpO1xuXG4vLyBzcmMvcmVzb2x2ZVNzb0NyZWRlbnRpYWxzLnRzXG5cbnZhciByZXNvbHZlU3NvQ3JlZGVudGlhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwcm9maWxlLCBwcm9maWxlRGF0YSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgZnJvbVNTTyB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXNzb1wiKSkpO1xuICByZXR1cm4gZnJvbVNTTyh7XG4gICAgcHJvZmlsZSxcbiAgICBsb2dnZXI6IG9wdGlvbnMubG9nZ2VyLFxuICAgIHBhcmVudENsaWVudENvbmZpZzogb3B0aW9ucy5wYXJlbnRDbGllbnRDb25maWcsXG4gICAgY2xpZW50Q29uZmlnOiBvcHRpb25zLmNsaWVudENvbmZpZ1xuICB9KSgpLnRoZW4oKGNyZWRzKSA9PiB7XG4gICAgaWYgKHByb2ZpbGVEYXRhLnNzb19zZXNzaW9uKSB7XG4gICAgICByZXR1cm4gKDAsIGltcG9ydF9jbGllbnQuc2V0Q3JlZGVudGlhbEZlYXR1cmUpKGNyZWRzLCBcIkNSRURFTlRJQUxTX1BST0ZJTEVfU1NPXCIsIFwiclwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgwLCBpbXBvcnRfY2xpZW50LnNldENyZWRlbnRpYWxGZWF0dXJlKShjcmVkcywgXCJDUkVERU5USUFMU19QUk9GSUxFX1NTT19MRUdBQ1lcIiwgXCJ0XCIpO1xuICAgIH1cbiAgfSk7XG59LCBcInJlc29sdmVTc29DcmVkZW50aWFsc1wiKTtcbnZhciBpc1Nzb1Byb2ZpbGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChhcmcpID0+IGFyZyAmJiAodHlwZW9mIGFyZy5zc29fc3RhcnRfdXJsID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBhcmcuc3NvX2FjY291bnRfaWQgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZy5zc29fc2Vzc2lvbiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgYXJnLnNzb19yZWdpb24gPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZy5zc29fcm9sZV9uYW1lID09PSBcInN0cmluZ1wiKSwgXCJpc1Nzb1Byb2ZpbGVcIik7XG5cbi8vIHNyYy9yZXNvbHZlU3RhdGljQ3JlZGVudGlhbHMudHNcblxudmFyIGlzU3RhdGljQ3JlZHNQcm9maWxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXJnKSA9PiBCb29sZWFuKGFyZykgJiYgdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYXJnLmF3c19hY2Nlc3Nfa2V5X2lkID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBhcmcuYXdzX3NlY3JldF9hY2Nlc3Nfa2V5ID09PSBcInN0cmluZ1wiICYmIFtcInVuZGVmaW5lZFwiLCBcInN0cmluZ1wiXS5pbmRleE9mKHR5cGVvZiBhcmcuYXdzX3Nlc3Npb25fdG9rZW4pID4gLTEgJiYgW1widW5kZWZpbmVkXCIsIFwic3RyaW5nXCJdLmluZGV4T2YodHlwZW9mIGFyZy5hd3NfYWNjb3VudF9pZCkgPiAtMSwgXCJpc1N0YXRpY0NyZWRzUHJvZmlsZVwiKTtcbnZhciByZXNvbHZlU3RhdGljQ3JlZGVudGlhbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwcm9maWxlLCBvcHRpb25zKSA9PiB7XG4gIG9wdGlvbnM/LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWluaSAtIHJlc29sdmVTdGF0aWNDcmVkZW50aWFsc1wiKTtcbiAgY29uc3QgY3JlZGVudGlhbHMgPSB7XG4gICAgYWNjZXNzS2V5SWQ6IHByb2ZpbGUuYXdzX2FjY2Vzc19rZXlfaWQsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBwcm9maWxlLmF3c19zZWNyZXRfYWNjZXNzX2tleSxcbiAgICBzZXNzaW9uVG9rZW46IHByb2ZpbGUuYXdzX3Nlc3Npb25fdG9rZW4sXG4gICAgLi4ucHJvZmlsZS5hd3NfY3JlZGVudGlhbF9zY29wZSAmJiB7IGNyZWRlbnRpYWxTY29wZTogcHJvZmlsZS5hd3NfY3JlZGVudGlhbF9zY29wZSB9LFxuICAgIC4uLnByb2ZpbGUuYXdzX2FjY291bnRfaWQgJiYgeyBhY2NvdW50SWQ6IHByb2ZpbGUuYXdzX2FjY291bnRfaWQgfVxuICB9O1xuICByZXR1cm4gKDAsIGltcG9ydF9jbGllbnQuc2V0Q3JlZGVudGlhbEZlYXR1cmUpKGNyZWRlbnRpYWxzLCBcIkNSRURFTlRJQUxTX1BST0ZJTEVcIiwgXCJuXCIpO1xufSwgXCJyZXNvbHZlU3RhdGljQ3JlZGVudGlhbHNcIik7XG5cbi8vIHNyYy9yZXNvbHZlV2ViSWRlbnRpdHlDcmVkZW50aWFscy50c1xuXG52YXIgaXNXZWJJZGVudGl0eVByb2ZpbGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChhcmcpID0+IEJvb2xlYW4oYXJnKSAmJiB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBhcmcud2ViX2lkZW50aXR5X3Rva2VuX2ZpbGUgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGFyZy5yb2xlX2FybiA9PT0gXCJzdHJpbmdcIiAmJiBbXCJ1bmRlZmluZWRcIiwgXCJzdHJpbmdcIl0uaW5kZXhPZih0eXBlb2YgYXJnLnJvbGVfc2Vzc2lvbl9uYW1lKSA+IC0xLCBcImlzV2ViSWRlbnRpdHlQcm9maWxlXCIpO1xudmFyIHJlc29sdmVXZWJJZGVudGl0eUNyZWRlbnRpYWxzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocHJvZmlsZSwgb3B0aW9ucykgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXdlYi1pZGVudGl0eVwiKSkpLnRoZW4oXG4gICh7IGZyb21Ub2tlbkZpbGUgfSkgPT4gZnJvbVRva2VuRmlsZSh7XG4gICAgd2ViSWRlbnRpdHlUb2tlbkZpbGU6IHByb2ZpbGUud2ViX2lkZW50aXR5X3Rva2VuX2ZpbGUsXG4gICAgcm9sZUFybjogcHJvZmlsZS5yb2xlX2FybixcbiAgICByb2xlU2Vzc2lvbk5hbWU6IHByb2ZpbGUucm9sZV9zZXNzaW9uX25hbWUsXG4gICAgcm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHk6IG9wdGlvbnMucm9sZUFzc3VtZXJXaXRoV2ViSWRlbnRpdHksXG4gICAgbG9nZ2VyOiBvcHRpb25zLmxvZ2dlcixcbiAgICBwYXJlbnRDbGllbnRDb25maWc6IG9wdGlvbnMucGFyZW50Q2xpZW50Q29uZmlnXG4gIH0pKCkudGhlbigoY3JlZHMpID0+ICgwLCBpbXBvcnRfY2xpZW50LnNldENyZWRlbnRpYWxGZWF0dXJlKShjcmVkcywgXCJDUkVERU5USUFMU19QUk9GSUxFX1NUU19XRUJfSURfVE9LRU5cIiwgXCJxXCIpKVxuKSwgXCJyZXNvbHZlV2ViSWRlbnRpdHlDcmVkZW50aWFsc1wiKTtcblxuLy8gc3JjL3Jlc29sdmVQcm9maWxlRGF0YS50c1xudmFyIHJlc29sdmVQcm9maWxlRGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHByb2ZpbGVOYW1lLCBwcm9maWxlcywgb3B0aW9ucywgdmlzaXRlZFByb2ZpbGVzID0ge30sIGlzQXNzdW1lUm9sZVJlY3Vyc2l2ZUNhbGwgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBkYXRhID0gcHJvZmlsZXNbcHJvZmlsZU5hbWVdO1xuICBpZiAoT2JqZWN0LmtleXModmlzaXRlZFByb2ZpbGVzKS5sZW5ndGggPiAwICYmIGlzU3RhdGljQ3JlZHNQcm9maWxlKGRhdGEpKSB7XG4gICAgcmV0dXJuIHJlc29sdmVTdGF0aWNDcmVkZW50aWFscyhkYXRhLCBvcHRpb25zKTtcbiAgfVxuICBpZiAoaXNBc3N1bWVSb2xlUmVjdXJzaXZlQ2FsbCB8fCBpc0Fzc3VtZVJvbGVQcm9maWxlKGRhdGEsIHsgcHJvZmlsZTogcHJvZmlsZU5hbWUsIGxvZ2dlcjogb3B0aW9ucy5sb2dnZXIgfSkpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc3VtZVJvbGVDcmVkZW50aWFscyhwcm9maWxlTmFtZSwgcHJvZmlsZXMsIG9wdGlvbnMsIHZpc2l0ZWRQcm9maWxlcyk7XG4gIH1cbiAgaWYgKGlzU3RhdGljQ3JlZHNQcm9maWxlKGRhdGEpKSB7XG4gICAgcmV0dXJuIHJlc29sdmVTdGF0aWNDcmVkZW50aWFscyhkYXRhLCBvcHRpb25zKTtcbiAgfVxuICBpZiAoaXNXZWJJZGVudGl0eVByb2ZpbGUoZGF0YSkpIHtcbiAgICByZXR1cm4gcmVzb2x2ZVdlYklkZW50aXR5Q3JlZGVudGlhbHMoZGF0YSwgb3B0aW9ucyk7XG4gIH1cbiAgaWYgKGlzUHJvY2Vzc1Byb2ZpbGUoZGF0YSkpIHtcbiAgICByZXR1cm4gcmVzb2x2ZVByb2Nlc3NDcmVkZW50aWFscyhvcHRpb25zLCBwcm9maWxlTmFtZSk7XG4gIH1cbiAgaWYgKGlzU3NvUHJvZmlsZShkYXRhKSkge1xuICAgIHJldHVybiBhd2FpdCByZXNvbHZlU3NvQ3JlZGVudGlhbHMocHJvZmlsZU5hbWUsIGRhdGEsIG9wdGlvbnMpO1xuICB9XG4gIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFxuICAgIGBDb3VsZCBub3QgcmVzb2x2ZSBjcmVkZW50aWFscyB1c2luZyBwcm9maWxlOiBbJHtwcm9maWxlTmFtZX1dIGluIGNvbmZpZ3VyYXRpb24vY3JlZGVudGlhbHMgZmlsZShzKS5gLFxuICAgIHsgbG9nZ2VyOiBvcHRpb25zLmxvZ2dlciB9XG4gICk7XG59LCBcInJlc29sdmVQcm9maWxlRGF0YVwiKTtcblxuLy8gc3JjL2Zyb21JbmkudHNcbnZhciBmcm9tSW5pID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoX2luaXQgPSB7fSkgPT4gYXN5bmMgKHsgY2FsbGVyQ2xpZW50Q29uZmlnIH0gPSB7fSkgPT4ge1xuICBjb25zdCBpbml0ID0ge1xuICAgIC4uLl9pbml0LFxuICAgIHBhcmVudENsaWVudENvbmZpZzoge1xuICAgICAgLi4uY2FsbGVyQ2xpZW50Q29uZmlnLFxuICAgICAgLi4uX2luaXQucGFyZW50Q2xpZW50Q29uZmlnXG4gICAgfVxuICB9O1xuICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWluaSAtIGZyb21JbmlcIik7XG4gIGNvbnN0IHByb2ZpbGVzID0gYXdhaXQgKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLnBhcnNlS25vd25GaWxlcykoaW5pdCk7XG4gIHJldHVybiByZXNvbHZlUHJvZmlsZURhdGEoXG4gICAgKDAsIGltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLmdldFByb2ZpbGVOYW1lKSh7XG4gICAgICBwcm9maWxlOiBfaW5pdC5wcm9maWxlID8/IGNhbGxlckNsaWVudENvbmZpZz8ucHJvZmlsZVxuICAgIH0pLFxuICAgIHByb2ZpbGVzLFxuICAgIGluaXRcbiAgKTtcbn0sIFwiZnJvbUluaVwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21Jbmlcbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZDogKCkgPT4gY3JlZGVudGlhbHNUcmVhdGVkQXNFeHBpcmVkLFxuICBjcmVkZW50aWFsc1dpbGxOZWVkUmVmcmVzaDogKCkgPT4gY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2gsXG4gIGRlZmF1bHRQcm92aWRlcjogKCkgPT4gZGVmYXVsdFByb3ZpZGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvZGVmYXVsdFByb3ZpZGVyLnRzXG52YXIgaW1wb3J0X2NyZWRlbnRpYWxfcHJvdmlkZXJfZW52ID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItZW52XCIpO1xuXG52YXIgaW1wb3J0X3NoYXJlZF9pbmlfZmlsZV9sb2FkZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyXCIpO1xuXG4vLyBzcmMvcmVtb3RlUHJvdmlkZXIudHNcbnZhciBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiKTtcbnZhciBFTlZfSU1EU19ESVNBQkxFRCA9IFwiQVdTX0VDMl9NRVRBREFUQV9ESVNBQkxFRFwiO1xudmFyIHJlbW90ZVByb3ZpZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5pdCkgPT4ge1xuICBjb25zdCB7IEVOVl9DTURTX0ZVTExfVVJJLCBFTlZfQ01EU19SRUxBVElWRV9VUkksIGZyb21Db250YWluZXJNZXRhZGF0YSwgZnJvbUluc3RhbmNlTWV0YWRhdGEgfSA9IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX190b0VTTShyZXF1aXJlKFwiQHNtaXRoeS9jcmVkZW50aWFsLXByb3ZpZGVyLWltZHNcIikpKTtcbiAgaWYgKHByb2Nlc3MuZW52W0VOVl9DTURTX1JFTEFUSVZFX1VSSV0gfHwgcHJvY2Vzcy5lbnZbRU5WX0NNRFNfRlVMTF9VUkldKSB7XG4gICAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlIC0gcmVtb3RlUHJvdmlkZXI6OmZyb21IdHRwL2Zyb21Db250YWluZXJNZXRhZGF0YVwiKTtcbiAgICBjb25zdCB7IGZyb21IdHRwIH0gPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9fdG9FU00ocmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItaHR0cFwiKSkpO1xuICAgIHJldHVybiAoMCwgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLmNoYWluKShmcm9tSHR0cChpbml0KSwgZnJvbUNvbnRhaW5lck1ldGFkYXRhKGluaXQpKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnZbRU5WX0lNRFNfRElTQUJMRURdICYmIHByb2Nlc3MuZW52W0VOVl9JTURTX0RJU0FCTEVEXSAhPT0gXCJmYWxzZVwiKSB7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiRUMyIEluc3RhbmNlIE1ldGFkYXRhIFNlcnZpY2UgYWNjZXNzIGRpc2FibGVkXCIsIHsgbG9nZ2VyOiBpbml0LmxvZ2dlciB9KTtcbiAgICB9O1xuICB9XG4gIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSAtIHJlbW90ZVByb3ZpZGVyOjpmcm9tSW5zdGFuY2VNZXRhZGF0YVwiKTtcbiAgcmV0dXJuIGZyb21JbnN0YW5jZU1ldGFkYXRhKGluaXQpO1xufSwgXCJyZW1vdGVQcm92aWRlclwiKTtcblxuLy8gc3JjL2RlZmF1bHRQcm92aWRlci50c1xudmFyIG11bHRpcGxlQ3JlZGVudGlhbFNvdXJjZVdhcm5pbmdFbWl0dGVkID0gZmFsc2U7XG52YXIgZGVmYXVsdFByb3ZpZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5pdCA9IHt9KSA9PiAoMCwgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLm1lbW9pemUpKFxuICAoMCwgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLmNoYWluKShcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9maWxlID0gaW5pdC5wcm9maWxlID8/IHByb2Nlc3MuZW52W2ltcG9ydF9zaGFyZWRfaW5pX2ZpbGVfbG9hZGVyLkVOVl9QUk9GSUxFXTtcbiAgICAgIGlmIChwcm9maWxlKSB7XG4gICAgICAgIGNvbnN0IGVudlN0YXRpY0NyZWRlbnRpYWxzQXJlU2V0ID0gcHJvY2Vzcy5lbnZbaW1wb3J0X2NyZWRlbnRpYWxfcHJvdmlkZXJfZW52LkVOVl9LRVldICYmIHByb2Nlc3MuZW52W2ltcG9ydF9jcmVkZW50aWFsX3Byb3ZpZGVyX2Vudi5FTlZfU0VDUkVUXTtcbiAgICAgICAgaWYgKGVudlN0YXRpY0NyZWRlbnRpYWxzQXJlU2V0KSB7XG4gICAgICAgICAgaWYgKCFtdWx0aXBsZUNyZWRlbnRpYWxTb3VyY2VXYXJuaW5nRW1pdHRlZCkge1xuICAgICAgICAgICAgY29uc3Qgd2FybkZuID0gaW5pdC5sb2dnZXI/Lndhcm4gJiYgaW5pdC5sb2dnZXI/LmNvbnN0cnVjdG9yPy5uYW1lICE9PSBcIk5vT3BMb2dnZXJcIiA/IGluaXQubG9nZ2VyLndhcm4gOiBjb25zb2xlLndhcm47XG4gICAgICAgICAgICB3YXJuRm4oXG4gICAgICAgICAgICAgIGBAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OmZyb21FbnYgV0FSTklORzpcbiAgICBNdWx0aXBsZSBjcmVkZW50aWFsIHNvdXJjZXMgZGV0ZWN0ZWQ6IFxuICAgIEJvdGggQVdTX1BST0ZJTEUgYW5kIHRoZSBwYWlyIEFXU19BQ0NFU1NfS0VZX0lEL0FXU19TRUNSRVRfQUNDRVNTX0tFWSBzdGF0aWMgY3JlZGVudGlhbHMgYXJlIHNldC5cbiAgICBUaGlzIFNESyB3aWxsIHByb2NlZWQgd2l0aCB0aGUgQVdTX1BST0ZJTEUgdmFsdWUuXG4gICAgXG4gICAgSG93ZXZlciwgYSBmdXR1cmUgdmVyc2lvbiBtYXkgY2hhbmdlIHRoaXMgYmVoYXZpb3IgdG8gcHJlZmVyIHRoZSBFTlYgc3RhdGljIGNyZWRlbnRpYWxzLlxuICAgIFBsZWFzZSBlbnN1cmUgdGhhdCB5b3VyIGVudmlyb25tZW50IG9ubHkgc2V0cyBlaXRoZXIgdGhlIEFXU19QUk9GSUxFIG9yIHRoZVxuICAgIEFXU19BQ0NFU1NfS0VZX0lEL0FXU19TRUNSRVRfQUNDRVNTX0tFWSBwYWlyLlxuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG11bHRpcGxlQ3JlZGVudGlhbFNvdXJjZVdhcm5pbmdFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IGltcG9ydF9wcm9wZXJ0eV9wcm92aWRlci5DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoXCJBV1NfUFJPRklMRSBpcyBzZXQsIHNraXBwaW5nIGZyb21FbnYgcHJvdmlkZXIuXCIsIHtcbiAgICAgICAgICBsb2dnZXI6IGluaXQubG9nZ2VyLFxuICAgICAgICAgIHRyeU5leHRMaW5rOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlIC0gZGVmYXVsdFByb3ZpZGVyOjpmcm9tRW52XCIpO1xuICAgICAgcmV0dXJuICgwLCBpbXBvcnRfY3JlZGVudGlhbF9wcm92aWRlcl9lbnYuZnJvbUVudikoaW5pdCkoKTtcbiAgICB9LFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSAtIGRlZmF1bHRQcm92aWRlcjo6ZnJvbVNTT1wiKTtcbiAgICAgIGNvbnN0IHsgc3NvU3RhcnRVcmwsIHNzb0FjY291bnRJZCwgc3NvUmVnaW9uLCBzc29Sb2xlTmFtZSwgc3NvU2Vzc2lvbiB9ID0gaW5pdDtcbiAgICAgIGlmICghc3NvU3RhcnRVcmwgJiYgIXNzb0FjY291bnRJZCAmJiAhc3NvUmVnaW9uICYmICFzc29Sb2xlTmFtZSAmJiAhc3NvU2Vzc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyLkNyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcbiAgICAgICAgICBcIlNraXBwaW5nIFNTTyBwcm92aWRlciBpbiBkZWZhdWx0IGNoYWluIChpbnB1dHMgZG8gbm90IGluY2x1ZGUgU1NPIGZpZWxkcykuXCIsXG4gICAgICAgICAgeyBsb2dnZXI6IGluaXQubG9nZ2VyIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgZnJvbVNTTyB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXNzb1wiKSkpO1xuICAgICAgcmV0dXJuIGZyb21TU08oaW5pdCkoKTtcbiAgICB9LFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSAtIGRlZmF1bHRQcm92aWRlcjo6ZnJvbUluaVwiKTtcbiAgICAgIGNvbnN0IHsgZnJvbUluaSB9ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX3RvRVNNKHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWluaVwiKSkpO1xuICAgICAgcmV0dXJuIGZyb21JbmkoaW5pdCkoKTtcbiAgICB9LFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSAtIGRlZmF1bHRQcm92aWRlcjo6ZnJvbVByb2Nlc3NcIik7XG4gICAgICBjb25zdCB7IGZyb21Qcm9jZXNzIH0gPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9fdG9FU00ocmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItcHJvY2Vzc1wiKSkpO1xuICAgICAgcmV0dXJuIGZyb21Qcm9jZXNzKGluaXQpKCk7XG4gICAgfSxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OmZyb21Ub2tlbkZpbGVcIik7XG4gICAgICBjb25zdCB7IGZyb21Ub2tlbkZpbGUgfSA9IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX190b0VTTShyZXF1aXJlKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci13ZWItaWRlbnRpdHlcIikpKTtcbiAgICAgIHJldHVybiBmcm9tVG9rZW5GaWxlKGluaXQpKCk7XG4gICAgfSxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OnJlbW90ZVByb3ZpZGVyXCIpO1xuICAgICAgcmV0dXJuIChhd2FpdCByZW1vdGVQcm92aWRlcihpbml0KSkoKTtcbiAgICB9LFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIuQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiQ291bGQgbm90IGxvYWQgY3JlZGVudGlhbHMgZnJvbSBhbnkgcHJvdmlkZXJzXCIsIHtcbiAgICAgICAgdHJ5TmV4dExpbms6IGZhbHNlLFxuICAgICAgICBsb2dnZXI6IGluaXQubG9nZ2VyXG4gICAgICB9KTtcbiAgICB9XG4gICksXG4gIGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZCxcbiAgY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2hcbiksIFwiZGVmYXVsdFByb3ZpZGVyXCIpO1xudmFyIGNyZWRlbnRpYWxzV2lsbE5lZWRSZWZyZXNoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY3JlZGVudGlhbHMpID0+IGNyZWRlbnRpYWxzPy5leHBpcmF0aW9uICE9PSB2b2lkIDAsIFwiY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2hcIik7XG52YXIgY3JlZGVudGlhbHNUcmVhdGVkQXNFeHBpcmVkID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY3JlZGVudGlhbHMpID0+IGNyZWRlbnRpYWxzPy5leHBpcmF0aW9uICE9PSB2b2lkIDAgJiYgY3JlZGVudGlhbHMuZXhwaXJhdGlvbi5nZXRUaW1lKCkgLSBEYXRlLm5vdygpIDwgM2U1LCBcImNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZFwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHRQcm92aWRlcixcbiAgY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2gsXG4gIGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZFxufSk7XG5cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucnVsZVNldCA9IHZvaWQgMDtcbmNvbnN0IFMgPSBcInJlcXVpcmVkXCIsIFQgPSBcInR5cGVcIiwgVSA9IFwiZm5cIiwgViA9IFwiYXJndlwiLCBXID0gXCJyZWZcIiwgWCA9IFwicHJvcGVydGllc1wiLCBZID0gXCJoZWFkZXJzXCI7XG5jb25zdCBhID0gZmFsc2UsIGIgPSBcImlzU2V0XCIsIGMgPSBcImVycm9yXCIsIGQgPSBcImVuZHBvaW50XCIsIGUgPSBcInRyZWVcIiwgZiA9IFwiUGFydGl0aW9uUmVzdWx0XCIsIGcgPSBcInN0cmluZ0VxdWFsc1wiLCBoID0gXCJkeW5hbW9kYlwiLCBpID0gXCJnZXRBdHRyXCIsIGogPSBcImF3cy5wYXJzZUFyblwiLCBrID0gXCJQYXJzZWRBcm5cIiwgbCA9IFwiaXNWYWxpZEhvc3RMYWJlbFwiLCBtID0gXCJGaXJzdEFyblwiLCBuID0geyBbU106IGZhbHNlLCBbVF06IFwiU3RyaW5nXCIgfSwgbyA9IHsgW1NdOiB0cnVlLCBcImRlZmF1bHRcIjogZmFsc2UsIFtUXTogXCJCb29sZWFuXCIgfSwgcCA9IHsgW1VdOiBcImJvb2xlYW5FcXVhbHNcIiwgW1ZdOiBbeyBbV106IFwiVXNlRklQU1wiIH0sIHRydWVdIH0sIHEgPSB7IFtVXTogXCJib29sZWFuRXF1YWxzXCIsIFtWXTogW3sgW1ddOiBcIlVzZUR1YWxTdGFja1wiIH0sIHRydWVdIH0sIHIgPSB7fSwgcyA9IHsgW1ddOiBcIlJlZ2lvblwiIH0sIHQgPSB7IFtVXTogXCJib29sZWFuRXF1YWxzXCIsIFtWXTogW3sgW1VdOiBpLCBbVl06IFt7IFtXXTogZiB9LCBcInN1cHBvcnRzRklQU1wiXSB9LCB0cnVlXSB9LCB1ID0geyBbVV06IFwiYm9vbGVhbkVxdWFsc1wiLCBbVl06IFt7IFtVXTogaSwgW1ZdOiBbeyBbV106IGYgfSwgXCJzdXBwb3J0c0R1YWxTdGFja1wiXSB9LCB0cnVlXSB9LCB2ID0geyBcImNvbmRpdGlvbnNcIjogW3sgW1VdOiBiLCBbVl06IFt7IFtXXTogXCJBY2NvdW50SWRFbmRwb2ludE1vZGVcIiB9XSB9LCB7IFtVXTogZywgW1ZdOiBbeyBbV106IFwiQWNjb3VudElkRW5kcG9pbnRNb2RlXCIgfSwgXCJyZXF1aXJlZFwiXSB9XSwgXCJydWxlc1wiOiBbeyBbY106IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBBY2NvdW50SWRFbmRwb2ludE1vZGUgaXMgcmVxdWlyZWQgYW5kIEZJUFMgaXMgZW5hYmxlZCwgYnV0IEZJUFMgYWNjb3VudCBlbmRwb2ludHMgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgW1RdOiBjIH1dLCBbVF06IGUgfSwgdyA9IHsgW1VdOiBiLCBbVl06IFt7IFtXXTogXCJBY2NvdW50SWRFbmRwb2ludE1vZGVcIiB9XSB9LCB4ID0geyBbY106IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBBY2NvdW50SWRFbmRwb2ludE1vZGUgaXMgcmVxdWlyZWQgYW5kIEZJUFMgaXMgZW5hYmxlZCwgYnV0IEZJUFMgYWNjb3VudCBlbmRwb2ludHMgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgW1RdOiBjIH0sIHkgPSB7IFtVXTogaSwgW1ZdOiBbeyBbV106IGYgfSwgXCJuYW1lXCJdIH0sIHogPSB7IFtkXTogeyBcInVybFwiOiBcImh0dHBzOi8vZHluYW1vZGIue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIFtYXToge30sIFtZXToge30gfSwgW1RdOiBkIH0sIEEgPSB7IFtVXTogXCJub3RcIiwgW1ZdOiBbcF0gfSwgQiA9IHsgW2NdOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogQWNjb3VudElkRW5kcG9pbnRNb2RlIGlzIHJlcXVpcmVkIGFuZCBEdWFsU3RhY2sgaXMgZW5hYmxlZCwgYnV0IER1YWxTdGFjayBhY2NvdW50IGVuZHBvaW50cyBhcmUgbm90IHN1cHBvcnRlZFwiLCBbVF06IGMgfSwgQyA9IHsgW1VdOiBcIm5vdFwiLCBbVl06IFt7IFtVXTogZywgW1ZdOiBbeyBbV106IFwiQWNjb3VudElkRW5kcG9pbnRNb2RlXCIgfSwgXCJkaXNhYmxlZFwiXSB9XSB9LCBEID0geyBbVV06IGcsIFtWXTogW3ksIFwiYXdzXCJdIH0sIEUgPSB7IFtVXTogXCJub3RcIiwgW1ZdOiBbcV0gfSwgRiA9IHsgW1VdOiBnLCBbVl06IFt7IFtVXTogaSwgW1ZdOiBbeyBbV106IGsgfSwgXCJzZXJ2aWNlXCJdIH0sIGhdIH0sIEcgPSB7IFtVXTogbCwgW1ZdOiBbeyBbVV06IGksIFtWXTogW3sgW1ddOiBrIH0sIFwicmVnaW9uXCJdIH0sIGZhbHNlXSB9LCBIID0geyBbVV06IGcsIFtWXTogW3sgW1VdOiBpLCBbVl06IFt7IFtXXTogayB9LCBcInJlZ2lvblwiXSB9LCBcIntSZWdpb259XCJdIH0sIEkgPSB7IFtVXTogbCwgW1ZdOiBbeyBbVV06IGksIFtWXTogW3sgW1ddOiBrIH0sIFwiYWNjb3VudElkXCJdIH0sIGZhbHNlXSB9LCBKID0geyBcInVybFwiOiBcImh0dHBzOi8ve1BhcnNlZEFybiNhY2NvdW50SWR9LmRkYi57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgW1hdOiB7fSwgW1ldOiB7fSB9LCBLID0geyBbV106IFwiUmVzb3VyY2VBcm5MaXN0XCIgfSwgTCA9IHsgW1ddOiBcIkFjY291bnRJZFwiIH0sIE0gPSBbcF0sIE4gPSBbcV0sIE8gPSBbc10sIFAgPSBbdywgeyBbVV06IGcsIFtWXTogW3sgW1ddOiBcIkFjY291bnRJZEVuZHBvaW50TW9kZVwiIH0sIFwicmVxdWlyZWRcIl0gfV0sIFEgPSBbQV0sIFIgPSBbeyBbV106IFwiUmVzb3VyY2VBcm5cIiB9XTtcbmNvbnN0IF9kYXRhID0geyB2ZXJzaW9uOiBcIjEuMFwiLCBwYXJhbWV0ZXJzOiB7IFJlZ2lvbjogbiwgVXNlRHVhbFN0YWNrOiBvLCBVc2VGSVBTOiBvLCBFbmRwb2ludDogbiwgQWNjb3VudElkOiBuLCBBY2NvdW50SWRFbmRwb2ludE1vZGU6IG4sIFJlc291cmNlQXJuOiBuLCBSZXNvdXJjZUFybkxpc3Q6IHsgW1NdOiBhLCBbVF06IFwic3RyaW5nQXJyYXlcIiB9IH0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbVV06IGIsIFtWXTogW3sgW1ddOiBcIkVuZHBvaW50XCIgfV0gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBNLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCBbVF06IGMgfSwgeyBjb25kaXRpb25zOiBOLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IER1YWxzdGFjayBhbmQgY3VzdG9tIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIFtUXTogYyB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJ7RW5kcG9pbnR9XCIsIFtYXTogciwgW1ldOiByIH0sIFtUXTogZCB9XSwgW1RdOiBlIH0sIHsgY29uZGl0aW9uczogW3sgW1VdOiBiLCBbVl06IE8gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbVV06IFwiYXdzLnBhcnRpdGlvblwiLCBbVl06IE8sIGFzc2lnbjogZiB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFtVXTogZywgW1ZdOiBbcywgXCJsb2NhbFwiXSB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IE0sIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRklQUyBhbmQgbG9jYWwgZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgW1RdOiBjIH0sIHsgY29uZGl0aW9uczogTiwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGxvY2FsIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIFtUXTogYyB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwOi8vbG9jYWxob3N0OjgwMDBcIiwgW1hdOiB7IGF1dGhTY2hlbWVzOiBbeyBzaWduaW5nUmVnaW9uOiBcInVzLWVhc3QtMVwiLCBuYW1lOiBcInNpZ3Y0XCIsIHNpZ25pbmdOYW1lOiBoIH1dIH0sIFtZXTogciB9LCBbVF06IGQgfV0sIFtUXTogZSB9LCB7IGNvbmRpdGlvbnM6IFtwLCBxXSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt0LCB1XSwgcnVsZXM6IFt2LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL2R5bmFtb2RiLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIFtYXTogciwgW1ldOiByIH0sIFtUXTogZCB9XSwgW1RdOiBlIH0sIHsgZXJyb3I6IFwiRklQUyBhbmQgRHVhbFN0YWNrIGFyZSBlbmFibGVkLCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBvbmUgb3IgYm90aFwiLCBbVF06IGMgfV0sIFtUXTogZSB9LCB7IGNvbmRpdGlvbnM6IE0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbdF0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbVV06IGcsIFtWXTogW3ksIFwiYXdzLXVzLWdvdlwiXSB9XSwgcnVsZXM6IFt2LCB6XSwgW1RdOiBlIH0sIHYsIHsgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vZHluYW1vZGItZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgW1hdOiByLCBbWV06IHIgfSwgW1RdOiBkIH1dLCBbVF06IGUgfSwgeyBlcnJvcjogXCJGSVBTIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRklQU1wiLCBbVF06IGMgfV0sIFtUXTogZSB9LCB7IGNvbmRpdGlvbnM6IE4sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbdV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBQLCBydWxlczogW3sgY29uZGl0aW9uczogUSwgcnVsZXM6IFtCXSwgW1RdOiBlIH0sIHhdLCBbVF06IGUgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9keW5hbW9kYi57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgW1hdOiByLCBbWV06IHIgfSwgW1RdOiBkIH1dLCBbVF06IGUgfSwgeyBlcnJvcjogXCJEdWFsU3RhY2sgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBEdWFsU3RhY2tcIiwgW1RdOiBjIH1dLCBbVF06IGUgfSwgeyBjb25kaXRpb25zOiBbdywgQywgRCwgQSwgRSwgeyBbVV06IGIsIFtWXTogUiB9LCB7IFtVXTogaiwgW1ZdOiBSLCBhc3NpZ246IGsgfSwgRiwgRywgSCwgSV0sIGVuZHBvaW50OiBKLCBbVF06IGQgfSwgeyBjb25kaXRpb25zOiBbdywgQywgRCwgQSwgRSwgeyBbVV06IGIsIFtWXTogW0tdIH0sIHsgW1VdOiBpLCBbVl06IFtLLCBcIlswXVwiXSwgYXNzaWduOiBtIH0sIHsgW1VdOiBqLCBbVl06IFt7IFtXXTogbSB9XSwgYXNzaWduOiBrIH0sIEYsIEcsIEgsIEldLCBlbmRwb2ludDogSiwgW1RdOiBkIH0sIHsgY29uZGl0aW9uczogW3csIEMsIEQsIEEsIEUsIHsgW1VdOiBiLCBbVl06IFtMXSB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFtVXTogbCwgW1ZdOiBbTCwgYV0gfV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly97QWNjb3VudElkfS5kZGIue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIFtYXTogciwgW1ldOiByIH0sIFtUXTogZCB9XSwgW1RdOiBlIH0sIHsgZXJyb3I6IFwiQ3JlZGVudGlhbHMtc291cmNlZCBhY2NvdW50IElEIHBhcmFtZXRlciBpcyBpbnZhbGlkXCIsIFtUXTogYyB9XSwgW1RdOiBlIH0sIHsgY29uZGl0aW9uczogUCwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFEsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbRV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbRF0sIHJ1bGVzOiBbeyBlcnJvcjogXCJBY2NvdW50SWRFbmRwb2ludE1vZGUgaXMgcmVxdWlyZWQgYnV0IG5vIEFjY291bnRJRCB3YXMgcHJvdmlkZWQgb3IgYWJsZSB0byBiZSBsb2FkZWRcIiwgW1RdOiBjIH1dLCBbVF06IGUgfSwgeyBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEFjY291bnRJZEVuZHBvaW50TW9kZSBpcyByZXF1aXJlZCBidXQgYWNjb3VudCBlbmRwb2ludHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBwYXJ0aXRpb25cIiwgW1RdOiBjIH1dLCBbVF06IGUgfSwgQl0sIFtUXTogZSB9LCB4XSwgW1RdOiBlIH0sIHpdLCBbVF06IGUgfV0sIFtUXTogZSB9LCB7IGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogTWlzc2luZyBSZWdpb25cIiwgW1RdOiBjIH1dIH07XG5leHBvcnRzLnJ1bGVTZXQgPSBfZGF0YTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsX2VuZHBvaW50c18xID0gcmVxdWlyZShcIkBhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzXCIpO1xuY29uc3QgdXRpbF9lbmRwb2ludHNfMiA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCIpO1xuY29uc3QgcnVsZXNldF8xID0gcmVxdWlyZShcIi4vcnVsZXNldFwiKTtcbmNvbnN0IGNhY2hlID0gbmV3IHV0aWxfZW5kcG9pbnRzXzIuRW5kcG9pbnRDYWNoZSh7XG4gICAgc2l6ZTogNTAsXG4gICAgcGFyYW1zOiBbXG4gICAgICAgIFwiQWNjb3VudElkXCIsXG4gICAgICAgIFwiQWNjb3VudElkRW5kcG9pbnRNb2RlXCIsXG4gICAgICAgIFwiRW5kcG9pbnRcIixcbiAgICAgICAgXCJSZWdpb25cIixcbiAgICAgICAgXCJSZXNvdXJjZUFyblwiLFxuICAgICAgICBcIlJlc291cmNlQXJuTGlzdFwiLFxuICAgICAgICBcIlVzZUR1YWxTdGFja1wiLFxuICAgICAgICBcIlVzZUZJUFNcIixcbiAgICBdLFxufSk7XG5jb25zdCBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciA9IChlbmRwb2ludFBhcmFtcywgY29udGV4dCA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChlbmRwb2ludFBhcmFtcywgKCkgPT4gKDAsIHV0aWxfZW5kcG9pbnRzXzIucmVzb2x2ZUVuZHBvaW50KShydWxlc2V0XzEucnVsZVNldCwge1xuICAgICAgICBlbmRwb2ludFBhcmFtczogZW5kcG9pbnRQYXJhbXMsXG4gICAgICAgIGxvZ2dlcjogY29udGV4dC5sb2dnZXIsXG4gICAgfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgPSBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlcjtcbnV0aWxfZW5kcG9pbnRzXzIuY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnMuYXdzID0gdXRpbF9lbmRwb2ludHNfMS5hd3NFbmRwb2ludEZ1bmN0aW9ucztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UnVudGltZUNvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlXCIpO1xuY29uc3Qgc21pdGh5X2NsaWVudF8xID0gcmVxdWlyZShcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiKTtcbmNvbnN0IHVybF9wYXJzZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3VybC1wYXJzZXJcIik7XG5jb25zdCB1dGlsX2Jhc2U2NF8xID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIik7XG5jb25zdCB1dGlsX3V0ZjhfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtdXRmOFwiKTtcbmNvbnN0IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiKTtcbmNvbnN0IGVuZHBvaW50UmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXJcIik7XG5jb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVZlcnNpb246IFwiMjAxMi0wOC0xMFwiLFxuICAgICAgICBiYXNlNjREZWNvZGVyOiBjb25maWc/LmJhc2U2NERlY29kZXIgPz8gdXRpbF9iYXNlNjRfMS5mcm9tQmFzZTY0LFxuICAgICAgICBiYXNlNjRFbmNvZGVyOiBjb25maWc/LmJhc2U2NEVuY29kZXIgPz8gdXRpbF9iYXNlNjRfMS50b0Jhc2U2NCxcbiAgICAgICAgZGlzYWJsZUhvc3RQcmVmaXg6IGNvbmZpZz8uZGlzYWJsZUhvc3RQcmVmaXggPz8gZmFsc2UsXG4gICAgICAgIGVuZHBvaW50UHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnRQcm92aWRlciA/PyBlbmRwb2ludFJlc29sdmVyXzEuZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIsXG4gICAgICAgIGV4dGVuc2lvbnM6IGNvbmZpZz8uZXh0ZW5zaW9ucyA/PyBbXSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnPy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyID8/IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXJfMS5kZWZhdWx0RHluYW1vREJIdHRwQXV0aFNjaGVtZVByb3ZpZGVyLFxuICAgICAgICBodHRwQXV0aFNjaGVtZXM6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVzID8/IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlbWVJZDogXCJhd3MuYXV0aCNzaWd2NFwiLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXI6IChpcGMpID0+IGlwYy5nZXRJZGVudGl0eVByb3ZpZGVyKFwiYXdzLmF1dGgjc2lndjRcIiksXG4gICAgICAgICAgICAgICAgc2lnbmVyOiBuZXcgY29yZV8xLkF3c1Nka1NpZ1Y0U2lnbmVyKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBsb2dnZXI6IGNvbmZpZz8ubG9nZ2VyID8/IG5ldyBzbWl0aHlfY2xpZW50XzEuTm9PcExvZ2dlcigpLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbmZpZz8uc2VydmljZUlkID8/IFwiRHluYW1vREJcIixcbiAgICAgICAgdXJsUGFyc2VyOiBjb25maWc/LnVybFBhcnNlciA/PyB1cmxfcGFyc2VyXzEucGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IHV0aWxfdXRmOF8xLmZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB1dGlsX3V0ZjhfMS50b1V0ZjgsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldFJ1bnRpbWVDb25maWcgPSBnZXRSdW50aW1lQ29uZmlnO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSdW50aW1lQ29uZmlnID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IHBhY2thZ2VfanNvbl8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKSk7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZVwiKTtcbmNvbnN0IGFjY291bnRfaWRfZW5kcG9pbnRfMSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlL2FjY291bnQtaWQtZW5kcG9pbnRcIik7XG5jb25zdCBjcmVkZW50aWFsX3Byb3ZpZGVyX25vZGVfMSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGVcIik7XG5jb25zdCBtaWRkbGV3YXJlX2VuZHBvaW50X2Rpc2NvdmVyeV8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL21pZGRsZXdhcmUtZW5kcG9pbnQtZGlzY292ZXJ5XCIpO1xuY29uc3QgdXRpbF91c2VyX2FnZW50X25vZGVfMSA9IHJlcXVpcmUoXCJAYXdzLXNkay91dGlsLXVzZXItYWdlbnQtbm9kZVwiKTtcbmNvbnN0IGNvbmZpZ19yZXNvbHZlcl8xID0gcmVxdWlyZShcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCIpO1xuY29uc3QgaGFzaF9ub2RlXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9oYXNoLW5vZGVcIik7XG5jb25zdCBtaWRkbGV3YXJlX3JldHJ5XzEgPSByZXF1aXJlKFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCIpO1xuY29uc3Qgbm9kZV9jb25maWdfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCIpO1xuY29uc3Qgbm9kZV9odHRwX2hhbmRsZXJfMSA9IHJlcXVpcmUoXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCIpO1xuY29uc3QgdXRpbF9ib2R5X2xlbmd0aF9ub2RlXzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGVcIik7XG5jb25zdCB1dGlsX3JldHJ5XzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLXJldHJ5XCIpO1xuY29uc3QgcnVudGltZUNvbmZpZ19zaGFyZWRfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWVDb25maWcuc2hhcmVkXCIpO1xuY29uc3Qgc21pdGh5X2NsaWVudF8xID0gcmVxdWlyZShcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiKTtcbmNvbnN0IHV0aWxfZGVmYXVsdHNfbW9kZV9ub2RlXzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZVwiKTtcbmNvbnN0IHNtaXRoeV9jbGllbnRfMiA9IHJlcXVpcmUoXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIik7XG5jb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgICgwLCBzbWl0aHlfY2xpZW50XzIuZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbikocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBkZWZhdWx0c01vZGUgPSAoMCwgdXRpbF9kZWZhdWx0c19tb2RlX25vZGVfMS5yZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnKShjb25maWcpO1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWdQcm92aWRlciA9ICgpID0+IGRlZmF1bHRzTW9kZSgpLnRoZW4oc21pdGh5X2NsaWVudF8xLmxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUpO1xuICAgIGNvbnN0IGNsaWVudFNoYXJlZFZhbHVlcyA9ICgwLCBydW50aW1lQ29uZmlnX3NoYXJlZF8xLmdldFJ1bnRpbWVDb25maWcpKGNvbmZpZyk7XG4gICAgKDAsIGNvcmVfMS5lbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uKShwcm9jZXNzLnZlcnNpb24pO1xuICAgIGNvbnN0IHByb2ZpbGVDb25maWcgPSB7IHByb2ZpbGU6IGNvbmZpZz8ucHJvZmlsZSB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNsaWVudFNoYXJlZFZhbHVlcyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBydW50aW1lOiBcIm5vZGVcIixcbiAgICAgICAgZGVmYXVsdHNNb2RlLFxuICAgICAgICBhY2NvdW50SWRFbmRwb2ludE1vZGU6IGNvbmZpZz8uYWNjb3VudElkRW5kcG9pbnRNb2RlID8/ICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKGFjY291bnRfaWRfZW5kcG9pbnRfMS5OT0RFX0FDQ09VTlRfSURfRU5EUE9JTlRfTU9ERV9DT05GSUdfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiBjb25maWc/LmF1dGhTY2hlbWVQcmVmZXJlbmNlID8/ICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKGNvcmVfMS5OT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgICAgIGJvZHlMZW5ndGhDaGVja2VyOiBjb25maWc/LmJvZHlMZW5ndGhDaGVja2VyID8/IHV0aWxfYm9keV9sZW5ndGhfbm9kZV8xLmNhbGN1bGF0ZUJvZHlMZW5ndGgsXG4gICAgICAgIGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXI6IGNvbmZpZz8uY3JlZGVudGlhbERlZmF1bHRQcm92aWRlciA/PyBjcmVkZW50aWFsX3Byb3ZpZGVyX25vZGVfMS5kZWZhdWx0UHJvdmlkZXIsXG4gICAgICAgIGRlZmF1bHRVc2VyQWdlbnRQcm92aWRlcjogY29uZmlnPy5kZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgPz9cbiAgICAgICAgICAgICgwLCB1dGlsX3VzZXJfYWdlbnRfbm9kZV8xLmNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlcikoeyBzZXJ2aWNlSWQ6IGNsaWVudFNoYXJlZFZhbHVlcy5zZXJ2aWNlSWQsIGNsaWVudFZlcnNpb246IHBhY2thZ2VfanNvbl8xLmRlZmF1bHQudmVyc2lvbiB9KSxcbiAgICAgICAgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkUHJvdmlkZXI6IGNvbmZpZz8uZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkUHJvdmlkZXIgPz8gKDAsIG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEubG9hZENvbmZpZykobWlkZGxld2FyZV9lbmRwb2ludF9kaXNjb3ZlcnlfMS5OT0RFX0VORFBPSU5UX0RJU0NPVkVSWV9DT05GSUdfT1BUSU9OUywgcHJvZmlsZUNvbmZpZyksXG4gICAgICAgIG1heEF0dGVtcHRzOiBjb25maWc/Lm1heEF0dGVtcHRzID8/ICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKG1pZGRsZXdhcmVfcmV0cnlfMS5OT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBjb25maWcpLFxuICAgICAgICByZWdpb246IGNvbmZpZz8ucmVnaW9uID8/XG4gICAgICAgICAgICAoMCwgbm9kZV9jb25maWdfcHJvdmlkZXJfMS5sb2FkQ29uZmlnKShjb25maWdfcmVzb2x2ZXJfMS5OT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgeyAuLi5jb25maWdfcmVzb2x2ZXJfMS5OT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCAuLi5wcm9maWxlQ29uZmlnIH0pLFxuICAgICAgICByZXF1ZXN0SGFuZGxlcjogbm9kZV9odHRwX2hhbmRsZXJfMS5Ob2RlSHR0cEhhbmRsZXIuY3JlYXRlKGNvbmZpZz8ucmVxdWVzdEhhbmRsZXIgPz8gZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKSxcbiAgICAgICAgcmV0cnlNb2RlOiBjb25maWc/LnJldHJ5TW9kZSA/P1xuICAgICAgICAgICAgKDAsIG5vZGVfY29uZmlnX3Byb3ZpZGVyXzEubG9hZENvbmZpZykoe1xuICAgICAgICAgICAgICAgIC4uLm1pZGRsZXdhcmVfcmV0cnlfMS5OT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYXN5bmMgKCkgPT4gKGF3YWl0IGRlZmF1bHRDb25maWdQcm92aWRlcigpKS5yZXRyeU1vZGUgfHwgdXRpbF9yZXRyeV8xLkRFRkFVTFRfUkVUUllfTU9ERSxcbiAgICAgICAgICAgIH0sIGNvbmZpZyksXG4gICAgICAgIHNoYTI1NjogY29uZmlnPy5zaGEyNTYgPz8gaGFzaF9ub2RlXzEuSGFzaC5iaW5kKG51bGwsIFwic2hhMjU2XCIpLFxuICAgICAgICBzdHJlYW1Db2xsZWN0b3I6IGNvbmZpZz8uc3RyZWFtQ29sbGVjdG9yID8/IG5vZGVfaHR0cF9oYW5kbGVyXzEuc3RyZWFtQ29sbGVjdG9yLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogY29uZmlnPy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyAoMCwgbm9kZV9jb25maWdfcHJvdmlkZXJfMS5sb2FkQ29uZmlnKShjb25maWdfcmVzb2x2ZXJfMS5OT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIHByb2ZpbGVDb25maWcpLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGNvbmZpZz8udXNlRmlwc0VuZHBvaW50ID8/ICgwLCBub2RlX2NvbmZpZ19wcm92aWRlcl8xLmxvYWRDb25maWcpKGNvbmZpZ19yZXNvbHZlcl8xLk5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIHByb2ZpbGVDb25maWcpLFxuICAgICAgICB1c2VyQWdlbnRBcHBJZDogY29uZmlnPy51c2VyQWdlbnRBcHBJZCA/PyAoMCwgbm9kZV9jb25maWdfcHJvdmlkZXJfMS5sb2FkQ29uZmlnKSh1dGlsX3VzZXJfYWdlbnRfbm9kZV8xLk5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TLCBwcm9maWxlQ29uZmlnKSxcbiAgICB9O1xufTtcbmV4cG9ydHMuZ2V0UnVudGltZUNvbmZpZyA9IGdldFJ1bnRpbWVDb25maWc7XG4iLCAidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIFdhaXRlclN0YXRlOiAoKSA9PiBXYWl0ZXJTdGF0ZSxcbiAgY2hlY2tFeGNlcHRpb25zOiAoKSA9PiBjaGVja0V4Y2VwdGlvbnMsXG4gIGNyZWF0ZVdhaXRlcjogKCkgPT4gY3JlYXRlV2FpdGVyLFxuICB3YWl0ZXJTZXJ2aWNlRGVmYXVsdHM6ICgpID0+IHdhaXRlclNlcnZpY2VEZWZhdWx0c1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy91dGlscy9zbGVlcC50c1xudmFyIHNsZWVwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc2Vjb25kcykgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgc2Vjb25kcyAqIDFlMykpO1xufSwgXCJzbGVlcFwiKTtcblxuLy8gc3JjL3dhaXRlci50c1xudmFyIHdhaXRlclNlcnZpY2VEZWZhdWx0cyA9IHtcbiAgbWluRGVsYXk6IDIsXG4gIG1heERlbGF5OiAxMjBcbn07XG52YXIgV2FpdGVyU3RhdGUgPSAvKiBAX19QVVJFX18gKi8gKChXYWl0ZXJTdGF0ZTIpID0+IHtcbiAgV2FpdGVyU3RhdGUyW1wiQUJPUlRFRFwiXSA9IFwiQUJPUlRFRFwiO1xuICBXYWl0ZXJTdGF0ZTJbXCJGQUlMVVJFXCJdID0gXCJGQUlMVVJFXCI7XG4gIFdhaXRlclN0YXRlMltcIlNVQ0NFU1NcIl0gPSBcIlNVQ0NFU1NcIjtcbiAgV2FpdGVyU3RhdGUyW1wiUkVUUllcIl0gPSBcIlJFVFJZXCI7XG4gIFdhaXRlclN0YXRlMltcIlRJTUVPVVRcIl0gPSBcIlRJTUVPVVRcIjtcbiAgcmV0dXJuIFdhaXRlclN0YXRlMjtcbn0pKFdhaXRlclN0YXRlIHx8IHt9KTtcbnZhciBjaGVja0V4Y2VwdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChyZXN1bHQpID0+IHtcbiAgaWYgKHJlc3VsdC5zdGF0ZSA9PT0gXCJBQk9SVEVEXCIgLyogQUJPUlRFRCAqLykge1xuICAgIGNvbnN0IGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICBgJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgcmVhc29uOiBcIlJlcXVlc3Qgd2FzIGFib3J0ZWRcIlxuICAgICAgfSl9YFxuICAgICk7XG4gICAgYWJvcnRFcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgdGhyb3cgYWJvcnRFcnJvcjtcbiAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdGUgPT09IFwiVElNRU9VVFwiIC8qIFRJTUVPVVQgKi8pIHtcbiAgICBjb25zdCB0aW1lb3V0RXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICBgJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgcmVhc29uOiBcIldhaXRlciBoYXMgdGltZWQgb3V0XCJcbiAgICAgIH0pfWBcbiAgICApO1xuICAgIHRpbWVvdXRFcnJvci5uYW1lID0gXCJUaW1lb3V0RXJyb3JcIjtcbiAgICB0aHJvdyB0aW1lb3V0RXJyb3I7XG4gIH0gZWxzZSBpZiAocmVzdWx0LnN0YXRlICE9PSBcIlNVQ0NFU1NcIiAvKiBTVUNDRVNTICovKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9YCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0sIFwiY2hlY2tFeGNlcHRpb25zXCIpO1xuXG4vLyBzcmMvcG9sbGVyLnRzXG52YXIgZXhwb25lbnRpYWxCYWNrb2ZmV2l0aEppdHRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG1pbkRlbGF5LCBtYXhEZWxheSwgYXR0ZW1wdENlaWxpbmcsIGF0dGVtcHQpID0+IHtcbiAgaWYgKGF0dGVtcHQgPiBhdHRlbXB0Q2VpbGluZylcbiAgICByZXR1cm4gbWF4RGVsYXk7XG4gIGNvbnN0IGRlbGF5ID0gbWluRGVsYXkgKiAyICoqIChhdHRlbXB0IC0gMSk7XG4gIHJldHVybiByYW5kb21JblJhbmdlKG1pbkRlbGF5LCBkZWxheSk7XG59LCBcImV4cG9uZW50aWFsQmFja29mZldpdGhKaXR0ZXJcIik7XG52YXIgcmFuZG9tSW5SYW5nZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG1pbiwgbWF4KSA9PiBtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiksIFwicmFuZG9tSW5SYW5nZVwiKTtcbnZhciBydW5Qb2xsaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoeyBtaW5EZWxheSwgbWF4RGVsYXksIG1heFdhaXRUaW1lLCBhYm9ydENvbnRyb2xsZXIsIGNsaWVudCwgYWJvcnRTaWduYWwgfSwgaW5wdXQsIGFjY2VwdG9yQ2hlY2tzKSA9PiB7XG4gIGNvbnN0IG9ic2VydmVkUmVzcG9uc2VzID0ge307XG4gIGNvbnN0IHsgc3RhdGUsIHJlYXNvbiB9ID0gYXdhaXQgYWNjZXB0b3JDaGVja3MoY2xpZW50LCBpbnB1dCk7XG4gIGlmIChyZWFzb24pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlTWVzc2FnZUZyb21SZXNwb25zZShyZWFzb24pO1xuICAgIG9ic2VydmVkUmVzcG9uc2VzW21lc3NhZ2VdIHw9IDA7XG4gICAgb2JzZXJ2ZWRSZXNwb25zZXNbbWVzc2FnZV0gKz0gMTtcbiAgfVxuICBpZiAoc3RhdGUgIT09IFwiUkVUUllcIiAvKiBSRVRSWSAqLykge1xuICAgIHJldHVybiB7IHN0YXRlLCByZWFzb24sIG9ic2VydmVkUmVzcG9uc2VzIH07XG4gIH1cbiAgbGV0IGN1cnJlbnRBdHRlbXB0ID0gMTtcbiAgY29uc3Qgd2FpdFVudGlsID0gRGF0ZS5ub3coKSArIG1heFdhaXRUaW1lICogMWUzO1xuICBjb25zdCBhdHRlbXB0Q2VpbGluZyA9IE1hdGgubG9nKG1heERlbGF5IC8gbWluRGVsYXkpIC8gTWF0aC5sb2coMikgKyAxO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXI/LnNpZ25hbD8uYWJvcnRlZCB8fCBhYm9ydFNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IFwiQWJvcnRDb250cm9sbGVyIHNpZ25hbCBhYm9ydGVkLlwiO1xuICAgICAgb2JzZXJ2ZWRSZXNwb25zZXNbbWVzc2FnZV0gfD0gMDtcbiAgICAgIG9ic2VydmVkUmVzcG9uc2VzW21lc3NhZ2VdICs9IDE7XG4gICAgICByZXR1cm4geyBzdGF0ZTogXCJBQk9SVEVEXCIgLyogQUJPUlRFRCAqLywgb2JzZXJ2ZWRSZXNwb25zZXMgfTtcbiAgICB9XG4gICAgY29uc3QgZGVsYXkgPSBleHBvbmVudGlhbEJhY2tvZmZXaXRoSml0dGVyKG1pbkRlbGF5LCBtYXhEZWxheSwgYXR0ZW1wdENlaWxpbmcsIGN1cnJlbnRBdHRlbXB0KTtcbiAgICBpZiAoRGF0ZS5ub3coKSArIGRlbGF5ICogMWUzID4gd2FpdFVudGlsKSB7XG4gICAgICByZXR1cm4geyBzdGF0ZTogXCJUSU1FT1VUXCIgLyogVElNRU9VVCAqLywgb2JzZXJ2ZWRSZXNwb25zZXMgfTtcbiAgICB9XG4gICAgYXdhaXQgc2xlZXAoZGVsYXkpO1xuICAgIGNvbnN0IHsgc3RhdGU6IHN0YXRlMiwgcmVhc29uOiByZWFzb24yIH0gPSBhd2FpdCBhY2NlcHRvckNoZWNrcyhjbGllbnQsIGlucHV0KTtcbiAgICBpZiAocmVhc29uMikge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZU1lc3NhZ2VGcm9tUmVzcG9uc2UocmVhc29uMik7XG4gICAgICBvYnNlcnZlZFJlc3BvbnNlc1ttZXNzYWdlXSB8PSAwO1xuICAgICAgb2JzZXJ2ZWRSZXNwb25zZXNbbWVzc2FnZV0gKz0gMTtcbiAgICB9XG4gICAgaWYgKHN0YXRlMiAhPT0gXCJSRVRSWVwiIC8qIFJFVFJZICovKSB7XG4gICAgICByZXR1cm4geyBzdGF0ZTogc3RhdGUyLCByZWFzb246IHJlYXNvbjIsIG9ic2VydmVkUmVzcG9uc2VzIH07XG4gICAgfVxuICAgIGN1cnJlbnRBdHRlbXB0ICs9IDE7XG4gIH1cbn0sIFwicnVuUG9sbGluZ1wiKTtcbnZhciBjcmVhdGVNZXNzYWdlRnJvbVJlc3BvbnNlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocmVhc29uKSA9PiB7XG4gIGlmIChyZWFzb24/LiRyZXNwb25zZUJvZHlUZXh0KSB7XG4gICAgcmV0dXJuIGBEZXNlcmlhbGl6YXRpb24gZXJyb3IgZm9yIGJvZHk6ICR7cmVhc29uLiRyZXNwb25zZUJvZHlUZXh0fWA7XG4gIH1cbiAgaWYgKHJlYXNvbj8uJG1ldGFkYXRhPy5odHRwU3RhdHVzQ29kZSkge1xuICAgIGlmIChyZWFzb24uJHJlc3BvbnNlIHx8IHJlYXNvbi5tZXNzYWdlKSB7XG4gICAgICByZXR1cm4gYCR7cmVhc29uLiRyZXNwb25zZS5zdGF0dXNDb2RlID8/IHJlYXNvbi4kbWV0YWRhdGEuaHR0cFN0YXR1c0NvZGUgPz8gXCJVbmtub3duXCJ9OiAke3JlYXNvbi5tZXNzYWdlfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtyZWFzb24uJG1ldGFkYXRhLmh0dHBTdGF0dXNDb2RlfTogT0tgO1xuICB9XG4gIHJldHVybiBTdHJpbmcocmVhc29uPy5tZXNzYWdlID8/IEpTT04uc3RyaW5naWZ5KHJlYXNvbikgPz8gXCJVbmtub3duXCIpO1xufSwgXCJjcmVhdGVNZXNzYWdlRnJvbVJlc3BvbnNlXCIpO1xuXG4vLyBzcmMvdXRpbHMvdmFsaWRhdGUudHNcbnZhciB2YWxpZGF0ZVdhaXRlck9wdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zKSA9PiB7XG4gIGlmIChvcHRpb25zLm1heFdhaXRUaW1lIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFdhaXRlckNvbmZpZ3VyYXRpb24ubWF4V2FpdFRpbWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMGApO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMubWluRGVsYXkgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgV2FpdGVyQ29uZmlndXJhdGlvbi5taW5EZWxheSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwYCk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tYXhEZWxheSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBXYWl0ZXJDb25maWd1cmF0aW9uLm1heERlbGF5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDBgKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLm1heFdhaXRUaW1lIDw9IG9wdGlvbnMubWluRGVsYXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgV2FpdGVyQ29uZmlndXJhdGlvbi5tYXhXYWl0VGltZSBbJHtvcHRpb25zLm1heFdhaXRUaW1lfV0gbXVzdCBiZSBncmVhdGVyIHRoYW4gV2FpdGVyQ29uZmlndXJhdGlvbi5taW5EZWxheSBbJHtvcHRpb25zLm1pbkRlbGF5fV0gZm9yIHRoaXMgd2FpdGVyYFxuICAgICk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tYXhEZWxheSA8IG9wdGlvbnMubWluRGVsYXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgV2FpdGVyQ29uZmlndXJhdGlvbi5tYXhEZWxheSBbJHtvcHRpb25zLm1heERlbGF5fV0gbXVzdCBiZSBncmVhdGVyIHRoYW4gV2FpdGVyQ29uZmlndXJhdGlvbi5taW5EZWxheSBbJHtvcHRpb25zLm1pbkRlbGF5fV0gZm9yIHRoaXMgd2FpdGVyYFxuICAgICk7XG4gIH1cbn0sIFwidmFsaWRhdGVXYWl0ZXJPcHRpb25zXCIpO1xuXG4vLyBzcmMvY3JlYXRlV2FpdGVyLnRzXG52YXIgYWJvcnRUaW1lb3V0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoYWJvcnRTaWduYWwpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3Qgb25BYm9ydCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gcmVzb2x2ZSh7IHN0YXRlOiBcIkFCT1JURURcIiAvKiBBQk9SVEVEICovIH0pLCBcIm9uQWJvcnRcIik7XG4gICAgaWYgKHR5cGVvZiBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWJvcnRTaWduYWwub25hYm9ydCA9IG9uQWJvcnQ7XG4gICAgfVxuICB9KTtcbn0sIFwiYWJvcnRUaW1lb3V0XCIpO1xudmFyIGNyZWF0ZVdhaXRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG9wdGlvbnMsIGlucHV0LCBhY2NlcHRvckNoZWNrcykgPT4ge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgLi4ud2FpdGVyU2VydmljZURlZmF1bHRzLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgdmFsaWRhdGVXYWl0ZXJPcHRpb25zKHBhcmFtcyk7XG4gIGNvbnN0IGV4aXRDb25kaXRpb25zID0gW3J1blBvbGxpbmcocGFyYW1zLCBpbnB1dCwgYWNjZXB0b3JDaGVja3MpXTtcbiAgaWYgKG9wdGlvbnMuYWJvcnRDb250cm9sbGVyKSB7XG4gICAgZXhpdENvbmRpdGlvbnMucHVzaChhYm9ydFRpbWVvdXQob3B0aW9ucy5hYm9ydENvbnRyb2xsZXIuc2lnbmFsKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuYWJvcnRTaWduYWwpIHtcbiAgICBleGl0Q29uZGl0aW9ucy5wdXNoKGFib3J0VGltZW91dChvcHRpb25zLmFib3J0U2lnbmFsKSk7XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmFjZShleGl0Q29uZGl0aW9ucyk7XG59LCBcImNyZWF0ZVdhaXRlclwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZVdhaXRlcixcbiAgd2FpdGVyU2VydmljZURlZmF1bHRzLFxuICBXYWl0ZXJTdGF0ZSxcbiAgY2hlY2tFeGNlcHRpb25zXG59KTtcblxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBBcHByb3hpbWF0ZUNyZWF0aW9uRGF0ZVRpbWVQcmVjaXNpb246ICgpID0+IEFwcHJveGltYXRlQ3JlYXRpb25EYXRlVGltZVByZWNpc2lvbixcbiAgQXR0cmlidXRlQWN0aW9uOiAoKSA9PiBBdHRyaWJ1dGVBY3Rpb24sXG4gIEF0dHJpYnV0ZVZhbHVlOiAoKSA9PiBBdHRyaWJ1dGVWYWx1ZSxcbiAgQmFja3VwSW5Vc2VFeGNlcHRpb246ICgpID0+IEJhY2t1cEluVXNlRXhjZXB0aW9uLFxuICBCYWNrdXBOb3RGb3VuZEV4Y2VwdGlvbjogKCkgPT4gQmFja3VwTm90Rm91bmRFeGNlcHRpb24sXG4gIEJhY2t1cFN0YXR1czogKCkgPT4gQmFja3VwU3RhdHVzLFxuICBCYWNrdXBUeXBlOiAoKSA9PiBCYWNrdXBUeXBlLFxuICBCYWNrdXBUeXBlRmlsdGVyOiAoKSA9PiBCYWNrdXBUeXBlRmlsdGVyLFxuICBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kOiAoKSA9PiBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLFxuICBCYXRjaEdldEl0ZW1Db21tYW5kOiAoKSA9PiBCYXRjaEdldEl0ZW1Db21tYW5kLFxuICBCYXRjaFN0YXRlbWVudEVycm9yQ29kZUVudW06ICgpID0+IEJhdGNoU3RhdGVtZW50RXJyb3JDb2RlRW51bSxcbiAgQmF0Y2hXcml0ZUl0ZW1Db21tYW5kOiAoKSA9PiBCYXRjaFdyaXRlSXRlbUNvbW1hbmQsXG4gIEJpbGxpbmdNb2RlOiAoKSA9PiBCaWxsaW5nTW9kZSxcbiAgQ29tcGFyaXNvbk9wZXJhdG9yOiAoKSA9PiBDb21wYXJpc29uT3BlcmF0b3IsXG4gIENvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb246ICgpID0+IENvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb24sXG4gIENvbmRpdGlvbmFsT3BlcmF0b3I6ICgpID0+IENvbmRpdGlvbmFsT3BlcmF0b3IsXG4gIENvbnRpbnVvdXNCYWNrdXBzU3RhdHVzOiAoKSA9PiBDb250aW51b3VzQmFja3Vwc1N0YXR1cyxcbiAgQ29udGludW91c0JhY2t1cHNVbmF2YWlsYWJsZUV4Y2VwdGlvbjogKCkgPT4gQ29udGludW91c0JhY2t1cHNVbmF2YWlsYWJsZUV4Y2VwdGlvbixcbiAgQ29udHJpYnV0b3JJbnNpZ2h0c0FjdGlvbjogKCkgPT4gQ29udHJpYnV0b3JJbnNpZ2h0c0FjdGlvbixcbiAgQ29udHJpYnV0b3JJbnNpZ2h0c1N0YXR1czogKCkgPT4gQ29udHJpYnV0b3JJbnNpZ2h0c1N0YXR1cyxcbiAgQ3JlYXRlQmFja3VwQ29tbWFuZDogKCkgPT4gQ3JlYXRlQmFja3VwQ29tbWFuZCxcbiAgQ3JlYXRlR2xvYmFsVGFibGVDb21tYW5kOiAoKSA9PiBDcmVhdGVHbG9iYWxUYWJsZUNvbW1hbmQsXG4gIENyZWF0ZVRhYmxlQ29tbWFuZDogKCkgPT4gQ3JlYXRlVGFibGVDb21tYW5kLFxuICBEZWxldGVCYWNrdXBDb21tYW5kOiAoKSA9PiBEZWxldGVCYWNrdXBDb21tYW5kLFxuICBEZWxldGVJdGVtQ29tbWFuZDogKCkgPT4gRGVsZXRlSXRlbUNvbW1hbmQsXG4gIERlbGV0ZVJlc291cmNlUG9saWN5Q29tbWFuZDogKCkgPT4gRGVsZXRlUmVzb3VyY2VQb2xpY3lDb21tYW5kLFxuICBEZWxldGVUYWJsZUNvbW1hbmQ6ICgpID0+IERlbGV0ZVRhYmxlQ29tbWFuZCxcbiAgRGVzY3JpYmVCYWNrdXBDb21tYW5kOiAoKSA9PiBEZXNjcmliZUJhY2t1cENvbW1hbmQsXG4gIERlc2NyaWJlQ29udGludW91c0JhY2t1cHNDb21tYW5kOiAoKSA9PiBEZXNjcmliZUNvbnRpbnVvdXNCYWNrdXBzQ29tbWFuZCxcbiAgRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZDogKCkgPT4gRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCxcbiAgRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kOiAoKSA9PiBEZXNjcmliZUVuZHBvaW50c0NvbW1hbmQsXG4gIERlc2NyaWJlRXhwb3J0Q29tbWFuZDogKCkgPT4gRGVzY3JpYmVFeHBvcnRDb21tYW5kLFxuICBEZXNjcmliZUdsb2JhbFRhYmxlQ29tbWFuZDogKCkgPT4gRGVzY3JpYmVHbG9iYWxUYWJsZUNvbW1hbmQsXG4gIERlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQ6ICgpID0+IERlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQsXG4gIERlc2NyaWJlSW1wb3J0Q29tbWFuZDogKCkgPT4gRGVzY3JpYmVJbXBvcnRDb21tYW5kLFxuICBEZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQ6ICgpID0+IERlc2NyaWJlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCxcbiAgRGVzY3JpYmVMaW1pdHNDb21tYW5kOiAoKSA9PiBEZXNjcmliZUxpbWl0c0NvbW1hbmQsXG4gIERlc2NyaWJlVGFibGVDb21tYW5kOiAoKSA9PiBEZXNjcmliZVRhYmxlQ29tbWFuZCxcbiAgRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQ6ICgpID0+IERlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kLFxuICBEZXNjcmliZVRpbWVUb0xpdmVDb21tYW5kOiAoKSA9PiBEZXNjcmliZVRpbWVUb0xpdmVDb21tYW5kLFxuICBEZXN0aW5hdGlvblN0YXR1czogKCkgPT4gRGVzdGluYXRpb25TdGF0dXMsXG4gIERpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kOiAoKSA9PiBEaXNhYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCxcbiAgRHVwbGljYXRlSXRlbUV4Y2VwdGlvbjogKCkgPT4gRHVwbGljYXRlSXRlbUV4Y2VwdGlvbixcbiAgRHluYW1vREI6ICgpID0+IER5bmFtb0RCLFxuICBEeW5hbW9EQkNsaWVudDogKCkgPT4gRHluYW1vREJDbGllbnQsXG4gIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbjogKCkgPT4gRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uLFxuICBFbmFibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kOiAoKSA9PiBFbmFibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLFxuICBFeGVjdXRlU3RhdGVtZW50Q29tbWFuZDogKCkgPT4gRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQsXG4gIEV4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmQ6ICgpID0+IEV4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmQsXG4gIEV4cG9ydENvbmZsaWN0RXhjZXB0aW9uOiAoKSA9PiBFeHBvcnRDb25mbGljdEV4Y2VwdGlvbixcbiAgRXhwb3J0Rm9ybWF0OiAoKSA9PiBFeHBvcnRGb3JtYXQsXG4gIEV4cG9ydE5vdEZvdW5kRXhjZXB0aW9uOiAoKSA9PiBFeHBvcnROb3RGb3VuZEV4Y2VwdGlvbixcbiAgRXhwb3J0U3RhdHVzOiAoKSA9PiBFeHBvcnRTdGF0dXMsXG4gIEV4cG9ydFRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQ6ICgpID0+IEV4cG9ydFRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQsXG4gIEV4cG9ydFR5cGU6ICgpID0+IEV4cG9ydFR5cGUsXG4gIEV4cG9ydFZpZXdUeXBlOiAoKSA9PiBFeHBvcnRWaWV3VHlwZSxcbiAgR2V0SXRlbUNvbW1hbmQ6ICgpID0+IEdldEl0ZW1Db21tYW5kLFxuICBHZXRSZXNvdXJjZVBvbGljeUNvbW1hbmQ6ICgpID0+IEdldFJlc291cmNlUG9saWN5Q29tbWFuZCxcbiAgR2xvYmFsVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uOiAoKSA9PiBHbG9iYWxUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24sXG4gIEdsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb246ICgpID0+IEdsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb24sXG4gIEdsb2JhbFRhYmxlU3RhdHVzOiAoKSA9PiBHbG9iYWxUYWJsZVN0YXR1cyxcbiAgSWRlbXBvdGVudFBhcmFtZXRlck1pc21hdGNoRXhjZXB0aW9uOiAoKSA9PiBJZGVtcG90ZW50UGFyYW1ldGVyTWlzbWF0Y2hFeGNlcHRpb24sXG4gIEltcG9ydENvbmZsaWN0RXhjZXB0aW9uOiAoKSA9PiBJbXBvcnRDb25mbGljdEV4Y2VwdGlvbixcbiAgSW1wb3J0Tm90Rm91bmRFeGNlcHRpb246ICgpID0+IEltcG9ydE5vdEZvdW5kRXhjZXB0aW9uLFxuICBJbXBvcnRTdGF0dXM6ICgpID0+IEltcG9ydFN0YXR1cyxcbiAgSW1wb3J0VGFibGVDb21tYW5kOiAoKSA9PiBJbXBvcnRUYWJsZUNvbW1hbmQsXG4gIEluZGV4Tm90Rm91bmRFeGNlcHRpb246ICgpID0+IEluZGV4Tm90Rm91bmRFeGNlcHRpb24sXG4gIEluZGV4U3RhdHVzOiAoKSA9PiBJbmRleFN0YXR1cyxcbiAgSW5wdXRDb21wcmVzc2lvblR5cGU6ICgpID0+IElucHV0Q29tcHJlc3Npb25UeXBlLFxuICBJbnB1dEZvcm1hdDogKCkgPT4gSW5wdXRGb3JtYXQsXG4gIEludGVybmFsU2VydmVyRXJyb3I6ICgpID0+IEludGVybmFsU2VydmVyRXJyb3IsXG4gIEludmFsaWRFbmRwb2ludEV4Y2VwdGlvbjogKCkgPT4gSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uLFxuICBJbnZhbGlkRXhwb3J0VGltZUV4Y2VwdGlvbjogKCkgPT4gSW52YWxpZEV4cG9ydFRpbWVFeGNlcHRpb24sXG4gIEludmFsaWRSZXN0b3JlVGltZUV4Y2VwdGlvbjogKCkgPT4gSW52YWxpZFJlc3RvcmVUaW1lRXhjZXB0aW9uLFxuICBJdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uOiAoKSA9PiBJdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLFxuICBLZXlUeXBlOiAoKSA9PiBLZXlUeXBlLFxuICBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uOiAoKSA9PiBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLFxuICBMaXN0QmFja3Vwc0NvbW1hbmQ6ICgpID0+IExpc3RCYWNrdXBzQ29tbWFuZCxcbiAgTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kOiAoKSA9PiBMaXN0Q29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQsXG4gIExpc3RFeHBvcnRzQ29tbWFuZDogKCkgPT4gTGlzdEV4cG9ydHNDb21tYW5kLFxuICBMaXN0R2xvYmFsVGFibGVzQ29tbWFuZDogKCkgPT4gTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmQsXG4gIExpc3RJbXBvcnRzQ29tbWFuZDogKCkgPT4gTGlzdEltcG9ydHNDb21tYW5kLFxuICBMaXN0VGFibGVzQ29tbWFuZDogKCkgPT4gTGlzdFRhYmxlc0NvbW1hbmQsXG4gIExpc3RUYWdzT2ZSZXNvdXJjZUNvbW1hbmQ6ICgpID0+IExpc3RUYWdzT2ZSZXNvdXJjZUNvbW1hbmQsXG4gIE11bHRpUmVnaW9uQ29uc2lzdGVuY3k6ICgpID0+IE11bHRpUmVnaW9uQ29uc2lzdGVuY3ksXG4gIFBvaW50SW5UaW1lUmVjb3ZlcnlTdGF0dXM6ICgpID0+IFBvaW50SW5UaW1lUmVjb3ZlcnlTdGF0dXMsXG4gIFBvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvbjogKCkgPT4gUG9pbnRJblRpbWVSZWNvdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uLFxuICBQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbjogKCkgPT4gUG9saWN5Tm90Rm91bmRFeGNlcHRpb24sXG4gIFByb2plY3Rpb25UeXBlOiAoKSA9PiBQcm9qZWN0aW9uVHlwZSxcbiAgUHJvdmlzaW9uZWRUaHJvdWdocHV0RXhjZWVkZWRFeGNlcHRpb246ICgpID0+IFByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uLFxuICBQdXRJdGVtQ29tbWFuZDogKCkgPT4gUHV0SXRlbUNvbW1hbmQsXG4gIFB1dFJlc291cmNlUG9saWN5Q29tbWFuZDogKCkgPT4gUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kLFxuICBRdWVyeUNvbW1hbmQ6ICgpID0+IFF1ZXJ5Q29tbWFuZCxcbiAgUmVwbGljYUFscmVhZHlFeGlzdHNFeGNlcHRpb246ICgpID0+IFJlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLFxuICBSZXBsaWNhTm90Rm91bmRFeGNlcHRpb246ICgpID0+IFJlcGxpY2FOb3RGb3VuZEV4Y2VwdGlvbixcbiAgUmVwbGljYVN0YXR1czogKCkgPT4gUmVwbGljYVN0YXR1cyxcbiAgUmVwbGljYXRlZFdyaXRlQ29uZmxpY3RFeGNlcHRpb246ICgpID0+IFJlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uLFxuICBSZXF1ZXN0TGltaXRFeGNlZWRlZDogKCkgPT4gUmVxdWVzdExpbWl0RXhjZWVkZWQsXG4gIFJlc291cmNlSW5Vc2VFeGNlcHRpb246ICgpID0+IFJlc291cmNlSW5Vc2VFeGNlcHRpb24sXG4gIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb246ICgpID0+IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24sXG4gIFJlc3RvcmVUYWJsZUZyb21CYWNrdXBDb21tYW5kOiAoKSA9PiBSZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZCxcbiAgUmVzdG9yZVRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQ6ICgpID0+IFJlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kLFxuICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiAoKSA9PiBSZXR1cm5Db25zdW1lZENhcGFjaXR5LFxuICBSZXR1cm5JdGVtQ29sbGVjdGlvbk1ldHJpY3M6ICgpID0+IFJldHVybkl0ZW1Db2xsZWN0aW9uTWV0cmljcyxcbiAgUmV0dXJuVmFsdWU6ICgpID0+IFJldHVyblZhbHVlLFxuICBSZXR1cm5WYWx1ZXNPbkNvbmRpdGlvbkNoZWNrRmFpbHVyZTogKCkgPT4gUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmUsXG4gIFMzU3NlQWxnb3JpdGhtOiAoKSA9PiBTM1NzZUFsZ29yaXRobSxcbiAgU1NFU3RhdHVzOiAoKSA9PiBTU0VTdGF0dXMsXG4gIFNTRVR5cGU6ICgpID0+IFNTRVR5cGUsXG4gIFNjYWxhckF0dHJpYnV0ZVR5cGU6ICgpID0+IFNjYWxhckF0dHJpYnV0ZVR5cGUsXG4gIFNjYW5Db21tYW5kOiAoKSA9PiBTY2FuQ29tbWFuZCxcbiAgU2VsZWN0OiAoKSA9PiBTZWxlY3QsXG4gIFN0cmVhbVZpZXdUeXBlOiAoKSA9PiBTdHJlYW1WaWV3VHlwZSxcbiAgVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uOiAoKSA9PiBUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24sXG4gIFRhYmxlQ2xhc3M6ICgpID0+IFRhYmxlQ2xhc3MsXG4gIFRhYmxlSW5Vc2VFeGNlcHRpb246ICgpID0+IFRhYmxlSW5Vc2VFeGNlcHRpb24sXG4gIFRhYmxlTm90Rm91bmRFeGNlcHRpb246ICgpID0+IFRhYmxlTm90Rm91bmRFeGNlcHRpb24sXG4gIFRhYmxlU3RhdHVzOiAoKSA9PiBUYWJsZVN0YXR1cyxcbiAgVGFnUmVzb3VyY2VDb21tYW5kOiAoKSA9PiBUYWdSZXNvdXJjZUNvbW1hbmQsXG4gIFRpbWVUb0xpdmVTdGF0dXM6ICgpID0+IFRpbWVUb0xpdmVTdGF0dXMsXG4gIFRyYW5zYWN0R2V0SXRlbXNDb21tYW5kOiAoKSA9PiBUcmFuc2FjdEdldEl0ZW1zQ29tbWFuZCxcbiAgVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZDogKCkgPT4gVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZCxcbiAgVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvbjogKCkgPT4gVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvbixcbiAgVHJhbnNhY3Rpb25Db25mbGljdEV4Y2VwdGlvbjogKCkgPT4gVHJhbnNhY3Rpb25Db25mbGljdEV4Y2VwdGlvbixcbiAgVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uOiAoKSA9PiBUcmFuc2FjdGlvbkluUHJvZ3Jlc3NFeGNlcHRpb24sXG4gIFVudGFnUmVzb3VyY2VDb21tYW5kOiAoKSA9PiBVbnRhZ1Jlc291cmNlQ29tbWFuZCxcbiAgVXBkYXRlQ29udGludW91c0JhY2t1cHNDb21tYW5kOiAoKSA9PiBVcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQsXG4gIFVwZGF0ZUNvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kOiAoKSA9PiBVcGRhdGVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCxcbiAgVXBkYXRlR2xvYmFsVGFibGVDb21tYW5kOiAoKSA9PiBVcGRhdGVHbG9iYWxUYWJsZUNvbW1hbmQsXG4gIFVwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NDb21tYW5kOiAoKSA9PiBVcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCxcbiAgVXBkYXRlSXRlbUNvbW1hbmQ6ICgpID0+IFVwZGF0ZUl0ZW1Db21tYW5kLFxuICBVcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kOiAoKSA9PiBVcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLFxuICBVcGRhdGVUYWJsZUNvbW1hbmQ6ICgpID0+IFVwZGF0ZVRhYmxlQ29tbWFuZCxcbiAgVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kOiAoKSA9PiBVcGRhdGVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQsXG4gIFVwZGF0ZVRpbWVUb0xpdmVDb21tYW5kOiAoKSA9PiBVcGRhdGVUaW1lVG9MaXZlQ29tbWFuZCxcbiAgX19DbGllbnQ6ICgpID0+IGltcG9ydF9zbWl0aHlfY2xpZW50LkNsaWVudCxcbiAgcGFnaW5hdGVMaXN0Q29udHJpYnV0b3JJbnNpZ2h0czogKCkgPT4gcGFnaW5hdGVMaXN0Q29udHJpYnV0b3JJbnNpZ2h0cyxcbiAgcGFnaW5hdGVMaXN0RXhwb3J0czogKCkgPT4gcGFnaW5hdGVMaXN0RXhwb3J0cyxcbiAgcGFnaW5hdGVMaXN0SW1wb3J0czogKCkgPT4gcGFnaW5hdGVMaXN0SW1wb3J0cyxcbiAgcGFnaW5hdGVMaXN0VGFibGVzOiAoKSA9PiBwYWdpbmF0ZUxpc3RUYWJsZXMsXG4gIHBhZ2luYXRlUXVlcnk6ICgpID0+IHBhZ2luYXRlUXVlcnksXG4gIHBhZ2luYXRlU2NhbjogKCkgPT4gcGFnaW5hdGVTY2FuLFxuICB3YWl0Rm9yVGFibGVFeGlzdHM6ICgpID0+IHdhaXRGb3JUYWJsZUV4aXN0cyxcbiAgd2FpdEZvclRhYmxlTm90RXhpc3RzOiAoKSA9PiB3YWl0Rm9yVGFibGVOb3RFeGlzdHMsXG4gIHdhaXRVbnRpbFRhYmxlRXhpc3RzOiAoKSA9PiB3YWl0VW50aWxUYWJsZUV4aXN0cyxcbiAgd2FpdFVudGlsVGFibGVOb3RFeGlzdHM6ICgpID0+IHdhaXRVbnRpbFRhYmxlTm90RXhpc3RzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvRHluYW1vREJDbGllbnQudHNcbnZhciBpbXBvcnRfYWNjb3VudF9pZF9lbmRwb2ludCA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlL2FjY291bnQtaWQtZW5kcG9pbnRcIik7XG52YXIgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnRfZGlzY292ZXJ5ID0gcmVxdWlyZShcIkBhd3Mtc2RrL21pZGRsZXdhcmUtZW5kcG9pbnQtZGlzY292ZXJ5XCIpO1xudmFyIGltcG9ydF9taWRkbGV3YXJlX2hvc3RfaGVhZGVyID0gcmVxdWlyZShcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIik7XG52YXIgaW1wb3J0X21pZGRsZXdhcmVfbG9nZ2VyID0gcmVxdWlyZShcIkBhd3Mtc2RrL21pZGRsZXdhcmUtbG9nZ2VyXCIpO1xudmFyIGltcG9ydF9taWRkbGV3YXJlX3JlY3Vyc2lvbl9kZXRlY3Rpb24gPSByZXF1aXJlKFwiQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uXCIpO1xudmFyIGltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQgPSByZXF1aXJlKFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCIpO1xudmFyIGltcG9ydF9jb25maWdfcmVzb2x2ZXIgPSByZXF1aXJlKFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIik7XG52YXIgaW1wb3J0X2NvcmUyID0gcmVxdWlyZShcIkBzbWl0aHkvY29yZVwiKTtcbnZhciBpbXBvcnRfbWlkZGxld2FyZV9jb250ZW50X2xlbmd0aCA9IHJlcXVpcmUoXCJAc21pdGh5L21pZGRsZXdhcmUtY29udGVudC1sZW5ndGhcIik7XG5cbnZhciBpbXBvcnRfbWlkZGxld2FyZV9yZXRyeSA9IHJlcXVpcmUoXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIik7XG5cbnZhciBpbXBvcnRfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IHJlcXVpcmUoXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiKTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlRW5kcG9pbnRzQ29tbWFuZC50c1xudmFyIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50ID0gcmVxdWlyZShcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiKTtcbnZhciBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZSA9IHJlcXVpcmUoXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIik7XG5cblxuLy8gc3JjL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVycy50c1xudmFyIHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zKSA9PiB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHtcbiAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogb3B0aW9ucy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBmYWxzZSxcbiAgICB1c2VGaXBzRW5kcG9pbnQ6IG9wdGlvbnMudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlLFxuICAgIGRlZmF1bHRTaWduaW5nTmFtZTogXCJkeW5hbW9kYlwiXG4gIH0pO1xufSwgXCJyZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzXCIpO1xudmFyIGNvbW1vblBhcmFtcyA9IHtcbiAgVXNlRklQUzogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VGaXBzRW5kcG9pbnRcIiB9LFxuICBBY2NvdW50SWQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwiYWNjb3VudElkXCIgfSxcbiAgRW5kcG9pbnQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwiZW5kcG9pbnRcIiB9LFxuICBSZWdpb246IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwicmVnaW9uXCIgfSxcbiAgVXNlRHVhbFN0YWNrOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUR1YWxzdGFja0VuZHBvaW50XCIgfSxcbiAgQWNjb3VudElkRW5kcG9pbnRNb2RlOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcImFjY291bnRJZEVuZHBvaW50TW9kZVwiIH1cbn07XG5cbi8vIHNyYy9wcm90b2NvbHMvQXdzX2pzb24xXzAudHNcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAYXdzLXNkay9jb3JlXCIpO1xudmFyIGltcG9ydF9wcm90b2NvbF9odHRwID0gcmVxdWlyZShcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiKTtcblxudmFyIGltcG9ydF91dWlkID0gcmVxdWlyZShcInV1aWRcIik7XG5cbi8vIHNyYy9tb2RlbHMvRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uLnRzXG52YXIgaW1wb3J0X3NtaXRoeV9jbGllbnQgPSByZXF1aXJlKFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCIpO1xudmFyIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiA9IGNsYXNzIF9EeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24gZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5TZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb25cIik7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG5cbi8vIHNyYy9tb2RlbHMvbW9kZWxzXzAudHNcbnZhciBBcHByb3hpbWF0ZUNyZWF0aW9uRGF0ZVRpbWVQcmVjaXNpb24gPSB7XG4gIE1JQ1JPU0VDT05EOiBcIk1JQ1JPU0VDT05EXCIsXG4gIE1JTExJU0VDT05EOiBcIk1JTExJU0VDT05EXCJcbn07XG52YXIgQXR0cmlidXRlQWN0aW9uID0ge1xuICBBREQ6IFwiQUREXCIsXG4gIERFTEVURTogXCJERUxFVEVcIixcbiAgUFVUOiBcIlBVVFwiXG59O1xudmFyIFNjYWxhckF0dHJpYnV0ZVR5cGUgPSB7XG4gIEI6IFwiQlwiLFxuICBOOiBcIk5cIixcbiAgUzogXCJTXCJcbn07XG52YXIgQmFja3VwU3RhdHVzID0ge1xuICBBVkFJTEFCTEU6IFwiQVZBSUxBQkxFXCIsXG4gIENSRUFUSU5HOiBcIkNSRUFUSU5HXCIsXG4gIERFTEVURUQ6IFwiREVMRVRFRFwiXG59O1xudmFyIEJhY2t1cFR5cGUgPSB7XG4gIEFXU19CQUNLVVA6IFwiQVdTX0JBQ0tVUFwiLFxuICBTWVNURU06IFwiU1lTVEVNXCIsXG4gIFVTRVI6IFwiVVNFUlwiXG59O1xudmFyIEJpbGxpbmdNb2RlID0ge1xuICBQQVlfUEVSX1JFUVVFU1Q6IFwiUEFZX1BFUl9SRVFVRVNUXCIsXG4gIFBST1ZJU0lPTkVEOiBcIlBST1ZJU0lPTkVEXCJcbn07XG52YXIgS2V5VHlwZSA9IHtcbiAgSEFTSDogXCJIQVNIXCIsXG4gIFJBTkdFOiBcIlJBTkdFXCJcbn07XG52YXIgUHJvamVjdGlvblR5cGUgPSB7XG4gIEFMTDogXCJBTExcIixcbiAgSU5DTFVERTogXCJJTkNMVURFXCIsXG4gIEtFWVNfT05MWTogXCJLRVlTX09OTFlcIlxufTtcbnZhciBTU0VUeXBlID0ge1xuICBBRVMyNTY6IFwiQUVTMjU2XCIsXG4gIEtNUzogXCJLTVNcIlxufTtcbnZhciBTU0VTdGF0dXMgPSB7XG4gIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gIERJU0FCTElORzogXCJESVNBQkxJTkdcIixcbiAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG4gIEVOQUJMSU5HOiBcIkVOQUJMSU5HXCIsXG4gIFVQREFUSU5HOiBcIlVQREFUSU5HXCJcbn07XG52YXIgU3RyZWFtVmlld1R5cGUgPSB7XG4gIEtFWVNfT05MWTogXCJLRVlTX09OTFlcIixcbiAgTkVXX0FORF9PTERfSU1BR0VTOiBcIk5FV19BTkRfT0xEX0lNQUdFU1wiLFxuICBORVdfSU1BR0U6IFwiTkVXX0lNQUdFXCIsXG4gIE9MRF9JTUFHRTogXCJPTERfSU1BR0VcIlxufTtcbnZhciBUaW1lVG9MaXZlU3RhdHVzID0ge1xuICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICBESVNBQkxJTkc6IFwiRElTQUJMSU5HXCIsXG4gIEVOQUJMRUQ6IFwiRU5BQkxFRFwiLFxuICBFTkFCTElORzogXCJFTkFCTElOR1wiXG59O1xudmFyIEJhY2t1cEluVXNlRXhjZXB0aW9uID0gY2xhc3MgX0JhY2t1cEluVXNlRXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJCYWNrdXBJblVzZUV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJCYWNrdXBJblVzZUV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJCYWNrdXBJblVzZUV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfQmFja3VwSW5Vc2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBCYWNrdXBOb3RGb3VuZEV4Y2VwdGlvbiA9IGNsYXNzIF9CYWNrdXBOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiQmFja3VwTm90Rm91bmRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiQmFja3VwTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiQmFja3VwTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0JhY2t1cE5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgQmFja3VwVHlwZUZpbHRlciA9IHtcbiAgQUxMOiBcIkFMTFwiLFxuICBBV1NfQkFDS1VQOiBcIkFXU19CQUNLVVBcIixcbiAgU1lTVEVNOiBcIlNZU1RFTVwiLFxuICBVU0VSOiBcIlVTRVJcIlxufTtcbnZhciBSZXR1cm5Db25zdW1lZENhcGFjaXR5ID0ge1xuICBJTkRFWEVTOiBcIklOREVYRVNcIixcbiAgTk9ORTogXCJOT05FXCIsXG4gIFRPVEFMOiBcIlRPVEFMXCJcbn07XG52YXIgUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmUgPSB7XG4gIEFMTF9PTEQ6IFwiQUxMX09MRFwiLFxuICBOT05FOiBcIk5PTkVcIlxufTtcbnZhciBCYXRjaFN0YXRlbWVudEVycm9yQ29kZUVudW0gPSB7XG4gIEFjY2Vzc0RlbmllZDogXCJBY2Nlc3NEZW5pZWRcIixcbiAgQ29uZGl0aW9uYWxDaGVja0ZhaWxlZDogXCJDb25kaXRpb25hbENoZWNrRmFpbGVkXCIsXG4gIER1cGxpY2F0ZUl0ZW06IFwiRHVwbGljYXRlSXRlbVwiLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiBcIkludGVybmFsU2VydmVyRXJyb3JcIixcbiAgSXRlbUNvbGxlY3Rpb25TaXplTGltaXRFeGNlZWRlZDogXCJJdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkXCIsXG4gIFByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkOiBcIlByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkXCIsXG4gIFJlcXVlc3RMaW1pdEV4Y2VlZGVkOiBcIlJlcXVlc3RMaW1pdEV4Y2VlZGVkXCIsXG4gIFJlc291cmNlTm90Rm91bmQ6IFwiUmVzb3VyY2VOb3RGb3VuZFwiLFxuICBUaHJvdHRsaW5nRXJyb3I6IFwiVGhyb3R0bGluZ0Vycm9yXCIsXG4gIFRyYW5zYWN0aW9uQ29uZmxpY3Q6IFwiVHJhbnNhY3Rpb25Db25mbGljdFwiLFxuICBWYWxpZGF0aW9uRXJyb3I6IFwiVmFsaWRhdGlvbkVycm9yXCJcbn07XG52YXIgSW50ZXJuYWxTZXJ2ZXJFcnJvciA9IGNsYXNzIF9JbnRlcm5hbFNlcnZlckVycm9yIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJJbnRlcm5hbFNlcnZlckVycm9yXCIpO1xuICB9XG4gIG5hbWUgPSBcIkludGVybmFsU2VydmVyRXJyb3JcIjtcbiAgJGZhdWx0ID0gXCJzZXJ2ZXJcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiSW50ZXJuYWxTZXJ2ZXJFcnJvclwiLFxuICAgICAgJGZhdWx0OiBcInNlcnZlclwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfSW50ZXJuYWxTZXJ2ZXJFcnJvci5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIFJlcXVlc3RMaW1pdEV4Y2VlZGVkID0gY2xhc3MgX1JlcXVlc3RMaW1pdEV4Y2VlZGVkIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJSZXF1ZXN0TGltaXRFeGNlZWRlZFwiKTtcbiAgfVxuICBuYW1lID0gXCJSZXF1ZXN0TGltaXRFeGNlZWRlZFwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJSZXF1ZXN0TGltaXRFeGNlZWRlZFwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfUmVxdWVzdExpbWl0RXhjZWVkZWQucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBJbnZhbGlkRW5kcG9pbnRFeGNlcHRpb24gPSBjbGFzcyBfSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJJbnZhbGlkRW5kcG9pbnRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIE1lc3NhZ2U7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIkludmFsaWRFbmRwb2ludEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICB9XG59O1xudmFyIFByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uID0gY2xhc3MgX1Byb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJQcm92aXNpb25lZFRocm91Z2hwdXRFeGNlZWRlZEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJQcm92aXNpb25lZFRocm91Z2hwdXRFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJQcm92aXNpb25lZFRocm91Z2hwdXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfUHJvdmlzaW9uZWRUaHJvdWdocHV0RXhjZWVkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uID0gY2xhc3MgX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgUmV0dXJuSXRlbUNvbGxlY3Rpb25NZXRyaWNzID0ge1xuICBOT05FOiBcIk5PTkVcIixcbiAgU0laRTogXCJTSVpFXCJcbn07XG52YXIgSXRlbUNvbGxlY3Rpb25TaXplTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiA9IGNsYXNzIF9JdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJJdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkl0ZW1Db2xsZWN0aW9uU2l6ZUxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiSXRlbUNvbGxlY3Rpb25TaXplTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfSXRlbUNvbGxlY3Rpb25TaXplTGltaXRFeGNlZWRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIENvbXBhcmlzb25PcGVyYXRvciA9IHtcbiAgQkVHSU5TX1dJVEg6IFwiQkVHSU5TX1dJVEhcIixcbiAgQkVUV0VFTjogXCJCRVRXRUVOXCIsXG4gIENPTlRBSU5TOiBcIkNPTlRBSU5TXCIsXG4gIEVROiBcIkVRXCIsXG4gIEdFOiBcIkdFXCIsXG4gIEdUOiBcIkdUXCIsXG4gIElOOiBcIklOXCIsXG4gIExFOiBcIkxFXCIsXG4gIExUOiBcIkxUXCIsXG4gIE5FOiBcIk5FXCIsXG4gIE5PVF9DT05UQUlOUzogXCJOT1RfQ09OVEFJTlNcIixcbiAgTk9UX05VTEw6IFwiTk9UX05VTExcIixcbiAgTlVMTDogXCJOVUxMXCJcbn07XG52YXIgQ29uZGl0aW9uYWxPcGVyYXRvciA9IHtcbiAgQU5EOiBcIkFORFwiLFxuICBPUjogXCJPUlwiXG59O1xudmFyIENvbnRpbnVvdXNCYWNrdXBzU3RhdHVzID0ge1xuICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICBFTkFCTEVEOiBcIkVOQUJMRURcIlxufTtcbnZhciBQb2ludEluVGltZVJlY292ZXJ5U3RhdHVzID0ge1xuICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICBFTkFCTEVEOiBcIkVOQUJMRURcIlxufTtcbnZhciBDb250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uID0gY2xhc3MgX0NvbnRpbnVvdXNCYWNrdXBzVW5hdmFpbGFibGVFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNvbnRpbnVvdXNCYWNrdXBzVW5hdmFpbGFibGVFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiQ29udGludW91c0JhY2t1cHNVbmF2YWlsYWJsZUV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJDb250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9Db250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgQ29udHJpYnV0b3JJbnNpZ2h0c0FjdGlvbiA9IHtcbiAgRElTQUJMRTogXCJESVNBQkxFXCIsXG4gIEVOQUJMRTogXCJFTkFCTEVcIlxufTtcbnZhciBDb250cmlidXRvckluc2lnaHRzU3RhdHVzID0ge1xuICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICBESVNBQkxJTkc6IFwiRElTQUJMSU5HXCIsXG4gIEVOQUJMRUQ6IFwiRU5BQkxFRFwiLFxuICBFTkFCTElORzogXCJFTkFCTElOR1wiLFxuICBGQUlMRUQ6IFwiRkFJTEVEXCJcbn07XG52YXIgTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiA9IGNsYXNzIF9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfTGltaXRFeGNlZWRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIFRhYmxlSW5Vc2VFeGNlcHRpb24gPSBjbGFzcyBfVGFibGVJblVzZUV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVGFibGVJblVzZUV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJUYWJsZUluVXNlRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIlRhYmxlSW5Vc2VFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1RhYmxlSW5Vc2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBUYWJsZU5vdEZvdW5kRXhjZXB0aW9uID0gY2xhc3MgX1RhYmxlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRhYmxlTm90Rm91bmRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiVGFibGVOb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJUYWJsZU5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9UYWJsZU5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgR2xvYmFsVGFibGVTdGF0dXMgPSB7XG4gIEFDVElWRTogXCJBQ1RJVkVcIixcbiAgQ1JFQVRJTkc6IFwiQ1JFQVRJTkdcIixcbiAgREVMRVRJTkc6IFwiREVMRVRJTkdcIixcbiAgVVBEQVRJTkc6IFwiVVBEQVRJTkdcIlxufTtcbnZhciBJbmRleFN0YXR1cyA9IHtcbiAgQUNUSVZFOiBcIkFDVElWRVwiLFxuICBDUkVBVElORzogXCJDUkVBVElOR1wiLFxuICBERUxFVElORzogXCJERUxFVElOR1wiLFxuICBVUERBVElORzogXCJVUERBVElOR1wiXG59O1xudmFyIFJlcGxpY2FTdGF0dXMgPSB7XG4gIEFDVElWRTogXCJBQ1RJVkVcIixcbiAgQ1JFQVRJTkc6IFwiQ1JFQVRJTkdcIixcbiAgQ1JFQVRJT05fRkFJTEVEOiBcIkNSRUFUSU9OX0ZBSUxFRFwiLFxuICBERUxFVElORzogXCJERUxFVElOR1wiLFxuICBJTkFDQ0VTU0lCTEVfRU5DUllQVElPTl9DUkVERU5USUFMUzogXCJJTkFDQ0VTU0lCTEVfRU5DUllQVElPTl9DUkVERU5USUFMU1wiLFxuICBSRUdJT05fRElTQUJMRUQ6IFwiUkVHSU9OX0RJU0FCTEVEXCIsXG4gIFVQREFUSU5HOiBcIlVQREFUSU5HXCJcbn07XG52YXIgVGFibGVDbGFzcyA9IHtcbiAgU1RBTkRBUkQ6IFwiU1RBTkRBUkRcIixcbiAgU1RBTkRBUkRfSU5GUkVRVUVOVF9BQ0NFU1M6IFwiU1RBTkRBUkRfSU5GUkVRVUVOVF9BQ0NFU1NcIlxufTtcbnZhciBUYWJsZVN0YXR1cyA9IHtcbiAgQUNUSVZFOiBcIkFDVElWRVwiLFxuICBBUkNISVZFRDogXCJBUkNISVZFRFwiLFxuICBBUkNISVZJTkc6IFwiQVJDSElWSU5HXCIsXG4gIENSRUFUSU5HOiBcIkNSRUFUSU5HXCIsXG4gIERFTEVUSU5HOiBcIkRFTEVUSU5HXCIsXG4gIElOQUNDRVNTSUJMRV9FTkNSWVBUSU9OX0NSRURFTlRJQUxTOiBcIklOQUNDRVNTSUJMRV9FTkNSWVBUSU9OX0NSRURFTlRJQUxTXCIsXG4gIFVQREFUSU5HOiBcIlVQREFUSU5HXCJcbn07XG52YXIgR2xvYmFsVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uID0gY2xhc3MgX0dsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiR2xvYmFsVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkdsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJHbG9iYWxUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0dsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIE11bHRpUmVnaW9uQ29uc2lzdGVuY3kgPSB7XG4gIEVWRU5UVUFMOiBcIkVWRU5UVUFMXCIsXG4gIFNUUk9ORzogXCJTVFJPTkdcIlxufTtcbnZhciBSZXNvdXJjZUluVXNlRXhjZXB0aW9uID0gY2xhc3MgX1Jlc291cmNlSW5Vc2VFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlJlc291cmNlSW5Vc2VFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiUmVzb3VyY2VJblVzZUV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJSZXNvdXJjZUluVXNlRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9SZXNvdXJjZUluVXNlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgUmV0dXJuVmFsdWUgPSB7XG4gIEFMTF9ORVc6IFwiQUxMX05FV1wiLFxuICBBTExfT0xEOiBcIkFMTF9PTERcIixcbiAgTk9ORTogXCJOT05FXCIsXG4gIFVQREFURURfTkVXOiBcIlVQREFURURfTkVXXCIsXG4gIFVQREFURURfT0xEOiBcIlVQREFURURfT0xEXCJcbn07XG52YXIgUmVwbGljYXRlZFdyaXRlQ29uZmxpY3RFeGNlcHRpb24gPSBjbGFzcyBfUmVwbGljYXRlZFdyaXRlQ29uZmxpY3RFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlJlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIlJlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIlJlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9SZXBsaWNhdGVkV3JpdGVDb25mbGljdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIFRyYW5zYWN0aW9uQ29uZmxpY3RFeGNlcHRpb24gPSBjbGFzcyBfVHJhbnNhY3Rpb25Db25mbGljdEV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVHJhbnNhY3Rpb25Db25mbGljdEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJUcmFuc2FjdGlvbkNvbmZsaWN0RXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIlRyYW5zYWN0aW9uQ29uZmxpY3RFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1RyYW5zYWN0aW9uQ29uZmxpY3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbiA9IGNsYXNzIF9Qb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1BvbGljeU5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgRXhwb3J0Rm9ybWF0ID0ge1xuICBEWU5BTU9EQl9KU09OOiBcIkRZTkFNT0RCX0pTT05cIixcbiAgSU9OOiBcIklPTlwiXG59O1xudmFyIEV4cG9ydFN0YXR1cyA9IHtcbiAgQ09NUExFVEVEOiBcIkNPTVBMRVRFRFwiLFxuICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gIElOX1BST0dSRVNTOiBcIklOX1BST0dSRVNTXCJcbn07XG52YXIgRXhwb3J0VHlwZSA9IHtcbiAgRlVMTF9FWFBPUlQ6IFwiRlVMTF9FWFBPUlRcIixcbiAgSU5DUkVNRU5UQUxfRVhQT1JUOiBcIklOQ1JFTUVOVEFMX0VYUE9SVFwiXG59O1xudmFyIEV4cG9ydFZpZXdUeXBlID0ge1xuICBORVdfQU5EX09MRF9JTUFHRVM6IFwiTkVXX0FORF9PTERfSU1BR0VTXCIsXG4gIE5FV19JTUFHRTogXCJORVdfSU1BR0VcIlxufTtcbnZhciBTM1NzZUFsZ29yaXRobSA9IHtcbiAgQUVTMjU2OiBcIkFFUzI1NlwiLFxuICBLTVM6IFwiS01TXCJcbn07XG52YXIgRXhwb3J0Tm90Rm91bmRFeGNlcHRpb24gPSBjbGFzcyBfRXhwb3J0Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkV4cG9ydE5vdEZvdW5kRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkV4cG9ydE5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIkV4cG9ydE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9FeHBvcnROb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIEdsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb24gPSBjbGFzcyBfR2xvYmFsVGFibGVOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiR2xvYmFsVGFibGVOb3RGb3VuZEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJHbG9iYWxUYWJsZU5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIkdsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0dsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBJbXBvcnRTdGF0dXMgPSB7XG4gIENBTkNFTExFRDogXCJDQU5DRUxMRURcIixcbiAgQ0FOQ0VMTElORzogXCJDQU5DRUxMSU5HXCIsXG4gIENPTVBMRVRFRDogXCJDT01QTEVURURcIixcbiAgRkFJTEVEOiBcIkZBSUxFRFwiLFxuICBJTl9QUk9HUkVTUzogXCJJTl9QUk9HUkVTU1wiXG59O1xudmFyIElucHV0Q29tcHJlc3Npb25UeXBlID0ge1xuICBHWklQOiBcIkdaSVBcIixcbiAgTk9ORTogXCJOT05FXCIsXG4gIFpTVEQ6IFwiWlNURFwiXG59O1xudmFyIElucHV0Rm9ybWF0ID0ge1xuICBDU1Y6IFwiQ1NWXCIsXG4gIERZTkFNT0RCX0pTT046IFwiRFlOQU1PREJfSlNPTlwiLFxuICBJT046IFwiSU9OXCJcbn07XG52YXIgSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24gPSBjbGFzcyBfSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIkltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9JbXBvcnROb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIERlc3RpbmF0aW9uU3RhdHVzID0ge1xuICBBQ1RJVkU6IFwiQUNUSVZFXCIsXG4gIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gIERJU0FCTElORzogXCJESVNBQkxJTkdcIixcbiAgRU5BQkxFX0ZBSUxFRDogXCJFTkFCTEVfRkFJTEVEXCIsXG4gIEVOQUJMSU5HOiBcIkVOQUJMSU5HXCIsXG4gIFVQREFUSU5HOiBcIlVQREFUSU5HXCJcbn07XG52YXIgRHVwbGljYXRlSXRlbUV4Y2VwdGlvbiA9IGNsYXNzIF9EdXBsaWNhdGVJdGVtRXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEdXBsaWNhdGVJdGVtRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkR1cGxpY2F0ZUl0ZW1FeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiRHVwbGljYXRlSXRlbUV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfRHVwbGljYXRlSXRlbUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIElkZW1wb3RlbnRQYXJhbWV0ZXJNaXNtYXRjaEV4Y2VwdGlvbiA9IGNsYXNzIF9JZGVtcG90ZW50UGFyYW1ldGVyTWlzbWF0Y2hFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIklkZW1wb3RlbnRQYXJhbWV0ZXJNaXNtYXRjaEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJJZGVtcG90ZW50UGFyYW1ldGVyTWlzbWF0Y2hFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgTWVzc2FnZTtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiSWRlbXBvdGVudFBhcmFtZXRlck1pc21hdGNoRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9JZGVtcG90ZW50UGFyYW1ldGVyTWlzbWF0Y2hFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gIH1cbn07XG52YXIgVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uID0gY2xhc3MgX1RyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIlRyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICBNZXNzYWdlO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJUcmFuc2FjdGlvbkluUHJvZ3Jlc3NFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX1RyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgfVxufTtcbnZhciBFeHBvcnRDb25mbGljdEV4Y2VwdGlvbiA9IGNsYXNzIF9FeHBvcnRDb25mbGljdEV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRXhwb3J0Q29uZmxpY3RFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiRXhwb3J0Q29uZmxpY3RFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiRXhwb3J0Q29uZmxpY3RFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0V4cG9ydENvbmZsaWN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgSW52YWxpZEV4cG9ydFRpbWVFeGNlcHRpb24gPSBjbGFzcyBfSW52YWxpZEV4cG9ydFRpbWVFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIkludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIkludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9JbnZhbGlkRXhwb3J0VGltZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIFBvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvbiA9IGNsYXNzIF9Qb2ludEluVGltZVJlY292ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlBvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJQb2ludEluVGltZVJlY292ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiUG9pbnRJblRpbWVSZWNvdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9Qb2ludEluVGltZVJlY292ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBJbXBvcnRDb25mbGljdEV4Y2VwdGlvbiA9IGNsYXNzIF9JbXBvcnRDb25mbGljdEV4Y2VwdGlvbiBleHRlbmRzIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbiB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiSW1wb3J0Q29uZmxpY3RFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiSW1wb3J0Q29uZmxpY3RFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiSW1wb3J0Q29uZmxpY3RFeGNlcHRpb25cIixcbiAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0ltcG9ydENvbmZsaWN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgU2VsZWN0ID0ge1xuICBBTExfQVRUUklCVVRFUzogXCJBTExfQVRUUklCVVRFU1wiLFxuICBBTExfUFJPSkVDVEVEX0FUVFJJQlVURVM6IFwiQUxMX1BST0pFQ1RFRF9BVFRSSUJVVEVTXCIsXG4gIENPVU5UOiBcIkNPVU5UXCIsXG4gIFNQRUNJRklDX0FUVFJJQlVURVM6IFwiU1BFQ0lGSUNfQVRUUklCVVRFU1wiXG59O1xudmFyIFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiA9IGNsYXNzIF9UYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9UYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBJbnZhbGlkUmVzdG9yZVRpbWVFeGNlcHRpb24gPSBjbGFzcyBfSW52YWxpZFJlc3RvcmVUaW1lRXhjZXB0aW9uIGV4dGVuZHMgRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJJbnZhbGlkUmVzdG9yZVRpbWVFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiSW52YWxpZFJlc3RvcmVUaW1lRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIkludmFsaWRSZXN0b3JlVGltZUV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfSW52YWxpZFJlc3RvcmVUaW1lRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgUmVwbGljYUFscmVhZHlFeGlzdHNFeGNlcHRpb24gPSBjbGFzcyBfUmVwbGljYUFscmVhZHlFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlJlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIpO1xuICB9XG4gIG5hbWUgPSBcIlJlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI7XG4gICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcih7XG4gICAgICBuYW1lOiBcIlJlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9SZXBsaWNhQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICB9XG59O1xudmFyIFJlcGxpY2FOb3RGb3VuZEV4Y2VwdGlvbiA9IGNsYXNzIF9SZXBsaWNhTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlJlcGxpY2FOb3RGb3VuZEV4Y2VwdGlvblwiKTtcbiAgfVxuICBuYW1lID0gXCJSZXBsaWNhTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiUmVwbGljYU5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9SZXBsaWNhTm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgfVxufTtcbnZhciBJbmRleE5vdEZvdW5kRXhjZXB0aW9uID0gY2xhc3MgX0luZGV4Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkluZGV4Tm90Rm91bmRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiSW5kZXhOb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogXCJJbmRleE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9JbmRleE5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gIH1cbn07XG52YXIgQXR0cmlidXRlVmFsdWU7XG4oKEF0dHJpYnV0ZVZhbHVlMikgPT4ge1xuICBBdHRyaWJ1dGVWYWx1ZTIudmlzaXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSwgdmlzaXRvcikgPT4ge1xuICAgIGlmICh2YWx1ZS5TICE9PSB2b2lkIDApIHJldHVybiB2aXNpdG9yLlModmFsdWUuUyk7XG4gICAgaWYgKHZhbHVlLk4gIT09IHZvaWQgMCkgcmV0dXJuIHZpc2l0b3IuTih2YWx1ZS5OKTtcbiAgICBpZiAodmFsdWUuQiAhPT0gdm9pZCAwKSByZXR1cm4gdmlzaXRvci5CKHZhbHVlLkIpO1xuICAgIGlmICh2YWx1ZS5TUyAhPT0gdm9pZCAwKSByZXR1cm4gdmlzaXRvci5TUyh2YWx1ZS5TUyk7XG4gICAgaWYgKHZhbHVlLk5TICE9PSB2b2lkIDApIHJldHVybiB2aXNpdG9yLk5TKHZhbHVlLk5TKTtcbiAgICBpZiAodmFsdWUuQlMgIT09IHZvaWQgMCkgcmV0dXJuIHZpc2l0b3IuQlModmFsdWUuQlMpO1xuICAgIGlmICh2YWx1ZS5NICE9PSB2b2lkIDApIHJldHVybiB2aXNpdG9yLk0odmFsdWUuTSk7XG4gICAgaWYgKHZhbHVlLkwgIT09IHZvaWQgMCkgcmV0dXJuIHZpc2l0b3IuTCh2YWx1ZS5MKTtcbiAgICBpZiAodmFsdWUuTlVMTCAhPT0gdm9pZCAwKSByZXR1cm4gdmlzaXRvci5OVUxMKHZhbHVlLk5VTEwpO1xuICAgIGlmICh2YWx1ZS5CT09MICE9PSB2b2lkIDApIHJldHVybiB2aXNpdG9yLkJPT0wodmFsdWUuQk9PTCk7XG4gICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICB9LCBcInZpc2l0XCIpO1xufSkoQXR0cmlidXRlVmFsdWUgfHwgKEF0dHJpYnV0ZVZhbHVlID0ge30pKTtcbnZhciBDb25kaXRpb25hbENoZWNrRmFpbGVkRXhjZXB0aW9uID0gY2xhc3MgX0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiQ29uZGl0aW9uYWxDaGVja0ZhaWxlZEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAvKipcbiAgICogPHA+SXRlbSB3aGljaCBjYXVzZWQgdGhlIDxjb2RlPkNvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb248L2NvZGU+LjwvcD5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgSXRlbTtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiQ29uZGl0aW9uYWxDaGVja0ZhaWxlZEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfQ29uZGl0aW9uYWxDaGVja0ZhaWxlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIHRoaXMuSXRlbSA9IG9wdHMuSXRlbTtcbiAgfVxufTtcbnZhciBUcmFuc2FjdGlvbkNhbmNlbGVkRXhjZXB0aW9uID0gY2xhc3MgX1RyYW5zYWN0aW9uQ2FuY2VsZWRFeGNlcHRpb24gZXh0ZW5kcyBEeW5hbW9EQlNlcnZpY2VFeGNlcHRpb24ge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRyYW5zYWN0aW9uQ2FuY2VsZWRFeGNlcHRpb25cIik7XG4gIH1cbiAgbmFtZSA9IFwiVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvblwiO1xuICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICBNZXNzYWdlO1xuICAvKipcbiAgICogPHA+QSBsaXN0IG9mIGNhbmNlbGxhdGlvbiByZWFzb25zLjwvcD5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgQ2FuY2VsbGF0aW9uUmVhc29ucztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKHtcbiAgICAgIG5hbWU6IFwiVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvblwiLFxuICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBfVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB0aGlzLkNhbmNlbGxhdGlvblJlYXNvbnMgPSBvcHRzLkNhbmNlbGxhdGlvblJlYXNvbnM7XG4gIH1cbn07XG5cbi8vIHNyYy9wcm90b2NvbHMvQXdzX2pzb24xXzAudHNcbnZhciBzZV9CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfQmF0Y2hFeGVjdXRlU3RhdGVtZW50SW5wdXQoaW5wdXQsIGNvbnRleHQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRcIik7XG52YXIgc2VfQmF0Y2hHZXRJdGVtQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQmF0Y2hHZXRJdGVtXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX0JhdGNoR2V0SXRlbUlucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9CYXRjaEdldEl0ZW1Db21tYW5kXCIpO1xudmFyIHNlX0JhdGNoV3JpdGVJdGVtQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQmF0Y2hXcml0ZUl0ZW1cIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfQmF0Y2hXcml0ZUl0ZW1JbnB1dChpbnB1dCwgY29udGV4dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfQmF0Y2hXcml0ZUl0ZW1Db21tYW5kXCIpO1xudmFyIHNlX0NyZWF0ZUJhY2t1cENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkNyZWF0ZUJhY2t1cFwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9DcmVhdGVCYWNrdXBDb21tYW5kXCIpO1xudmFyIHNlX0NyZWF0ZUdsb2JhbFRhYmxlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQ3JlYXRlR2xvYmFsVGFibGVcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfQ3JlYXRlR2xvYmFsVGFibGVDb21tYW5kXCIpO1xudmFyIHNlX0NyZWF0ZVRhYmxlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQ3JlYXRlVGFibGVcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfQ3JlYXRlVGFibGVDb21tYW5kXCIpO1xudmFyIHNlX0RlbGV0ZUJhY2t1cENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZUJhY2t1cFwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZWxldGVCYWNrdXBDb21tYW5kXCIpO1xudmFyIHNlX0RlbGV0ZUl0ZW1Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZWxldGVJdGVtXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX0RlbGV0ZUl0ZW1JbnB1dChpbnB1dCwgY29udGV4dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfRGVsZXRlSXRlbUNvbW1hbmRcIik7XG52YXIgc2VfRGVsZXRlUmVzb3VyY2VQb2xpY3lDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZWxldGVSZXNvdXJjZVBvbGljeVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmRcIik7XG52YXIgc2VfRGVsZXRlVGFibGVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZWxldGVUYWJsZVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZWxldGVUYWJsZUNvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVCYWNrdXBDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZUJhY2t1cFwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZXNjcmliZUJhY2t1cENvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlc2NyaWJlQ29udGludW91c0JhY2t1cHNcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfRGVzY3JpYmVDb250aW51b3VzQmFja3Vwc0NvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0Rlc2NyaWJlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZUVuZHBvaW50c1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZXNjcmliZUVuZHBvaW50c0NvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVFeHBvcnRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZUV4cG9ydFwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZXNjcmliZUV4cG9ydENvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVHbG9iYWxUYWJsZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlc2NyaWJlR2xvYmFsVGFibGVcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfRGVzY3JpYmVHbG9iYWxUYWJsZUNvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0Rlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVJbXBvcnRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZUltcG9ydFwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZXNjcmliZUltcG9ydENvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvblwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVMaW1pdHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZUxpbWl0c1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9EZXNjcmliZUxpbWl0c0NvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVUYWJsZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlc2NyaWJlVGFibGVcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfRGVzY3JpYmVUYWJsZUNvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmRcIik7XG52YXIgc2VfRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRGVzY3JpYmVUaW1lVG9MaXZlXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0Rlc2NyaWJlVGltZVRvTGl2ZUNvbW1hbmRcIik7XG52YXIgc2VfRGlzYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25cIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfRGlzYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmRcIik7XG52YXIgc2VfRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0VuYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmRcIik7XG52YXIgc2VfRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkV4ZWN1dGVTdGF0ZW1lbnRcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfRXhlY3V0ZVN0YXRlbWVudElucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9FeGVjdXRlU3RhdGVtZW50Q29tbWFuZFwiKTtcbnZhciBzZV9FeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJFeGVjdXRlVHJhbnNhY3Rpb25cIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfRXhlY3V0ZVRyYW5zYWN0aW9uSW5wdXQoaW5wdXQsIGNvbnRleHQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0V4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmRcIik7XG52YXIgc2VfRXhwb3J0VGFibGVUb1BvaW50SW5UaW1lQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRXhwb3J0VGFibGVUb1BvaW50SW5UaW1lXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX0V4cG9ydFRhYmxlVG9Qb2ludEluVGltZUlucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpO1xudmFyIHNlX0dldEl0ZW1Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRJdGVtXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX0dldEl0ZW1JbnB1dChpbnB1dCwgY29udGV4dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfR2V0SXRlbUNvbW1hbmRcIik7XG52YXIgc2VfR2V0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRSZXNvdXJjZVBvbGljeVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9HZXRSZXNvdXJjZVBvbGljeUNvbW1hbmRcIik7XG52YXIgc2VfSW1wb3J0VGFibGVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJJbXBvcnRUYWJsZVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9JbXBvcnRUYWJsZUlucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9JbXBvcnRUYWJsZUNvbW1hbmRcIik7XG52YXIgc2VfTGlzdEJhY2t1cHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0QmFja3Vwc1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9MaXN0QmFja3Vwc0lucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9MaXN0QmFja3Vwc0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0Q29udHJpYnV0b3JJbnNpZ2h0c1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9MaXN0Q29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdEV4cG9ydHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0RXhwb3J0c1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9MaXN0RXhwb3J0c0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkxpc3RHbG9iYWxUYWJsZXNcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdEltcG9ydHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0SW1wb3J0c1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9MaXN0SW1wb3J0c0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdFRhYmxlc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkxpc3RUYWJsZXNcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfTGlzdFRhYmxlc0NvbW1hbmRcIik7XG52YXIgc2VfTGlzdFRhZ3NPZlJlc291cmNlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdFRhZ3NPZlJlc291cmNlXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX0xpc3RUYWdzT2ZSZXNvdXJjZUNvbW1hbmRcIik7XG52YXIgc2VfUHV0SXRlbUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlB1dEl0ZW1cIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfUHV0SXRlbUlucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9QdXRJdGVtQ29tbWFuZFwiKTtcbnZhciBzZV9QdXRSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlB1dFJlc291cmNlUG9saWN5XCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX1B1dFJlc291cmNlUG9saWN5Q29tbWFuZFwiKTtcbnZhciBzZV9RdWVyeUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlF1ZXJ5XCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX1F1ZXJ5SW5wdXQoaW5wdXQsIGNvbnRleHQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX1F1ZXJ5Q29tbWFuZFwiKTtcbnZhciBzZV9SZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiUmVzdG9yZVRhYmxlRnJvbUJhY2t1cFwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9SZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZFwiKTtcbnZhciBzZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiUmVzdG9yZVRhYmxlVG9Qb2ludEluVGltZVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lSW5wdXQoaW5wdXQsIGNvbnRleHQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX1Jlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpO1xudmFyIHNlX1NjYW5Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTY2FuXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX1NjYW5JbnB1dChpbnB1dCwgY29udGV4dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfU2NhbkNvbW1hbmRcIik7XG52YXIgc2VfVGFnUmVzb3VyY2VDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJUYWdSZXNvdXJjZVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9UYWdSZXNvdXJjZUNvbW1hbmRcIik7XG52YXIgc2VfVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlRyYW5zYWN0R2V0SXRlbXNcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfVHJhbnNhY3RHZXRJdGVtc0lucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9UcmFuc2FjdEdldEl0ZW1zQ29tbWFuZFwiKTtcbnZhciBzZV9UcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJUcmFuc2FjdFdyaXRlSXRlbXNcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfVHJhbnNhY3RXcml0ZUl0ZW1zSW5wdXQoaW5wdXQsIGNvbnRleHQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX1RyYW5zYWN0V3JpdGVJdGVtc0NvbW1hbmRcIik7XG52YXIgc2VfVW50YWdSZXNvdXJjZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlVudGFnUmVzb3VyY2VcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfVW50YWdSZXNvdXJjZUNvbW1hbmRcIik7XG52YXIgc2VfVXBkYXRlQ29udGludW91c0JhY2t1cHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVDb250aW51b3VzQmFja3Vwc1wiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9VcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmRcIik7XG52YXIgc2VfVXBkYXRlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlVwZGF0ZUNvbnRyaWJ1dG9ySW5zaWdodHNcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfVXBkYXRlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmRcIik7XG52YXIgc2VfVXBkYXRlR2xvYmFsVGFibGVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVHbG9iYWxUYWJsZVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9VcGRhdGVHbG9iYWxUYWJsZUNvbW1hbmRcIik7XG52YXIgc2VfVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlVwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0lucHV0KGlucHV0LCBjb250ZXh0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9VcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZFwiKTtcbnZhciBzZV9VcGRhdGVJdGVtQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiVXBkYXRlSXRlbVwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9VcGRhdGVJdGVtSW5wdXQoaW5wdXQsIGNvbnRleHQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX1VwZGF0ZUl0ZW1Db21tYW5kXCIpO1xudmFyIHNlX1VwZGF0ZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlVwZGF0ZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvblwiKTtcbiAgbGV0IGJvZHk7XG4gIGJvZHkgPSBKU09OLnN0cmluZ2lmeSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGlucHV0KSk7XG4gIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB2b2lkIDAsIGJvZHkpO1xufSwgXCJzZV9VcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpO1xudmFyIHNlX1VwZGF0ZVRhYmxlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiVXBkYXRlVGFibGVcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShpbnB1dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfVXBkYXRlVGFibGVDb21tYW5kXCIpO1xudmFyIHNlX1VwZGF0ZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdcIik7XG4gIGxldCBib2R5O1xuICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdJbnB1dChpbnB1dCwgY29udGV4dCkpO1xuICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdm9pZCAwLCBib2R5KTtcbn0sIFwic2VfVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kXCIpO1xudmFyIHNlX1VwZGF0ZVRpbWVUb0xpdmVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVUaW1lVG9MaXZlXCIpO1xuICBsZXQgYm9keTtcbiAgYm9keSA9IEpTT04uc3RyaW5naWZ5KCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoaW5wdXQpKTtcbiAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHZvaWQgMCwgYm9keSk7XG59LCBcInNlX1VwZGF0ZVRpbWVUb0xpdmVDb21tYW5kXCIpO1xudmFyIGRlX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfQmF0Y2hFeGVjdXRlU3RhdGVtZW50T3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRcIik7XG52YXIgZGVfQmF0Y2hHZXRJdGVtQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9CYXRjaEdldEl0ZW1PdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfQmF0Y2hHZXRJdGVtQ29tbWFuZFwiKTtcbnZhciBkZV9CYXRjaFdyaXRlSXRlbUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfQmF0Y2hXcml0ZUl0ZW1PdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfQmF0Y2hXcml0ZUl0ZW1Db21tYW5kXCIpO1xudmFyIGRlX0NyZWF0ZUJhY2t1cENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfQ3JlYXRlQmFja3VwT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0NyZWF0ZUJhY2t1cENvbW1hbmRcIik7XG52YXIgZGVfQ3JlYXRlR2xvYmFsVGFibGVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0NyZWF0ZUdsb2JhbFRhYmxlT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0NyZWF0ZUdsb2JhbFRhYmxlQ29tbWFuZFwiKTtcbnZhciBkZV9DcmVhdGVUYWJsZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfQ3JlYXRlVGFibGVPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfQ3JlYXRlVGFibGVDb21tYW5kXCIpO1xudmFyIGRlX0RlbGV0ZUJhY2t1cENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfRGVsZXRlQmFja3VwT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0RlbGV0ZUJhY2t1cENvbW1hbmRcIik7XG52YXIgZGVfRGVsZXRlSXRlbUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfRGVsZXRlSXRlbU91dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9EZWxldGVJdGVtQ29tbWFuZFwiKTtcbnZhciBkZV9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmRcIik7XG52YXIgZGVfRGVsZXRlVGFibGVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0RlbGV0ZVRhYmxlT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0RlbGV0ZVRhYmxlQ29tbWFuZFwiKTtcbnZhciBkZV9EZXNjcmliZUJhY2t1cENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVCYWNrdXBPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRGVzY3JpYmVCYWNrdXBDb21tYW5kXCIpO1xudmFyIGRlX0Rlc2NyaWJlQ29udGludW91c0JhY2t1cHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlQ29udGludW91c0JhY2t1cHNPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRGVzY3JpYmVDb250aW51b3VzQmFja3Vwc0NvbW1hbmRcIik7XG52YXIgZGVfRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9EZXNjcmliZUNvbnRyaWJ1dG9ySW5zaWdodHNPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZFwiKTtcbnZhciBkZV9EZXNjcmliZUVuZHBvaW50c0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9EZXNjcmliZUVuZHBvaW50c0NvbW1hbmRcIik7XG52YXIgZGVfRGVzY3JpYmVFeHBvcnRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlRXhwb3J0T3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0Rlc2NyaWJlRXhwb3J0Q29tbWFuZFwiKTtcbnZhciBkZV9EZXNjcmliZUdsb2JhbFRhYmxlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9EZXNjcmliZUdsb2JhbFRhYmxlT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0Rlc2NyaWJlR2xvYmFsVGFibGVDb21tYW5kXCIpO1xudmFyIGRlX0Rlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0Rlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmRcIik7XG52YXIgZGVfRGVzY3JpYmVJbXBvcnRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlSW1wb3J0T3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0Rlc2NyaWJlSW1wb3J0Q29tbWFuZFwiKTtcbnZhciBkZV9EZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9EZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmRcIik7XG52YXIgZGVfRGVzY3JpYmVMaW1pdHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRGVzY3JpYmVMaW1pdHNDb21tYW5kXCIpO1xudmFyIGRlX0Rlc2NyaWJlVGFibGVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlVGFibGVPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRGVzY3JpYmVUYWJsZUNvbW1hbmRcIik7XG52YXIgZGVfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ091dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9EZXNjcmliZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nQ29tbWFuZFwiKTtcbnZhciBkZV9EZXNjcmliZVRpbWVUb0xpdmVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZFwiKTtcbnZhciBkZV9EaXNhYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGRhdGEpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0Rpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpO1xudmFyIGRlX0VuYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9FbmFibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpO1xudmFyIGRlX0V4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0V4ZWN1dGVTdGF0ZW1lbnRPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRcIik7XG52YXIgZGVfRXhlY3V0ZVRyYW5zYWN0aW9uQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9FeGVjdXRlVHJhbnNhY3Rpb25PdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfRXhlY3V0ZVRyYW5zYWN0aW9uQ29tbWFuZFwiKTtcbnZhciBkZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0V4cG9ydFRhYmxlVG9Qb2ludEluVGltZU91dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpO1xudmFyIGRlX0dldEl0ZW1Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0dldEl0ZW1PdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfR2V0SXRlbUNvbW1hbmRcIik7XG52YXIgZGVfR2V0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfR2V0UmVzb3VyY2VQb2xpY3lDb21tYW5kXCIpO1xudmFyIGRlX0ltcG9ydFRhYmxlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9JbXBvcnRUYWJsZU91dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9JbXBvcnRUYWJsZUNvbW1hbmRcIik7XG52YXIgZGVfTGlzdEJhY2t1cHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0xpc3RCYWNrdXBzT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0xpc3RCYWNrdXBzQ29tbWFuZFwiKTtcbnZhciBkZV9MaXN0Q29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9MaXN0Q29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmRcIik7XG52YXIgZGVfTGlzdEV4cG9ydHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfTGlzdEV4cG9ydHNDb21tYW5kXCIpO1xudmFyIGRlX0xpc3RHbG9iYWxUYWJsZXNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmRcIik7XG52YXIgZGVfTGlzdEltcG9ydHNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX0xpc3RJbXBvcnRzT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0xpc3RJbXBvcnRzQ29tbWFuZFwiKTtcbnZhciBkZV9MaXN0VGFibGVzQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGRhdGEpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX0xpc3RUYWJsZXNDb21tYW5kXCIpO1xudmFyIGRlX0xpc3RUYWdzT2ZSZXNvdXJjZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9MaXN0VGFnc09mUmVzb3VyY2VDb21tYW5kXCIpO1xudmFyIGRlX1B1dEl0ZW1Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX1B1dEl0ZW1PdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfUHV0SXRlbUNvbW1hbmRcIik7XG52YXIgZGVfUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kXCIpO1xudmFyIGRlX1F1ZXJ5Q29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9RdWVyeU91dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9RdWVyeUNvbW1hbmRcIik7XG52YXIgZGVfUmVzdG9yZVRhYmxlRnJvbUJhY2t1cENvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfUmVzdG9yZVRhYmxlRnJvbUJhY2t1cE91dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9SZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZFwiKTtcbnZhciBkZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lT3V0cHV0KGRhdGEsIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAuLi5jb250ZW50c1xuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX1Jlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpO1xudmFyIGRlX1NjYW5Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX1NjYW5PdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfU2NhbkNvbW1hbmRcIik7XG52YXIgZGVfVGFnUmVzb3VyY2VDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgYXdhaXQgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmNvbGxlY3RCb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVGFnUmVzb3VyY2VDb21tYW5kXCIpO1xudmFyIGRlX1RyYW5zYWN0R2V0SXRlbXNDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX1RyYW5zYWN0R2V0SXRlbXNPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmRcIik7XG52YXIgZGVfVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9UcmFuc2FjdFdyaXRlSXRlbXNPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZFwiKTtcbnZhciBkZV9VbnRhZ1Jlc291cmNlQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGF3YWl0ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5jb2xsZWN0Qm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KVxuICB9O1xuICByZXR1cm4gcmVzcG9uc2U7XG59LCBcImRlX1VudGFnUmVzb3VyY2VDb21tYW5kXCIpO1xudmFyIGRlX1VwZGF0ZUNvbnRpbnVvdXNCYWNrdXBzQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9VcGRhdGVDb250aW51b3VzQmFja3Vwc091dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9VcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmRcIik7XG52YXIgZGVfVXBkYXRlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9VcGRhdGVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZFwiKTtcbnZhciBkZV9VcGRhdGVHbG9iYWxUYWJsZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfVXBkYXRlR2xvYmFsVGFibGVPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVXBkYXRlR2xvYmFsVGFibGVDb21tYW5kXCIpO1xudmFyIGRlX1VwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NDb21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9IGRlX1VwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmRcIik7XG52YXIgZGVfVXBkYXRlSXRlbUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfVXBkYXRlSXRlbU91dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9VcGRhdGVJdGVtQ29tbWFuZFwiKTtcbnZhciBkZV9VcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCBpbXBvcnRfY29yZS5wYXJzZUpzb25Cb2R5KShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gIGxldCBjb250ZW50cyA9IHt9O1xuICBjb250ZW50cyA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoZGF0YSk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVXBkYXRlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZFwiKTtcbnZhciBkZV9VcGRhdGVUYWJsZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gZGVfVXBkYXRlVGFibGVPdXRwdXQoZGF0YSwgY29udGV4dCk7XG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIC4uLmNvbnRlbnRzXG4gIH07XG4gIHJldHVybiByZXNwb25zZTtcbn0sIFwiZGVfVXBkYXRlVGFibGVDb21tYW5kXCIpO1xudmFyIGRlX1VwZGF0ZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nQ29tbWFuZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uQm9keSkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICBsZXQgY29udGVudHMgPSB7fTtcbiAgY29udGVudHMgPSBkZV9VcGRhdGVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ091dHB1dChkYXRhLCBjb250ZXh0KTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9VcGRhdGVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmRcIik7XG52YXIgZGVfVXBkYXRlVGltZVRvTGl2ZUNvbW1hbmQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgKDAsIGltcG9ydF9jb3JlLnBhcnNlSnNvbkJvZHkpKG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgbGV0IGNvbnRlbnRzID0ge307XG4gIGNvbnRlbnRzID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShkYXRhKTtcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgLi4uY29udGVudHNcbiAgfTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufSwgXCJkZV9VcGRhdGVUaW1lVG9MaXZlQ29tbWFuZFwiKTtcbnZhciBkZV9Db21tYW5kRXJyb3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcGFyc2VkT3V0cHV0ID0ge1xuICAgIC4uLm91dHB1dCxcbiAgICBib2R5OiBhd2FpdCAoMCwgaW1wb3J0X2NvcmUucGFyc2VKc29uRXJyb3JCb2R5KShvdXRwdXQuYm9keSwgY29udGV4dClcbiAgfTtcbiAgY29uc3QgZXJyb3JDb2RlID0gKDAsIGltcG9ydF9jb3JlLmxvYWRSZXN0SnNvbkVycm9yQ29kZSkob3V0cHV0LCBwYXJzZWRPdXRwdXQuYm9keSk7XG4gIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgY2FzZSBcIkludGVybmFsU2VydmVyRXJyb3JcIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNJbnRlcm5hbFNlcnZlckVycm9yXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9JbnRlcm5hbFNlcnZlckVycm9yUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlcXVlc3RMaW1pdEV4Y2VlZGVkXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjUmVxdWVzdExpbWl0RXhjZWVkZWRcIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX1JlcXVlc3RMaW1pdEV4Y2VlZGVkUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkludmFsaWRFbmRwb2ludEV4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI0ludmFsaWRFbmRwb2ludEV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjUHJvdmlzaW9uZWRUaHJvdWdocHV0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX1Byb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkl0ZW1Db2xsZWN0aW9uU2l6ZUxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNJdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9JdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkJhY2t1cEluVXNlRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjQmFja3VwSW5Vc2VFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0JhY2t1cEluVXNlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkNvbnRpbnVvdXNCYWNrdXBzVW5hdmFpbGFibGVFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNDb250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9Db250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlRhYmxlSW5Vc2VFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNUYWJsZUluVXNlRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9UYWJsZUluVXNlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlRhYmxlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNUYWJsZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9UYWJsZU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkdsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI0dsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfR2xvYmFsVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlc291cmNlSW5Vc2VFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNSZXNvdXJjZUluVXNlRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZUluVXNlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkJhY2t1cE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjQmFja3VwTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0JhY2t1cE5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkNvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNDb25kaXRpb25hbENoZWNrRmFpbGVkRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9Db25kaXRpb25hbENoZWNrRmFpbGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjUmVwbGljYXRlZFdyaXRlQ29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX1JlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlRyYW5zYWN0aW9uQ29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNUcmFuc2FjdGlvbkNvbmZsaWN0RXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9UcmFuc2FjdGlvbkNvbmZsaWN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlBvbGljeU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX1BvbGljeU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkV4cG9ydE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjRXhwb3J0Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0V4cG9ydE5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkdsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNHbG9iYWxUYWJsZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9HbG9iYWxUYWJsZU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjSW1wb3J0Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0ltcG9ydE5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkR1cGxpY2F0ZUl0ZW1FeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNEdXBsaWNhdGVJdGVtRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9EdXBsaWNhdGVJdGVtRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIklkZW1wb3RlbnRQYXJhbWV0ZXJNaXNtYXRjaEV4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI0lkZW1wb3RlbnRQYXJhbWV0ZXJNaXNtYXRjaEV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfSWRlbXBvdGVudFBhcmFtZXRlck1pc21hdGNoRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlRyYW5zYWN0aW9uQ2FuY2VsZWRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNUcmFuc2FjdGlvbkNhbmNlbGVkRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9UcmFuc2FjdGlvbkNhbmNlbGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlRyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI1RyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkV4cG9ydENvbmZsaWN0RXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjRXhwb3J0Q29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0V4cG9ydENvbmZsaWN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjSW52YWxpZEV4cG9ydFRpbWVFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlBvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI1BvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfUG9pbnRJblRpbWVSZWNvdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkltcG9ydENvbmZsaWN0RXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjSW1wb3J0Q29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX0ltcG9ydENvbmZsaWN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI1RhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfVGFibGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkludmFsaWRSZXN0b3JlVGltZUV4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI0ludmFsaWRSZXN0b3JlVGltZUV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFJlc3RvcmVUaW1lRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgY2FzZSBcImNvbS5hbWF6b25hd3MuZHluYW1vZGIjUmVwbGljYUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgIHRocm93IGF3YWl0IGRlX1JlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIlJlcGxpY2FOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmR5bmFtb2RiI1JlcGxpY2FOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgdGhyb3cgYXdhaXQgZGVfUmVwbGljYU5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgY2FzZSBcIkluZGV4Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5keW5hbW9kYiNJbmRleE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICB0aHJvdyBhd2FpdCBkZV9JbmRleE5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgIG91dHB1dCxcbiAgICAgICAgcGFyc2VkQm9keSxcbiAgICAgICAgZXJyb3JDb2RlXG4gICAgICB9KTtcbiAgfVxufSwgXCJkZV9Db21tYW5kRXJyb3JcIik7XG52YXIgZGVfQmFja3VwSW5Vc2VFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgQmFja3VwSW5Vc2VFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0JhY2t1cEluVXNlRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX0JhY2t1cE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEJhY2t1cE5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9CYWNrdXBOb3RGb3VuZEV4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9Db25kaXRpb25hbENoZWNrRmFpbGVkRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfQ29uZGl0aW9uYWxDaGVja0ZhaWxlZEV4Y2VwdGlvbihib2R5LCBjb250ZXh0KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfQ29udGludW91c0JhY2t1cHNVbmF2YWlsYWJsZUV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDb250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9Db250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX0R1cGxpY2F0ZUl0ZW1FeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgRHVwbGljYXRlSXRlbUV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfRHVwbGljYXRlSXRlbUV4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9FeHBvcnRDb25mbGljdEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFeHBvcnRDb25mbGljdEV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfRXhwb3J0Q29uZmxpY3RFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfRXhwb3J0Tm90Rm91bmRFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXhwb3J0Tm90Rm91bmRFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0V4cG9ydE5vdEZvdW5kRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX0dsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBHbG9iYWxUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0dsb2JhbFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9HbG9iYWxUYWJsZU5vdEZvdW5kRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEdsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0dsb2JhbFRhYmxlTm90Rm91bmRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfSWRlbXBvdGVudFBhcmFtZXRlck1pc21hdGNoRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IElkZW1wb3RlbnRQYXJhbWV0ZXJNaXNtYXRjaEV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfSWRlbXBvdGVudFBhcmFtZXRlck1pc21hdGNoRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX0ltcG9ydENvbmZsaWN0RXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEltcG9ydENvbmZsaWN0RXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9JbXBvcnRDb25mbGljdEV4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9JbXBvcnROb3RGb3VuZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbXBvcnROb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfSW1wb3J0Tm90Rm91bmRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfSW5kZXhOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbmRleE5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9JbmRleE5vdEZvdW5kRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX0ludGVybmFsU2VydmVyRXJyb3JSZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvcih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfSW50ZXJuYWxTZXJ2ZXJFcnJvclJlc1wiKTtcbnZhciBkZV9JbnZhbGlkRW5kcG9pbnRFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9JbnZhbGlkRW5kcG9pbnRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfSW52YWxpZEV4cG9ydFRpbWVFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEV4cG9ydFRpbWVFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0ludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX0ludmFsaWRSZXN0b3JlVGltZUV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUmVzdG9yZVRpbWVFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0ludmFsaWRSZXN0b3JlVGltZUV4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9JdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEl0ZW1Db2xsZWN0aW9uU2l6ZUxpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX0l0ZW1Db2xsZWN0aW9uU2l6ZUxpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1BvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBQb2ludEluVGltZVJlY292ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1BvaW50SW5UaW1lUmVjb3ZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9Qb2xpY3lOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfUG9saWN5Tm90Rm91bmRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfUHJvdmlzaW9uZWRUaHJvdWdocHV0RXhjZWVkZWRFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgUHJvdmlzaW9uZWRUaHJvdWdocHV0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1Byb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1JlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlcGxpY2FBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9SZXBsaWNhQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9SZXBsaWNhTm90Rm91bmRFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVwbGljYU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9SZXBsaWNhTm90Rm91bmRFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfUmVwbGljYXRlZFdyaXRlQ29uZmxpY3RFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24pKGJvZHkpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVwbGljYXRlZFdyaXRlQ29uZmxpY3RFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1JlcGxpY2F0ZWRXcml0ZUNvbmZsaWN0RXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1JlcXVlc3RMaW1pdEV4Y2VlZGVkUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlcXVlc3RMaW1pdEV4Y2VlZGVkKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9SZXF1ZXN0TGltaXRFeGNlZWRlZFJlc1wiKTtcbnZhciBkZV9SZXNvdXJjZUluVXNlRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlSW5Vc2VFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1Jlc291cmNlSW5Vc2VFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1RhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1RhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9UYWJsZUluVXNlRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRhYmxlSW5Vc2VFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1RhYmxlSW5Vc2VFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfVGFibGVOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikoYm9keSk7XG4gIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBUYWJsZU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAuLi5kZXNlcmlhbGl6ZWRcbiAgfSk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKShleGNlcHRpb24sIGJvZHkpO1xufSwgXCJkZV9UYWJsZU5vdEZvdW5kRXhjZXB0aW9uUmVzXCIpO1xudmFyIGRlX1RyYW5zYWN0aW9uQ2FuY2VsZWRFeGNlcHRpb25SZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9UcmFuc2FjdGlvbkNhbmNlbGVkRXhjZXB0aW9uKGJvZHksIGNvbnRleHQpO1xuICBjb25zdCBleGNlcHRpb24gPSBuZXcgVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvblJlc1wiKTtcbnZhciBkZV9UcmFuc2FjdGlvbkNvbmZsaWN0RXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRyYW5zYWN0aW9uQ29uZmxpY3RFeGNlcHRpb24oe1xuICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgIC4uLmRlc2VyaWFsaXplZFxuICB9KTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24pKGV4Y2VwdGlvbiwgYm9keSk7XG59LCBcImRlX1RyYW5zYWN0aW9uQ29uZmxpY3RFeGNlcHRpb25SZXNcIik7XG52YXIgZGVfVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uUmVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgY29uc3QgZGVzZXJpYWxpemVkID0gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShib2R5KTtcbiAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvbih7XG4gICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgLi4uZGVzZXJpYWxpemVkXG4gIH0pO1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmRlY29yYXRlU2VydmljZUV4Y2VwdGlvbikoZXhjZXB0aW9uLCBib2R5KTtcbn0sIFwiZGVfVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uUmVzXCIpO1xudmFyIHNlX0F0dHJpYnV0ZVVwZGF0ZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gc2VfQXR0cmlidXRlVmFsdWVVcGRhdGUodmFsdWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwic2VfQXR0cmlidXRlVXBkYXRlc1wiKTtcbnZhciBzZV9BdHRyaWJ1dGVWYWx1ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBBdHRyaWJ1dGVWYWx1ZS52aXNpdChpbnB1dCwge1xuICAgIEI6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAoeyBCOiBjb250ZXh0LmJhc2U2NEVuY29kZXIodmFsdWUpIH0pLCBcIkJcIiksXG4gICAgQk9PTDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+ICh7IEJPT0w6IHZhbHVlIH0pLCBcIkJPT0xcIiksXG4gICAgQlM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAoeyBCUzogc2VfQmluYXJ5U2V0QXR0cmlidXRlVmFsdWUodmFsdWUsIGNvbnRleHQpIH0pLCBcIkJTXCIpLFxuICAgIEw6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAoeyBMOiBzZV9MaXN0QXR0cmlidXRlVmFsdWUodmFsdWUsIGNvbnRleHQpIH0pLCBcIkxcIiksXG4gICAgTTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsdWUpID0+ICh7IE06IHNlX01hcEF0dHJpYnV0ZVZhbHVlKHZhbHVlLCBjb250ZXh0KSB9KSwgXCJNXCIpLFxuICAgIE46IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAoeyBOOiB2YWx1ZSB9KSwgXCJOXCIpLFxuICAgIE5TOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4gKHsgTlM6ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikodmFsdWUpIH0pLCBcIk5TXCIpLFxuICAgIE5VTEw6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAoeyBOVUxMOiB2YWx1ZSB9KSwgXCJOVUxMXCIpLFxuICAgIFM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHZhbHVlKSA9PiAoeyBTOiB2YWx1ZSB9KSwgXCJTXCIpLFxuICAgIFNTOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh2YWx1ZSkgPT4gKHsgU1M6ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbikodmFsdWUpIH0pLCBcIlNTXCIpLFxuICAgIF86IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG5hbWUsIHZhbHVlKSA9PiAoeyBbbmFtZV06IHZhbHVlIH0pLCBcIl9cIilcbiAgfSk7XG59LCBcInNlX0F0dHJpYnV0ZVZhbHVlXCIpO1xudmFyIHNlX0F0dHJpYnV0ZVZhbHVlTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9BdHRyaWJ1dGVWYWx1ZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9BdHRyaWJ1dGVWYWx1ZUxpc3RcIik7XG52YXIgc2VfQXR0cmlidXRlVmFsdWVVcGRhdGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgQWN0aW9uOiBbXSxcbiAgICBWYWx1ZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQXR0cmlidXRlVmFsdWUoXywgY29udGV4dCksIFwiVmFsdWVcIilcbiAgfSk7XG59LCBcInNlX0F0dHJpYnV0ZVZhbHVlVXBkYXRlXCIpO1xudmFyIHNlX0F1dG9TY2FsaW5nUG9saWN5VXBkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIFBvbGljeU5hbWU6IFtdLFxuICAgIFRhcmdldFRyYWNraW5nU2NhbGluZ1BvbGljeUNvbmZpZ3VyYXRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0F1dG9TY2FsaW5nVGFyZ2V0VHJhY2tpbmdTY2FsaW5nUG9saWN5Q29uZmlndXJhdGlvblVwZGF0ZShfLCBjb250ZXh0KSwgXCJUYXJnZXRUcmFja2luZ1NjYWxpbmdQb2xpY3lDb25maWd1cmF0aW9uXCIpXG4gIH0pO1xufSwgXCJzZV9BdXRvU2NhbGluZ1BvbGljeVVwZGF0ZVwiKTtcbnZhciBzZV9BdXRvU2NhbGluZ1NldHRpbmdzVXBkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEF1dG9TY2FsaW5nRGlzYWJsZWQ6IFtdLFxuICAgIEF1dG9TY2FsaW5nUm9sZUFybjogW10sXG4gICAgTWF4aW11bVVuaXRzOiBbXSxcbiAgICBNaW5pbXVtVW5pdHM6IFtdLFxuICAgIFNjYWxpbmdQb2xpY3lVcGRhdGU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0F1dG9TY2FsaW5nUG9saWN5VXBkYXRlKF8sIGNvbnRleHQpLCBcIlNjYWxpbmdQb2xpY3lVcGRhdGVcIilcbiAgfSk7XG59LCBcInNlX0F1dG9TY2FsaW5nU2V0dGluZ3NVcGRhdGVcIik7XG52YXIgc2VfQXV0b1NjYWxpbmdUYXJnZXRUcmFja2luZ1NjYWxpbmdQb2xpY3lDb25maWd1cmF0aW9uVXBkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIERpc2FibGVTY2FsZUluOiBbXSxcbiAgICBTY2FsZUluQ29vbGRvd246IFtdLFxuICAgIFNjYWxlT3V0Q29vbGRvd246IFtdLFxuICAgIFRhcmdldFZhbHVlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5zZXJpYWxpemVGbG9hdFxuICB9KTtcbn0sIFwic2VfQXV0b1NjYWxpbmdUYXJnZXRUcmFja2luZ1NjYWxpbmdQb2xpY3lDb25maWd1cmF0aW9uVXBkYXRlXCIpO1xudmFyIHNlX0JhdGNoRXhlY3V0ZVN0YXRlbWVudElucHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIFJldHVybkNvbnN1bWVkQ2FwYWNpdHk6IFtdLFxuICAgIFN0YXRlbWVudHM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1BhcnRpUUxCYXRjaFJlcXVlc3QoXywgY29udGV4dCksIFwiU3RhdGVtZW50c1wiKVxuICB9KTtcbn0sIFwic2VfQmF0Y2hFeGVjdXRlU3RhdGVtZW50SW5wdXRcIik7XG52YXIgc2VfQmF0Y2hHZXRJdGVtSW5wdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgUmVxdWVzdEl0ZW1zOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9CYXRjaEdldFJlcXVlc3RNYXAoXywgY29udGV4dCksIFwiUmVxdWVzdEl0ZW1zXCIpLFxuICAgIFJldHVybkNvbnN1bWVkQ2FwYWNpdHk6IFtdXG4gIH0pO1xufSwgXCJzZV9CYXRjaEdldEl0ZW1JbnB1dFwiKTtcbnZhciBzZV9CYXRjaEdldFJlcXVlc3RNYXAgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gc2VfS2V5c0FuZEF0dHJpYnV0ZXModmFsdWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwic2VfQmF0Y2hHZXRSZXF1ZXN0TWFwXCIpO1xudmFyIHNlX0JhdGNoU3RhdGVtZW50UmVxdWVzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBDb25zaXN0ZW50UmVhZDogW10sXG4gICAgUGFyYW1ldGVyczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfUHJlcGFyZWRTdGF0ZW1lbnRQYXJhbWV0ZXJzKF8sIGNvbnRleHQpLCBcIlBhcmFtZXRlcnNcIiksXG4gICAgUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmU6IFtdLFxuICAgIFN0YXRlbWVudDogW11cbiAgfSk7XG59LCBcInNlX0JhdGNoU3RhdGVtZW50UmVxdWVzdFwiKTtcbnZhciBzZV9CYXRjaFdyaXRlSXRlbUlucHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIFJlcXVlc3RJdGVtczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQmF0Y2hXcml0ZUl0ZW1SZXF1ZXN0TWFwKF8sIGNvbnRleHQpLCBcIlJlcXVlc3RJdGVtc1wiKSxcbiAgICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiBbXSxcbiAgICBSZXR1cm5JdGVtQ29sbGVjdGlvbk1ldHJpY3M6IFtdXG4gIH0pO1xufSwgXCJzZV9CYXRjaFdyaXRlSXRlbUlucHV0XCIpO1xudmFyIHNlX0JhdGNoV3JpdGVJdGVtUmVxdWVzdE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhpbnB1dCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgYWNjW2tleV0gPSBzZV9Xcml0ZVJlcXVlc3RzKHZhbHVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcInNlX0JhdGNoV3JpdGVJdGVtUmVxdWVzdE1hcFwiKTtcbnZhciBzZV9CaW5hcnlTZXRBdHRyaWJ1dGVWYWx1ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBjb250ZXh0LmJhc2U2NEVuY29kZXIoZW50cnkpO1xuICB9KTtcbn0sIFwic2VfQmluYXJ5U2V0QXR0cmlidXRlVmFsdWVcIik7XG52YXIgc2VfQ29uZGl0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEF0dHJpYnV0ZVZhbHVlTGlzdDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQXR0cmlidXRlVmFsdWVMaXN0KF8sIGNvbnRleHQpLCBcIkF0dHJpYnV0ZVZhbHVlTGlzdFwiKSxcbiAgICBDb21wYXJpc29uT3BlcmF0b3I6IFtdXG4gIH0pO1xufSwgXCJzZV9Db25kaXRpb25cIik7XG52YXIgc2VfQ29uZGl0aW9uQ2hlY2sgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogW10sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVNYXAoXywgY29udGV4dCksIFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiKSxcbiAgICBLZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0tleShfLCBjb250ZXh0KSwgXCJLZXlcIiksXG4gICAgUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmU6IFtdLFxuICAgIFRhYmxlTmFtZTogW11cbiAgfSk7XG59LCBcInNlX0NvbmRpdGlvbkNoZWNrXCIpO1xudmFyIHNlX0RlbGV0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBDb25kaXRpb25FeHByZXNzaW9uOiBbXSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0V4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZU1hcChfLCBjb250ZXh0KSwgXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCIpLFxuICAgIEtleTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfS2V5KF8sIGNvbnRleHQpLCBcIktleVwiKSxcbiAgICBSZXR1cm5WYWx1ZXNPbkNvbmRpdGlvbkNoZWNrRmFpbHVyZTogW10sXG4gICAgVGFibGVOYW1lOiBbXVxuICB9KTtcbn0sIFwic2VfRGVsZXRlXCIpO1xudmFyIHNlX0RlbGV0ZUl0ZW1JbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBDb25kaXRpb25FeHByZXNzaW9uOiBbXSxcbiAgICBDb25kaXRpb25hbE9wZXJhdG9yOiBbXSxcbiAgICBFeHBlY3RlZDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfRXhwZWN0ZWRBdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiRXhwZWN0ZWRcIiksXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVNYXAoXywgY29udGV4dCksIFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiKSxcbiAgICBLZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0tleShfLCBjb250ZXh0KSwgXCJLZXlcIiksXG4gICAgUmV0dXJuQ29uc3VtZWRDYXBhY2l0eTogW10sXG4gICAgUmV0dXJuSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiBbXSxcbiAgICBSZXR1cm5WYWx1ZXM6IFtdLFxuICAgIFJldHVyblZhbHVlc09uQ29uZGl0aW9uQ2hlY2tGYWlsdXJlOiBbXSxcbiAgICBUYWJsZU5hbWU6IFtdXG4gIH0pO1xufSwgXCJzZV9EZWxldGVJdGVtSW5wdXRcIik7XG52YXIgc2VfRGVsZXRlUmVxdWVzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBLZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0tleShfLCBjb250ZXh0KSwgXCJLZXlcIilcbiAgfSk7XG59LCBcInNlX0RlbGV0ZVJlcXVlc3RcIik7XG52YXIgc2VfRXhlY3V0ZVN0YXRlbWVudElucHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIENvbnNpc3RlbnRSZWFkOiBbXSxcbiAgICBMaW1pdDogW10sXG4gICAgTmV4dFRva2VuOiBbXSxcbiAgICBQYXJhbWV0ZXJzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9QcmVwYXJlZFN0YXRlbWVudFBhcmFtZXRlcnMoXywgY29udGV4dCksIFwiUGFyYW1ldGVyc1wiKSxcbiAgICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiBbXSxcbiAgICBSZXR1cm5WYWx1ZXNPbkNvbmRpdGlvbkNoZWNrRmFpbHVyZTogW10sXG4gICAgU3RhdGVtZW50OiBbXVxuICB9KTtcbn0sIFwic2VfRXhlY3V0ZVN0YXRlbWVudElucHV0XCIpO1xudmFyIHNlX0V4ZWN1dGVUcmFuc2FjdGlvbklucHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIENsaWVudFJlcXVlc3RUb2tlbjogW3RydWUsIChfKSA9PiBfID8/ICgwLCBpbXBvcnRfdXVpZC52NCkoKV0sXG4gICAgUmV0dXJuQ29uc3VtZWRDYXBhY2l0eTogW10sXG4gICAgVHJhbnNhY3RTdGF0ZW1lbnRzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9QYXJhbWV0ZXJpemVkU3RhdGVtZW50cyhfLCBjb250ZXh0KSwgXCJUcmFuc2FjdFN0YXRlbWVudHNcIilcbiAgfSk7XG59LCBcInNlX0V4ZWN1dGVUcmFuc2FjdGlvbklucHV0XCIpO1xudmFyIHNlX0V4cGVjdGVkQXR0cmlidXRlTWFwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGlucHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IHNlX0V4cGVjdGVkQXR0cmlidXRlVmFsdWUodmFsdWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwic2VfRXhwZWN0ZWRBdHRyaWJ1dGVNYXBcIik7XG52YXIgc2VfRXhwZWN0ZWRBdHRyaWJ1dGVWYWx1ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBBdHRyaWJ1dGVWYWx1ZUxpc3Q6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0F0dHJpYnV0ZVZhbHVlTGlzdChfLCBjb250ZXh0KSwgXCJBdHRyaWJ1dGVWYWx1ZUxpc3RcIiksXG4gICAgQ29tcGFyaXNvbk9wZXJhdG9yOiBbXSxcbiAgICBFeGlzdHM6IFtdLFxuICAgIFZhbHVlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9BdHRyaWJ1dGVWYWx1ZShfLCBjb250ZXh0KSwgXCJWYWx1ZVwiKVxuICB9KTtcbn0sIFwic2VfRXhwZWN0ZWRBdHRyaWJ1dGVWYWx1ZVwiKTtcbnZhciBzZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVJbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBDbGllbnRUb2tlbjogW3RydWUsIChfKSA9PiBfID8/ICgwLCBpbXBvcnRfdXVpZC52NCkoKV0sXG4gICAgRXhwb3J0Rm9ybWF0OiBbXSxcbiAgICBFeHBvcnRUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBfLmdldFRpbWUoKSAvIDFlMywgXCJFeHBvcnRUaW1lXCIpLFxuICAgIEV4cG9ydFR5cGU6IFtdLFxuICAgIEluY3JlbWVudGFsRXhwb3J0U3BlY2lmaWNhdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfSW5jcmVtZW50YWxFeHBvcnRTcGVjaWZpY2F0aW9uKF8sIGNvbnRleHQpLCBcIkluY3JlbWVudGFsRXhwb3J0U3BlY2lmaWNhdGlvblwiKSxcbiAgICBTM0J1Y2tldDogW10sXG4gICAgUzNCdWNrZXRPd25lcjogW10sXG4gICAgUzNQcmVmaXg6IFtdLFxuICAgIFMzU3NlQWxnb3JpdGhtOiBbXSxcbiAgICBTM1NzZUttc0tleUlkOiBbXSxcbiAgICBUYWJsZUFybjogW11cbiAgfSk7XG59LCBcInNlX0V4cG9ydFRhYmxlVG9Qb2ludEluVGltZUlucHV0XCIpO1xudmFyIHNlX0V4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhpbnB1dCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgYWNjW2tleV0gPSBzZV9BdHRyaWJ1dGVWYWx1ZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSwgXCJzZV9FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVNYXBcIik7XG52YXIgc2VfRmlsdGVyQ29uZGl0aW9uTWFwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGlucHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IHNlX0NvbmRpdGlvbih2YWx1ZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSwgXCJzZV9GaWx0ZXJDb25kaXRpb25NYXBcIik7XG52YXIgc2VfR2V0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgS2V5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9LZXkoXywgY29udGV4dCksIFwiS2V5XCIpLFxuICAgIFByb2plY3Rpb25FeHByZXNzaW9uOiBbXSxcbiAgICBUYWJsZU5hbWU6IFtdXG4gIH0pO1xufSwgXCJzZV9HZXRcIik7XG52YXIgc2VfR2V0SXRlbUlucHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEF0dHJpYnV0ZXNUb0dldDogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgQ29uc2lzdGVudFJlYWQ6IFtdLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgS2V5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9LZXkoXywgY29udGV4dCksIFwiS2V5XCIpLFxuICAgIFByb2plY3Rpb25FeHByZXNzaW9uOiBbXSxcbiAgICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiBbXSxcbiAgICBUYWJsZU5hbWU6IFtdXG4gIH0pO1xufSwgXCJzZV9HZXRJdGVtSW5wdXRcIik7XG52YXIgc2VfR2xvYmFsU2Vjb25kYXJ5SW5kZXhBdXRvU2NhbGluZ1VwZGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBJbmRleE5hbWU6IFtdLFxuICAgIFByb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eUF1dG9TY2FsaW5nVXBkYXRlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9BdXRvU2NhbGluZ1NldHRpbmdzVXBkYXRlKF8sIGNvbnRleHQpLCBcIlByb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eUF1dG9TY2FsaW5nVXBkYXRlXCIpXG4gIH0pO1xufSwgXCJzZV9HbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nVXBkYXRlXCIpO1xudmFyIHNlX0dsb2JhbFNlY29uZGFyeUluZGV4QXV0b1NjYWxpbmdVcGRhdGVMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIGlucHV0LmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIHNlX0dsb2JhbFNlY29uZGFyeUluZGV4QXV0b1NjYWxpbmdVcGRhdGUoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbn0sIFwic2VfR2xvYmFsU2Vjb25kYXJ5SW5kZXhBdXRvU2NhbGluZ1VwZGF0ZUxpc3RcIik7XG52YXIgc2VfR2xvYmFsVGFibGVHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEluZGV4TmFtZTogW10sXG4gICAgUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZShfLCBjb250ZXh0KSwgXCJQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzVXBkYXRlXCIpLFxuICAgIFByb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eVVuaXRzOiBbXVxuICB9KTtcbn0sIFwic2VfR2xvYmFsVGFibGVHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlXCIpO1xudmFyIHNlX0dsb2JhbFRhYmxlR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZUxpc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gaW5wdXQuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gc2VfR2xvYmFsVGFibGVHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlKGVudHJ5LCBjb250ZXh0KTtcbiAgfSk7XG59LCBcInNlX0dsb2JhbFRhYmxlR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZUxpc3RcIik7XG52YXIgc2VfSW1wb3J0VGFibGVJbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBDbGllbnRUb2tlbjogW3RydWUsIChfKSA9PiBfID8/ICgwLCBpbXBvcnRfdXVpZC52NCkoKV0sXG4gICAgSW5wdXRDb21wcmVzc2lvblR5cGU6IFtdLFxuICAgIElucHV0Rm9ybWF0OiBbXSxcbiAgICBJbnB1dEZvcm1hdE9wdGlvbnM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIFMzQnVja2V0U291cmNlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBUYWJsZUNyZWF0aW9uUGFyYW1ldGVyczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb25cbiAgfSk7XG59LCBcInNlX0ltcG9ydFRhYmxlSW5wdXRcIik7XG52YXIgc2VfSW5jcmVtZW50YWxFeHBvcnRTcGVjaWZpY2F0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEV4cG9ydEZyb21UaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBfLmdldFRpbWUoKSAvIDFlMywgXCJFeHBvcnRGcm9tVGltZVwiKSxcbiAgICBFeHBvcnRUb1RpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IF8uZ2V0VGltZSgpIC8gMWUzLCBcIkV4cG9ydFRvVGltZVwiKSxcbiAgICBFeHBvcnRWaWV3VHlwZTogW11cbiAgfSk7XG59LCBcInNlX0luY3JlbWVudGFsRXhwb3J0U3BlY2lmaWNhdGlvblwiKTtcbnZhciBzZV9LZXkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gc2VfQXR0cmlidXRlVmFsdWUodmFsdWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwic2VfS2V5XCIpO1xudmFyIHNlX0tleUNvbmRpdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoaW5wdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gc2VfQ29uZGl0aW9uKHZhbHVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcInNlX0tleUNvbmRpdGlvbnNcIik7XG52YXIgc2VfS2V5TGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9LZXkoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbn0sIFwic2VfS2V5TGlzdFwiKTtcbnZhciBzZV9LZXlzQW5kQXR0cmlidXRlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBBdHRyaWJ1dGVzVG9HZXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIENvbnNpc3RlbnRSZWFkOiBbXSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEtleXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0tleUxpc3QoXywgY29udGV4dCksIFwiS2V5c1wiKSxcbiAgICBQcm9qZWN0aW9uRXhwcmVzc2lvbjogW11cbiAgfSk7XG59LCBcInNlX0tleXNBbmRBdHRyaWJ1dGVzXCIpO1xudmFyIHNlX0xpc3RBdHRyaWJ1dGVWYWx1ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9BdHRyaWJ1dGVWYWx1ZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9MaXN0QXR0cmlidXRlVmFsdWVcIik7XG52YXIgc2VfTGlzdEJhY2t1cHNJbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBCYWNrdXBUeXBlOiBbXSxcbiAgICBFeGNsdXNpdmVTdGFydEJhY2t1cEFybjogW10sXG4gICAgTGltaXQ6IFtdLFxuICAgIFRhYmxlTmFtZTogW10sXG4gICAgVGltZVJhbmdlTG93ZXJCb3VuZDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gXy5nZXRUaW1lKCkgLyAxZTMsIFwiVGltZVJhbmdlTG93ZXJCb3VuZFwiKSxcbiAgICBUaW1lUmFuZ2VVcHBlckJvdW5kOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBfLmdldFRpbWUoKSAvIDFlMywgXCJUaW1lUmFuZ2VVcHBlckJvdW5kXCIpXG4gIH0pO1xufSwgXCJzZV9MaXN0QmFja3Vwc0lucHV0XCIpO1xudmFyIHNlX01hcEF0dHJpYnV0ZVZhbHVlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGlucHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IHNlX0F0dHJpYnV0ZVZhbHVlKHZhbHVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcInNlX01hcEF0dHJpYnV0ZVZhbHVlXCIpO1xudmFyIHNlX1BhcmFtZXRlcml6ZWRTdGF0ZW1lbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgUGFyYW1ldGVyczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfUHJlcGFyZWRTdGF0ZW1lbnRQYXJhbWV0ZXJzKF8sIGNvbnRleHQpLCBcIlBhcmFtZXRlcnNcIiksXG4gICAgUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmU6IFtdLFxuICAgIFN0YXRlbWVudDogW11cbiAgfSk7XG59LCBcInNlX1BhcmFtZXRlcml6ZWRTdGF0ZW1lbnRcIik7XG52YXIgc2VfUGFyYW1ldGVyaXplZFN0YXRlbWVudHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gaW5wdXQuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gc2VfUGFyYW1ldGVyaXplZFN0YXRlbWVudChlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9QYXJhbWV0ZXJpemVkU3RhdGVtZW50c1wiKTtcbnZhciBzZV9QYXJ0aVFMQmF0Y2hSZXF1ZXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIGlucHV0LmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIHNlX0JhdGNoU3RhdGVtZW50UmVxdWVzdChlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9QYXJ0aVFMQmF0Y2hSZXF1ZXN0XCIpO1xudmFyIHNlX1ByZXBhcmVkU3RhdGVtZW50UGFyYW1ldGVycyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9BdHRyaWJ1dGVWYWx1ZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9QcmVwYXJlZFN0YXRlbWVudFBhcmFtZXRlcnNcIik7XG52YXIgc2VfUHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIENvbmRpdGlvbkV4cHJlc3Npb246IFtdLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwKF8sIGNvbnRleHQpLCBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIiksXG4gICAgSXRlbTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfUHV0SXRlbUlucHV0QXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkl0ZW1cIiksXG4gICAgUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmU6IFtdLFxuICAgIFRhYmxlTmFtZTogW11cbiAgfSk7XG59LCBcInNlX1B1dFwiKTtcbnZhciBzZV9QdXRJdGVtSW5wdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogW10sXG4gICAgQ29uZGl0aW9uYWxPcGVyYXRvcjogW10sXG4gICAgRXhwZWN0ZWQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0V4cGVjdGVkQXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkV4cGVjdGVkXCIpLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwKF8sIGNvbnRleHQpLCBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIiksXG4gICAgSXRlbTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfUHV0SXRlbUlucHV0QXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkl0ZW1cIiksXG4gICAgUmV0dXJuQ29uc3VtZWRDYXBhY2l0eTogW10sXG4gICAgUmV0dXJuSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiBbXSxcbiAgICBSZXR1cm5WYWx1ZXM6IFtdLFxuICAgIFJldHVyblZhbHVlc09uQ29uZGl0aW9uQ2hlY2tGYWlsdXJlOiBbXSxcbiAgICBUYWJsZU5hbWU6IFtdXG4gIH0pO1xufSwgXCJzZV9QdXRJdGVtSW5wdXRcIik7XG52YXIgc2VfUHV0SXRlbUlucHV0QXR0cmlidXRlTWFwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGlucHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IHNlX0F0dHJpYnV0ZVZhbHVlKHZhbHVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcInNlX1B1dEl0ZW1JbnB1dEF0dHJpYnV0ZU1hcFwiKTtcbnZhciBzZV9QdXRSZXF1ZXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIEl0ZW06IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1B1dEl0ZW1JbnB1dEF0dHJpYnV0ZU1hcChfLCBjb250ZXh0KSwgXCJJdGVtXCIpXG4gIH0pO1xufSwgXCJzZV9QdXRSZXF1ZXN0XCIpO1xudmFyIHNlX1F1ZXJ5SW5wdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgQXR0cmlidXRlc1RvR2V0OiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBDb25kaXRpb25hbE9wZXJhdG9yOiBbXSxcbiAgICBDb25zaXN0ZW50UmVhZDogW10sXG4gICAgRXhjbHVzaXZlU3RhcnRLZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0tleShfLCBjb250ZXh0KSwgXCJFeGNsdXNpdmVTdGFydEtleVwiKSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0V4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZU1hcChfLCBjb250ZXh0KSwgXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCIpLFxuICAgIEZpbHRlckV4cHJlc3Npb246IFtdLFxuICAgIEluZGV4TmFtZTogW10sXG4gICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogW10sXG4gICAgS2V5Q29uZGl0aW9uczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfS2V5Q29uZGl0aW9ucyhfLCBjb250ZXh0KSwgXCJLZXlDb25kaXRpb25zXCIpLFxuICAgIExpbWl0OiBbXSxcbiAgICBQcm9qZWN0aW9uRXhwcmVzc2lvbjogW10sXG4gICAgUXVlcnlGaWx0ZXI6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0ZpbHRlckNvbmRpdGlvbk1hcChfLCBjb250ZXh0KSwgXCJRdWVyeUZpbHRlclwiKSxcbiAgICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiBbXSxcbiAgICBTY2FuSW5kZXhGb3J3YXJkOiBbXSxcbiAgICBTZWxlY3Q6IFtdLFxuICAgIFRhYmxlTmFtZTogW11cbiAgfSk7XG59LCBcInNlX1F1ZXJ5SW5wdXRcIik7XG52YXIgc2VfUmVwbGljYUF1dG9TY2FsaW5nVXBkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIFJlZ2lvbk5hbWU6IFtdLFxuICAgIFJlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleFVwZGF0ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nVXBkYXRlTGlzdChfLCBjb250ZXh0KSwgXCJSZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhVcGRhdGVzXCIpLFxuICAgIFJlcGxpY2FQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nVXBkYXRlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9BdXRvU2NhbGluZ1NldHRpbmdzVXBkYXRlKF8sIGNvbnRleHQpLCBcIlJlcGxpY2FQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nVXBkYXRlXCIpXG4gIH0pO1xufSwgXCJzZV9SZXBsaWNhQXV0b1NjYWxpbmdVcGRhdGVcIik7XG52YXIgc2VfUmVwbGljYUF1dG9TY2FsaW5nVXBkYXRlTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9SZXBsaWNhQXV0b1NjYWxpbmdVcGRhdGUoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbn0sIFwic2VfUmVwbGljYUF1dG9TY2FsaW5nVXBkYXRlTGlzdFwiKTtcbnZhciBzZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhBdXRvU2NhbGluZ1VwZGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBJbmRleE5hbWU6IFtdLFxuICAgIFByb3Zpc2lvbmVkUmVhZENhcGFjaXR5QXV0b1NjYWxpbmdVcGRhdGU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0F1dG9TY2FsaW5nU2V0dGluZ3NVcGRhdGUoXywgY29udGV4dCksIFwiUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlBdXRvU2NhbGluZ1VwZGF0ZVwiKVxuICB9KTtcbn0sIFwic2VfUmVwbGljYUdsb2JhbFNlY29uZGFyeUluZGV4QXV0b1NjYWxpbmdVcGRhdGVcIik7XG52YXIgc2VfUmVwbGljYUdsb2JhbFNlY29uZGFyeUluZGV4QXV0b1NjYWxpbmdVcGRhdGVMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIGlucHV0LmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIHNlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nVXBkYXRlKGVudHJ5LCBjb250ZXh0KTtcbiAgfSk7XG59LCBcInNlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nVXBkYXRlTGlzdFwiKTtcbnZhciBzZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBJbmRleE5hbWU6IFtdLFxuICAgIFByb3Zpc2lvbmVkUmVhZENhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZShfLCBjb250ZXh0KSwgXCJQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3NVcGRhdGVcIiksXG4gICAgUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlVbml0czogW11cbiAgfSk7XG59LCBcInNlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlXCIpO1xudmFyIHNlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZUxpc3RcIik7XG52YXIgc2VfUmVwbGljYVNldHRpbmdzVXBkYXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShpbnB1dCwge1xuICAgIFJlZ2lvbk5hbWU6IFtdLFxuICAgIFJlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZUxpc3QoXywgY29udGV4dCksIFwiUmVwbGljYUdsb2JhbFNlY29uZGFyeUluZGV4U2V0dGluZ3NVcGRhdGVcIiksXG4gICAgUmVwbGljYVByb3Zpc2lvbmVkUmVhZENhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZShfLCBjb250ZXh0KSwgXCJSZXBsaWNhUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzVXBkYXRlXCIpLFxuICAgIFJlcGxpY2FQcm92aXNpb25lZFJlYWRDYXBhY2l0eVVuaXRzOiBbXSxcbiAgICBSZXBsaWNhVGFibGVDbGFzczogW11cbiAgfSk7XG59LCBcInNlX1JlcGxpY2FTZXR0aW5nc1VwZGF0ZVwiKTtcbnZhciBzZV9SZXBsaWNhU2V0dGluZ3NVcGRhdGVMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIGlucHV0LmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIHNlX1JlcGxpY2FTZXR0aW5nc1VwZGF0ZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9SZXBsaWNhU2V0dGluZ3NVcGRhdGVMaXN0XCIpO1xudmFyIHNlX1Jlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVJbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBCaWxsaW5nTW9kZU92ZXJyaWRlOiBbXSxcbiAgICBHbG9iYWxTZWNvbmRhcnlJbmRleE92ZXJyaWRlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBMb2NhbFNlY29uZGFyeUluZGV4T3ZlcnJpZGU6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIE9uRGVtYW5kVGhyb3VnaHB1dE92ZXJyaWRlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBQcm92aXNpb25lZFRocm91Z2hwdXRPdmVycmlkZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgUmVzdG9yZURhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBfLmdldFRpbWUoKSAvIDFlMywgXCJSZXN0b3JlRGF0ZVRpbWVcIiksXG4gICAgU1NFU3BlY2lmaWNhdGlvbk92ZXJyaWRlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBTb3VyY2VUYWJsZUFybjogW10sXG4gICAgU291cmNlVGFibGVOYW1lOiBbXSxcbiAgICBUYXJnZXRUYWJsZU5hbWU6IFtdLFxuICAgIFVzZUxhdGVzdFJlc3RvcmFibGVUaW1lOiBbXVxuICB9KTtcbn0sIFwic2VfUmVzdG9yZVRhYmxlVG9Qb2ludEluVGltZUlucHV0XCIpO1xudmFyIHNlX1NjYW5JbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBBdHRyaWJ1dGVzVG9HZXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIENvbmRpdGlvbmFsT3BlcmF0b3I6IFtdLFxuICAgIENvbnNpc3RlbnRSZWFkOiBbXSxcbiAgICBFeGNsdXNpdmVTdGFydEtleTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfS2V5KF8sIGNvbnRleHQpLCBcIkV4Y2x1c2l2ZVN0YXJ0S2V5XCIpLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwKF8sIGNvbnRleHQpLCBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIiksXG4gICAgRmlsdGVyRXhwcmVzc2lvbjogW10sXG4gICAgSW5kZXhOYW1lOiBbXSxcbiAgICBMaW1pdDogW10sXG4gICAgUHJvamVjdGlvbkV4cHJlc3Npb246IFtdLFxuICAgIFJldHVybkNvbnN1bWVkQ2FwYWNpdHk6IFtdLFxuICAgIFNjYW5GaWx0ZXI6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0ZpbHRlckNvbmRpdGlvbk1hcChfLCBjb250ZXh0KSwgXCJTY2FuRmlsdGVyXCIpLFxuICAgIFNlZ21lbnQ6IFtdLFxuICAgIFNlbGVjdDogW10sXG4gICAgVGFibGVOYW1lOiBbXSxcbiAgICBUb3RhbFNlZ21lbnRzOiBbXVxuICB9KTtcbn0sIFwic2VfU2NhbklucHV0XCIpO1xudmFyIHNlX1RyYW5zYWN0R2V0SXRlbSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBHZXQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0dldChfLCBjb250ZXh0KSwgXCJHZXRcIilcbiAgfSk7XG59LCBcInNlX1RyYW5zYWN0R2V0SXRlbVwiKTtcbnZhciBzZV9UcmFuc2FjdEdldEl0ZW1MaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIGlucHV0LmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIHNlX1RyYW5zYWN0R2V0SXRlbShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9UcmFuc2FjdEdldEl0ZW1MaXN0XCIpO1xudmFyIHNlX1RyYW5zYWN0R2V0SXRlbXNJbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiBbXSxcbiAgICBUcmFuc2FjdEl0ZW1zOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9UcmFuc2FjdEdldEl0ZW1MaXN0KF8sIGNvbnRleHQpLCBcIlRyYW5zYWN0SXRlbXNcIilcbiAgfSk7XG59LCBcInNlX1RyYW5zYWN0R2V0SXRlbXNJbnB1dFwiKTtcbnZhciBzZV9UcmFuc2FjdFdyaXRlSXRlbSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBDb25kaXRpb25DaGVjazogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQ29uZGl0aW9uQ2hlY2soXywgY29udGV4dCksIFwiQ29uZGl0aW9uQ2hlY2tcIiksXG4gICAgRGVsZXRlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9EZWxldGUoXywgY29udGV4dCksIFwiRGVsZXRlXCIpLFxuICAgIFB1dDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfUHV0KF8sIGNvbnRleHQpLCBcIlB1dFwiKSxcbiAgICBVcGRhdGU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1VwZGF0ZShfLCBjb250ZXh0KSwgXCJVcGRhdGVcIilcbiAgfSk7XG59LCBcInNlX1RyYW5zYWN0V3JpdGVJdGVtXCIpO1xudmFyIHNlX1RyYW5zYWN0V3JpdGVJdGVtTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBpbnB1dC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBzZV9UcmFuc2FjdFdyaXRlSXRlbShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xufSwgXCJzZV9UcmFuc2FjdFdyaXRlSXRlbUxpc3RcIik7XG52YXIgc2VfVHJhbnNhY3RXcml0ZUl0ZW1zSW5wdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgQ2xpZW50UmVxdWVzdFRva2VuOiBbdHJ1ZSwgKF8pID0+IF8gPz8gKDAsIGltcG9ydF91dWlkLnY0KSgpXSxcbiAgICBSZXR1cm5Db25zdW1lZENhcGFjaXR5OiBbXSxcbiAgICBSZXR1cm5JdGVtQ29sbGVjdGlvbk1ldHJpY3M6IFtdLFxuICAgIFRyYW5zYWN0SXRlbXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1RyYW5zYWN0V3JpdGVJdGVtTGlzdChfLCBjb250ZXh0KSwgXCJUcmFuc2FjdEl0ZW1zXCIpXG4gIH0pO1xufSwgXCJzZV9UcmFuc2FjdFdyaXRlSXRlbXNJbnB1dFwiKTtcbnZhciBzZV9VcGRhdGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogW10sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVNYXAoXywgY29udGV4dCksIFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiKSxcbiAgICBLZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0tleShfLCBjb250ZXh0KSwgXCJLZXlcIiksXG4gICAgUmV0dXJuVmFsdWVzT25Db25kaXRpb25DaGVja0ZhaWx1cmU6IFtdLFxuICAgIFRhYmxlTmFtZTogW10sXG4gICAgVXBkYXRlRXhwcmVzc2lvbjogW11cbiAgfSk7XG59LCBcInNlX1VwZGF0ZVwiKTtcbnZhciBzZV9VcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzSW5wdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgR2xvYmFsVGFibGVCaWxsaW5nTW9kZTogW10sXG4gICAgR2xvYmFsVGFibGVHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzVXBkYXRlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9HbG9iYWxUYWJsZUdsb2JhbFNlY29uZGFyeUluZGV4U2V0dGluZ3NVcGRhdGVMaXN0KF8sIGNvbnRleHQpLCBcIkdsb2JhbFRhYmxlR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1VwZGF0ZVwiKSxcbiAgICBHbG9iYWxUYWJsZU5hbWU6IFtdLFxuICAgIEdsb2JhbFRhYmxlUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfQXV0b1NjYWxpbmdTZXR0aW5nc1VwZGF0ZShfLCBjb250ZXh0KSwgXCJHbG9iYWxUYWJsZVByb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3NVcGRhdGVcIiksXG4gICAgR2xvYmFsVGFibGVQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0czogW10sXG4gICAgUmVwbGljYVNldHRpbmdzVXBkYXRlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9SZXBsaWNhU2V0dGluZ3NVcGRhdGVMaXN0KF8sIGNvbnRleHQpLCBcIlJlcGxpY2FTZXR0aW5nc1VwZGF0ZVwiKVxuICB9KTtcbn0sIFwic2VfVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0lucHV0XCIpO1xudmFyIHNlX1VwZGF0ZUl0ZW1JbnB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkoaW5wdXQsIHtcbiAgICBBdHRyaWJ1dGVVcGRhdGVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9BdHRyaWJ1dGVVcGRhdGVzKF8sIGNvbnRleHQpLCBcIkF0dHJpYnV0ZVVwZGF0ZXNcIiksXG4gICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogW10sXG4gICAgQ29uZGl0aW9uYWxPcGVyYXRvcjogW10sXG4gICAgRXhwZWN0ZWQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0V4cGVjdGVkQXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkV4cGVjdGVkXCIpLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwKF8sIGNvbnRleHQpLCBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIiksXG4gICAgS2V5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9LZXkoXywgY29udGV4dCksIFwiS2V5XCIpLFxuICAgIFJldHVybkNvbnN1bWVkQ2FwYWNpdHk6IFtdLFxuICAgIFJldHVybkl0ZW1Db2xsZWN0aW9uTWV0cmljczogW10sXG4gICAgUmV0dXJuVmFsdWVzOiBbXSxcbiAgICBSZXR1cm5WYWx1ZXNPbkNvbmRpdGlvbkNoZWNrRmFpbHVyZTogW10sXG4gICAgVGFibGVOYW1lOiBbXSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiBbXVxuICB9KTtcbn0sIFwic2VfVXBkYXRlSXRlbUlucHV0XCIpO1xudmFyIHNlX1VwZGF0ZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nSW5wdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgR2xvYmFsU2Vjb25kYXJ5SW5kZXhVcGRhdGVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBzZV9HbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nVXBkYXRlTGlzdChfLCBjb250ZXh0KSwgXCJHbG9iYWxTZWNvbmRhcnlJbmRleFVwZGF0ZXNcIiksXG4gICAgUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdVcGRhdGU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX0F1dG9TY2FsaW5nU2V0dGluZ3NVcGRhdGUoXywgY29udGV4dCksIFwiUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdVcGRhdGVcIiksXG4gICAgUmVwbGljYVVwZGF0ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1JlcGxpY2FBdXRvU2NhbGluZ1VwZGF0ZUxpc3QoXywgY29udGV4dCksIFwiUmVwbGljYVVwZGF0ZXNcIiksXG4gICAgVGFibGVOYW1lOiBbXVxuICB9KTtcbn0sIFwic2VfVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdJbnB1dFwiKTtcbnZhciBzZV9Xcml0ZVJlcXVlc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKGlucHV0LCB7XG4gICAgRGVsZXRlUmVxdWVzdDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gc2VfRGVsZXRlUmVxdWVzdChfLCBjb250ZXh0KSwgXCJEZWxldGVSZXF1ZXN0XCIpLFxuICAgIFB1dFJlcXVlc3Q6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IHNlX1B1dFJlcXVlc3QoXywgY29udGV4dCksIFwiUHV0UmVxdWVzdFwiKVxuICB9KTtcbn0sIFwic2VfV3JpdGVSZXF1ZXN0XCIpO1xudmFyIHNlX1dyaXRlUmVxdWVzdHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gaW5wdXQuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gc2VfV3JpdGVSZXF1ZXN0KGVudHJ5LCBjb250ZXh0KTtcbiAgfSk7XG59LCBcInNlX1dyaXRlUmVxdWVzdHNcIik7XG52YXIgZGVfQXJjaGl2YWxTdW1tYXJ5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQXJjaGl2YWxCYWNrdXBBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBBcmNoaXZhbERhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiQXJjaGl2YWxEYXRlVGltZVwiKSxcbiAgICBBcmNoaXZhbFJlYXNvbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9BcmNoaXZhbFN1bW1hcnlcIik7XG52YXIgZGVfQXR0cmlidXRlTWFwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhvdXRwdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gZGVfQXR0cmlidXRlVmFsdWUoKDAsIGltcG9ydF9jb3JlLmF3c0V4cGVjdFVuaW9uKSh2YWx1ZSksIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwiZGVfQXR0cmlidXRlTWFwXCIpO1xudmFyIGRlX0F0dHJpYnV0ZVZhbHVlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGlmIChvdXRwdXQuQiAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIEI6IGNvbnRleHQuYmFzZTY0RGVjb2RlcihvdXRwdXQuQilcbiAgICB9O1xuICB9XG4gIGlmICgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Qm9vbGVhbikob3V0cHV0LkJPT0wpICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4geyBCT09MOiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Qm9vbGVhbikob3V0cHV0LkJPT0wpIH07XG4gIH1cbiAgaWYgKG91dHB1dC5CUyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIEJTOiBkZV9CaW5hcnlTZXRBdHRyaWJ1dGVWYWx1ZShvdXRwdXQuQlMsIGNvbnRleHQpXG4gICAgfTtcbiAgfVxuICBpZiAob3V0cHV0LkwgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBMOiBkZV9MaXN0QXR0cmlidXRlVmFsdWUob3V0cHV0LkwsIGNvbnRleHQpXG4gICAgfTtcbiAgfVxuICBpZiAob3V0cHV0Lk0gIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBNOiBkZV9NYXBBdHRyaWJ1dGVWYWx1ZShvdXRwdXQuTSwgY29udGV4dClcbiAgICB9O1xuICB9XG4gIGlmICgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nKShvdXRwdXQuTikgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7IE46ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcpKG91dHB1dC5OKSB9O1xuICB9XG4gIGlmIChvdXRwdXQuTlMgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBOUzogKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShvdXRwdXQuTlMpXG4gICAgfTtcbiAgfVxuICBpZiAoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEJvb2xlYW4pKG91dHB1dC5OVUxMKSAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHsgTlVMTDogKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEJvb2xlYW4pKG91dHB1dC5OVUxMKSB9O1xuICB9XG4gIGlmICgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nKShvdXRwdXQuUykgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7IFM6ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcpKG91dHB1dC5TKSB9O1xuICB9XG4gIGlmIChvdXRwdXQuU1MgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBTUzogKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uKShvdXRwdXQuU1MpXG4gICAgfTtcbiAgfVxuICByZXR1cm4geyAkdW5rbm93bjogT2JqZWN0LmVudHJpZXMob3V0cHV0KVswXSB9O1xufSwgXCJkZV9BdHRyaWJ1dGVWYWx1ZVwiKTtcbnZhciBkZV9BdXRvU2NhbGluZ1BvbGljeURlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgUG9saWN5TmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhcmdldFRyYWNraW5nU2NhbGluZ1BvbGljeUNvbmZpZ3VyYXRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0F1dG9TY2FsaW5nVGFyZ2V0VHJhY2tpbmdTY2FsaW5nUG9saWN5Q29uZmlndXJhdGlvbkRlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlRhcmdldFRyYWNraW5nU2NhbGluZ1BvbGljeUNvbmZpZ3VyYXRpb25cIilcbiAgfSk7XG59LCBcImRlX0F1dG9TY2FsaW5nUG9saWN5RGVzY3JpcHRpb25cIik7XG52YXIgZGVfQXV0b1NjYWxpbmdQb2xpY3lEZXNjcmlwdGlvbkxpc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gZGVfQXV0b1NjYWxpbmdQb2xpY3lEZXNjcmlwdGlvbihlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9BdXRvU2NhbGluZ1BvbGljeURlc2NyaXB0aW9uTGlzdFwiKTtcbnZhciBkZV9BdXRvU2NhbGluZ1NldHRpbmdzRGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBBdXRvU2NhbGluZ0Rpc2FibGVkOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RCb29sZWFuLFxuICAgIEF1dG9TY2FsaW5nUm9sZUFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIE1heGltdW1Vbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBNaW5pbXVtVW5pdHM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdExvbmcsXG4gICAgU2NhbGluZ1BvbGljaWVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdXRvU2NhbGluZ1BvbGljeURlc2NyaXB0aW9uTGlzdChfLCBjb250ZXh0KSwgXCJTY2FsaW5nUG9saWNpZXNcIilcbiAgfSk7XG59LCBcImRlX0F1dG9TY2FsaW5nU2V0dGluZ3NEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9BdXRvU2NhbGluZ1RhcmdldFRyYWNraW5nU2NhbGluZ1BvbGljeUNvbmZpZ3VyYXRpb25EZXNjcmlwdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIERpc2FibGVTY2FsZUluOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RCb29sZWFuLFxuICAgIFNjYWxlSW5Db29sZG93bjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0SW50MzIsXG4gICAgU2NhbGVPdXRDb29sZG93bjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0SW50MzIsXG4gICAgVGFyZ2V0VmFsdWU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmxpbWl0ZWRQYXJzZURvdWJsZVxuICB9KTtcbn0sIFwiZGVfQXV0b1NjYWxpbmdUYXJnZXRUcmFja2luZ1NjYWxpbmdQb2xpY3lDb25maWd1cmF0aW9uRGVzY3JpcHRpb25cIik7XG52YXIgZGVfQmFja3VwRGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBCYWNrdXBEZXRhaWxzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9CYWNrdXBEZXRhaWxzKF8sIGNvbnRleHQpLCBcIkJhY2t1cERldGFpbHNcIiksXG4gICAgU291cmNlVGFibGVEZXRhaWxzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Tb3VyY2VUYWJsZURldGFpbHMoXywgY29udGV4dCksIFwiU291cmNlVGFibGVEZXRhaWxzXCIpLFxuICAgIFNvdXJjZVRhYmxlRmVhdHVyZURldGFpbHM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX1NvdXJjZVRhYmxlRmVhdHVyZURldGFpbHMoXywgY29udGV4dCksIFwiU291cmNlVGFibGVGZWF0dXJlRGV0YWlsc1wiKVxuICB9KTtcbn0sIFwiZGVfQmFja3VwRGVzY3JpcHRpb25cIik7XG52YXIgZGVfQmFja3VwRGV0YWlscyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEJhY2t1cEFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEJhY2t1cENyZWF0aW9uRGF0ZVRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJCYWNrdXBDcmVhdGlvbkRhdGVUaW1lXCIpLFxuICAgIEJhY2t1cEV4cGlyeURhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiQmFja3VwRXhwaXJ5RGF0ZVRpbWVcIiksXG4gICAgQmFja3VwTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEJhY2t1cFNpemVCeXRlczogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBCYWNrdXBTdGF0dXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBCYWNrdXBUeXBlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX0JhY2t1cERldGFpbHNcIik7XG52YXIgZGVfQmFja3VwU3VtbWFyaWVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0JhY2t1cFN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfQmFja3VwU3VtbWFyaWVzXCIpO1xudmFyIGRlX0JhY2t1cFN1bW1hcnkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBCYWNrdXBBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBCYWNrdXBDcmVhdGlvbkRhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiQmFja3VwQ3JlYXRpb25EYXRlVGltZVwiKSxcbiAgICBCYWNrdXBFeHBpcnlEYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkJhY2t1cEV4cGlyeURhdGVUaW1lXCIpLFxuICAgIEJhY2t1cE5hbWU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBCYWNrdXBTaXplQnl0ZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdExvbmcsXG4gICAgQmFja3VwU3RhdHVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgQmFja3VwVHlwZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlQXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgVGFibGVJZDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9CYWNrdXBTdW1tYXJ5XCIpO1xudmFyIGRlX0JhdGNoRXhlY3V0ZVN0YXRlbWVudE91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENvbnN1bWVkQ2FwYWNpdHk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0NvbnN1bWVkQ2FwYWNpdHlNdWx0aXBsZShfLCBjb250ZXh0KSwgXCJDb25zdW1lZENhcGFjaXR5XCIpLFxuICAgIFJlc3BvbnNlczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfUGFydGlRTEJhdGNoUmVzcG9uc2UoXywgY29udGV4dCksIFwiUmVzcG9uc2VzXCIpXG4gIH0pO1xufSwgXCJkZV9CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRPdXRwdXRcIik7XG52YXIgZGVfQmF0Y2hHZXRJdGVtT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQ29uc3VtZWRDYXBhY2l0eTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQ29uc3VtZWRDYXBhY2l0eU11bHRpcGxlKF8sIGNvbnRleHQpLCBcIkNvbnN1bWVkQ2FwYWNpdHlcIiksXG4gICAgUmVzcG9uc2VzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9CYXRjaEdldFJlc3BvbnNlTWFwKF8sIGNvbnRleHQpLCBcIlJlc3BvbnNlc1wiKSxcbiAgICBVbnByb2Nlc3NlZEtleXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0JhdGNoR2V0UmVxdWVzdE1hcChfLCBjb250ZXh0KSwgXCJVbnByb2Nlc3NlZEtleXNcIilcbiAgfSk7XG59LCBcImRlX0JhdGNoR2V0SXRlbU91dHB1dFwiKTtcbnZhciBkZV9CYXRjaEdldFJlcXVlc3RNYXAgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG91dHB1dCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgYWNjW2tleV0gPSBkZV9LZXlzQW5kQXR0cmlidXRlcyh2YWx1ZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSwgXCJkZV9CYXRjaEdldFJlcXVlc3RNYXBcIik7XG52YXIgZGVfQmF0Y2hHZXRSZXNwb25zZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoXG4gICAgKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIGFjY1trZXldID0gZGVfSXRlbUxpc3QodmFsdWUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LFxuICAgIHt9XG4gICk7XG59LCBcImRlX0JhdGNoR2V0UmVzcG9uc2VNYXBcIik7XG52YXIgZGVfQmF0Y2hTdGF0ZW1lbnRFcnJvciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENvZGU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBJdGVtOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiSXRlbVwiKSxcbiAgICBNZXNzYWdlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX0JhdGNoU3RhdGVtZW50RXJyb3JcIik7XG52YXIgZGVfQmF0Y2hTdGF0ZW1lbnRSZXNwb25zZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEVycm9yOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9CYXRjaFN0YXRlbWVudEVycm9yKF8sIGNvbnRleHQpLCBcIkVycm9yXCIpLFxuICAgIEl0ZW06IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0F0dHJpYnV0ZU1hcChfLCBjb250ZXh0KSwgXCJJdGVtXCIpLFxuICAgIFRhYmxlTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9CYXRjaFN0YXRlbWVudFJlc3BvbnNlXCIpO1xudmFyIGRlX0JhdGNoV3JpdGVJdGVtT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQ29uc3VtZWRDYXBhY2l0eTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQ29uc3VtZWRDYXBhY2l0eU11bHRpcGxlKF8sIGNvbnRleHQpLCBcIkNvbnN1bWVkQ2FwYWNpdHlcIiksXG4gICAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JdGVtQ29sbGVjdGlvbk1ldHJpY3NQZXJUYWJsZShfLCBjb250ZXh0KSwgXCJJdGVtQ29sbGVjdGlvbk1ldHJpY3NcIiksXG4gICAgVW5wcm9jZXNzZWRJdGVtczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQmF0Y2hXcml0ZUl0ZW1SZXF1ZXN0TWFwKF8sIGNvbnRleHQpLCBcIlVucHJvY2Vzc2VkSXRlbXNcIilcbiAgfSk7XG59LCBcImRlX0JhdGNoV3JpdGVJdGVtT3V0cHV0XCIpO1xudmFyIGRlX0JhdGNoV3JpdGVJdGVtUmVxdWVzdE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IGRlX1dyaXRlUmVxdWVzdHModmFsdWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwiZGVfQmF0Y2hXcml0ZUl0ZW1SZXF1ZXN0TWFwXCIpO1xudmFyIGRlX0JpbGxpbmdNb2RlU3VtbWFyeSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEJpbGxpbmdNb2RlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgTGFzdFVwZGF0ZVRvUGF5UGVyUmVxdWVzdERhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiTGFzdFVwZGF0ZVRvUGF5UGVyUmVxdWVzdERhdGVUaW1lXCIpXG4gIH0pO1xufSwgXCJkZV9CaWxsaW5nTW9kZVN1bW1hcnlcIik7XG52YXIgZGVfQmluYXJ5U2V0QXR0cmlidXRlVmFsdWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gY29udGV4dC5iYXNlNjREZWNvZGVyKGVudHJ5KTtcbiAgfSk7XG4gIHJldHVybiByZXRWYWw7XG59LCBcImRlX0JpbmFyeVNldEF0dHJpYnV0ZVZhbHVlXCIpO1xudmFyIGRlX0NhbmNlbGxhdGlvblJlYXNvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENvZGU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBJdGVtOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiSXRlbVwiKSxcbiAgICBNZXNzYWdlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX0NhbmNlbGxhdGlvblJlYXNvblwiKTtcbnZhciBkZV9DYW5jZWxsYXRpb25SZWFzb25MaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0NhbmNlbGxhdGlvblJlYXNvbihlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9DYW5jZWxsYXRpb25SZWFzb25MaXN0XCIpO1xudmFyIGRlX0NhcGFjaXR5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQ2FwYWNpdHlVbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQubGltaXRlZFBhcnNlRG91YmxlLFxuICAgIFJlYWRDYXBhY2l0eVVuaXRzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgV3JpdGVDYXBhY2l0eVVuaXRzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5saW1pdGVkUGFyc2VEb3VibGVcbiAgfSk7XG59LCBcImRlX0NhcGFjaXR5XCIpO1xudmFyIGRlX0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBJdGVtOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiSXRlbVwiKSxcbiAgICBtZXNzYWdlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb25cIik7XG52YXIgZGVfQ29uc3VtZWRDYXBhY2l0eSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENhcGFjaXR5VW5pdHM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmxpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICBHbG9iYWxTZWNvbmRhcnlJbmRleGVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9TZWNvbmRhcnlJbmRleGVzQ2FwYWNpdHlNYXAoXywgY29udGV4dCksIFwiR2xvYmFsU2Vjb25kYXJ5SW5kZXhlc1wiKSxcbiAgICBMb2NhbFNlY29uZGFyeUluZGV4ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX1NlY29uZGFyeUluZGV4ZXNDYXBhY2l0eU1hcChfLCBjb250ZXh0KSwgXCJMb2NhbFNlY29uZGFyeUluZGV4ZXNcIiksXG4gICAgUmVhZENhcGFjaXR5VW5pdHM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmxpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICBUYWJsZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQ2FwYWNpdHkoXywgY29udGV4dCksIFwiVGFibGVcIiksXG4gICAgVGFibGVOYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgV3JpdGVDYXBhY2l0eVVuaXRzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5saW1pdGVkUGFyc2VEb3VibGVcbiAgfSk7XG59LCBcImRlX0NvbnN1bWVkQ2FwYWNpdHlcIik7XG52YXIgZGVfQ29uc3VtZWRDYXBhY2l0eU11bHRpcGxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0NvbnN1bWVkQ2FwYWNpdHkoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfQ29uc3VtZWRDYXBhY2l0eU11bHRpcGxlXCIpO1xudmFyIGRlX0NvbnRpbnVvdXNCYWNrdXBzRGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDb250aW51b3VzQmFja3Vwc1N0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFBvaW50SW5UaW1lUmVjb3ZlcnlEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfUG9pbnRJblRpbWVSZWNvdmVyeURlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlBvaW50SW5UaW1lUmVjb3ZlcnlEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfQ29udGludW91c0JhY2t1cHNEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9DcmVhdGVCYWNrdXBPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBCYWNrdXBEZXRhaWxzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9CYWNrdXBEZXRhaWxzKF8sIGNvbnRleHQpLCBcIkJhY2t1cERldGFpbHNcIilcbiAgfSk7XG59LCBcImRlX0NyZWF0ZUJhY2t1cE91dHB1dFwiKTtcbnZhciBkZV9DcmVhdGVHbG9iYWxUYWJsZU91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEdsb2JhbFRhYmxlRGVzY3JpcHRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0dsb2JhbFRhYmxlRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiR2xvYmFsVGFibGVEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfQ3JlYXRlR2xvYmFsVGFibGVPdXRwdXRcIik7XG52YXIgZGVfQ3JlYXRlVGFibGVPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBUYWJsZURlc2NyaXB0aW9uOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9UYWJsZURlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlRhYmxlRGVzY3JpcHRpb25cIilcbiAgfSk7XG59LCBcImRlX0NyZWF0ZVRhYmxlT3V0cHV0XCIpO1xudmFyIGRlX0RlbGV0ZUJhY2t1cE91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEJhY2t1cERlc2NyaXB0aW9uOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9CYWNrdXBEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJCYWNrdXBEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfRGVsZXRlQmFja3VwT3V0cHV0XCIpO1xudmFyIGRlX0RlbGV0ZUl0ZW1PdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBBdHRyaWJ1dGVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiQXR0cmlidXRlc1wiKSxcbiAgICBDb25zdW1lZENhcGFjaXR5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db25zdW1lZENhcGFjaXR5KF8sIGNvbnRleHQpLCBcIkNvbnN1bWVkQ2FwYWNpdHlcIiksXG4gICAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JdGVtQ29sbGVjdGlvbk1ldHJpY3MoXywgY29udGV4dCksIFwiSXRlbUNvbGxlY3Rpb25NZXRyaWNzXCIpXG4gIH0pO1xufSwgXCJkZV9EZWxldGVJdGVtT3V0cHV0XCIpO1xudmFyIGRlX0RlbGV0ZVJlcXVlc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBLZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0tleShfLCBjb250ZXh0KSwgXCJLZXlcIilcbiAgfSk7XG59LCBcImRlX0RlbGV0ZVJlcXVlc3RcIik7XG52YXIgZGVfRGVsZXRlVGFibGVPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBUYWJsZURlc2NyaXB0aW9uOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9UYWJsZURlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlRhYmxlRGVzY3JpcHRpb25cIilcbiAgfSk7XG59LCBcImRlX0RlbGV0ZVRhYmxlT3V0cHV0XCIpO1xudmFyIGRlX0Rlc2NyaWJlQmFja3VwT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQmFja3VwRGVzY3JpcHRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0JhY2t1cERlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIkJhY2t1cERlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9EZXNjcmliZUJhY2t1cE91dHB1dFwiKTtcbnZhciBkZV9EZXNjcmliZUNvbnRpbnVvdXNCYWNrdXBzT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQ29udGludW91c0JhY2t1cHNEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQ29udGludW91c0JhY2t1cHNEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJDb250aW51b3VzQmFja3Vwc0Rlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9EZXNjcmliZUNvbnRpbnVvdXNCYWNrdXBzT3V0cHV0XCIpO1xudmFyIGRlX0Rlc2NyaWJlQ29udHJpYnV0b3JJbnNpZ2h0c091dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENvbnRyaWJ1dG9ySW5zaWdodHNSdWxlTGlzdDogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgQ29udHJpYnV0b3JJbnNpZ2h0c1N0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEZhaWx1cmVFeGNlcHRpb246IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEluZGV4TmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIExhc3RVcGRhdGVEYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkxhc3RVcGRhdGVEYXRlVGltZVwiKSxcbiAgICBUYWJsZU5hbWU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzT3V0cHV0XCIpO1xudmFyIGRlX0Rlc2NyaWJlRXhwb3J0T3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgRXhwb3J0RGVzY3JpcHRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0V4cG9ydERlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIkV4cG9ydERlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9EZXNjcmliZUV4cG9ydE91dHB1dFwiKTtcbnZhciBkZV9EZXNjcmliZUdsb2JhbFRhYmxlT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgR2xvYmFsVGFibGVEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfR2xvYmFsVGFibGVEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJHbG9iYWxUYWJsZURlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9EZXNjcmliZUdsb2JhbFRhYmxlT3V0cHV0XCIpO1xudmFyIGRlX0Rlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc091dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEdsb2JhbFRhYmxlTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFJlcGxpY2FTZXR0aW5nczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfUmVwbGljYVNldHRpbmdzRGVzY3JpcHRpb25MaXN0KF8sIGNvbnRleHQpLCBcIlJlcGxpY2FTZXR0aW5nc1wiKVxuICB9KTtcbn0sIFwiZGVfRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzT3V0cHV0XCIpO1xudmFyIGRlX0Rlc2NyaWJlSW1wb3J0T3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgSW1wb3J0VGFibGVEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfSW1wb3J0VGFibGVEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJJbXBvcnRUYWJsZURlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9EZXNjcmliZUltcG9ydE91dHB1dFwiKTtcbnZhciBkZV9EZXNjcmliZVRhYmxlT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgVGFibGU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX1RhYmxlRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiVGFibGVcIilcbiAgfSk7XG59LCBcImRlX0Rlc2NyaWJlVGFibGVPdXRwdXRcIik7XG52YXIgZGVfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ091dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIFRhYmxlQXV0b1NjYWxpbmdEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfVGFibGVBdXRvU2NhbGluZ0Rlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlRhYmxlQXV0b1NjYWxpbmdEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ091dHB1dFwiKTtcbnZhciBkZV9FeGVjdXRlU3RhdGVtZW50T3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQ29uc3VtZWRDYXBhY2l0eTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQ29uc3VtZWRDYXBhY2l0eShfLCBjb250ZXh0KSwgXCJDb25zdW1lZENhcGFjaXR5XCIpLFxuICAgIEl0ZW1zOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JdGVtTGlzdChfLCBjb250ZXh0KSwgXCJJdGVtc1wiKSxcbiAgICBMYXN0RXZhbHVhdGVkS2V5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9LZXkoXywgY29udGV4dCksIFwiTGFzdEV2YWx1YXRlZEtleVwiKSxcbiAgICBOZXh0VG9rZW46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfRXhlY3V0ZVN0YXRlbWVudE91dHB1dFwiKTtcbnZhciBkZV9FeGVjdXRlVHJhbnNhY3Rpb25PdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDb25zdW1lZENhcGFjaXR5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db25zdW1lZENhcGFjaXR5TXVsdGlwbGUoXywgY29udGV4dCksIFwiQ29uc3VtZWRDYXBhY2l0eVwiKSxcbiAgICBSZXNwb25zZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0l0ZW1SZXNwb25zZUxpc3QoXywgY29udGV4dCksIFwiUmVzcG9uc2VzXCIpXG4gIH0pO1xufSwgXCJkZV9FeGVjdXRlVHJhbnNhY3Rpb25PdXRwdXRcIik7XG52YXIgZGVfRXhwb3J0RGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBCaWxsZWRTaXplQnl0ZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdExvbmcsXG4gICAgQ2xpZW50VG9rZW46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBFbmRUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiRW5kVGltZVwiKSxcbiAgICBFeHBvcnRBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBFeHBvcnRGb3JtYXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBFeHBvcnRNYW5pZmVzdDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEV4cG9ydFN0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEV4cG9ydFRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJFeHBvcnRUaW1lXCIpLFxuICAgIEV4cG9ydFR5cGU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBGYWlsdXJlQ29kZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEZhaWx1cmVNZXNzYWdlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSW5jcmVtZW50YWxFeHBvcnRTcGVjaWZpY2F0aW9uOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JbmNyZW1lbnRhbEV4cG9ydFNwZWNpZmljYXRpb24oXywgY29udGV4dCksIFwiSW5jcmVtZW50YWxFeHBvcnRTcGVjaWZpY2F0aW9uXCIpLFxuICAgIEl0ZW1Db3VudDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBTM0J1Y2tldDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFMzQnVja2V0T3duZXI6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBTM1ByZWZpeDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFMzU3NlQWxnb3JpdGhtOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUzNTc2VLbXNLZXlJZDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFN0YXJ0VGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIlN0YXJ0VGltZVwiKSxcbiAgICBUYWJsZUFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlSWQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfRXhwb3J0RGVzY3JpcHRpb25cIik7XG52YXIgZGVfRXhwb3J0VGFibGVUb1BvaW50SW5UaW1lT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgRXhwb3J0RGVzY3JpcHRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0V4cG9ydERlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIkV4cG9ydERlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVPdXRwdXRcIik7XG52YXIgZGVfR2V0SXRlbU91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENvbnN1bWVkQ2FwYWNpdHk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0NvbnN1bWVkQ2FwYWNpdHkoXywgY29udGV4dCksIFwiQ29uc3VtZWRDYXBhY2l0eVwiKSxcbiAgICBJdGVtOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiSXRlbVwiKVxuICB9KTtcbn0sIFwiZGVfR2V0SXRlbU91dHB1dFwiKTtcbnZhciBkZV9HbG9iYWxTZWNvbmRhcnlJbmRleERlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQmFja2ZpbGxpbmc6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEJvb2xlYW4sXG4gICAgSW5kZXhBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBJbmRleE5hbWU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBJbmRleFNpemVCeXRlczogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBJbmRleFN0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEl0ZW1Db3VudDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBLZXlTY2hlbWE6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIE9uRGVtYW5kVGhyb3VnaHB1dDogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgUHJvamVjdGlvbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgUHJvdmlzaW9uZWRUaHJvdWdocHV0OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Qcm92aXNpb25lZFRocm91Z2hwdXREZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJQcm92aXNpb25lZFRocm91Z2hwdXRcIiksXG4gICAgV2FybVRocm91Z2hwdXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uXG4gIH0pO1xufSwgXCJkZV9HbG9iYWxTZWNvbmRhcnlJbmRleERlc2NyaXB0aW9uXCIpO1xudmFyIGRlX0dsb2JhbFNlY29uZGFyeUluZGV4RGVzY3JpcHRpb25MaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0dsb2JhbFNlY29uZGFyeUluZGV4RGVzY3JpcHRpb24oZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfR2xvYmFsU2Vjb25kYXJ5SW5kZXhEZXNjcmlwdGlvbkxpc3RcIik7XG52YXIgZGVfR2xvYmFsVGFibGVEZXNjcmlwdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENyZWF0aW9uRGF0ZVRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJDcmVhdGlvbkRhdGVUaW1lXCIpLFxuICAgIEdsb2JhbFRhYmxlQXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgR2xvYmFsVGFibGVOYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgR2xvYmFsVGFibGVTdGF0dXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBSZXBsaWNhdGlvbkdyb3VwOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9SZXBsaWNhRGVzY3JpcHRpb25MaXN0KF8sIGNvbnRleHQpLCBcIlJlcGxpY2F0aW9uR3JvdXBcIilcbiAgfSk7XG59LCBcImRlX0dsb2JhbFRhYmxlRGVzY3JpcHRpb25cIik7XG52YXIgZGVfSW1wb3J0U3VtbWFyeSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENsb3VkV2F0Y2hMb2dHcm91cEFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEVuZFRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJFbmRUaW1lXCIpLFxuICAgIEltcG9ydEFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEltcG9ydFN0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIElucHV0Rm9ybWF0OiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUzNCdWNrZXRTb3VyY2U6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIFN0YXJ0VGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIlN0YXJ0VGltZVwiKSxcbiAgICBUYWJsZUFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9JbXBvcnRTdW1tYXJ5XCIpO1xudmFyIGRlX0ltcG9ydFN1bW1hcnlMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0ltcG9ydFN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfSW1wb3J0U3VtbWFyeUxpc3RcIik7XG52YXIgZGVfSW1wb3J0VGFibGVEZXNjcmlwdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENsaWVudFRva2VuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgQ2xvdWRXYXRjaExvZ0dyb3VwQXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgRW5kVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkVuZFRpbWVcIiksXG4gICAgRXJyb3JDb3VudDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBGYWlsdXJlQ29kZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEZhaWx1cmVNZXNzYWdlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSW1wb3J0QXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSW1wb3J0U3RhdHVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSW1wb3J0ZWRJdGVtQ291bnQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdExvbmcsXG4gICAgSW5wdXRDb21wcmVzc2lvblR5cGU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBJbnB1dEZvcm1hdDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIElucHV0Rm9ybWF0T3B0aW9uczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgUHJvY2Vzc2VkSXRlbUNvdW50OiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RMb25nLFxuICAgIFByb2Nlc3NlZFNpemVCeXRlczogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBTM0J1Y2tldFNvdXJjZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgU3RhcnRUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiU3RhcnRUaW1lXCIpLFxuICAgIFRhYmxlQXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgVGFibGVDcmVhdGlvblBhcmFtZXRlcnM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIFRhYmxlSWQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfSW1wb3J0VGFibGVEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9JbXBvcnRUYWJsZU91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEltcG9ydFRhYmxlRGVzY3JpcHRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0ltcG9ydFRhYmxlRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiSW1wb3J0VGFibGVEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfSW1wb3J0VGFibGVPdXRwdXRcIik7XG52YXIgZGVfSW5jcmVtZW50YWxFeHBvcnRTcGVjaWZpY2F0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgRXhwb3J0RnJvbVRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJFeHBvcnRGcm9tVGltZVwiKSxcbiAgICBFeHBvcnRUb1RpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJFeHBvcnRUb1RpbWVcIiksXG4gICAgRXhwb3J0Vmlld1R5cGU6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfSW5jcmVtZW50YWxFeHBvcnRTcGVjaWZpY2F0aW9uXCIpO1xudmFyIGRlX0l0ZW1Db2xsZWN0aW9uS2V5QXR0cmlidXRlTWFwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhvdXRwdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gZGVfQXR0cmlidXRlVmFsdWUoKDAsIGltcG9ydF9jb3JlLmF3c0V4cGVjdFVuaW9uKSh2YWx1ZSksIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwiZGVfSXRlbUNvbGxlY3Rpb25LZXlBdHRyaWJ1dGVNYXBcIik7XG52YXIgZGVfSXRlbUNvbGxlY3Rpb25NZXRyaWNzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgSXRlbUNvbGxlY3Rpb25LZXk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0l0ZW1Db2xsZWN0aW9uS2V5QXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkl0ZW1Db2xsZWN0aW9uS2V5XCIpLFxuICAgIFNpemVFc3RpbWF0ZVJhbmdlR0I6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0l0ZW1Db2xsZWN0aW9uU2l6ZUVzdGltYXRlUmFuZ2UoXywgY29udGV4dCksIFwiU2l6ZUVzdGltYXRlUmFuZ2VHQlwiKVxuICB9KTtcbn0sIFwiZGVfSXRlbUNvbGxlY3Rpb25NZXRyaWNzXCIpO1xudmFyIGRlX0l0ZW1Db2xsZWN0aW9uTWV0cmljc011bHRpcGxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0l0ZW1Db2xsZWN0aW9uTWV0cmljcyhlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9JdGVtQ29sbGVjdGlvbk1ldHJpY3NNdWx0aXBsZVwiKTtcbnZhciBkZV9JdGVtQ29sbGVjdGlvbk1ldHJpY3NQZXJUYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IGRlX0l0ZW1Db2xsZWN0aW9uTWV0cmljc011bHRpcGxlKHZhbHVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcImRlX0l0ZW1Db2xsZWN0aW9uTWV0cmljc1BlclRhYmxlXCIpO1xudmFyIGRlX0l0ZW1Db2xsZWN0aW9uU2l6ZUVzdGltYXRlUmFuZ2UgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmxpbWl0ZWRQYXJzZURvdWJsZSkoZW50cnkpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfSXRlbUNvbGxlY3Rpb25TaXplRXN0aW1hdGVSYW5nZVwiKTtcbnZhciBkZV9JdGVtTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKS5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBkZV9BdHRyaWJ1dGVNYXAoZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfSXRlbUxpc3RcIik7XG52YXIgZGVfSXRlbVJlc3BvbnNlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgSXRlbTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkl0ZW1cIilcbiAgfSk7XG59LCBcImRlX0l0ZW1SZXNwb25zZVwiKTtcbnZhciBkZV9JdGVtUmVzcG9uc2VMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0l0ZW1SZXNwb25zZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9JdGVtUmVzcG9uc2VMaXN0XCIpO1xudmFyIGRlX0tleSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IGRlX0F0dHJpYnV0ZVZhbHVlKCgwLCBpbXBvcnRfY29yZS5hd3NFeHBlY3RVbmlvbikodmFsdWUpLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcImRlX0tleVwiKTtcbnZhciBkZV9LZXlMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKS5tYXAoKGVudHJ5KSA9PiB7XG4gICAgcmV0dXJuIGRlX0tleShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9LZXlMaXN0XCIpO1xudmFyIGRlX0tleXNBbmRBdHRyaWJ1dGVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQXR0cmlidXRlc1RvR2V0OiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBDb25zaXN0ZW50UmVhZDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Qm9vbGVhbixcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEtleXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0tleUxpc3QoXywgY29udGV4dCksIFwiS2V5c1wiKSxcbiAgICBQcm9qZWN0aW9uRXhwcmVzc2lvbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9LZXlzQW5kQXR0cmlidXRlc1wiKTtcbnZhciBkZV9MaXN0QXR0cmlidXRlVmFsdWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gZGVfQXR0cmlidXRlVmFsdWUoKDAsIGltcG9ydF9jb3JlLmF3c0V4cGVjdFVuaW9uKShlbnRyeSksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfTGlzdEF0dHJpYnV0ZVZhbHVlXCIpO1xudmFyIGRlX0xpc3RCYWNrdXBzT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQmFja3VwU3VtbWFyaWVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9CYWNrdXBTdW1tYXJpZXMoXywgY29udGV4dCksIFwiQmFja3VwU3VtbWFyaWVzXCIpLFxuICAgIExhc3RFdmFsdWF0ZWRCYWNrdXBBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfTGlzdEJhY2t1cHNPdXRwdXRcIik7XG52YXIgZGVfTGlzdEltcG9ydHNPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBJbXBvcnRTdW1tYXJ5TGlzdDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfSW1wb3J0U3VtbWFyeUxpc3QoXywgY29udGV4dCksIFwiSW1wb3J0U3VtbWFyeUxpc3RcIiksXG4gICAgTmV4dFRva2VuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX0xpc3RJbXBvcnRzT3V0cHV0XCIpO1xudmFyIGRlX01hcEF0dHJpYnV0ZVZhbHVlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhvdXRwdXQpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGFjY1trZXldID0gZGVfQXR0cmlidXRlVmFsdWUoKDAsIGltcG9ydF9jb3JlLmF3c0V4cGVjdFVuaW9uKSh2YWx1ZSksIGNvbnRleHQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwiZGVfTWFwQXR0cmlidXRlVmFsdWVcIik7XG52YXIgZGVfUGFydGlRTEJhdGNoUmVzcG9uc2UgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gZGVfQmF0Y2hTdGF0ZW1lbnRSZXNwb25zZShlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9QYXJ0aVFMQmF0Y2hSZXNwb25zZVwiKTtcbnZhciBkZV9Qb2ludEluVGltZVJlY292ZXJ5RGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBFYXJsaWVzdFJlc3RvcmFibGVEYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkVhcmxpZXN0UmVzdG9yYWJsZURhdGVUaW1lXCIpLFxuICAgIExhdGVzdFJlc3RvcmFibGVEYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkxhdGVzdFJlc3RvcmFibGVEYXRlVGltZVwiKSxcbiAgICBQb2ludEluVGltZVJlY292ZXJ5U3RhdHVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUmVjb3ZlcnlQZXJpb2RJbkRheXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEludDMyXG4gIH0pO1xufSwgXCJkZV9Qb2ludEluVGltZVJlY292ZXJ5RGVzY3JpcHRpb25cIik7XG52YXIgZGVfUHJvdmlzaW9uZWRUaHJvdWdocHV0RGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBMYXN0RGVjcmVhc2VEYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkxhc3REZWNyZWFzZURhdGVUaW1lXCIpLFxuICAgIExhc3RJbmNyZWFzZURhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiTGFzdEluY3JlYXNlRGF0ZVRpbWVcIiksXG4gICAgTnVtYmVyT2ZEZWNyZWFzZXNUb2RheTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBSZWFkQ2FwYWNpdHlVbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBXcml0ZUNhcGFjaXR5VW5pdHM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdExvbmdcbiAgfSk7XG59LCBcImRlX1Byb3Zpc2lvbmVkVGhyb3VnaHB1dERlc2NyaXB0aW9uXCIpO1xudmFyIGRlX1B1dEl0ZW1JbnB1dEF0dHJpYnV0ZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IGRlX0F0dHJpYnV0ZVZhbHVlKCgwLCBpbXBvcnRfY29yZS5hd3NFeHBlY3RVbmlvbikodmFsdWUpLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcImRlX1B1dEl0ZW1JbnB1dEF0dHJpYnV0ZU1hcFwiKTtcbnZhciBkZV9QdXRJdGVtT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgQXR0cmlidXRlczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkF0dHJpYnV0ZXNcIiksXG4gICAgQ29uc3VtZWRDYXBhY2l0eTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQ29uc3VtZWRDYXBhY2l0eShfLCBjb250ZXh0KSwgXCJDb25zdW1lZENhcGFjaXR5XCIpLFxuICAgIEl0ZW1Db2xsZWN0aW9uTWV0cmljczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfSXRlbUNvbGxlY3Rpb25NZXRyaWNzKF8sIGNvbnRleHQpLCBcIkl0ZW1Db2xsZWN0aW9uTWV0cmljc1wiKVxuICB9KTtcbn0sIFwiZGVfUHV0SXRlbU91dHB1dFwiKTtcbnZhciBkZV9QdXRSZXF1ZXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgSXRlbTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfUHV0SXRlbUlucHV0QXR0cmlidXRlTWFwKF8sIGNvbnRleHQpLCBcIkl0ZW1cIilcbiAgfSk7XG59LCBcImRlX1B1dFJlcXVlc3RcIik7XG52YXIgZGVfUXVlcnlPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDb25zdW1lZENhcGFjaXR5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db25zdW1lZENhcGFjaXR5KF8sIGNvbnRleHQpLCBcIkNvbnN1bWVkQ2FwYWNpdHlcIiksXG4gICAgQ291bnQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEludDMyLFxuICAgIEl0ZW1zOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JdGVtTGlzdChfLCBjb250ZXh0KSwgXCJJdGVtc1wiKSxcbiAgICBMYXN0RXZhbHVhdGVkS2V5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9LZXkoXywgY29udGV4dCksIFwiTGFzdEV2YWx1YXRlZEtleVwiKSxcbiAgICBTY2FubmVkQ291bnQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEludDMyXG4gIH0pO1xufSwgXCJkZV9RdWVyeU91dHB1dFwiKTtcbnZhciBkZV9SZXBsaWNhQXV0b1NjYWxpbmdEZXNjcmlwdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEdsb2JhbFNlY29uZGFyeUluZGV4ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nRGVzY3JpcHRpb25MaXN0KF8sIGNvbnRleHQpLCBcIkdsb2JhbFNlY29uZGFyeUluZGV4ZXNcIiksXG4gICAgUmVnaW9uTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFJlcGxpY2FQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3M6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0F1dG9TY2FsaW5nU2V0dGluZ3NEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJSZXBsaWNhUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzXCIpLFxuICAgIFJlcGxpY2FQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdXRvU2NhbGluZ1NldHRpbmdzRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiUmVwbGljYVByb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3NcIiksXG4gICAgUmVwbGljYVN0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9SZXBsaWNhQXV0b1NjYWxpbmdEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9SZXBsaWNhQXV0b1NjYWxpbmdEZXNjcmlwdGlvbkxpc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gZGVfUmVwbGljYUF1dG9TY2FsaW5nRGVzY3JpcHRpb24oZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfUmVwbGljYUF1dG9TY2FsaW5nRGVzY3JpcHRpb25MaXN0XCIpO1xudmFyIGRlX1JlcGxpY2FEZXNjcmlwdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIEdsb2JhbFNlY29uZGFyeUluZGV4ZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEtNU01hc3RlcktleUlkOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgT25EZW1hbmRUaHJvdWdocHV0T3ZlcnJpZGU6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIFByb3Zpc2lvbmVkVGhyb3VnaHB1dE92ZXJyaWRlOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBSZWdpb25OYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUmVwbGljYUluYWNjZXNzaWJsZURhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiUmVwbGljYUluYWNjZXNzaWJsZURhdGVUaW1lXCIpLFxuICAgIFJlcGxpY2FTdGF0dXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBSZXBsaWNhU3RhdHVzRGVzY3JpcHRpb246IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBSZXBsaWNhU3RhdHVzUGVyY2VudFByb2dyZXNzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUmVwbGljYVRhYmxlQ2xhc3NTdW1tYXJ5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9UYWJsZUNsYXNzU3VtbWFyeShfLCBjb250ZXh0KSwgXCJSZXBsaWNhVGFibGVDbGFzc1N1bW1hcnlcIiksXG4gICAgV2FybVRocm91Z2hwdXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uXG4gIH0pO1xufSwgXCJkZV9SZXBsaWNhRGVzY3JpcHRpb25cIik7XG52YXIgZGVfUmVwbGljYURlc2NyaXB0aW9uTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKS5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBkZV9SZXBsaWNhRGVzY3JpcHRpb24oZW50cnksIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHJldFZhbDtcbn0sIFwiZGVfUmVwbGljYURlc2NyaXB0aW9uTGlzdFwiKTtcbnZhciBkZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhBdXRvU2NhbGluZ0Rlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgSW5kZXhOYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSW5kZXhTdGF0dXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3M6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0F1dG9TY2FsaW5nU2V0dGluZ3NEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3NcIiksXG4gICAgUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQXV0b1NjYWxpbmdTZXR0aW5nc0Rlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlByb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3NcIilcbiAgfSk7XG59LCBcImRlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleEF1dG9TY2FsaW5nRGVzY3JpcHRpb25cIik7XG52YXIgZGVfUmVwbGljYUdsb2JhbFNlY29uZGFyeUluZGV4QXV0b1NjYWxpbmdEZXNjcmlwdGlvbkxpc3QgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gZGVfUmVwbGljYUdsb2JhbFNlY29uZGFyeUluZGV4QXV0b1NjYWxpbmdEZXNjcmlwdGlvbihlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhBdXRvU2NhbGluZ0Rlc2NyaXB0aW9uTGlzdFwiKTtcbnZhciBkZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc0Rlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgSW5kZXhOYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSW5kZXhTdGF0dXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3M6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0F1dG9TY2FsaW5nU2V0dGluZ3NEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJQcm92aXNpb25lZFJlYWRDYXBhY2l0eUF1dG9TY2FsaW5nU2V0dGluZ3NcIiksXG4gICAgUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlVbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdXRvU2NhbGluZ1NldHRpbmdzRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nc1wiKSxcbiAgICBQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZ1xuICB9KTtcbn0sIFwiZGVfUmVwbGljYUdsb2JhbFNlY29uZGFyeUluZGV4U2V0dGluZ3NEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc0Rlc2NyaXB0aW9uTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKS5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBkZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc0Rlc2NyaXB0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgfSk7XG4gIHJldHVybiByZXRWYWw7XG59LCBcImRlX1JlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzRGVzY3JpcHRpb25MaXN0XCIpO1xudmFyIGRlX1JlcGxpY2FTZXR0aW5nc0Rlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgUmVnaW9uTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFJlcGxpY2FCaWxsaW5nTW9kZVN1bW1hcnk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0JpbGxpbmdNb2RlU3VtbWFyeShfLCBjb250ZXh0KSwgXCJSZXBsaWNhQmlsbGluZ01vZGVTdW1tYXJ5XCIpLFxuICAgIFJlcGxpY2FHbG9iYWxTZWNvbmRhcnlJbmRleFNldHRpbmdzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9SZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc0Rlc2NyaXB0aW9uTGlzdChfLCBjb250ZXh0KSwgXCJSZXBsaWNhR2xvYmFsU2Vjb25kYXJ5SW5kZXhTZXR0aW5nc1wiKSxcbiAgICBSZXBsaWNhUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdXRvU2NhbGluZ1NldHRpbmdzRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiUmVwbGljYVByb3Zpc2lvbmVkUmVhZENhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nc1wiKSxcbiAgICBSZXBsaWNhUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlVbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBSZXBsaWNhUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5QXV0b1NjYWxpbmdTZXR0aW5nczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQXV0b1NjYWxpbmdTZXR0aW5nc0Rlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlJlcGxpY2FQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlBdXRvU2NhbGluZ1NldHRpbmdzXCIpLFxuICAgIFJlcGxpY2FQcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBSZXBsaWNhU3RhdHVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUmVwbGljYVRhYmxlQ2xhc3NTdW1tYXJ5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9UYWJsZUNsYXNzU3VtbWFyeShfLCBjb250ZXh0KSwgXCJSZXBsaWNhVGFibGVDbGFzc1N1bW1hcnlcIilcbiAgfSk7XG59LCBcImRlX1JlcGxpY2FTZXR0aW5nc0Rlc2NyaXB0aW9uXCIpO1xudmFyIGRlX1JlcGxpY2FTZXR0aW5nc0Rlc2NyaXB0aW9uTGlzdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKS5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbCkubWFwKChlbnRyeSkgPT4ge1xuICAgIHJldHVybiBkZV9SZXBsaWNhU2V0dGluZ3NEZXNjcmlwdGlvbihlbnRyeSwgY29udGV4dCk7XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufSwgXCJkZV9SZXBsaWNhU2V0dGluZ3NEZXNjcmlwdGlvbkxpc3RcIik7XG52YXIgZGVfUmVzdG9yZVN1bW1hcnkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBSZXN0b3JlRGF0ZVRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJSZXN0b3JlRGF0ZVRpbWVcIiksXG4gICAgUmVzdG9yZUluUHJvZ3Jlc3M6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEJvb2xlYW4sXG4gICAgU291cmNlQmFja3VwQXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgU291cmNlVGFibGVBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZ1xuICB9KTtcbn0sIFwiZGVfUmVzdG9yZVN1bW1hcnlcIik7XG52YXIgZGVfUmVzdG9yZVRhYmxlRnJvbUJhY2t1cE91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIFRhYmxlRGVzY3JpcHRpb246IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX1RhYmxlRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiVGFibGVEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfUmVzdG9yZVRhYmxlRnJvbUJhY2t1cE91dHB1dFwiKTtcbnZhciBkZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgVGFibGVEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfVGFibGVEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJUYWJsZURlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lT3V0cHV0XCIpO1xudmFyIGRlX1NjYW5PdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDb25zdW1lZENhcGFjaXR5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db25zdW1lZENhcGFjaXR5KF8sIGNvbnRleHQpLCBcIkNvbnN1bWVkQ2FwYWNpdHlcIiksXG4gICAgQ291bnQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEludDMyLFxuICAgIEl0ZW1zOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JdGVtTGlzdChfLCBjb250ZXh0KSwgXCJJdGVtc1wiKSxcbiAgICBMYXN0RXZhbHVhdGVkS2V5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9LZXkoXywgY29udGV4dCksIFwiTGFzdEV2YWx1YXRlZEtleVwiKSxcbiAgICBTY2FubmVkQ291bnQ6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdEludDMyXG4gIH0pO1xufSwgXCJkZV9TY2FuT3V0cHV0XCIpO1xudmFyIGRlX1NlY29uZGFyeUluZGV4ZXNDYXBhY2l0eU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBhY2Nba2V5XSA9IGRlX0NhcGFjaXR5KHZhbHVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59LCBcImRlX1NlY29uZGFyeUluZGV4ZXNDYXBhY2l0eU1hcFwiKTtcbnZhciBkZV9Tb3VyY2VUYWJsZURldGFpbHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBCaWxsaW5nTW9kZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIEl0ZW1Db3VudDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TG9uZyxcbiAgICBLZXlTY2hlbWE6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIE9uRGVtYW5kVGhyb3VnaHB1dDogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgUHJvdmlzaW9uZWRUaHJvdWdocHV0OiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBUYWJsZUFybjogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlQ3JlYXRpb25EYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIlRhYmxlQ3JlYXRpb25EYXRlVGltZVwiKSxcbiAgICBUYWJsZUlkOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgVGFibGVOYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgVGFibGVTaXplQnl0ZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdExvbmdcbiAgfSk7XG59LCBcImRlX1NvdXJjZVRhYmxlRGV0YWlsc1wiKTtcbnZhciBkZV9Tb3VyY2VUYWJsZUZlYXR1cmVEZXRhaWxzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgR2xvYmFsU2Vjb25kYXJ5SW5kZXhlczogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgTG9jYWxTZWNvbmRhcnlJbmRleGVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5fanNvbixcbiAgICBTU0VEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfU1NFRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiU1NFRGVzY3JpcHRpb25cIiksXG4gICAgU3RyZWFtRGVzY3JpcHRpb246IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIFRpbWVUb0xpdmVEZXNjcmlwdGlvbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb25cbiAgfSk7XG59LCBcImRlX1NvdXJjZVRhYmxlRmVhdHVyZURldGFpbHNcIik7XG52YXIgZGVfU1NFRGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBJbmFjY2Vzc2libGVFbmNyeXB0aW9uRGF0ZVRpbWU6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROb25OdWxsKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQucGFyc2VFcG9jaFRpbWVzdGFtcCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE51bWJlcikoXykpKSwgXCJJbmFjY2Vzc2libGVFbmNyeXB0aW9uRGF0ZVRpbWVcIiksXG4gICAgS01TTWFzdGVyS2V5QXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgU1NFVHlwZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFN0YXR1czogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9TU0VEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9UYWJsZUF1dG9TY2FsaW5nRGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBSZXBsaWNhczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfUmVwbGljYUF1dG9TY2FsaW5nRGVzY3JpcHRpb25MaXN0KF8sIGNvbnRleHQpLCBcIlJlcGxpY2FzXCIpLFxuICAgIFRhYmxlTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlU3RhdHVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX1RhYmxlQXV0b1NjYWxpbmdEZXNjcmlwdGlvblwiKTtcbnZhciBkZV9UYWJsZUNsYXNzU3VtbWFyeSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIExhc3RVcGRhdGVEYXRlVGltZTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdE5vbk51bGwpKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5wYXJzZUVwb2NoVGltZXN0YW1wKSgoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0TnVtYmVyKShfKSkpLCBcIkxhc3RVcGRhdGVEYXRlVGltZVwiKSxcbiAgICBUYWJsZUNsYXNzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmdcbiAgfSk7XG59LCBcImRlX1RhYmxlQ2xhc3NTdW1tYXJ5XCIpO1xudmFyIGRlX1RhYmxlRGVzY3JpcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBBcmNoaXZhbFN1bW1hcnk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0FyY2hpdmFsU3VtbWFyeShfLCBjb250ZXh0KSwgXCJBcmNoaXZhbFN1bW1hcnlcIiksXG4gICAgQXR0cmlidXRlRGVmaW5pdGlvbnM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIEJpbGxpbmdNb2RlU3VtbWFyeTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfQmlsbGluZ01vZGVTdW1tYXJ5KF8sIGNvbnRleHQpLCBcIkJpbGxpbmdNb2RlU3VtbWFyeVwiKSxcbiAgICBDcmVhdGlvbkRhdGVUaW1lOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0Tm9uTnVsbCkoKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnBhcnNlRXBvY2hUaW1lc3RhbXApKCgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3ROdW1iZXIpKF8pKSksIFwiQ3JlYXRpb25EYXRlVGltZVwiKSxcbiAgICBEZWxldGlvblByb3RlY3Rpb25FbmFibGVkOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RCb29sZWFuLFxuICAgIEdsb2JhbFNlY29uZGFyeUluZGV4ZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0dsb2JhbFNlY29uZGFyeUluZGV4RGVzY3JpcHRpb25MaXN0KF8sIGNvbnRleHQpLCBcIkdsb2JhbFNlY29uZGFyeUluZGV4ZXNcIiksXG4gICAgR2xvYmFsVGFibGVWZXJzaW9uOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgSXRlbUNvdW50OiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RMb25nLFxuICAgIEtleVNjaGVtYTogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgTGF0ZXN0U3RyZWFtQXJuOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgTGF0ZXN0U3RyZWFtTGFiZWw6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBMb2NhbFNlY29uZGFyeUluZGV4ZXM6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIE11bHRpUmVnaW9uQ29uc2lzdGVuY3k6IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBPbkRlbWFuZFRocm91Z2hwdXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uLFxuICAgIFByb3Zpc2lvbmVkVGhyb3VnaHB1dDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfUHJvdmlzaW9uZWRUaHJvdWdocHV0RGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiUHJvdmlzaW9uZWRUaHJvdWdocHV0XCIpLFxuICAgIFJlcGxpY2FzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9SZXBsaWNhRGVzY3JpcHRpb25MaXN0KF8sIGNvbnRleHQpLCBcIlJlcGxpY2FzXCIpLFxuICAgIFJlc3RvcmVTdW1tYXJ5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9SZXN0b3JlU3VtbWFyeShfLCBjb250ZXh0KSwgXCJSZXN0b3JlU3VtbWFyeVwiKSxcbiAgICBTU0VEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfU1NFRGVzY3JpcHRpb24oXywgY29udGV4dCksIFwiU1NFRGVzY3JpcHRpb25cIiksXG4gICAgU3RyZWFtU3BlY2lmaWNhdGlvbjogaW1wb3J0X3NtaXRoeV9jbGllbnQuX2pzb24sXG4gICAgVGFibGVBcm46IGltcG9ydF9zbWl0aHlfY2xpZW50LmV4cGVjdFN0cmluZyxcbiAgICBUYWJsZUNsYXNzU3VtbWFyeTogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfVGFibGVDbGFzc1N1bW1hcnkoXywgY29udGV4dCksIFwiVGFibGVDbGFzc1N1bW1hcnlcIiksXG4gICAgVGFibGVJZDogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlTmFtZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nLFxuICAgIFRhYmxlU2l6ZUJ5dGVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RMb25nLFxuICAgIFRhYmxlU3RhdHVzOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgV2FybVRocm91Z2hwdXQ6IGltcG9ydF9zbWl0aHlfY2xpZW50Ll9qc29uXG4gIH0pO1xufSwgXCJkZV9UYWJsZURlc2NyaXB0aW9uXCIpO1xudmFyIGRlX1RyYW5zYWN0R2V0SXRlbXNPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDb25zdW1lZENhcGFjaXR5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db25zdW1lZENhcGFjaXR5TXVsdGlwbGUoXywgY29udGV4dCksIFwiQ29uc3VtZWRDYXBhY2l0eVwiKSxcbiAgICBSZXNwb25zZXM6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0l0ZW1SZXNwb25zZUxpc3QoXywgY29udGV4dCksIFwiUmVzcG9uc2VzXCIpXG4gIH0pO1xufSwgXCJkZV9UcmFuc2FjdEdldEl0ZW1zT3V0cHV0XCIpO1xudmFyIGRlX1RyYW5zYWN0aW9uQ2FuY2VsZWRFeGNlcHRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDYW5jZWxsYXRpb25SZWFzb25zOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9DYW5jZWxsYXRpb25SZWFzb25MaXN0KF8sIGNvbnRleHQpLCBcIkNhbmNlbGxhdGlvblJlYXNvbnNcIiksXG4gICAgTWVzc2FnZTogaW1wb3J0X3NtaXRoeV9jbGllbnQuZXhwZWN0U3RyaW5nXG4gIH0pO1xufSwgXCJkZV9UcmFuc2FjdGlvbkNhbmNlbGVkRXhjZXB0aW9uXCIpO1xudmFyIGRlX1RyYW5zYWN0V3JpdGVJdGVtc091dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIENvbnN1bWVkQ2FwYWNpdHk6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX0NvbnN1bWVkQ2FwYWNpdHlNdWx0aXBsZShfLCBjb250ZXh0KSwgXCJDb25zdW1lZENhcGFjaXR5XCIpLFxuICAgIEl0ZW1Db2xsZWN0aW9uTWV0cmljczogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfSXRlbUNvbGxlY3Rpb25NZXRyaWNzUGVyVGFibGUoXywgY29udGV4dCksIFwiSXRlbUNvbGxlY3Rpb25NZXRyaWNzXCIpXG4gIH0pO1xufSwgXCJkZV9UcmFuc2FjdFdyaXRlSXRlbXNPdXRwdXRcIik7XG52YXIgZGVfVXBkYXRlQ29udGludW91c0JhY2t1cHNPdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBDb250aW51b3VzQmFja3Vwc0Rlc2NyaXB0aW9uOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db250aW51b3VzQmFja3Vwc0Rlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIkNvbnRpbnVvdXNCYWNrdXBzRGVzY3JpcHRpb25cIilcbiAgfSk7XG59LCBcImRlX1VwZGF0ZUNvbnRpbnVvdXNCYWNrdXBzT3V0cHV0XCIpO1xudmFyIGRlX1VwZGF0ZUdsb2JhbFRhYmxlT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgR2xvYmFsVGFibGVEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfR2xvYmFsVGFibGVEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJHbG9iYWxUYWJsZURlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9VcGRhdGVHbG9iYWxUYWJsZU91dHB1dFwiKTtcbnZhciBkZV9VcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgR2xvYmFsVGFibGVOYW1lOiBpbXBvcnRfc21pdGh5X2NsaWVudC5leHBlY3RTdHJpbmcsXG4gICAgUmVwbGljYVNldHRpbmdzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9SZXBsaWNhU2V0dGluZ3NEZXNjcmlwdGlvbkxpc3QoXywgY29udGV4dCksIFwiUmVwbGljYVNldHRpbmdzXCIpXG4gIH0pO1xufSwgXCJkZV9VcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzT3V0cHV0XCIpO1xudmFyIGRlX1VwZGF0ZUl0ZW1PdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC50YWtlKShvdXRwdXQsIHtcbiAgICBBdHRyaWJ1dGVzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9BdHRyaWJ1dGVNYXAoXywgY29udGV4dCksIFwiQXR0cmlidXRlc1wiKSxcbiAgICBDb25zdW1lZENhcGFjaXR5OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9Db25zdW1lZENhcGFjaXR5KF8sIGNvbnRleHQpLCBcIkNvbnN1bWVkQ2FwYWNpdHlcIiksXG4gICAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChfKSA9PiBkZV9JdGVtQ29sbGVjdGlvbk1ldHJpY3MoXywgY29udGV4dCksIFwiSXRlbUNvbGxlY3Rpb25NZXRyaWNzXCIpXG4gIH0pO1xufSwgXCJkZV9VcGRhdGVJdGVtT3V0cHV0XCIpO1xudmFyIGRlX1VwZGF0ZVRhYmxlT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgVGFibGVEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfVGFibGVEZXNjcmlwdGlvbihfLCBjb250ZXh0KSwgXCJUYWJsZURlc2NyaXB0aW9uXCIpXG4gIH0pO1xufSwgXCJkZV9VcGRhdGVUYWJsZU91dHB1dFwiKTtcbnZhciBkZV9VcGRhdGVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ091dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnRha2UpKG91dHB1dCwge1xuICAgIFRhYmxlQXV0b1NjYWxpbmdEZXNjcmlwdGlvbjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfVGFibGVBdXRvU2NhbGluZ0Rlc2NyaXB0aW9uKF8sIGNvbnRleHQpLCBcIlRhYmxlQXV0b1NjYWxpbmdEZXNjcmlwdGlvblwiKVxuICB9KTtcbn0sIFwiZGVfVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdPdXRwdXRcIik7XG52YXIgZGVfV3JpdGVSZXF1ZXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NtaXRoeV9jbGllbnQudGFrZSkob3V0cHV0LCB7XG4gICAgRGVsZXRlUmVxdWVzdDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoXykgPT4gZGVfRGVsZXRlUmVxdWVzdChfLCBjb250ZXh0KSwgXCJEZWxldGVSZXF1ZXN0XCIpLFxuICAgIFB1dFJlcXVlc3Q6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF8pID0+IGRlX1B1dFJlcXVlc3QoXywgY29udGV4dCksIFwiUHV0UmVxdWVzdFwiKVxuICB9KTtcbn0sIFwiZGVfV3JpdGVSZXF1ZXN0XCIpO1xudmFyIGRlX1dyaXRlUmVxdWVzdHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSkuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpLm1hcCgoZW50cnkpID0+IHtcbiAgICByZXR1cm4gZGVfV3JpdGVSZXF1ZXN0KGVudHJ5LCBjb250ZXh0KTtcbiAgfSk7XG4gIHJldHVybiByZXRWYWw7XG59LCBcImRlX1dyaXRlUmVxdWVzdHNcIik7XG52YXIgZGVzZXJpYWxpemVNZXRhZGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG91dHB1dCkgPT4gKHtcbiAgaHR0cFN0YXR1c0NvZGU6IG91dHB1dC5zdGF0dXNDb2RlLFxuICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgZXh0ZW5kZWRSZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotaWQtMlwiXSxcbiAgY2ZJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1jZi1pZFwiXVxufSksIFwiZGVzZXJpYWxpemVNZXRhZGF0YVwiKTtcbnZhciB0aHJvd0RlZmF1bHRFcnJvciA9ICgwLCBpbXBvcnRfc21pdGh5X2NsaWVudC53aXRoQmFzZUV4Y2VwdGlvbikoRHluYW1vREJTZXJ2aWNlRXhjZXB0aW9uKTtcbnZhciBidWlsZEh0dHBScGNSZXF1ZXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoY29udGV4dCwgaGVhZGVycywgcGF0aCwgcmVzb2x2ZWRIb3N0bmFtZSwgYm9keSkgPT4ge1xuICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCA9IFwiaHR0cHNcIiwgcG9ydCwgcGF0aDogYmFzZVBhdGggfSA9IGF3YWl0IGNvbnRleHQuZW5kcG9pbnQoKTtcbiAgY29uc3QgY29udGVudHMgPSB7XG4gICAgcHJvdG9jb2wsXG4gICAgaG9zdG5hbWUsXG4gICAgcG9ydCxcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIHBhdGg6IGJhc2VQYXRoLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VQYXRoLnNsaWNlKDAsIC0xKSArIHBhdGggOiBiYXNlUGF0aCArIHBhdGgsXG4gICAgaGVhZGVyc1xuICB9O1xuICBpZiAocmVzb2x2ZWRIb3N0bmFtZSAhPT0gdm9pZCAwKSB7XG4gICAgY29udGVudHMuaG9zdG5hbWUgPSByZXNvbHZlZEhvc3RuYW1lO1xuICB9XG4gIGlmIChib2R5ICE9PSB2b2lkIDApIHtcbiAgICBjb250ZW50cy5ib2R5ID0gYm9keTtcbiAgfVxuICByZXR1cm4gbmV3IGltcG9ydF9wcm90b2NvbF9odHRwLkh0dHBSZXF1ZXN0KGNvbnRlbnRzKTtcbn0sIFwiYnVpbGRIdHRwUnBjUmVxdWVzdFwiKTtcbmZ1bmN0aW9uIHNoYXJlZEhlYWRlcnMob3BlcmF0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LWFtei1qc29uLTEuMFwiLFxuICAgIFwieC1hbXotdGFyZ2V0XCI6IGBEeW5hbW9EQl8yMDEyMDgxMC4ke29wZXJhdGlvbn1gXG4gIH07XG59XG5fX25hbWUoc2hhcmVkSGVhZGVycywgXCJzaGFyZWRIZWFkZXJzXCIpO1xuXG4vLyBzcmMvY29tbWFuZHMvRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kLnRzXG52YXIgRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKGNvbW1vblBhcmFtcykubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVzY3JpYmVFbmRwb2ludHNcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlRW5kcG9pbnRzQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kKS5kZShkZV9EZXNjcmliZUVuZHBvaW50c0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlRW5kcG9pbnRzQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL0R5bmFtb0RCQ2xpZW50LnRzXG52YXIgaW1wb3J0X3J1bnRpbWVDb25maWcgPSByZXF1aXJlKFwiLi8uL3J1bnRpbWVDb25maWdcIik7XG5cbi8vIHNyYy9ydW50aW1lRXh0ZW5zaW9ucy50c1xudmFyIGltcG9ydF9yZWdpb25fY29uZmlnX3Jlc29sdmVyID0gcmVxdWlyZShcIkBhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXJcIik7XG5cblxuXG4vLyBzcmMvYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24udHNcbnZhciBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChydW50aW1lQ29uZmlnKSA9PiB7XG4gIGNvbnN0IF9odHRwQXV0aFNjaGVtZXMgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lcztcbiAgbGV0IF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICBsZXQgX2NyZWRlbnRpYWxzID0gcnVudGltZUNvbmZpZy5jcmVkZW50aWFscztcbiAgcmV0dXJuIHtcbiAgICBzZXRIdHRwQXV0aFNjaGVtZShodHRwQXV0aFNjaGVtZSkge1xuICAgICAgY29uc3QgaW5kZXggPSBfaHR0cEF1dGhTY2hlbWVzLmZpbmRJbmRleCgoc2NoZW1lKSA9PiBzY2hlbWUuc2NoZW1lSWQgPT09IGh0dHBBdXRoU2NoZW1lLnNjaGVtZUlkKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5wdXNoKGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9odHRwQXV0aFNjaGVtZXMuc3BsaWNlKGluZGV4LCAxLCBodHRwQXV0aFNjaGVtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBodHRwQXV0aFNjaGVtZXMoKSB7XG4gICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lcztcbiAgICB9LFxuICAgIHNldEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoaHR0cEF1dGhTY2hlbWVQcm92aWRlcikge1xuICAgICAgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBodHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgIH0sXG4gICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpIHtcbiAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICB9LFxuICAgIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICBfY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICB9LFxuICAgIGNyZWRlbnRpYWxzKCkge1xuICAgICAgcmV0dXJuIF9jcmVkZW50aWFscztcbiAgICB9XG4gIH07XG59LCBcImdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiKTtcbnZhciByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29uZmlnKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWcuaHR0cEF1dGhTY2hlbWVzKCksXG4gICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSxcbiAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzKClcbiAgfTtcbn0sIFwicmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZ1wiKTtcblxuLy8gc3JjL3J1bnRpbWVFeHRlbnNpb25zLnRzXG52YXIgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocnVudGltZUNvbmZpZywgZXh0ZW5zaW9ucykgPT4ge1xuICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihcbiAgICAoMCwgaW1wb3J0X3JlZ2lvbl9jb25maWdfcmVzb2x2ZXIuZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikocnVudGltZUNvbmZpZyksXG4gICAgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LmdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uKShydW50aW1lQ29uZmlnKSxcbiAgICAoMCwgaW1wb3J0X3Byb3RvY29sX2h0dHAuZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uKShydW50aW1lQ29uZmlnKSxcbiAgICBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZylcbiAgKTtcbiAgZXh0ZW5zaW9ucy5mb3JFYWNoKChleHRlbnNpb24pID0+IGV4dGVuc2lvbi5jb25maWd1cmUoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbikpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICBydW50aW1lQ29uZmlnLFxuICAgICgwLCBpbXBvcnRfcmVnaW9uX2NvbmZpZ19yZXNvbHZlci5yZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgKDAsIGltcG9ydF9zbWl0aHlfY2xpZW50LnJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZykoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksXG4gICAgKDAsIGltcG9ydF9wcm90b2NvbF9odHRwLnJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcpKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLFxuICAgIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbilcbiAgKTtcbn0sIFwicmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zXCIpO1xuXG4vLyBzcmMvRHluYW1vREJDbGllbnQudHNcbnZhciBEeW5hbW9EQkNsaWVudCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ2xpZW50IHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEeW5hbW9EQkNsaWVudFwiKTtcbiAgfVxuICAvKipcbiAgICogVGhlIHJlc29sdmVkIGNvbmZpZ3VyYXRpb24gb2YgRHluYW1vREJDbGllbnQgY2xhc3MuIFRoaXMgaXMgcmVzb2x2ZWQgYW5kIG5vcm1hbGl6ZWQgZnJvbSB0aGUge0BsaW5rIER5bmFtb0RCQ2xpZW50Q29uZmlnIHwgY29uc3RydWN0b3IgY29uZmlndXJhdGlvbiBpbnRlcmZhY2V9LlxuICAgKi9cbiAgY29uZmlnO1xuICBjb25zdHJ1Y3RvciguLi5bY29uZmlndXJhdGlvbl0pIHtcbiAgICBjb25zdCBfY29uZmlnXzAgPSAoMCwgaW1wb3J0X3J1bnRpbWVDb25maWcuZ2V0UnVudGltZUNvbmZpZykoY29uZmlndXJhdGlvbiB8fCB7fSk7XG4gICAgc3VwZXIoX2NvbmZpZ18wKTtcbiAgICB0aGlzLmluaXRDb25maWcgPSBfY29uZmlnXzA7XG4gICAgY29uc3QgX2NvbmZpZ18xID0gcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyhfY29uZmlnXzApO1xuICAgIGNvbnN0IF9jb25maWdfMiA9ICgwLCBpbXBvcnRfYWNjb3VudF9pZF9lbmRwb2ludC5yZXNvbHZlQWNjb3VudElkRW5kcG9pbnRNb2RlQ29uZmlnKShfY29uZmlnXzEpO1xuICAgIGNvbnN0IF9jb25maWdfMyA9ICgwLCBpbXBvcnRfbWlkZGxld2FyZV91c2VyX2FnZW50LnJlc29sdmVVc2VyQWdlbnRDb25maWcpKF9jb25maWdfMik7XG4gICAgY29uc3QgX2NvbmZpZ180ID0gKDAsIGltcG9ydF9taWRkbGV3YXJlX3JldHJ5LnJlc29sdmVSZXRyeUNvbmZpZykoX2NvbmZpZ18zKTtcbiAgICBjb25zdCBfY29uZmlnXzUgPSAoMCwgaW1wb3J0X2NvbmZpZ19yZXNvbHZlci5yZXNvbHZlUmVnaW9uQ29uZmlnKShfY29uZmlnXzQpO1xuICAgIGNvbnN0IF9jb25maWdfNiA9ICgwLCBpbXBvcnRfbWlkZGxld2FyZV9ob3N0X2hlYWRlci5yZXNvbHZlSG9zdEhlYWRlckNvbmZpZykoX2NvbmZpZ181KTtcbiAgICBjb25zdCBfY29uZmlnXzcgPSAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQucmVzb2x2ZUVuZHBvaW50Q29uZmlnKShfY29uZmlnXzYpO1xuICAgIGNvbnN0IF9jb25maWdfOCA9ICgwLCBpbXBvcnRfaHR0cEF1dGhTY2hlbWVQcm92aWRlci5yZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcpKF9jb25maWdfNyk7XG4gICAgY29uc3QgX2NvbmZpZ185ID0gKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50X2Rpc2NvdmVyeS5yZXNvbHZlRW5kcG9pbnREaXNjb3ZlcnlDb25maWcpKF9jb25maWdfOCwge1xuICAgICAgZW5kcG9pbnREaXNjb3ZlcnlDb21tYW5kQ3RvcjogRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kXG4gICAgfSk7XG4gICAgY29uc3QgX2NvbmZpZ18xMCA9IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyhfY29uZmlnXzksIGNvbmZpZ3VyYXRpb24/LmV4dGVuc2lvbnMgfHwgW10pO1xuICAgIHRoaXMuY29uZmlnID0gX2NvbmZpZ18xMDtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoKDAsIGltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQuZ2V0VXNlckFnZW50UGx1Z2luKSh0aGlzLmNvbmZpZykpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZSgoMCwgaW1wb3J0X21pZGRsZXdhcmVfcmV0cnkuZ2V0UmV0cnlQbHVnaW4pKHRoaXMuY29uZmlnKSk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKCgwLCBpbXBvcnRfbWlkZGxld2FyZV9jb250ZW50X2xlbmd0aC5nZXRDb250ZW50TGVuZ3RoUGx1Z2luKSh0aGlzLmNvbmZpZykpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZSgoMCwgaW1wb3J0X21pZGRsZXdhcmVfaG9zdF9oZWFkZXIuZ2V0SG9zdEhlYWRlclBsdWdpbikodGhpcy5jb25maWcpKTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoKDAsIGltcG9ydF9taWRkbGV3YXJlX2xvZ2dlci5nZXRMb2dnZXJQbHVnaW4pKHRoaXMuY29uZmlnKSk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKCgwLCBpbXBvcnRfbWlkZGxld2FyZV9yZWN1cnNpb25fZGV0ZWN0aW9uLmdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbikodGhpcy5jb25maWcpKTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoXG4gICAgICAoMCwgaW1wb3J0X2NvcmUyLmdldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luKSh0aGlzLmNvbmZpZywge1xuICAgICAgICBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcjogaW1wb3J0X2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuZGVmYXVsdER5bmFtb0RCSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsXG4gICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcjogLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoY29uZmlnKSA9PiBuZXcgaW1wb3J0X2NvcmUyLkRlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnKHtcbiAgICAgICAgICBcImF3cy5hdXRoI3NpZ3Y0XCI6IGNvbmZpZy5jcmVkZW50aWFsc1xuICAgICAgICB9KSwgXCJpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXJcIilcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoKDAsIGltcG9ydF9jb3JlMi5nZXRIdHRwU2lnbmluZ1BsdWdpbikodGhpcy5jb25maWcpKTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveSB1bmRlcmx5aW5nIHJlc291cmNlcywgbGlrZSBzb2NrZXRzLiBJdCdzIHVzdWFsbHkgbm90IG5lY2Vzc2FyeSB0byBkbyB0aGlzLlxuICAgKiBIb3dldmVyIGluIE5vZGUuanMsIGl0J3MgYmVzdCB0byBleHBsaWNpdGx5IHNodXQgZG93biB0aGUgY2xpZW50J3MgYWdlbnQgd2hlbiBpdCBpcyBubyBsb25nZXIgbmVlZGVkLlxuICAgKiBPdGhlcndpc2UsIHNvY2tldHMgbWlnaHQgc3RheSBvcGVuIGZvciBxdWl0ZSBhIGxvbmcgdGltZSBiZWZvcmUgdGhlIHNlcnZlciB0ZXJtaW5hdGVzIHRoZW0uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxufTtcblxuLy8gc3JjL0R5bmFtb0RCLnRzXG5cblxuLy8gc3JjL2NvbW1hbmRzL0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQudHNcblxuXG5cbnZhciBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKGNvbW1vblBhcmFtcykubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiQmF0Y2hFeGVjdXRlU3RhdGVtZW50XCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kKS5kZShkZV9CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvQmF0Y2hHZXRJdGVtQ29tbWFuZC50c1xuXG5cblxudmFyIEJhdGNoR2V0SXRlbUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuTGlzdDogeyB0eXBlOiBcIm9wZXJhdGlvbkNvbnRleHRQYXJhbXNcIiwgZ2V0OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpbnB1dCkgPT4gT2JqZWN0LmtleXMoaW5wdXQ/LlJlcXVlc3RJdGVtcyA/PyB7fSksIFwiZ2V0XCIpIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkJhdGNoR2V0SXRlbVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiQmF0Y2hHZXRJdGVtQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfQmF0Y2hHZXRJdGVtQ29tbWFuZCkuZGUoZGVfQmF0Y2hHZXRJdGVtQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiQmF0Y2hHZXRJdGVtQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0JhdGNoV3JpdGVJdGVtQ29tbWFuZC50c1xuXG5cblxudmFyIEJhdGNoV3JpdGVJdGVtQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm5MaXN0OiB7IHR5cGU6IFwib3BlcmF0aW9uQ29udGV4dFBhcmFtc1wiLCBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlucHV0KSA9PiBPYmplY3Qua2V5cyhpbnB1dD8uUmVxdWVzdEl0ZW1zID8/IHt9KSwgXCJnZXRcIikgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiQmF0Y2hXcml0ZUl0ZW1cIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkJhdGNoV3JpdGVJdGVtQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfQmF0Y2hXcml0ZUl0ZW1Db21tYW5kKS5kZShkZV9CYXRjaFdyaXRlSXRlbUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkJhdGNoV3JpdGVJdGVtQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0NyZWF0ZUJhY2t1cENvbW1hbmQudHNcblxuXG5cbnZhciBDcmVhdGVCYWNrdXBDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJDcmVhdGVCYWNrdXBcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkNyZWF0ZUJhY2t1cENvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0NyZWF0ZUJhY2t1cENvbW1hbmQpLmRlKGRlX0NyZWF0ZUJhY2t1cENvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkNyZWF0ZUJhY2t1cENvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9DcmVhdGVHbG9iYWxUYWJsZUNvbW1hbmQudHNcblxuXG5cbnZhciBDcmVhdGVHbG9iYWxUYWJsZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIkdsb2JhbFRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkNyZWF0ZUdsb2JhbFRhYmxlXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJDcmVhdGVHbG9iYWxUYWJsZUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0NyZWF0ZUdsb2JhbFRhYmxlQ29tbWFuZCkuZGUoZGVfQ3JlYXRlR2xvYmFsVGFibGVDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJDcmVhdGVHbG9iYWxUYWJsZUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9DcmVhdGVUYWJsZUNvbW1hbmQudHNcblxuXG5cbnZhciBDcmVhdGVUYWJsZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkNyZWF0ZVRhYmxlXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJDcmVhdGVUYWJsZUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0NyZWF0ZVRhYmxlQ29tbWFuZCkuZGUoZGVfQ3JlYXRlVGFibGVDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJDcmVhdGVUYWJsZUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9EZWxldGVCYWNrdXBDb21tYW5kLnRzXG5cblxuXG52YXIgRGVsZXRlQmFja3VwQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiQmFja3VwQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVsZXRlQmFja3VwXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJEZWxldGVCYWNrdXBDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9EZWxldGVCYWNrdXBDb21tYW5kKS5kZShkZV9EZWxldGVCYWNrdXBDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEZWxldGVCYWNrdXBDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvRGVsZXRlSXRlbUNvbW1hbmQudHNcblxuXG5cbnZhciBEZWxldGVJdGVtQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVsZXRlSXRlbVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiRGVsZXRlSXRlbUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0RlbGV0ZUl0ZW1Db21tYW5kKS5kZShkZV9EZWxldGVJdGVtQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRGVsZXRlSXRlbUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQudHNcblxuXG5cbnZhciBEZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlJlc291cmNlQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVsZXRlUmVzb3VyY2VQb2xpY3lcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlbGV0ZVJlc291cmNlUG9saWN5Q29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVsZXRlUmVzb3VyY2VQb2xpY3lDb21tYW5kKS5kZShkZV9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlbGV0ZVJlc291cmNlUG9saWN5Q29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0RlbGV0ZVRhYmxlQ29tbWFuZC50c1xuXG5cblxudmFyIERlbGV0ZVRhYmxlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVsZXRlVGFibGVcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlbGV0ZVRhYmxlQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVsZXRlVGFibGVDb21tYW5kKS5kZShkZV9EZWxldGVUYWJsZUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlbGV0ZVRhYmxlQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlQmFja3VwQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlQmFja3VwQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiQmFja3VwQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVzY3JpYmVCYWNrdXBcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlQmFja3VwQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVCYWNrdXBDb21tYW5kKS5kZShkZV9EZXNjcmliZUJhY2t1cENvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlQmFja3VwQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlQ29udGludW91c0JhY2t1cHNDb21tYW5kLnRzXG5cblxuXG52YXIgRGVzY3JpYmVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlQ29udGludW91c0JhY2t1cHNcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlQ29udGludW91c0JhY2t1cHNDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9EZXNjcmliZUNvbnRpbnVvdXNCYWNrdXBzQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlQ29udGludW91c0JhY2t1cHNDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlQ29udHJpYnV0b3JJbnNpZ2h0c1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlRXhwb3J0Q29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlRXhwb3J0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiRXhwb3J0QXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVzY3JpYmVFeHBvcnRcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlRXhwb3J0Q29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVFeHBvcnRDb21tYW5kKS5kZShkZV9EZXNjcmliZUV4cG9ydENvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlRXhwb3J0Q29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlR2xvYmFsVGFibGVDb21tYW5kLnRzXG5cblxuXG52YXIgRGVzY3JpYmVHbG9iYWxUYWJsZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIkdsb2JhbFRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlR2xvYmFsVGFibGVcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlR2xvYmFsVGFibGVDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9EZXNjcmliZUdsb2JhbFRhYmxlQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVHbG9iYWxUYWJsZUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlR2xvYmFsVGFibGVDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIkdsb2JhbFRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlR2xvYmFsVGFibGVTZXR0aW5nc1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlSW1wb3J0Q29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlSW1wb3J0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiSW1wb3J0QXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVzY3JpYmVJbXBvcnRcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlSW1wb3J0Q29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVJbXBvcnRDb21tYW5kKS5kZShkZV9EZXNjcmliZUltcG9ydENvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlSW1wb3J0Q29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRGVzY3JpYmVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25cIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kKS5kZShkZV9EZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlTGltaXRzQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlTGltaXRzQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcChjb21tb25QYXJhbXMpLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlTGltaXRzXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJEZXNjcmliZUxpbWl0c0NvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0Rlc2NyaWJlTGltaXRzQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVMaW1pdHNDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEZXNjcmliZUxpbWl0c0NvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9EZXNjcmliZVRhYmxlQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlVGFibGVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJEZXNjcmliZVRhYmxlXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJEZXNjcmliZVRhYmxlQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVUYWJsZUNvbW1hbmQpLmRlKGRlX0Rlc2NyaWJlVGFibGVDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEZXNjcmliZVRhYmxlQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kLnRzXG5cblxuXG52YXIgRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9EZXNjcmliZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZC50c1xuXG5cblxudmFyIERlc2NyaWJlVGltZVRvTGl2ZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRlc2NyaWJlVGltZVRvTGl2ZVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZCkuZGUoZGVfRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRGVzY3JpYmVUaW1lVG9MaXZlQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0Rpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLnRzXG5cblxuXG52YXIgRGlzYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkRpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25cIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkRpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9EaXNhYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCkuZGUoZGVfRGlzYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZC50c1xuXG5cblxudmFyIEVuYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkVuYWJsZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvblwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCkuZGUoZGVfRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0V4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLnRzXG5cblxuXG52YXIgRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoY29tbW9uUGFyYW1zKS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJFeGVjdXRlU3RhdGVtZW50XCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJFeGVjdXRlU3RhdGVtZW50Q29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQpLmRlKGRlX0V4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJFeGVjdXRlU3RhdGVtZW50Q29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0V4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmQudHNcblxuXG5cbnZhciBFeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKGNvbW1vblBhcmFtcykubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRXhlY3V0ZVRyYW5zYWN0aW9uXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJFeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9FeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kKS5kZShkZV9FeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJFeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvRXhwb3J0VGFibGVUb1BvaW50SW5UaW1lQ29tbWFuZC50c1xuXG5cblxudmFyIEV4cG9ydFRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiRXhwb3J0VGFibGVUb1BvaW50SW5UaW1lXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJFeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kKS5kZShkZV9FeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJFeHBvcnRUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvR2V0SXRlbUNvbW1hbmQudHNcblxuXG5cbnZhciBHZXRJdGVtQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiR2V0SXRlbVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiR2V0SXRlbUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0dldEl0ZW1Db21tYW5kKS5kZShkZV9HZXRJdGVtQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiR2V0SXRlbUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9HZXRSZXNvdXJjZVBvbGljeUNvbW1hbmQudHNcblxuXG5cbnZhciBHZXRSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlJlc291cmNlQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiR2V0UmVzb3VyY2VQb2xpY3lcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkdldFJlc291cmNlUG9saWN5Q29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfR2V0UmVzb3VyY2VQb2xpY3lDb21tYW5kKS5kZShkZV9HZXRSZXNvdXJjZVBvbGljeUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkdldFJlc291cmNlUG9saWN5Q29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0ltcG9ydFRhYmxlQ29tbWFuZC50c1xuXG5cblxudmFyIEltcG9ydFRhYmxlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJvcGVyYXRpb25Db250ZXh0UGFyYW1zXCIsIGdldDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IGlucHV0Py5UYWJsZUNyZWF0aW9uUGFyYW1ldGVycz8uVGFibGVOYW1lLCBcImdldFwiKSB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJJbXBvcnRUYWJsZVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiSW1wb3J0VGFibGVDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9JbXBvcnRUYWJsZUNvbW1hbmQpLmRlKGRlX0ltcG9ydFRhYmxlQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiSW1wb3J0VGFibGVDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvTGlzdEJhY2t1cHNDb21tYW5kLnRzXG5cblxuXG52YXIgTGlzdEJhY2t1cHNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJMaXN0QmFja3Vwc1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiTGlzdEJhY2t1cHNDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9MaXN0QmFja3Vwc0NvbW1hbmQpLmRlKGRlX0xpc3RCYWNrdXBzQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiTGlzdEJhY2t1cHNDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kLnRzXG5cblxuXG52YXIgTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJMaXN0Q29udHJpYnV0b3JJbnNpZ2h0c1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9MaXN0Q29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQpLmRlKGRlX0xpc3RDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvTGlzdEV4cG9ydHNDb21tYW5kLnRzXG5cblxuXG52YXIgTGlzdEV4cG9ydHNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZUFyblwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkxpc3RFeHBvcnRzXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJMaXN0RXhwb3J0c0NvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0xpc3RFeHBvcnRzQ29tbWFuZCkuZGUoZGVfTGlzdEV4cG9ydHNDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJMaXN0RXhwb3J0c0NvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9MaXN0R2xvYmFsVGFibGVzQ29tbWFuZC50c1xuXG5cblxudmFyIExpc3RHbG9iYWxUYWJsZXNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKGNvbW1vblBhcmFtcykubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiTGlzdEdsb2JhbFRhYmxlc1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX0xpc3RHbG9iYWxUYWJsZXNDb21tYW5kKS5kZShkZV9MaXN0R2xvYmFsVGFibGVzQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9MaXN0SW1wb3J0c0NvbW1hbmQudHNcblxuXG5cbnZhciBMaXN0SW1wb3J0c0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiTGlzdEltcG9ydHNcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIkxpc3RJbXBvcnRzQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfTGlzdEltcG9ydHNDb21tYW5kKS5kZShkZV9MaXN0SW1wb3J0c0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkxpc3RJbXBvcnRzQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0xpc3RUYWJsZXNDb21tYW5kLnRzXG5cblxuXG52YXIgTGlzdFRhYmxlc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoY29tbW9uUGFyYW1zKS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJMaXN0VGFibGVzXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJMaXN0VGFibGVzQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfTGlzdFRhYmxlc0NvbW1hbmQpLmRlKGRlX0xpc3RUYWJsZXNDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJMaXN0VGFibGVzQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0xpc3RUYWdzT2ZSZXNvdXJjZUNvbW1hbmQudHNcblxuXG5cbnZhciBMaXN0VGFnc09mUmVzb3VyY2VDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJSZXNvdXJjZUFyblwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIkxpc3RUYWdzT2ZSZXNvdXJjZVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiTGlzdFRhZ3NPZlJlc291cmNlQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfTGlzdFRhZ3NPZlJlc291cmNlQ29tbWFuZCkuZGUoZGVfTGlzdFRhZ3NPZlJlc291cmNlQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiTGlzdFRhZ3NPZlJlc291cmNlQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1B1dEl0ZW1Db21tYW5kLnRzXG5cblxuXG52YXIgUHV0SXRlbUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlB1dEl0ZW1cIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIlB1dEl0ZW1Db21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9QdXRJdGVtQ29tbWFuZCkuZGUoZGVfUHV0SXRlbUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlB1dEl0ZW1Db21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kLnRzXG5cblxuXG52YXIgUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJSZXNvdXJjZUFyblwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlB1dFJlc291cmNlUG9saWN5XCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJQdXRSZXNvdXJjZVBvbGljeUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1B1dFJlc291cmNlUG9saWN5Q29tbWFuZCkuZGUoZGVfUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJQdXRSZXNvdXJjZVBvbGljeUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9RdWVyeUNvbW1hbmQudHNcblxuXG5cbnZhciBRdWVyeUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlF1ZXJ5XCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJRdWVyeUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1F1ZXJ5Q29tbWFuZCkuZGUoZGVfUXVlcnlDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJRdWVyeUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9SZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZC50c1xuXG5cblxudmFyIFJlc3RvcmVUYWJsZUZyb21CYWNrdXBDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYXJnZXRUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJSZXN0b3JlVGFibGVGcm9tQmFja3VwXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJSZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfUmVzdG9yZVRhYmxlRnJvbUJhY2t1cENvbW1hbmQpLmRlKGRlX1Jlc3RvcmVUYWJsZUZyb21CYWNrdXBDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJSZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1Jlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kLnRzXG5cblxuXG52YXIgUmVzdG9yZVRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhcmdldFRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlJlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIlJlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9SZXN0b3JlVGFibGVUb1BvaW50SW5UaW1lQ29tbWFuZCkuZGUoZGVfUmVzdG9yZVRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlJlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvU2NhbkNvbW1hbmQudHNcblxuXG5cbnZhciBTY2FuQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiU2NhblwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiU2NhbkNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1NjYW5Db21tYW5kKS5kZShkZV9TY2FuQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiU2NhbkNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9UYWdSZXNvdXJjZUNvbW1hbmQudHNcblxuXG5cbnZhciBUYWdSZXNvdXJjZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlJlc291cmNlQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiVGFnUmVzb3VyY2VcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIlRhZ1Jlc291cmNlQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfVGFnUmVzb3VyY2VDb21tYW5kKS5kZShkZV9UYWdSZXNvdXJjZUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRhZ1Jlc291cmNlQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1RyYW5zYWN0R2V0SXRlbXNDb21tYW5kLnRzXG5cblxuXG52YXIgVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuTGlzdDoge1xuICAgIHR5cGU6IFwib3BlcmF0aW9uQ29udGV4dFBhcmFtc1wiLFxuICAgIGdldDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IGlucHV0Py5UcmFuc2FjdEl0ZW1zPy5tYXAoKG9iaikgPT4gb2JqPy5HZXQ/LlRhYmxlTmFtZSksIFwiZ2V0XCIpXG4gIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlRyYW5zYWN0R2V0SXRlbXNcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIlRyYW5zYWN0R2V0SXRlbXNDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9UcmFuc2FjdEdldEl0ZW1zQ29tbWFuZCkuZGUoZGVfVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRyYW5zYWN0R2V0SXRlbXNDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZC50c1xuXG5cblxudmFyIFRyYW5zYWN0V3JpdGVJdGVtc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuTGlzdDoge1xuICAgIHR5cGU6IFwib3BlcmF0aW9uQ29udGV4dFBhcmFtc1wiLFxuICAgIGdldDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IGlucHV0Py5UcmFuc2FjdEl0ZW1zPy5tYXAoXG4gICAgICAob2JqKSA9PiBbb2JqPy5Db25kaXRpb25DaGVjaz8uVGFibGVOYW1lLCBvYmo/LlB1dD8uVGFibGVOYW1lLCBvYmo/LkRlbGV0ZT8uVGFibGVOYW1lLCBvYmo/LlVwZGF0ZT8uVGFibGVOYW1lXS5maWx0ZXIoXG4gICAgICAgIChpKSA9PiBpXG4gICAgICApXG4gICAgKS5mbGF0KCksIFwiZ2V0XCIpXG4gIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlRyYW5zYWN0V3JpdGVJdGVtc1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZCkuZGUoZGVfVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1VudGFnUmVzb3VyY2VDb21tYW5kLnRzXG5cblxuXG52YXIgVW50YWdSZXNvdXJjZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlJlc291cmNlQXJuXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiVW50YWdSZXNvdXJjZVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiVW50YWdSZXNvdXJjZUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1VudGFnUmVzb3VyY2VDb21tYW5kKS5kZShkZV9VbnRhZ1Jlc291cmNlQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVW50YWdSZXNvdXJjZUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9VcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQudHNcblxuXG5cbnZhciBVcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIlRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlVwZGF0ZUNvbnRpbnVvdXNCYWNrdXBzXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJVcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1VwZGF0ZUNvbnRpbnVvdXNCYWNrdXBzQ29tbWFuZCkuZGUoZGVfVXBkYXRlQ29udGludW91c0JhY2t1cHNDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJVcGRhdGVDb250aW51b3VzQmFja3Vwc0NvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9VcGRhdGVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZC50c1xuXG5cblxudmFyIFVwZGF0ZUNvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJVcGRhdGVDb250cmlidXRvckluc2lnaHRzXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJVcGRhdGVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfVXBkYXRlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQpLmRlKGRlX1VwZGF0ZUNvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJVcGRhdGVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1VwZGF0ZUdsb2JhbFRhYmxlQ29tbWFuZC50c1xuXG5cblxudmFyIFVwZGF0ZUdsb2JhbFRhYmxlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiR2xvYmFsVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiVXBkYXRlR2xvYmFsVGFibGVcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIlVwZGF0ZUdsb2JhbFRhYmxlQ29tbWFuZFwiKS5mKHZvaWQgMCwgdm9pZCAwKS5zZXIoc2VfVXBkYXRlR2xvYmFsVGFibGVDb21tYW5kKS5kZShkZV9VcGRhdGVHbG9iYWxUYWJsZUNvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlVwZGF0ZUdsb2JhbFRhYmxlQ29tbWFuZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1VwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NDb21tYW5kLnRzXG5cblxuXG52YXIgVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQgPSBjbGFzcyBleHRlbmRzIGltcG9ydF9zbWl0aHlfY2xpZW50LkNvbW1hbmQuY2xhc3NCdWlsZGVyKCkuZXAoe1xuICAuLi5jb21tb25QYXJhbXMsXG4gIFJlc291cmNlQXJuOiB7IHR5cGU6IFwiY29udGV4dFBhcmFtc1wiLCBuYW1lOiBcIkdsb2JhbFRhYmxlTmFtZVwiIH1cbn0pLm0oZnVuY3Rpb24oQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICByZXR1cm4gW1xuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9zZXJkZS5nZXRTZXJkZVBsdWdpbikoY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX2VuZHBvaW50LmdldEVuZHBvaW50UGx1Z2luKShjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSlcbiAgXTtcbn0pLnMoXCJEeW5hbW9EQl8yMDEyMDgxMFwiLCBcIlVwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NcIiwge30pLm4oXCJEeW5hbW9EQkNsaWVudFwiLCBcIlVwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9VcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCkuZGUoZGVfVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQpLmJ1aWxkKCkge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlVwZGF0ZUdsb2JhbFRhYmxlU2V0dGluZ3NDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvVXBkYXRlSXRlbUNvbW1hbmQudHNcblxuXG5cbnZhciBVcGRhdGVJdGVtQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiVXBkYXRlSXRlbVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiVXBkYXRlSXRlbUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1VwZGF0ZUl0ZW1Db21tYW5kKS5kZShkZV9VcGRhdGVJdGVtQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVXBkYXRlSXRlbUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9VcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLnRzXG5cblxuXG52YXIgVXBkYXRlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiVXBkYXRlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uXCIsIHt9KS5uKFwiRHluYW1vREJDbGllbnRcIiwgXCJVcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9VcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kKS5kZShkZV9VcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kKS5idWlsZCgpIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJVcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvVXBkYXRlVGFibGVDb21tYW5kLnRzXG5cblxuXG52YXIgVXBkYXRlVGFibGVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJVcGRhdGVUYWJsZVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiVXBkYXRlVGFibGVDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9VcGRhdGVUYWJsZUNvbW1hbmQpLmRlKGRlX1VwZGF0ZVRhYmxlQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVXBkYXRlVGFibGVDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kLnRzXG5cblxuXG52YXIgVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBpbXBvcnRfc21pdGh5X2NsaWVudC5Db21tYW5kLmNsYXNzQnVpbGRlcigpLmVwKHtcbiAgLi4uY29tbW9uUGFyYW1zLFxuICBSZXNvdXJjZUFybjogeyB0eXBlOiBcImNvbnRleHRQYXJhbXNcIiwgbmFtZTogXCJUYWJsZU5hbWVcIiB9XG59KS5tKGZ1bmN0aW9uKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgcmV0dXJuIFtcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUuZ2V0U2VyZGVQbHVnaW4pKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICgwLCBpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludC5nZXRFbmRwb2ludFBsdWdpbikoY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpXG4gIF07XG59KS5zKFwiRHluYW1vREJfMjAxMjA4MTBcIiwgXCJVcGRhdGVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ1wiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kXCIpLmYodm9pZCAwLCB2b2lkIDApLnNlcihzZV9VcGRhdGVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQpLmRlKGRlX1VwZGF0ZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kXCIpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvVXBkYXRlVGltZVRvTGl2ZUNvbW1hbmQudHNcblxuXG5cbnZhciBVcGRhdGVUaW1lVG9MaXZlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZC5jbGFzc0J1aWxkZXIoKS5lcCh7XG4gIC4uLmNvbW1vblBhcmFtcyxcbiAgUmVzb3VyY2VBcm46IHsgdHlwZTogXCJjb250ZXh0UGFyYW1zXCIsIG5hbWU6IFwiVGFibGVOYW1lXCIgfVxufSkubShmdW5jdGlvbihDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gIHJldHVybiBbXG4gICAgKDAsIGltcG9ydF9taWRkbGV3YXJlX3NlcmRlLmdldFNlcmRlUGx1Z2luKShjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAoMCwgaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQuZ2V0RW5kcG9pbnRQbHVnaW4pKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKVxuICBdO1xufSkucyhcIkR5bmFtb0RCXzIwMTIwODEwXCIsIFwiVXBkYXRlVGltZVRvTGl2ZVwiLCB7fSkubihcIkR5bmFtb0RCQ2xpZW50XCIsIFwiVXBkYXRlVGltZVRvTGl2ZUNvbW1hbmRcIikuZih2b2lkIDAsIHZvaWQgMCkuc2VyKHNlX1VwZGF0ZVRpbWVUb0xpdmVDb21tYW5kKS5kZShkZV9VcGRhdGVUaW1lVG9MaXZlQ29tbWFuZCkuYnVpbGQoKSB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVXBkYXRlVGltZVRvTGl2ZUNvbW1hbmRcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9EeW5hbW9EQi50c1xudmFyIGNvbW1hbmRzID0ge1xuICBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLFxuICBCYXRjaEdldEl0ZW1Db21tYW5kLFxuICBCYXRjaFdyaXRlSXRlbUNvbW1hbmQsXG4gIENyZWF0ZUJhY2t1cENvbW1hbmQsXG4gIENyZWF0ZUdsb2JhbFRhYmxlQ29tbWFuZCxcbiAgQ3JlYXRlVGFibGVDb21tYW5kLFxuICBEZWxldGVCYWNrdXBDb21tYW5kLFxuICBEZWxldGVJdGVtQ29tbWFuZCxcbiAgRGVsZXRlUmVzb3VyY2VQb2xpY3lDb21tYW5kLFxuICBEZWxldGVUYWJsZUNvbW1hbmQsXG4gIERlc2NyaWJlQmFja3VwQ29tbWFuZCxcbiAgRGVzY3JpYmVDb250aW51b3VzQmFja3Vwc0NvbW1hbmQsXG4gIERlc2NyaWJlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQsXG4gIERlc2NyaWJlRW5kcG9pbnRzQ29tbWFuZCxcbiAgRGVzY3JpYmVFeHBvcnRDb21tYW5kLFxuICBEZXNjcmliZUdsb2JhbFRhYmxlQ29tbWFuZCxcbiAgRGVzY3JpYmVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCxcbiAgRGVzY3JpYmVJbXBvcnRDb21tYW5kLFxuICBEZXNjcmliZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQsXG4gIERlc2NyaWJlTGltaXRzQ29tbWFuZCxcbiAgRGVzY3JpYmVUYWJsZUNvbW1hbmQsXG4gIERlc2NyaWJlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kLFxuICBEZXNjcmliZVRpbWVUb0xpdmVDb21tYW5kLFxuICBEaXNhYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCxcbiAgRW5hYmxlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCxcbiAgRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQsXG4gIEV4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmQsXG4gIEV4cG9ydFRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQsXG4gIEdldEl0ZW1Db21tYW5kLFxuICBHZXRSZXNvdXJjZVBvbGljeUNvbW1hbmQsXG4gIEltcG9ydFRhYmxlQ29tbWFuZCxcbiAgTGlzdEJhY2t1cHNDb21tYW5kLFxuICBMaXN0Q29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQsXG4gIExpc3RFeHBvcnRzQ29tbWFuZCxcbiAgTGlzdEdsb2JhbFRhYmxlc0NvbW1hbmQsXG4gIExpc3RJbXBvcnRzQ29tbWFuZCxcbiAgTGlzdFRhYmxlc0NvbW1hbmQsXG4gIExpc3RUYWdzT2ZSZXNvdXJjZUNvbW1hbmQsXG4gIFB1dEl0ZW1Db21tYW5kLFxuICBQdXRSZXNvdXJjZVBvbGljeUNvbW1hbmQsXG4gIFF1ZXJ5Q29tbWFuZCxcbiAgUmVzdG9yZVRhYmxlRnJvbUJhY2t1cENvbW1hbmQsXG4gIFJlc3RvcmVUYWJsZVRvUG9pbnRJblRpbWVDb21tYW5kLFxuICBTY2FuQ29tbWFuZCxcbiAgVGFnUmVzb3VyY2VDb21tYW5kLFxuICBUcmFuc2FjdEdldEl0ZW1zQ29tbWFuZCxcbiAgVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZCxcbiAgVW50YWdSZXNvdXJjZUNvbW1hbmQsXG4gIFVwZGF0ZUNvbnRpbnVvdXNCYWNrdXBzQ29tbWFuZCxcbiAgVXBkYXRlQ29udHJpYnV0b3JJbnNpZ2h0c0NvbW1hbmQsXG4gIFVwZGF0ZUdsb2JhbFRhYmxlQ29tbWFuZCxcbiAgVXBkYXRlR2xvYmFsVGFibGVTZXR0aW5nc0NvbW1hbmQsXG4gIFVwZGF0ZUl0ZW1Db21tYW5kLFxuICBVcGRhdGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLFxuICBVcGRhdGVUYWJsZUNvbW1hbmQsXG4gIFVwZGF0ZVRhYmxlUmVwbGljYUF1dG9TY2FsaW5nQ29tbWFuZCxcbiAgVXBkYXRlVGltZVRvTGl2ZUNvbW1hbmRcbn07XG52YXIgRHluYW1vREIgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCQ2xpZW50IHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEeW5hbW9EQlwiKTtcbiAgfVxufTtcbigwLCBpbXBvcnRfc21pdGh5X2NsaWVudC5jcmVhdGVBZ2dyZWdhdGVkQ2xpZW50KShjb21tYW5kcywgRHluYW1vREIpO1xuXG4vLyBzcmMvcGFnaW5hdGlvbi9MaXN0Q29udHJpYnV0b3JJbnNpZ2h0c1BhZ2luYXRvci50c1xudmFyIGltcG9ydF9jb3JlMyA9IHJlcXVpcmUoXCJAc21pdGh5L2NvcmVcIik7XG52YXIgcGFnaW5hdGVMaXN0Q29udHJpYnV0b3JJbnNpZ2h0cyA9ICgwLCBpbXBvcnRfY29yZTMuY3JlYXRlUGFnaW5hdG9yKShEeW5hbW9EQkNsaWVudCwgTGlzdENvbnRyaWJ1dG9ySW5zaWdodHNDb21tYW5kLCBcIk5leHRUb2tlblwiLCBcIk5leHRUb2tlblwiLCBcIk1heFJlc3VsdHNcIik7XG5cbi8vIHNyYy9wYWdpbmF0aW9uL0xpc3RFeHBvcnRzUGFnaW5hdG9yLnRzXG52YXIgaW1wb3J0X2NvcmU0ID0gcmVxdWlyZShcIkBzbWl0aHkvY29yZVwiKTtcbnZhciBwYWdpbmF0ZUxpc3RFeHBvcnRzID0gKDAsIGltcG9ydF9jb3JlNC5jcmVhdGVQYWdpbmF0b3IpKER5bmFtb0RCQ2xpZW50LCBMaXN0RXhwb3J0c0NvbW1hbmQsIFwiTmV4dFRva2VuXCIsIFwiTmV4dFRva2VuXCIsIFwiTWF4UmVzdWx0c1wiKTtcblxuLy8gc3JjL3BhZ2luYXRpb24vTGlzdEltcG9ydHNQYWdpbmF0b3IudHNcbnZhciBpbXBvcnRfY29yZTUgPSByZXF1aXJlKFwiQHNtaXRoeS9jb3JlXCIpO1xudmFyIHBhZ2luYXRlTGlzdEltcG9ydHMgPSAoMCwgaW1wb3J0X2NvcmU1LmNyZWF0ZVBhZ2luYXRvcikoRHluYW1vREJDbGllbnQsIExpc3RJbXBvcnRzQ29tbWFuZCwgXCJOZXh0VG9rZW5cIiwgXCJOZXh0VG9rZW5cIiwgXCJQYWdlU2l6ZVwiKTtcblxuLy8gc3JjL3BhZ2luYXRpb24vTGlzdFRhYmxlc1BhZ2luYXRvci50c1xudmFyIGltcG9ydF9jb3JlNiA9IHJlcXVpcmUoXCJAc21pdGh5L2NvcmVcIik7XG52YXIgcGFnaW5hdGVMaXN0VGFibGVzID0gKDAsIGltcG9ydF9jb3JlNi5jcmVhdGVQYWdpbmF0b3IpKER5bmFtb0RCQ2xpZW50LCBMaXN0VGFibGVzQ29tbWFuZCwgXCJFeGNsdXNpdmVTdGFydFRhYmxlTmFtZVwiLCBcIkxhc3RFdmFsdWF0ZWRUYWJsZU5hbWVcIiwgXCJMaW1pdFwiKTtcblxuLy8gc3JjL3BhZ2luYXRpb24vUXVlcnlQYWdpbmF0b3IudHNcbnZhciBpbXBvcnRfY29yZTcgPSByZXF1aXJlKFwiQHNtaXRoeS9jb3JlXCIpO1xudmFyIHBhZ2luYXRlUXVlcnkgPSAoMCwgaW1wb3J0X2NvcmU3LmNyZWF0ZVBhZ2luYXRvcikoRHluYW1vREJDbGllbnQsIFF1ZXJ5Q29tbWFuZCwgXCJFeGNsdXNpdmVTdGFydEtleVwiLCBcIkxhc3RFdmFsdWF0ZWRLZXlcIiwgXCJMaW1pdFwiKTtcblxuLy8gc3JjL3BhZ2luYXRpb24vU2NhblBhZ2luYXRvci50c1xudmFyIGltcG9ydF9jb3JlOCA9IHJlcXVpcmUoXCJAc21pdGh5L2NvcmVcIik7XG52YXIgcGFnaW5hdGVTY2FuID0gKDAsIGltcG9ydF9jb3JlOC5jcmVhdGVQYWdpbmF0b3IpKER5bmFtb0RCQ2xpZW50LCBTY2FuQ29tbWFuZCwgXCJFeGNsdXNpdmVTdGFydEtleVwiLCBcIkxhc3RFdmFsdWF0ZWRLZXlcIiwgXCJMaW1pdFwiKTtcblxuLy8gc3JjL3dhaXRlcnMvd2FpdEZvclRhYmxlRXhpc3RzLnRzXG52YXIgaW1wb3J0X3V0aWxfd2FpdGVyID0gcmVxdWlyZShcIkBzbWl0aHkvdXRpbC13YWl0ZXJcIik7XG52YXIgY2hlY2tTdGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGNsaWVudCwgaW5wdXQpID0+IHtcbiAgbGV0IHJlYXNvbjtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQuc2VuZChuZXcgRGVzY3JpYmVUYWJsZUNvbW1hbmQoaW5wdXQpKTtcbiAgICByZWFzb24gPSByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJldHVybkNvbXBhcmF0b3IgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5UYWJsZS5UYWJsZVN0YXR1cztcbiAgICAgIH0sIFwicmV0dXJuQ29tcGFyYXRvclwiKTtcbiAgICAgIGlmIChyZXR1cm5Db21wYXJhdG9yKCkgPT09IFwiQUNUSVZFXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdGU6IGltcG9ydF91dGlsX3dhaXRlci5XYWl0ZXJTdGF0ZS5TVUNDRVNTLCByZWFzb24gfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICByZWFzb24gPSBleGNlcHRpb247XG4gICAgaWYgKGV4Y2VwdGlvbi5uYW1lICYmIGV4Y2VwdGlvbi5uYW1lID09IFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiKSB7XG4gICAgICByZXR1cm4geyBzdGF0ZTogaW1wb3J0X3V0aWxfd2FpdGVyLldhaXRlclN0YXRlLlJFVFJZLCByZWFzb24gfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgc3RhdGU6IGltcG9ydF91dGlsX3dhaXRlci5XYWl0ZXJTdGF0ZS5SRVRSWSwgcmVhc29uIH07XG59LCBcImNoZWNrU3RhdGVcIik7XG52YXIgd2FpdEZvclRhYmxlRXhpc3RzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyYW1zLCBpbnB1dCkgPT4ge1xuICBjb25zdCBzZXJ2aWNlRGVmYXVsdHMgPSB7IG1pbkRlbGF5OiAyMCwgbWF4RGVsYXk6IDEyMCB9O1xuICByZXR1cm4gKDAsIGltcG9ydF91dGlsX3dhaXRlci5jcmVhdGVXYWl0ZXIpKHsgLi4uc2VydmljZURlZmF1bHRzLCAuLi5wYXJhbXMgfSwgaW5wdXQsIGNoZWNrU3RhdGUpO1xufSwgXCJ3YWl0Rm9yVGFibGVFeGlzdHNcIik7XG52YXIgd2FpdFVudGlsVGFibGVFeGlzdHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJhbXMsIGlucHV0KSA9PiB7XG4gIGNvbnN0IHNlcnZpY2VEZWZhdWx0cyA9IHsgbWluRGVsYXk6IDIwLCBtYXhEZWxheTogMTIwIH07XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBpbXBvcnRfdXRpbF93YWl0ZXIuY3JlYXRlV2FpdGVyKSh7IC4uLnNlcnZpY2VEZWZhdWx0cywgLi4ucGFyYW1zIH0sIGlucHV0LCBjaGVja1N0YXRlKTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF93YWl0ZXIuY2hlY2tFeGNlcHRpb25zKShyZXN1bHQpO1xufSwgXCJ3YWl0VW50aWxUYWJsZUV4aXN0c1wiKTtcblxuLy8gc3JjL3dhaXRlcnMvd2FpdEZvclRhYmxlTm90RXhpc3RzLnRzXG5cbnZhciBjaGVja1N0YXRlMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGNsaWVudCwgaW5wdXQpID0+IHtcbiAgbGV0IHJlYXNvbjtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQuc2VuZChuZXcgRGVzY3JpYmVUYWJsZUNvbW1hbmQoaW5wdXQpKTtcbiAgICByZWFzb24gPSByZXN1bHQ7XG4gIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgIHJlYXNvbiA9IGV4Y2VwdGlvbjtcbiAgICBpZiAoZXhjZXB0aW9uLm5hbWUgJiYgZXhjZXB0aW9uLm5hbWUgPT0gXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCIpIHtcbiAgICAgIHJldHVybiB7IHN0YXRlOiBpbXBvcnRfdXRpbF93YWl0ZXIuV2FpdGVyU3RhdGUuU1VDQ0VTUywgcmVhc29uIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB7IHN0YXRlOiBpbXBvcnRfdXRpbF93YWl0ZXIuV2FpdGVyU3RhdGUuUkVUUlksIHJlYXNvbiB9O1xufSwgXCJjaGVja1N0YXRlXCIpO1xudmFyIHdhaXRGb3JUYWJsZU5vdEV4aXN0cyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcmFtcywgaW5wdXQpID0+IHtcbiAgY29uc3Qgc2VydmljZURlZmF1bHRzID0geyBtaW5EZWxheTogMjAsIG1heERlbGF5OiAxMjAgfTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF93YWl0ZXIuY3JlYXRlV2FpdGVyKSh7IC4uLnNlcnZpY2VEZWZhdWx0cywgLi4ucGFyYW1zIH0sIGlucHV0LCBjaGVja1N0YXRlMik7XG59LCBcIndhaXRGb3JUYWJsZU5vdEV4aXN0c1wiKTtcbnZhciB3YWl0VW50aWxUYWJsZU5vdEV4aXN0cyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcmFtcywgaW5wdXQpID0+IHtcbiAgY29uc3Qgc2VydmljZURlZmF1bHRzID0geyBtaW5EZWxheTogMjAsIG1heERlbGF5OiAxMjAgfTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGltcG9ydF91dGlsX3dhaXRlci5jcmVhdGVXYWl0ZXIpKHsgLi4uc2VydmljZURlZmF1bHRzLCAuLi5wYXJhbXMgfSwgaW5wdXQsIGNoZWNrU3RhdGUyKTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfdXRpbF93YWl0ZXIuY2hlY2tFeGNlcHRpb25zKShyZXN1bHQpO1xufSwgXCJ3YWl0VW50aWxUYWJsZU5vdEV4aXN0c1wiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIER5bmFtb0RCU2VydmljZUV4Y2VwdGlvbixcbiAgX19DbGllbnQsXG4gIER5bmFtb0RCQ2xpZW50LFxuICBEeW5hbW9EQixcbiAgJENvbW1hbmQsXG4gIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQsXG4gIEJhdGNoR2V0SXRlbUNvbW1hbmQsXG4gIEJhdGNoV3JpdGVJdGVtQ29tbWFuZCxcbiAgQ3JlYXRlQmFja3VwQ29tbWFuZCxcbiAgQ3JlYXRlR2xvYmFsVGFibGVDb21tYW5kLFxuICBDcmVhdGVUYWJsZUNvbW1hbmQsXG4gIERlbGV0ZUJhY2t1cENvbW1hbmQsXG4gIERlbGV0ZUl0ZW1Db21tYW5kLFxuICBEZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQsXG4gIERlbGV0ZVRhYmxlQ29tbWFuZCxcbiAgRGVzY3JpYmVCYWNrdXBDb21tYW5kLFxuICBEZXNjcmliZUNvbnRpbnVvdXNCYWNrdXBzQ29tbWFuZCxcbiAgRGVzY3JpYmVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCxcbiAgRGVzY3JpYmVFbmRwb2ludHNDb21tYW5kLFxuICBEZXNjcmliZUV4cG9ydENvbW1hbmQsXG4gIERlc2NyaWJlR2xvYmFsVGFibGVDb21tYW5kLFxuICBEZXNjcmliZUdsb2JhbFRhYmxlU2V0dGluZ3NDb21tYW5kLFxuICBEZXNjcmliZUltcG9ydENvbW1hbmQsXG4gIERlc2NyaWJlS2luZXNpc1N0cmVhbWluZ0Rlc3RpbmF0aW9uQ29tbWFuZCxcbiAgRGVzY3JpYmVMaW1pdHNDb21tYW5kLFxuICBEZXNjcmliZVRhYmxlQ29tbWFuZCxcbiAgRGVzY3JpYmVUYWJsZVJlcGxpY2FBdXRvU2NhbGluZ0NvbW1hbmQsXG4gIERlc2NyaWJlVGltZVRvTGl2ZUNvbW1hbmQsXG4gIERpc2FibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLFxuICBFbmFibGVLaW5lc2lzU3RyZWFtaW5nRGVzdGluYXRpb25Db21tYW5kLFxuICBFeGVjdXRlU3RhdGVtZW50Q29tbWFuZCxcbiAgRXhlY3V0ZVRyYW5zYWN0aW9uQ29tbWFuZCxcbiAgRXhwb3J0VGFibGVUb1BvaW50SW5UaW1lQ29tbWFuZCxcbiAgR2V0SXRlbUNvbW1hbmQsXG4gIEdldFJlc291cmNlUG9saWN5Q29tbWFuZCxcbiAgSW1wb3J0VGFibGVDb21tYW5kLFxuICBMaXN0QmFja3Vwc0NvbW1hbmQsXG4gIExpc3RDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCxcbiAgTGlzdEV4cG9ydHNDb21tYW5kLFxuICBMaXN0R2xvYmFsVGFibGVzQ29tbWFuZCxcbiAgTGlzdEltcG9ydHNDb21tYW5kLFxuICBMaXN0VGFibGVzQ29tbWFuZCxcbiAgTGlzdFRhZ3NPZlJlc291cmNlQ29tbWFuZCxcbiAgUHV0SXRlbUNvbW1hbmQsXG4gIFB1dFJlc291cmNlUG9saWN5Q29tbWFuZCxcbiAgUXVlcnlDb21tYW5kLFxuICBSZXN0b3JlVGFibGVGcm9tQmFja3VwQ29tbWFuZCxcbiAgUmVzdG9yZVRhYmxlVG9Qb2ludEluVGltZUNvbW1hbmQsXG4gIFNjYW5Db21tYW5kLFxuICBUYWdSZXNvdXJjZUNvbW1hbmQsXG4gIFRyYW5zYWN0R2V0SXRlbXNDb21tYW5kLFxuICBUcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kLFxuICBVbnRhZ1Jlc291cmNlQ29tbWFuZCxcbiAgVXBkYXRlQ29udGludW91c0JhY2t1cHNDb21tYW5kLFxuICBVcGRhdGVDb250cmlidXRvckluc2lnaHRzQ29tbWFuZCxcbiAgVXBkYXRlR2xvYmFsVGFibGVDb21tYW5kLFxuICBVcGRhdGVHbG9iYWxUYWJsZVNldHRpbmdzQ29tbWFuZCxcbiAgVXBkYXRlSXRlbUNvbW1hbmQsXG4gIFVwZGF0ZUtpbmVzaXNTdHJlYW1pbmdEZXN0aW5hdGlvbkNvbW1hbmQsXG4gIFVwZGF0ZVRhYmxlQ29tbWFuZCxcbiAgVXBkYXRlVGFibGVSZXBsaWNhQXV0b1NjYWxpbmdDb21tYW5kLFxuICBVcGRhdGVUaW1lVG9MaXZlQ29tbWFuZCxcbiAgcGFnaW5hdGVMaXN0Q29udHJpYnV0b3JJbnNpZ2h0cyxcbiAgcGFnaW5hdGVMaXN0RXhwb3J0cyxcbiAgcGFnaW5hdGVMaXN0SW1wb3J0cyxcbiAgcGFnaW5hdGVMaXN0VGFibGVzLFxuICBwYWdpbmF0ZVF1ZXJ5LFxuICBwYWdpbmF0ZVNjYW4sXG4gIHdhaXRGb3JUYWJsZUV4aXN0cyxcbiAgd2FpdFVudGlsVGFibGVFeGlzdHMsXG4gIHdhaXRGb3JUYWJsZU5vdEV4aXN0cyxcbiAgd2FpdFVudGlsVGFibGVOb3RFeGlzdHMsXG4gIEFwcHJveGltYXRlQ3JlYXRpb25EYXRlVGltZVByZWNpc2lvbixcbiAgQXR0cmlidXRlQWN0aW9uLFxuICBTY2FsYXJBdHRyaWJ1dGVUeXBlLFxuICBCYWNrdXBTdGF0dXMsXG4gIEJhY2t1cFR5cGUsXG4gIEJpbGxpbmdNb2RlLFxuICBLZXlUeXBlLFxuICBQcm9qZWN0aW9uVHlwZSxcbiAgU1NFVHlwZSxcbiAgU1NFU3RhdHVzLFxuICBTdHJlYW1WaWV3VHlwZSxcbiAgVGltZVRvTGl2ZVN0YXR1cyxcbiAgQmFja3VwSW5Vc2VFeGNlcHRpb24sXG4gIEJhY2t1cE5vdEZvdW5kRXhjZXB0aW9uLFxuICBCYWNrdXBUeXBlRmlsdGVyLFxuICBSZXR1cm5Db25zdW1lZENhcGFjaXR5LFxuICBSZXR1cm5WYWx1ZXNPbkNvbmRpdGlvbkNoZWNrRmFpbHVyZSxcbiAgQmF0Y2hTdGF0ZW1lbnRFcnJvckNvZGVFbnVtLFxuICBJbnRlcm5hbFNlcnZlckVycm9yLFxuICBSZXF1ZXN0TGltaXRFeGNlZWRlZCxcbiAgSW52YWxpZEVuZHBvaW50RXhjZXB0aW9uLFxuICBQcm92aXNpb25lZFRocm91Z2hwdXRFeGNlZWRlZEV4Y2VwdGlvbixcbiAgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbixcbiAgUmV0dXJuSXRlbUNvbGxlY3Rpb25NZXRyaWNzLFxuICBJdGVtQ29sbGVjdGlvblNpemVMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLFxuICBDb21wYXJpc29uT3BlcmF0b3IsXG4gIENvbmRpdGlvbmFsT3BlcmF0b3IsXG4gIENvbnRpbnVvdXNCYWNrdXBzU3RhdHVzLFxuICBQb2ludEluVGltZVJlY292ZXJ5U3RhdHVzLFxuICBDb250aW51b3VzQmFja3Vwc1VuYXZhaWxhYmxlRXhjZXB0aW9uLFxuICBDb250cmlidXRvckluc2lnaHRzQWN0aW9uLFxuICBDb250cmlidXRvckluc2lnaHRzU3RhdHVzLFxuICBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLFxuICBUYWJsZUluVXNlRXhjZXB0aW9uLFxuICBUYWJsZU5vdEZvdW5kRXhjZXB0aW9uLFxuICBHbG9iYWxUYWJsZVN0YXR1cyxcbiAgSW5kZXhTdGF0dXMsXG4gIFJlcGxpY2FTdGF0dXMsXG4gIFRhYmxlQ2xhc3MsXG4gIFRhYmxlU3RhdHVzLFxuICBHbG9iYWxUYWJsZUFscmVhZHlFeGlzdHNFeGNlcHRpb24sXG4gIE11bHRpUmVnaW9uQ29uc2lzdGVuY3ksXG4gIFJlc291cmNlSW5Vc2VFeGNlcHRpb24sXG4gIFJldHVyblZhbHVlLFxuICBSZXBsaWNhdGVkV3JpdGVDb25mbGljdEV4Y2VwdGlvbixcbiAgVHJhbnNhY3Rpb25Db25mbGljdEV4Y2VwdGlvbixcbiAgUG9saWN5Tm90Rm91bmRFeGNlcHRpb24sXG4gIEV4cG9ydEZvcm1hdCxcbiAgRXhwb3J0U3RhdHVzLFxuICBFeHBvcnRUeXBlLFxuICBFeHBvcnRWaWV3VHlwZSxcbiAgUzNTc2VBbGdvcml0aG0sXG4gIEV4cG9ydE5vdEZvdW5kRXhjZXB0aW9uLFxuICBHbG9iYWxUYWJsZU5vdEZvdW5kRXhjZXB0aW9uLFxuICBJbXBvcnRTdGF0dXMsXG4gIElucHV0Q29tcHJlc3Npb25UeXBlLFxuICBJbnB1dEZvcm1hdCxcbiAgSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24sXG4gIERlc3RpbmF0aW9uU3RhdHVzLFxuICBEdXBsaWNhdGVJdGVtRXhjZXB0aW9uLFxuICBJZGVtcG90ZW50UGFyYW1ldGVyTWlzbWF0Y2hFeGNlcHRpb24sXG4gIFRyYW5zYWN0aW9uSW5Qcm9ncmVzc0V4Y2VwdGlvbixcbiAgRXhwb3J0Q29uZmxpY3RFeGNlcHRpb24sXG4gIEludmFsaWRFeHBvcnRUaW1lRXhjZXB0aW9uLFxuICBQb2ludEluVGltZVJlY292ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24sXG4gIEltcG9ydENvbmZsaWN0RXhjZXB0aW9uLFxuICBTZWxlY3QsXG4gIFRhYmxlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbixcbiAgSW52YWxpZFJlc3RvcmVUaW1lRXhjZXB0aW9uLFxuICBSZXBsaWNhQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbixcbiAgUmVwbGljYU5vdEZvdW5kRXhjZXB0aW9uLFxuICBJbmRleE5vdEZvdW5kRXhjZXB0aW9uLFxuICBBdHRyaWJ1dGVWYWx1ZSxcbiAgQ29uZGl0aW9uYWxDaGVja0ZhaWxlZEV4Y2VwdGlvbixcbiAgVHJhbnNhY3Rpb25DYW5jZWxlZEV4Y2VwdGlvblxufSk7XG5cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIGluZGV4X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHtcbiAgTnVtYmVyVmFsdWVJbXBsOiAoKSA9PiBOdW1iZXJWYWx1ZSxcbiAgY29udmVydFRvQXR0cjogKCkgPT4gY29udmVydFRvQXR0cixcbiAgY29udmVydFRvTmF0aXZlOiAoKSA9PiBjb252ZXJ0VG9OYXRpdmUsXG4gIG1hcnNoYWxsOiAoKSA9PiBtYXJzaGFsbCxcbiAgdW5tYXJzaGFsbDogKCkgPT4gdW5tYXJzaGFsbFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTtcblxuLy8gc3JjL051bWJlclZhbHVlLnRzXG52YXIgTnVtYmVyVmFsdWUgPSBjbGFzcyBfTnVtYmVyVmFsdWUge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIk51bWJlclZhbHVlXCIpO1xuICB9XG4gIHZhbHVlO1xuICAvKipcbiAgICogVGhpcyBjbGFzcyBkb2VzIG5vdCB2YWxpZGF0ZSB0aGF0IHlvdXIgc3RyaW5nIGlucHV0IGlzIGEgdmFsaWQgbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgLSBhIHByZWNpc2UgbnVtYmVyLCBvciBhbnkgQmlnSW50IG9yIHN0cmluZywgb3IgQXR0cmlidXRlVmFsdWUuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgXCJOXCIgaW4gdmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBTdHJpbmcodmFsdWUuTik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZU9mID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YoKSA9PT0gXCJudW1iZXJcIiA/IHZhbHVlLnZhbHVlT2YoKSA6IDA7XG4gICAgY29uc3QgaW1wcmVjaXNlID0gdmFsdWVPZiA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IHZhbHVlT2YgPCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiB8fCBNYXRoLmFicyh2YWx1ZU9mKSA9PT0gSW5maW5pdHkgfHwgTnVtYmVyLmlzTmFOKHZhbHVlT2YpO1xuICAgIGlmIChpbXByZWNpc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE51bWJlclZhbHVlIHNob3VsZCBub3QgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbiBpbXByZWNpc2UgbnVtYmVyPSR7dmFsdWVPZn0uIFVzZSBhIHN0cmluZyBpbnN0ZWFkLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIGNsYXNzIGRvZXMgbm90IHZhbGlkYXRlIHRoYXQgeW91ciBzdHJpbmcgaW5wdXQgaXMgYSB2YWxpZCBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSAtIGEgcHJlY2lzZSBudW1iZXIsIG9yIGFueSBCaWdJbnQgb3Igc3RyaW5nLCBvciBBdHRyaWJ1dGVWYWx1ZS5cbiAgICovXG4gIHN0YXRpYyBmcm9tKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBfTnVtYmVyVmFsdWUodmFsdWUpO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyB0aGUgQXR0cmlidXRlVmFsdWUgZm9ybSBmb3IgRHluYW1vREIuXG4gICAqL1xuICB0b0F0dHJpYnV0ZVZhbHVlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBOOiB0aGlzLnRvU3RyaW5nKClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyBCaWdJbnQgcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEB0aHJvd3MgU3ludGF4RXJyb3IgaWYgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBpcyBub3QgY29udmVydGFibGUgdG8gYSBCaWdJbnQuXG4gICAqL1xuICB0b0JpZ0ludCgpIHtcbiAgICBjb25zdCBzdHJpbmdWYWx1ZSA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gQmlnSW50KHN0cmluZ1ZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEByZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbi4gVGhpcyBpcyB0aGUgY2Fub25pY2FsIGZvcm1hdCBpbiBEeW5hbW9EQi5cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59O1xuXG4vLyBzcmMvY29udmVydFRvQXR0ci50c1xudmFyIGNvbnZlcnRUb0F0dHIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRhLCBvcHRpb25zKSA9PiB7XG4gIGlmIChkYXRhID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFBhc3Mgb3B0aW9ucy5yZW1vdmVVbmRlZmluZWRWYWx1ZXM9dHJ1ZSB0byByZW1vdmUgdW5kZWZpbmVkIHZhbHVlcyBmcm9tIG1hcC9hcnJheS9zZXQuYCk7XG4gIH0gZWxzZSBpZiAoZGF0YSA9PT0gbnVsbCAmJiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBjb252ZXJ0VG9OdWxsQXR0cigpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4gY29udmVydFRvTGlzdEF0dHIoZGF0YSwgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoZGF0YT8uY29uc3RydWN0b3I/Lm5hbWUgPT09IFwiU2V0XCIpIHtcbiAgICByZXR1cm4gY29udmVydFRvU2V0QXR0cihkYXRhLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChkYXRhPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJNYXBcIikge1xuICAgIHJldHVybiBjb252ZXJ0VG9NYXBBdHRyRnJvbUl0ZXJhYmxlKGRhdGEsIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKGRhdGE/LmNvbnN0cnVjdG9yPy5uYW1lID09PSBcIk9iamVjdFwiIHx8IC8vIGZvciBvYmplY3Qgd2hpY2ggaXMgcmVzdWx0IG9mIE9iamVjdC5jcmVhdGUobnVsbCksIHdoaWNoIGRvZXNuJ3QgaGF2ZSBjb25zdHJ1Y3RvciBkZWZpbmVkXG4gICFkYXRhLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRUb01hcEF0dHJGcm9tRW51bWVyYWJsZVByb3BzKGRhdGEsIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKGlzQmluYXJ5KGRhdGEpKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwICYmIG9wdGlvbnM/LmNvbnZlcnRFbXB0eVZhbHVlcykge1xuICAgICAgcmV0dXJuIGNvbnZlcnRUb051bGxBdHRyKCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0VG9CaW5hcnlBdHRyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcImJvb2xlYW5cIiB8fCBkYXRhPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJCb29sZWFuXCIpIHtcbiAgICByZXR1cm4geyBCT09MOiBkYXRhLnZhbHVlT2YoKSB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm51bWJlclwiIHx8IGRhdGE/LmNvbnN0cnVjdG9yPy5uYW1lID09PSBcIk51bWJlclwiKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRUb051bWJlckF0dHIoZGF0YSwgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIE51bWJlclZhbHVlKSB7XG4gICAgcmV0dXJuIGRhdGEudG9BdHRyaWJ1dGVWYWx1ZSgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcImJpZ2ludFwiKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRUb0JpZ0ludEF0dHIoZGF0YSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgfHwgZGF0YT8uY29uc3RydWN0b3I/Lm5hbWUgPT09IFwiU3RyaW5nXCIpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDAgJiYgb3B0aW9ucz8uY29udmVydEVtcHR5VmFsdWVzKSB7XG4gICAgICByZXR1cm4gY29udmVydFRvTnVsbEF0dHIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRUb1N0cmluZ0F0dHIoZGF0YSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucz8uY29udmVydENsYXNzSW5zdGFuY2VUb01hcCAmJiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBjb252ZXJ0VG9NYXBBdHRyRnJvbUVudW1lcmFibGVQcm9wcyhkYXRhLCBvcHRpb25zKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYFVuc3VwcG9ydGVkIHR5cGUgcGFzc2VkOiAke2RhdGF9LiBQYXNzIG9wdGlvbnMuY29udmVydENsYXNzSW5zdGFuY2VUb01hcD10cnVlIHRvIG1hcnNoYWxsIHR5cGVvZiBvYmplY3QgYXMgbWFwIGF0dHJpYnV0ZS5gXG4gICk7XG59LCBcImNvbnZlcnRUb0F0dHJcIik7XG52YXIgY29udmVydFRvTGlzdEF0dHIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRhLCBvcHRpb25zKSA9PiAoe1xuICBMOiBkYXRhLmZpbHRlcihcbiAgICAoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIiAmJiAoIW9wdGlvbnM/LnJlbW92ZVVuZGVmaW5lZFZhbHVlcyB8fCBvcHRpb25zPy5yZW1vdmVVbmRlZmluZWRWYWx1ZXMgJiYgaXRlbSAhPT0gdm9pZCAwKVxuICApLm1hcCgoaXRlbSkgPT4gY29udmVydFRvQXR0cihpdGVtLCBvcHRpb25zKSlcbn0pLCBcImNvbnZlcnRUb0xpc3RBdHRyXCIpO1xudmFyIGNvbnZlcnRUb1NldEF0dHIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzZXQsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgc2V0VG9PcGVyYXRlID0gb3B0aW9ucz8ucmVtb3ZlVW5kZWZpbmVkVmFsdWVzID8gbmV3IFNldChbLi4uc2V0XS5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAhPT0gdm9pZCAwKSkgOiBzZXQ7XG4gIGlmICghb3B0aW9ucz8ucmVtb3ZlVW5kZWZpbmVkVmFsdWVzICYmIHNldFRvT3BlcmF0ZS5oYXModm9pZCAwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgUGFzcyBvcHRpb25zLnJlbW92ZVVuZGVmaW5lZFZhbHVlcz10cnVlIHRvIHJlbW92ZSB1bmRlZmluZWQgdmFsdWVzIGZyb20gbWFwL2FycmF5L3NldC5gKTtcbiAgfVxuICBpZiAoc2V0VG9PcGVyYXRlLnNpemUgPT09IDApIHtcbiAgICBpZiAob3B0aW9ucz8uY29udmVydEVtcHR5VmFsdWVzKSB7XG4gICAgICByZXR1cm4gY29udmVydFRvTnVsbEF0dHIoKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQYXNzIGEgbm9uLWVtcHR5IHNldCwgb3Igb3B0aW9ucy5jb252ZXJ0RW1wdHlWYWx1ZXM9dHJ1ZS5gKTtcbiAgfVxuICBjb25zdCBpdGVtID0gc2V0VG9PcGVyYXRlLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBOdW1iZXJWYWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBOUzogQXJyYXkuZnJvbShzZXRUb09wZXJhdGUpLm1hcCgoXykgPT4gXy50b1N0cmluZygpKVxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTlM6IEFycmF5LmZyb20oc2V0VG9PcGVyYXRlKS5tYXAoKG51bSkgPT4gY29udmVydFRvTnVtYmVyQXR0cihudW0sIG9wdGlvbnMpKS5tYXAoKGl0ZW0yKSA9PiBpdGVtMi5OKVxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTlM6IEFycmF5LmZyb20oc2V0VG9PcGVyYXRlKS5tYXAoY29udmVydFRvQmlnSW50QXR0cikubWFwKChpdGVtMikgPT4gaXRlbTIuTilcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFNTOiBBcnJheS5mcm9tKHNldFRvT3BlcmF0ZSkubWFwKGNvbnZlcnRUb1N0cmluZ0F0dHIpLm1hcCgoaXRlbTIpID0+IGl0ZW0yLlMpXG4gICAgfTtcbiAgfSBlbHNlIGlmIChpc0JpbmFyeShpdGVtKSkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBEbyBub3QgYWx0ZXIgYmluYXJ5IGRhdGEgcGFzc2VkIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLXNkay1qcy12My9pc3N1ZXMvMTUzMFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUeXBlICdBcnJheUJ1ZmZlcicgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnVWludDhBcnJheSdcbiAgICAgIEJTOiBBcnJheS5mcm9tKHNldFRvT3BlcmF0ZSkubWFwKGNvbnZlcnRUb0JpbmFyeUF0dHIpLm1hcCgoaXRlbTIpID0+IGl0ZW0yLkIpXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgTnVtYmVyIFNldCAoTlMpLCBCaW5hcnkgU2V0IChCUykgb3IgU3RyaW5nIFNldCAoU1MpIGFyZSBhbGxvd2VkLmApO1xuICB9XG59LCBcImNvbnZlcnRUb1NldEF0dHJcIik7XG52YXIgY29udmVydFRvTWFwQXR0ckZyb21JdGVyYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEsIG9wdGlvbnMpID0+ICh7XG4gIE06ICgoZGF0YTIpID0+IHtcbiAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBkYXRhMikge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiICYmICh2YWx1ZSAhPT0gdm9pZCAwIHx8ICFvcHRpb25zPy5yZW1vdmVVbmRlZmluZWRWYWx1ZXMpKSB7XG4gICAgICAgIG1hcFtrZXldID0gY29udmVydFRvQXR0cih2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH0pKGRhdGEpXG59KSwgXCJjb252ZXJ0VG9NYXBBdHRyRnJvbUl0ZXJhYmxlXCIpO1xudmFyIGNvbnZlcnRUb01hcEF0dHJGcm9tRW51bWVyYWJsZVByb3BzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZGF0YSwgb3B0aW9ucykgPT4gKHtcbiAgTTogKChkYXRhMikgPT4ge1xuICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEyKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGRhdGEyW2tleV07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIgJiYgKHZhbHVlICE9PSB2b2lkIDAgfHwgIW9wdGlvbnM/LnJlbW92ZVVuZGVmaW5lZFZhbHVlcykpIHtcbiAgICAgICAgbWFwW2tleV0gPSBjb252ZXJ0VG9BdHRyKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfSkoZGF0YSlcbn0pLCBcImNvbnZlcnRUb01hcEF0dHJGcm9tRW51bWVyYWJsZVByb3BzXCIpO1xudmFyIGNvbnZlcnRUb051bGxBdHRyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiAoeyBOVUxMOiB0cnVlIH0pLCBcImNvbnZlcnRUb051bGxBdHRyXCIpO1xudmFyIGNvbnZlcnRUb0JpbmFyeUF0dHIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRhKSA9PiAoeyBCOiBkYXRhIH0pLCBcImNvbnZlcnRUb0JpbmFyeUF0dHJcIik7XG52YXIgY29udmVydFRvU3RyaW5nQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEpID0+ICh7IFM6IGRhdGEudG9TdHJpbmcoKSB9KSwgXCJjb252ZXJ0VG9TdHJpbmdBdHRyXCIpO1xudmFyIGNvbnZlcnRUb0JpZ0ludEF0dHIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRhKSA9PiAoeyBOOiBkYXRhLnRvU3RyaW5nKCkgfSksIFwiY29udmVydFRvQmlnSW50QXR0clwiKTtcbnZhciB2YWxpZGF0ZUJpZ0ludEFuZFRocm93ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZXJyb3JQcmVmaXgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yUHJlZml4fSBVc2UgTnVtYmVyVmFsdWUgZnJvbSBAYXdzLXNkay9saWItZHluYW1vZGIuYCk7XG59LCBcInZhbGlkYXRlQmlnSW50QW5kVGhyb3dcIik7XG52YXIgY29udmVydFRvTnVtYmVyQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG51bSwgb3B0aW9ucykgPT4ge1xuICBpZiAoW051bWJlci5OYU4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXS5tYXAoKHZhbCkgPT4gdmFsLnRvU3RyaW5nKCkpLmluY2x1ZGVzKG51bS50b1N0cmluZygpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgU3BlY2lhbCBudW1lcmljIHZhbHVlICR7bnVtLnRvU3RyaW5nKCl9IGlzIG5vdCBhbGxvd2VkYCk7XG4gIH0gZWxzZSBpZiAoIW9wdGlvbnM/LmFsbG93SW1wcmVjaXNlTnVtYmVycykge1xuICAgIGlmIChOdW1iZXIobnVtKSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICB2YWxpZGF0ZUJpZ0ludEFuZFRocm93KGBOdW1iZXIgJHtudW0udG9TdHJpbmcoKX0gaXMgZ3JlYXRlciB0aGFuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLmApO1xuICAgIH0gZWxzZSBpZiAoTnVtYmVyKG51bSkgPCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuICAgICAgdmFsaWRhdGVCaWdJbnRBbmRUaHJvdyhgTnVtYmVyICR7bnVtLnRvU3RyaW5nKCl9IGlzIGxlc3NlciB0aGFuIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLmApO1xuICAgIH1cbiAgfVxuICByZXR1cm4geyBOOiBudW0udG9TdHJpbmcoKSB9O1xufSwgXCJjb252ZXJ0VG9OdW1iZXJBdHRyXCIpO1xudmFyIGlzQmluYXJ5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZGF0YSkgPT4ge1xuICBjb25zdCBiaW5hcnlUeXBlcyA9IFtcbiAgICBcIkFycmF5QnVmZmVyXCIsXG4gICAgXCJCbG9iXCIsXG4gICAgXCJCdWZmZXJcIixcbiAgICBcIkRhdGFWaWV3XCIsXG4gICAgXCJGaWxlXCIsXG4gICAgXCJJbnQ4QXJyYXlcIixcbiAgICBcIlVpbnQ4QXJyYXlcIixcbiAgICBcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsXG4gICAgXCJJbnQxNkFycmF5XCIsXG4gICAgXCJVaW50MTZBcnJheVwiLFxuICAgIFwiSW50MzJBcnJheVwiLFxuICAgIFwiVWludDMyQXJyYXlcIixcbiAgICBcIkZsb2F0MzJBcnJheVwiLFxuICAgIFwiRmxvYXQ2NEFycmF5XCIsXG4gICAgXCJCaWdJbnQ2NEFycmF5XCIsXG4gICAgXCJCaWdVaW50NjRBcnJheVwiXG4gIF07XG4gIGlmIChkYXRhPy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBiaW5hcnlUeXBlcy5pbmNsdWRlcyhkYXRhLmNvbnN0cnVjdG9yLm5hbWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0sIFwiaXNCaW5hcnlcIik7XG5cbi8vIHNyYy9jb252ZXJ0VG9OYXRpdmUudHNcbnZhciBjb252ZXJ0VG9OYXRpdmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkYXRhLCBvcHRpb25zKSA9PiB7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgXCJOVUxMXCI6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgXCJCT09MXCI6XG4gICAgICAgICAgcmV0dXJuIEJvb2xlYW4odmFsdWUpO1xuICAgICAgICBjYXNlIFwiTlwiOlxuICAgICAgICAgIHJldHVybiBjb252ZXJ0TnVtYmVyKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgY2FzZSBcIkJcIjpcbiAgICAgICAgICByZXR1cm4gY29udmVydEJpbmFyeSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRTdHJpbmcodmFsdWUpO1xuICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICAgIHJldHVybiBjb252ZXJ0TGlzdCh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRNYXAodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwiTlNcIjpcbiAgICAgICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZS5tYXAoKGl0ZW0pID0+IGNvbnZlcnROdW1iZXIoaXRlbSwgb3B0aW9ucykpKTtcbiAgICAgICAgY2FzZSBcIkJTXCI6XG4gICAgICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWUubWFwKGNvbnZlcnRCaW5hcnkpKTtcbiAgICAgICAgY2FzZSBcIlNTXCI6XG4gICAgICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWUubWFwKGNvbnZlcnRTdHJpbmcpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHR5cGUgcGFzc2VkOiAke2tleX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBObyB2YWx1ZSBkZWZpbmVkOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWApO1xufSwgXCJjb252ZXJ0VG9OYXRpdmVcIik7XG52YXIgY29udmVydE51bWJlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG51bVN0cmluZywgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIG9wdGlvbnM/LndyYXBOdW1iZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gb3B0aW9ucz8ud3JhcE51bWJlcnMobnVtU3RyaW5nKTtcbiAgfVxuICBpZiAob3B0aW9ucz8ud3JhcE51bWJlcnMpIHtcbiAgICByZXR1cm4gTnVtYmVyVmFsdWUuZnJvbShudW1TdHJpbmcpO1xuICB9XG4gIGNvbnN0IG51bSA9IE51bWJlcihudW1TdHJpbmcpO1xuICBjb25zdCBpbmZpbml0eVZhbHVlcyA9IFtOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIE51bWJlci5ORUdBVElWRV9JTkZJTklUWV07XG4gIGNvbnN0IGlzTGFyZ2VGaW5pdGVOdW1iZXIgPSAobnVtID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgbnVtIDwgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpICYmICFpbmZpbml0eVZhbHVlcy5pbmNsdWRlcyhudW0pO1xuICBpZiAoaXNMYXJnZUZpbml0ZU51bWJlcikge1xuICAgIGlmICh0eXBlb2YgQmlnSW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQobnVtU3RyaW5nKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1TdHJpbmd9IGNhbid0IGJlIGNvbnZlcnRlZCB0byBCaWdJbnQuIFNldCBvcHRpb25zLndyYXBOdW1iZXJzIHRvIGdldCBzdHJpbmcgdmFsdWUuYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1TdHJpbmd9IGlzIG91dHNpZGUgU0FGRV9JTlRFR0VSIGJvdW5kcy4gU2V0IG9wdGlvbnMud3JhcE51bWJlcnMgdG8gZ2V0IHN0cmluZyB2YWx1ZS5gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bTtcbn0sIFwiY29udmVydE51bWJlclwiKTtcbnZhciBjb252ZXJ0U3RyaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc3RyaW5nVmFsdWUpID0+IHN0cmluZ1ZhbHVlLCBcImNvbnZlcnRTdHJpbmdcIik7XG52YXIgY29udmVydEJpbmFyeSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGJpbmFyeVZhbHVlKSA9PiBiaW5hcnlWYWx1ZSwgXCJjb252ZXJ0QmluYXJ5XCIpO1xudmFyIGNvbnZlcnRMaXN0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobGlzdCwgb3B0aW9ucykgPT4gbGlzdC5tYXAoKGl0ZW0pID0+IGNvbnZlcnRUb05hdGl2ZShpdGVtLCBvcHRpb25zKSksIFwiY29udmVydExpc3RcIik7XG52YXIgY29udmVydE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG1hcCwgb3B0aW9ucykgPT4gT2JqZWN0LmVudHJpZXMobWFwKS5yZWR1Y2UoXG4gIChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKGFjY1trZXldID0gY29udmVydFRvTmF0aXZlKHZhbHVlLCBvcHRpb25zKSwgYWNjKSxcbiAge31cbiksIFwiY29udmVydE1hcFwiKTtcblxuLy8gc3JjL21hcnNoYWxsLnRzXG5mdW5jdGlvbiBtYXJzaGFsbChkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZVZhbHVlID0gY29udmVydFRvQXR0cihkYXRhLCBvcHRpb25zKTtcbiAgY29uc3QgW2tleSwgdmFsdWVdID0gT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlVmFsdWUpWzBdO1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgXCJNXCI6XG4gICAgY2FzZSBcIkxcIjpcbiAgICAgIHJldHVybiBvcHRpb25zPy5jb252ZXJ0VG9wTGV2ZWxDb250YWluZXIgPyBhdHRyaWJ1dGVWYWx1ZSA6IHZhbHVlO1xuICAgIGNhc2UgXCJTU1wiOlxuICAgIGNhc2UgXCJOU1wiOlxuICAgIGNhc2UgXCJCU1wiOlxuICAgIGNhc2UgXCJTXCI6XG4gICAgY2FzZSBcIk5cIjpcbiAgICBjYXNlIFwiQlwiOlxuICAgIGNhc2UgXCJOVUxMXCI6XG4gICAgY2FzZSBcIkJPT0xcIjpcbiAgICBjYXNlIFwiJHVua25vd25cIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZVZhbHVlO1xuICB9XG59XG5fX25hbWUobWFyc2hhbGwsIFwibWFyc2hhbGxcIik7XG5cbi8vIHNyYy91bm1hcnNoYWxsLnRzXG52YXIgdW5tYXJzaGFsbCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEsIG9wdGlvbnMpID0+IHtcbiAgaWYgKG9wdGlvbnM/LmNvbnZlcnRXaXRob3V0TWFwV3JhcHBlcikge1xuICAgIHJldHVybiBjb252ZXJ0VG9OYXRpdmUoZGF0YSwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGNvbnZlcnRUb05hdGl2ZSh7IE06IGRhdGEgfSwgb3B0aW9ucyk7XG59LCBcInVubWFyc2hhbGxcIik7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG5cbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBOdW1iZXJWYWx1ZUltcGwsXG4gIGNvbnZlcnRUb0F0dHIsXG4gIGNvbnZlcnRUb05hdGl2ZSxcbiAgbWFyc2hhbGwsXG4gIHVubWFyc2hhbGxcbn0pO1xuXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQ6ICgpID0+IEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQsXG4gIEJhdGNoR2V0Q29tbWFuZDogKCkgPT4gQmF0Y2hHZXRDb21tYW5kLFxuICBCYXRjaFdyaXRlQ29tbWFuZDogKCkgPT4gQmF0Y2hXcml0ZUNvbW1hbmQsXG4gIERlbGV0ZUNvbW1hbmQ6ICgpID0+IERlbGV0ZUNvbW1hbmQsXG4gIER5bmFtb0RCRG9jdW1lbnQ6ICgpID0+IER5bmFtb0RCRG9jdW1lbnQsXG4gIER5bmFtb0RCRG9jdW1lbnRDbGllbnQ6ICgpID0+IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsXG4gIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kOiAoKSA9PiBEeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZCxcbiAgRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQ6ICgpID0+IEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLFxuICBFeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kOiAoKSA9PiBFeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kLFxuICBHZXRDb21tYW5kOiAoKSA9PiBHZXRDb21tYW5kLFxuICBOYXRpdmVBdHRyaWJ1dGVCaW5hcnk6ICgpID0+IGltcG9ydF91dGlsX2R5bmFtb2RiLk5hdGl2ZUF0dHJpYnV0ZUJpbmFyeSxcbiAgTmF0aXZlQXR0cmlidXRlVmFsdWU6ICgpID0+IGltcG9ydF91dGlsX2R5bmFtb2RiLk5hdGl2ZUF0dHJpYnV0ZVZhbHVlLFxuICBOYXRpdmVTY2FsYXJBdHRyaWJ1dGVWYWx1ZTogKCkgPT4gaW1wb3J0X3V0aWxfZHluYW1vZGIuTmF0aXZlU2NhbGFyQXR0cmlidXRlVmFsdWUsXG4gIE51bWJlclZhbHVlOiAoKSA9PiBpbXBvcnRfdXRpbF9keW5hbW9kYi5OdW1iZXJWYWx1ZUltcGwsXG4gIFBhZ2luYXRpb25Db25maWd1cmF0aW9uOiAoKSA9PiBpbXBvcnRfdHlwZXMuUGFnaW5hdGlvbkNvbmZpZ3VyYXRpb24sXG4gIFB1dENvbW1hbmQ6ICgpID0+IFB1dENvbW1hbmQsXG4gIFF1ZXJ5Q29tbWFuZDogKCkgPT4gUXVlcnlDb21tYW5kLFxuICBTY2FuQ29tbWFuZDogKCkgPT4gU2NhbkNvbW1hbmQsXG4gIFRyYW5zYWN0R2V0Q29tbWFuZDogKCkgPT4gVHJhbnNhY3RHZXRDb21tYW5kLFxuICBUcmFuc2FjdFdyaXRlQ29tbWFuZDogKCkgPT4gVHJhbnNhY3RXcml0ZUNvbW1hbmQsXG4gIFVwZGF0ZUNvbW1hbmQ6ICgpID0+IFVwZGF0ZUNvbW1hbmQsXG4gIF9fQ2xpZW50OiAoKSA9PiBpbXBvcnRfc21pdGh5X2NsaWVudC5DbGllbnQsXG4gIG1hcnNoYWxsT3B0aW9uczogKCkgPT4gaW1wb3J0X3V0aWxfZHluYW1vZGIubWFyc2hhbGxPcHRpb25zLFxuICBwYWdpbmF0ZVF1ZXJ5OiAoKSA9PiBwYWdpbmF0ZVF1ZXJ5LFxuICBwYWdpbmF0ZVNjYW46ICgpID0+IHBhZ2luYXRlU2NhbixcbiAgdW5tYXJzaGFsbE9wdGlvbnM6ICgpID0+IGltcG9ydF91dGlsX2R5bmFtb2RiLnVubWFyc2hhbGxPcHRpb25zXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xuXG4vLyBzcmMvY29tbWFuZHMvQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZC50c1xudmFyIGltcG9ydF9jbGllbnRfZHluYW1vZGIgPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCIpO1xuXG5cbi8vIHNyYy9iYXNlQ29tbWFuZC9EeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZC50c1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NvcmVcIik7XG52YXIgaW1wb3J0X3NtaXRoeV9jbGllbnQgPSByZXF1aXJlKFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCIpO1xuXG4vLyBzcmMvY29tbWFuZHMvdXRpbHMudHNcbnZhciBpbXBvcnRfdXRpbF9keW5hbW9kYiA9IHJlcXVpcmUoXCJAYXdzLXNkay91dGlsLWR5bmFtb2RiXCIpO1xudmFyIFNFTEYgPSBudWxsO1xudmFyIEFMTF9WQUxVRVMgPSB7fTtcbnZhciBBTExfTUVNQkVSUyA9IFtdO1xudmFyIE5FWFRfTEVWRUwgPSBcIipcIjtcbnZhciBwcm9jZXNzT2JqID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqLCBwcm9jZXNzRnVuYywga2V5Tm9kZXMpID0+IHtcbiAgaWYgKG9iaiAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKGtleU5vZGVzID09IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzRnVuYyhvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoa2V5Tm9kZXMpO1xuICAgICAgY29uc3QgZ29Ub05leHRMZXZlbCA9IGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09IE5FWFRfTEVWRUw7XG4gICAgICBjb25zdCBzb21lQ2hpbGRyZW4gPSBrZXlzLmxlbmd0aCA+PSAxICYmICFnb1RvTmV4dExldmVsO1xuICAgICAgY29uc3QgYWxsQ2hpbGRyZW4gPSBrZXlzLmxlbmd0aCA9PT0gMDtcbiAgICAgIGlmIChzb21lQ2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NLZXlzSW5PYmoob2JqLCBwcm9jZXNzRnVuYywga2V5Tm9kZXMpO1xuICAgICAgfSBlbHNlIGlmIChhbGxDaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc0FsbEtleXNJbk9iaihvYmosIHByb2Nlc3NGdW5jLCBTRUxGKTtcbiAgICAgIH0gZWxzZSBpZiAoZ29Ub05leHRMZXZlbCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMob2JqID8/IHt9KS5yZWR1Y2UoKGFjYywgW2ssIHZdKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFjY1trXSA9IHByb2Nlc3NPYmoodiwgcHJvY2Vzc0Z1bmMsIGtleU5vZGVzW05FWFRfTEVWRUxdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwgQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59LCBcInByb2Nlc3NPYmpcIik7XG52YXIgcHJvY2Vzc0tleXNJbk9iaiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG9iaiwgcHJvY2Vzc0Z1bmMsIGtleU5vZGVzKSA9PiB7XG4gIGxldCBhY2N1bXVsYXRvcjtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGFjY3VtdWxhdG9yID0gb2JqLmZpbHRlcigoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIik7XG4gIH0gZWxzZSB7XG4gICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhvYmopKSB7XG4gICAgICBpZiAodHlwZW9mIHYgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBhY2N1bXVsYXRvcltrXSA9IHY7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgW25vZGVLZXksIG5vZGVzXSBvZiBPYmplY3QuZW50cmllcyhrZXlOb2RlcykpIHtcbiAgICBpZiAodHlwZW9mIG9ialtub2RlS2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgcHJvY2Vzc2VkVmFsdWUgPSBwcm9jZXNzT2JqKG9ialtub2RlS2V5XSwgcHJvY2Vzc0Z1bmMsIG5vZGVzKTtcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUgIT09IHZvaWQgMCAmJiB0eXBlb2YgcHJvY2Vzc2VkVmFsdWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgYWNjdW11bGF0b3Jbbm9kZUtleV0gPSBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufSwgXCJwcm9jZXNzS2V5c0luT2JqXCIpO1xudmFyIHByb2Nlc3NBbGxLZXlzSW5PYmogPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmosIHByb2Nlc3NGdW5jLCBrZXlOb2RlcykgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5maWx0ZXIoKGl0ZW0pID0+IHR5cGVvZiBpdGVtICE9PSBcImZ1bmN0aW9uXCIpLm1hcCgoaXRlbSkgPT4gcHJvY2Vzc09iaihpdGVtLCBwcm9jZXNzRnVuYywga2V5Tm9kZXMpKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob2JqKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBjb25zdCBwcm9jZXNzZWRWYWx1ZSA9IHByb2Nlc3NPYmoodmFsdWUsIHByb2Nlc3NGdW5jLCBrZXlOb2Rlcyk7XG4gICAgaWYgKHByb2Nlc3NlZFZhbHVlICE9PSB2b2lkIDAgJiYgdHlwZW9mIHByb2Nlc3NlZFZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGFjY1trZXldID0gcHJvY2Vzc2VkVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0sIFwicHJvY2Vzc0FsbEtleXNJbk9ialwiKTtcbnZhciBtYXJzaGFsbElucHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqLCBrZXlOb2Rlcywgb3B0aW9ucykgPT4ge1xuICBjb25zdCBtYXJzaGFsbEZ1bmMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0b01hcnNoYWxsKSA9PiAoMCwgaW1wb3J0X3V0aWxfZHluYW1vZGIubWFyc2hhbGwpKHRvTWFyc2hhbGwsIG9wdGlvbnMpLCBcIm1hcnNoYWxsRnVuY1wiKTtcbiAgcmV0dXJuIHByb2Nlc3NLZXlzSW5PYmoob2JqLCBtYXJzaGFsbEZ1bmMsIGtleU5vZGVzKTtcbn0sIFwibWFyc2hhbGxJbnB1dFwiKTtcbnZhciB1bm1hcnNoYWxsT3V0cHV0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob2JqLCBrZXlOb2Rlcywgb3B0aW9ucykgPT4ge1xuICBjb25zdCB1bm1hcnNoYWxsRnVuYyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRvTWFyc2hhbGwpID0+ICgwLCBpbXBvcnRfdXRpbF9keW5hbW9kYi51bm1hcnNoYWxsKSh0b01hcnNoYWxsLCBvcHRpb25zKSwgXCJ1bm1hcnNoYWxsRnVuY1wiKTtcbiAgcmV0dXJuIHByb2Nlc3NLZXlzSW5PYmoob2JqLCB1bm1hcnNoYWxsRnVuYywga2V5Tm9kZXMpO1xufSwgXCJ1bm1hcnNoYWxsT3V0cHV0XCIpO1xuXG4vLyBzcmMvYmFzZUNvbW1hbmQvRHluYW1vREJEb2N1bWVudENsaWVudENvbW1hbmQudHNcbnZhciBEeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ29tbWFuZCB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRHluYW1vREJEb2N1bWVudENsaWVudENvbW1hbmRcIik7XG4gIH1cbiAgYWRkTWFyc2hhbGxpbmdNaWRkbGV3YXJlKGNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCB7IG1hcnNoYWxsT3B0aW9uczogbWFyc2hhbGxPcHRpb25zMyA9IHt9LCB1bm1hcnNoYWxsT3B0aW9uczogdW5tYXJzaGFsbE9wdGlvbnMzID0ge30gfSA9IGNvbmZpZ3VyYXRpb24udHJhbnNsYXRlQ29uZmlnIHx8IHt9O1xuICAgIG1hcnNoYWxsT3B0aW9uczMuY29udmVydFRvcExldmVsQ29udGFpbmVyID0gbWFyc2hhbGxPcHRpb25zMy5jb252ZXJ0VG9wTGV2ZWxDb250YWluZXIgPz8gdHJ1ZTtcbiAgICB1bm1hcnNoYWxsT3B0aW9uczMuY29udmVydFdpdGhvdXRNYXBXcmFwcGVyID0gdW5tYXJzaGFsbE9wdGlvbnMzLmNvbnZlcnRXaXRob3V0TWFwV3JhcHBlciA/PyB0cnVlO1xuICAgIHRoaXMuY2xpZW50Q29tbWFuZC5taWRkbGV3YXJlU3RhY2suYWRkUmVsYXRpdmVUbyhcbiAgICAgIChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgICAgICAoMCwgaW1wb3J0X2NvcmUuc2V0RmVhdHVyZSkoY29udGV4dCwgXCJEREJfTUFQUEVSXCIsIFwiZFwiKTtcbiAgICAgICAgYXJncy5pbnB1dCA9IG1hcnNoYWxsSW5wdXQoYXJncy5pbnB1dCwgdGhpcy5pbnB1dEtleU5vZGVzLCBtYXJzaGFsbE9wdGlvbnMzKTtcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkRvY3VtZW50TWFyc2hhbGxcIixcbiAgICAgICAgcmVsYXRpb246IFwiYmVmb3JlXCIsXG4gICAgICAgIHRvTWlkZGxld2FyZTogXCJzZXJpYWxpemVyTWlkZGxld2FyZVwiLFxuICAgICAgICBvdmVycmlkZTogdHJ1ZVxuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5jbGllbnRDb21tYW5kLm1pZGRsZXdhcmVTdGFjay5hZGRSZWxhdGl2ZVRvKFxuICAgICAgKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgICAgIGRlc2VyaWFsaXplZC5vdXRwdXQgPSB1bm1hcnNoYWxsT3V0cHV0KGRlc2VyaWFsaXplZC5vdXRwdXQsIHRoaXMub3V0cHV0S2V5Tm9kZXMsIHVubWFyc2hhbGxPcHRpb25zMyk7XG4gICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZWQ7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkRvY3VtZW50VW5tYXJzaGFsbFwiLFxuICAgICAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICAgICAgdG9NaWRkbGV3YXJlOiBcImRlc2VyaWFsaXplck1pZGRsZXdhcmVcIixcbiAgICAgICAgb3ZlcnJpZGU6IHRydWVcbiAgICAgIH1cbiAgICApO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZC50c1xudmFyIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmNsaWVudENvbW1hbmQgPSBuZXcgaW1wb3J0X2NsaWVudF9keW5hbW9kYi5CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kKHRoaXMuaW5wdXQpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gdGhpcy5jbGllbnRDb21tYW5kLm1pZGRsZXdhcmVTdGFjaztcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBTdGF0ZW1lbnRzOiB7XG4gICAgICBcIipcIjoge1xuICAgICAgICBQYXJhbWV0ZXJzOiBBTExfTUVNQkVSU1xuICAgICAgICAvLyBzZXQvbGlzdCBvZiBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgb3V0cHV0S2V5Tm9kZXMgPSB7XG4gICAgUmVzcG9uc2VzOiB7XG4gICAgICBcIipcIjoge1xuICAgICAgICBFcnJvcjoge1xuICAgICAgICAgIEl0ZW06IEFMTF9WQUxVRVNcbiAgICAgICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgICB9LFxuICAgICAgICBJdGVtOiBBTExfVkFMVUVTXG4gICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjbGllbnRDb21tYW5kO1xuICBtaWRkbGV3YXJlU3RhY2s7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgdGhpcy5hZGRNYXJzaGFsbGluZ01pZGRsZXdhcmUoY29uZmlndXJhdGlvbik7XG4gICAgY29uc3Qgc3RhY2sgPSBjbGllbnRTdGFjay5jb25jYXQodGhpcy5taWRkbGV3YXJlU3RhY2spO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNsaWVudENvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoc3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiBoYW5kbGVyKHRoaXMuY2xpZW50Q29tbWFuZCk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9CYXRjaEdldENvbW1hbmQudHNcblxuXG52YXIgQmF0Y2hHZXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5jbGllbnRDb21tYW5kID0gbmV3IGltcG9ydF9jbGllbnRfZHluYW1vZGIuQmF0Y2hHZXRJdGVtQ29tbWFuZCh0aGlzLmlucHV0KTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9IHRoaXMuY2xpZW50Q29tbWFuZC5taWRkbGV3YXJlU3RhY2s7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJCYXRjaEdldENvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBSZXF1ZXN0SXRlbXM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIEtleXM6IHtcbiAgICAgICAgICBcIipcIjogQUxMX1ZBTFVFU1xuICAgICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIG91dHB1dEtleU5vZGVzID0ge1xuICAgIFJlc3BvbnNlczoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgXCIqXCI6IEFMTF9WQUxVRVNcbiAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgIH1cbiAgICB9LFxuICAgIFVucHJvY2Vzc2VkS2V5czoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgS2V5czoge1xuICAgICAgICAgIFwiKlwiOiBBTExfVkFMVUVTXG4gICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY2xpZW50Q29tbWFuZDtcbiAgbWlkZGxld2FyZVN0YWNrO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuYWRkTWFyc2hhbGxpbmdNaWRkbGV3YXJlKGNvbmZpZ3VyYXRpb24pO1xuICAgIGNvbnN0IHN0YWNrID0gY2xpZW50U3RhY2suY29uY2F0KHRoaXMubWlkZGxld2FyZVN0YWNrKTtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5jbGllbnRDb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKHN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4gaGFuZGxlcih0aGlzLmNsaWVudENvbW1hbmQpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvQmF0Y2hXcml0ZUNvbW1hbmQudHNcblxuXG52YXIgQmF0Y2hXcml0ZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmNsaWVudENvbW1hbmQgPSBuZXcgaW1wb3J0X2NsaWVudF9keW5hbW9kYi5CYXRjaFdyaXRlSXRlbUNvbW1hbmQodGhpcy5pbnB1dCk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sgPSB0aGlzLmNsaWVudENvbW1hbmQubWlkZGxld2FyZVN0YWNrO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiQmF0Y2hXcml0ZUNvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBSZXF1ZXN0SXRlbXM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgUHV0UmVxdWVzdDoge1xuICAgICAgICAgICAgSXRlbTogQUxMX1ZBTFVFU1xuICAgICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIERlbGV0ZVJlcXVlc3Q6IHtcbiAgICAgICAgICAgIEtleTogQUxMX1ZBTFVFU1xuICAgICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIG91dHB1dEtleU5vZGVzID0ge1xuICAgIFVucHJvY2Vzc2VkSXRlbXM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgUHV0UmVxdWVzdDoge1xuICAgICAgICAgICAgSXRlbTogQUxMX1ZBTFVFU1xuICAgICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIERlbGV0ZVJlcXVlc3Q6IHtcbiAgICAgICAgICAgIEtleTogQUxMX1ZBTFVFU1xuICAgICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIEl0ZW1Db2xsZWN0aW9uTWV0cmljczoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgXCIqXCI6IHtcbiAgICAgICAgICBJdGVtQ29sbGVjdGlvbktleTogQUxMX1ZBTFVFU1xuICAgICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNsaWVudENvbW1hbmQ7XG4gIG1pZGRsZXdhcmVTdGFjaztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFkZE1hcnNoYWxsaW5nTWlkZGxld2FyZShjb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2xpZW50Q29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IGhhbmRsZXIodGhpcy5jbGllbnRDb21tYW5kKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0RlbGV0ZUNvbW1hbmQudHNcblxuXG52YXIgRGVsZXRlQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgRHluYW1vREJEb2N1bWVudENsaWVudENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMuY2xpZW50Q29tbWFuZCA9IG5ldyBpbXBvcnRfY2xpZW50X2R5bmFtb2RiLkRlbGV0ZUl0ZW1Db21tYW5kKHRoaXMuaW5wdXQpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gdGhpcy5jbGllbnRDb21tYW5kLm1pZGRsZXdhcmVTdGFjaztcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkRlbGV0ZUNvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBLZXk6IEFMTF9WQUxVRVMsXG4gICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICBFeHBlY3RlZDoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgVmFsdWU6IFNFTEYsXG4gICAgICAgIEF0dHJpYnV0ZVZhbHVlTGlzdDogQUxMX01FTUJFUlNcbiAgICAgICAgLy8gc2V0L2xpc3Qgb2YgQXR0cmlidXRlVmFsdWVcbiAgICAgIH1cbiAgICB9LFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IEFMTF9WQUxVRVNcbiAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICB9O1xuICBvdXRwdXRLZXlOb2RlcyA9IHtcbiAgICBBdHRyaWJ1dGVzOiBBTExfVkFMVUVTLFxuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiB7XG4gICAgICBJdGVtQ29sbGVjdGlvbktleTogQUxMX1ZBTFVFU1xuICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICB9XG4gIH07XG4gIGNsaWVudENvbW1hbmQ7XG4gIG1pZGRsZXdhcmVTdGFjaztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFkZE1hcnNoYWxsaW5nTWlkZGxld2FyZShjb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2xpZW50Q29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IGhhbmRsZXIodGhpcy5jbGllbnRDb21tYW5kKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0V4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLnRzXG5cblxudmFyIEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5jbGllbnRDb21tYW5kID0gbmV3IGltcG9ydF9jbGllbnRfZHluYW1vZGIuRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQodGhpcy5pbnB1dCk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sgPSB0aGlzLmNsaWVudENvbW1hbmQubWlkZGxld2FyZVN0YWNrO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBQYXJhbWV0ZXJzOiBBTExfTUVNQkVSU1xuICAgIC8vIHNldC9saXN0IG9mIEF0dHJpYnV0ZVZhbHVlXG4gIH07XG4gIG91dHB1dEtleU5vZGVzID0ge1xuICAgIEl0ZW1zOiB7XG4gICAgICBcIipcIjogQUxMX1ZBTFVFU1xuICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICB9LFxuICAgIExhc3RFdmFsdWF0ZWRLZXk6IEFMTF9WQUxVRVNcbiAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICB9O1xuICBjbGllbnRDb21tYW5kO1xuICBtaWRkbGV3YXJlU3RhY2s7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgdGhpcy5hZGRNYXJzaGFsbGluZ01pZGRsZXdhcmUoY29uZmlndXJhdGlvbik7XG4gICAgY29uc3Qgc3RhY2sgPSBjbGllbnRTdGFjay5jb25jYXQodGhpcy5taWRkbGV3YXJlU3RhY2spO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNsaWVudENvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoc3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiBoYW5kbGVyKHRoaXMuY2xpZW50Q29tbWFuZCk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9FeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kLnRzXG5cblxudmFyIEV4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmNsaWVudENvbW1hbmQgPSBuZXcgaW1wb3J0X2NsaWVudF9keW5hbW9kYi5FeGVjdXRlVHJhbnNhY3Rpb25Db21tYW5kKHRoaXMuaW5wdXQpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gdGhpcy5jbGllbnRDb21tYW5kLm1pZGRsZXdhcmVTdGFjaztcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkV4ZWN1dGVUcmFuc2FjdGlvbkNvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBUcmFuc2FjdFN0YXRlbWVudHM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIFBhcmFtZXRlcnM6IEFMTF9NRU1CRVJTXG4gICAgICAgIC8vIHNldC9saXN0IG9mIEF0dHJpYnV0ZVZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9O1xuICBvdXRwdXRLZXlOb2RlcyA9IHtcbiAgICBSZXNwb25zZXM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIEl0ZW06IEFMTF9WQUxVRVNcbiAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNsaWVudENvbW1hbmQ7XG4gIG1pZGRsZXdhcmVTdGFjaztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFkZE1hcnNoYWxsaW5nTWlkZGxld2FyZShjb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2xpZW50Q29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IGhhbmRsZXIodGhpcy5jbGllbnRDb21tYW5kKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL0dldENvbW1hbmQudHNcblxuXG52YXIgR2V0Q29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgRHluYW1vREJEb2N1bWVudENsaWVudENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMuY2xpZW50Q29tbWFuZCA9IG5ldyBpbXBvcnRfY2xpZW50X2R5bmFtb2RiLkdldEl0ZW1Db21tYW5kKHRoaXMuaW5wdXQpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gdGhpcy5jbGllbnRDb21tYW5kLm1pZGRsZXdhcmVTdGFjaztcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkdldENvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBLZXk6IEFMTF9WQUxVRVNcbiAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICB9O1xuICBvdXRwdXRLZXlOb2RlcyA9IHtcbiAgICBJdGVtOiBBTExfVkFMVUVTXG4gICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgfTtcbiAgY2xpZW50Q29tbWFuZDtcbiAgbWlkZGxld2FyZVN0YWNrO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuYWRkTWFyc2hhbGxpbmdNaWRkbGV3YXJlKGNvbmZpZ3VyYXRpb24pO1xuICAgIGNvbnN0IHN0YWNrID0gY2xpZW50U3RhY2suY29uY2F0KHRoaXMubWlkZGxld2FyZVN0YWNrKTtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5jbGllbnRDb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKHN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4gaGFuZGxlcih0aGlzLmNsaWVudENvbW1hbmQpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbWFuZHMvUHV0Q29tbWFuZC50c1xuXG5cbnZhciBQdXRDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5jbGllbnRDb21tYW5kID0gbmV3IGltcG9ydF9jbGllbnRfZHluYW1vZGIuUHV0SXRlbUNvbW1hbmQodGhpcy5pbnB1dCk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sgPSB0aGlzLmNsaWVudENvbW1hbmQubWlkZGxld2FyZVN0YWNrO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiUHV0Q29tbWFuZFwiKTtcbiAgfVxuICBpbnB1dEtleU5vZGVzID0ge1xuICAgIEl0ZW06IEFMTF9WQUxVRVMsXG4gICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICBFeHBlY3RlZDoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgVmFsdWU6IFNFTEYsXG4gICAgICAgIEF0dHJpYnV0ZVZhbHVlTGlzdDogQUxMX01FTUJFUlNcbiAgICAgICAgLy8gc2V0L2xpc3Qgb2YgQXR0cmlidXRlVmFsdWVcbiAgICAgIH1cbiAgICB9LFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IEFMTF9WQUxVRVNcbiAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICB9O1xuICBvdXRwdXRLZXlOb2RlcyA9IHtcbiAgICBBdHRyaWJ1dGVzOiBBTExfVkFMVUVTLFxuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzOiB7XG4gICAgICBJdGVtQ29sbGVjdGlvbktleTogQUxMX1ZBTFVFU1xuICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICB9XG4gIH07XG4gIGNsaWVudENvbW1hbmQ7XG4gIG1pZGRsZXdhcmVTdGFjaztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFkZE1hcnNoYWxsaW5nTWlkZGxld2FyZShjb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2xpZW50Q29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IGhhbmRsZXIodGhpcy5jbGllbnRDb21tYW5kKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1F1ZXJ5Q29tbWFuZC50c1xuXG5cbnZhciBRdWVyeUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmNsaWVudENvbW1hbmQgPSBuZXcgaW1wb3J0X2NsaWVudF9keW5hbW9kYi5RdWVyeUNvbW1hbmQodGhpcy5pbnB1dCk7XG4gICAgdGhpcy5taWRkbGV3YXJlU3RhY2sgPSB0aGlzLmNsaWVudENvbW1hbmQubWlkZGxld2FyZVN0YWNrO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiUXVlcnlDb21tYW5kXCIpO1xuICB9XG4gIGlucHV0S2V5Tm9kZXMgPSB7XG4gICAgS2V5Q29uZGl0aW9uczoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgQXR0cmlidXRlVmFsdWVMaXN0OiBBTExfTUVNQkVSU1xuICAgICAgICAvLyBzZXQvbGlzdCBvZiBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgUXVlcnlGaWx0ZXI6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIEF0dHJpYnV0ZVZhbHVlTGlzdDogQUxMX01FTUJFUlNcbiAgICAgICAgLy8gc2V0L2xpc3Qgb2YgQXR0cmlidXRlVmFsdWVcbiAgICAgIH1cbiAgICB9LFxuICAgIEV4Y2x1c2l2ZVN0YXJ0S2V5OiBBTExfVkFMVUVTLFxuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogQUxMX1ZBTFVFU1xuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gIH07XG4gIG91dHB1dEtleU5vZGVzID0ge1xuICAgIEl0ZW1zOiB7XG4gICAgICBcIipcIjogQUxMX1ZBTFVFU1xuICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICB9LFxuICAgIExhc3RFdmFsdWF0ZWRLZXk6IEFMTF9WQUxVRVNcbiAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICB9O1xuICBjbGllbnRDb21tYW5kO1xuICBtaWRkbGV3YXJlU3RhY2s7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgdGhpcy5hZGRNYXJzaGFsbGluZ01pZGRsZXdhcmUoY29uZmlndXJhdGlvbik7XG4gICAgY29uc3Qgc3RhY2sgPSBjbGllbnRTdGFjay5jb25jYXQodGhpcy5taWRkbGV3YXJlU3RhY2spO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNsaWVudENvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoc3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiBoYW5kbGVyKHRoaXMuY2xpZW50Q29tbWFuZCk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9TY2FuQ29tbWFuZC50c1xuXG5cbnZhciBTY2FuQ29tbWFuZCA9IGNsYXNzIGV4dGVuZHMgRHluYW1vREJEb2N1bWVudENsaWVudENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMuY2xpZW50Q29tbWFuZCA9IG5ldyBpbXBvcnRfY2xpZW50X2R5bmFtb2RiLlNjYW5Db21tYW5kKHRoaXMuaW5wdXQpO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gdGhpcy5jbGllbnRDb21tYW5kLm1pZGRsZXdhcmVTdGFjaztcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlNjYW5Db21tYW5kXCIpO1xuICB9XG4gIGlucHV0S2V5Tm9kZXMgPSB7XG4gICAgU2NhbkZpbHRlcjoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgQXR0cmlidXRlVmFsdWVMaXN0OiBBTExfTUVNQkVSU1xuICAgICAgICAvLyBzZXQvbGlzdCBvZiBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgRXhjbHVzaXZlU3RhcnRLZXk6IEFMTF9WQUxVRVMsXG4gICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBBTExfVkFMVUVTXG4gICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgfTtcbiAgb3V0cHV0S2V5Tm9kZXMgPSB7XG4gICAgSXRlbXM6IHtcbiAgICAgIFwiKlwiOiBBTExfVkFMVUVTXG4gICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgIH0sXG4gICAgTGFzdEV2YWx1YXRlZEtleTogQUxMX1ZBTFVFU1xuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gIH07XG4gIGNsaWVudENvbW1hbmQ7XG4gIG1pZGRsZXdhcmVTdGFjaztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFkZE1hcnNoYWxsaW5nTWlkZGxld2FyZShjb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2xpZW50Q29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IGhhbmRsZXIodGhpcy5jbGllbnRDb21tYW5kKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1RyYW5zYWN0R2V0Q29tbWFuZC50c1xuXG5cbnZhciBUcmFuc2FjdEdldENvbW1hbmQgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmNsaWVudENvbW1hbmQgPSBuZXcgaW1wb3J0X2NsaWVudF9keW5hbW9kYi5UcmFuc2FjdEdldEl0ZW1zQ29tbWFuZCh0aGlzLmlucHV0KTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9IHRoaXMuY2xpZW50Q29tbWFuZC5taWRkbGV3YXJlU3RhY2s7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJUcmFuc2FjdEdldENvbW1hbmRcIik7XG4gIH1cbiAgaW5wdXRLZXlOb2RlcyA9IHtcbiAgICBUcmFuc2FjdEl0ZW1zOiB7XG4gICAgICBcIipcIjoge1xuICAgICAgICBHZXQ6IHtcbiAgICAgICAgICBLZXk6IEFMTF9WQUxVRVNcbiAgICAgICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBvdXRwdXRLZXlOb2RlcyA9IHtcbiAgICBSZXNwb25zZXM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIEl0ZW06IEFMTF9WQUxVRVNcbiAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNsaWVudENvbW1hbmQ7XG4gIG1pZGRsZXdhcmVTdGFjaztcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB0aGlzLmFkZE1hcnNoYWxsaW5nTWlkZGxld2FyZShjb25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2xpZW50Q29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IGhhbmRsZXIodGhpcy5jbGllbnRDb21tYW5kKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1hbmRzL1RyYW5zYWN0V3JpdGVDb21tYW5kLnRzXG5cblxudmFyIFRyYW5zYWN0V3JpdGVDb21tYW5kID0gY2xhc3MgZXh0ZW5kcyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50Q29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5jbGllbnRDb21tYW5kID0gbmV3IGltcG9ydF9jbGllbnRfZHluYW1vZGIuVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZCh0aGlzLmlucHV0KTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9IHRoaXMuY2xpZW50Q29tbWFuZC5taWRkbGV3YXJlU3RhY2s7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJUcmFuc2FjdFdyaXRlQ29tbWFuZFwiKTtcbiAgfVxuICBpbnB1dEtleU5vZGVzID0ge1xuICAgIFRyYW5zYWN0SXRlbXM6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIENvbmRpdGlvbkNoZWNrOiB7XG4gICAgICAgICAgS2V5OiBBTExfVkFMVUVTLFxuICAgICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogQUxMX1ZBTFVFU1xuICAgICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIFB1dDoge1xuICAgICAgICAgIEl0ZW06IEFMTF9WQUxVRVMsXG4gICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBBTExfVkFMVUVTXG4gICAgICAgICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgRGVsZXRlOiB7XG4gICAgICAgICAgS2V5OiBBTExfVkFMVUVTLFxuICAgICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogQUxMX1ZBTFVFU1xuICAgICAgICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIFVwZGF0ZToge1xuICAgICAgICAgIEtleTogQUxMX1ZBTFVFUyxcbiAgICAgICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IEFMTF9WQUxVRVNcbiAgICAgICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBvdXRwdXRLZXlOb2RlcyA9IHtcbiAgICBJdGVtQ29sbGVjdGlvbk1ldHJpY3M6IHtcbiAgICAgIFwiKlwiOiB7XG4gICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgSXRlbUNvbGxlY3Rpb25LZXk6IEFMTF9WQUxVRVNcbiAgICAgICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjbGllbnRDb21tYW5kO1xuICBtaWRkbGV3YXJlU3RhY2s7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgdGhpcy5hZGRNYXJzaGFsbGluZ01pZGRsZXdhcmUoY29uZmlndXJhdGlvbik7XG4gICAgY29uc3Qgc3RhY2sgPSBjbGllbnRTdGFjay5jb25jYXQodGhpcy5taWRkbGV3YXJlU3RhY2spO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNsaWVudENvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoc3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiBoYW5kbGVyKHRoaXMuY2xpZW50Q29tbWFuZCk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tYW5kcy9VcGRhdGVDb21tYW5kLnRzXG5cblxudmFyIFVwZGF0ZUNvbW1hbmQgPSBjbGFzcyBleHRlbmRzIER5bmFtb0RCRG9jdW1lbnRDbGllbnRDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmNsaWVudENvbW1hbmQgPSBuZXcgaW1wb3J0X2NsaWVudF9keW5hbW9kYi5VcGRhdGVJdGVtQ29tbWFuZCh0aGlzLmlucHV0KTtcbiAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9IHRoaXMuY2xpZW50Q29tbWFuZC5taWRkbGV3YXJlU3RhY2s7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJVcGRhdGVDb21tYW5kXCIpO1xuICB9XG4gIGlucHV0S2V5Tm9kZXMgPSB7XG4gICAgS2V5OiBBTExfVkFMVUVTLFxuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gICAgQXR0cmlidXRlVXBkYXRlczoge1xuICAgICAgXCIqXCI6IHtcbiAgICAgICAgVmFsdWU6IFNFTEZcbiAgICAgIH1cbiAgICB9LFxuICAgIEV4cGVjdGVkOiB7XG4gICAgICBcIipcIjoge1xuICAgICAgICBWYWx1ZTogU0VMRixcbiAgICAgICAgQXR0cmlidXRlVmFsdWVMaXN0OiBBTExfTUVNQkVSU1xuICAgICAgICAvLyBzZXQvbGlzdCBvZiBBdHRyaWJ1dGVWYWx1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogQUxMX1ZBTFVFU1xuICAgIC8vIG1hcCB3aXRoIEF0dHJpYnV0ZVZhbHVlXG4gIH07XG4gIG91dHB1dEtleU5vZGVzID0ge1xuICAgIEF0dHJpYnV0ZXM6IEFMTF9WQUxVRVMsXG4gICAgLy8gbWFwIHdpdGggQXR0cmlidXRlVmFsdWVcbiAgICBJdGVtQ29sbGVjdGlvbk1ldHJpY3M6IHtcbiAgICAgIEl0ZW1Db2xsZWN0aW9uS2V5OiBBTExfVkFMVUVTXG4gICAgICAvLyBtYXAgd2l0aCBBdHRyaWJ1dGVWYWx1ZVxuICAgIH1cbiAgfTtcbiAgY2xpZW50Q29tbWFuZDtcbiAgbWlkZGxld2FyZVN0YWNrO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuYWRkTWFyc2hhbGxpbmdNaWRkbGV3YXJlKGNvbmZpZ3VyYXRpb24pO1xuICAgIGNvbnN0IHN0YWNrID0gY2xpZW50U3RhY2suY29uY2F0KHRoaXMubWlkZGxld2FyZVN0YWNrKTtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5jbGllbnRDb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKHN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4gaGFuZGxlcih0aGlzLmNsaWVudENvbW1hbmQpO1xuICB9XG59O1xuXG4vLyBzcmMvRHluYW1vREJEb2N1bWVudENsaWVudC50c1xuXG52YXIgRHluYW1vREJEb2N1bWVudENsaWVudCA9IGNsYXNzIF9EeW5hbW9EQkRvY3VtZW50Q2xpZW50IGV4dGVuZHMgaW1wb3J0X3NtaXRoeV9jbGllbnQuQ2xpZW50IHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJEeW5hbW9EQkRvY3VtZW50Q2xpZW50XCIpO1xuICB9XG4gIGNvbmZpZztcbiAgY29uc3RydWN0b3IoY2xpZW50LCB0cmFuc2xhdGVDb25maWcpIHtcbiAgICBzdXBlcihjbGllbnQuY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNsaWVudC5jb25maWc7XG4gICAgdGhpcy5jb25maWcudHJhbnNsYXRlQ29uZmlnID0gdHJhbnNsYXRlQ29uZmlnO1xuICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gY2xpZW50Lm1pZGRsZXdhcmVTdGFjaztcbiAgICBpZiAodGhpcy5jb25maWc/LmNhY2hlTWlkZGxld2FyZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkBhd3Mtc2RrL2xpYi1keW5hbW9kYiAtIGNhY2hlTWlkZGxld2FyZT10cnVlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIER5bmFtb0RCRG9jdW1lbnRDbGllbnQuIFRoaXMgb3B0aW9uIG11c3QgYmUgc2V0IHRvIGZhbHNlLlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZnJvbShjbGllbnQsIHRyYW5zbGF0ZUNvbmZpZykge1xuICAgIHJldHVybiBuZXcgX0R5bmFtb0RCRG9jdW1lbnRDbGllbnQoY2xpZW50LCB0cmFuc2xhdGVDb25maWcpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gIH1cbn07XG5cbi8vIHNyYy9EeW5hbW9EQkRvY3VtZW50LnRzXG52YXIgRHluYW1vREJEb2N1bWVudCA9IGNsYXNzIF9EeW5hbW9EQkRvY3VtZW50IGV4dGVuZHMgRHluYW1vREJEb2N1bWVudENsaWVudCB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRHluYW1vREJEb2N1bWVudFwiKTtcbiAgfVxuICBzdGF0aWMgZnJvbShjbGllbnQsIHRyYW5zbGF0ZUNvbmZpZykge1xuICAgIHJldHVybiBuZXcgX0R5bmFtb0RCRG9jdW1lbnQoY2xpZW50LCB0cmFuc2xhdGVDb25maWcpO1xuICB9XG4gIGJhdGNoRXhlY3V0ZVN0YXRlbWVudChhcmdzLCBvcHRpb25zT3JDYiwgY2IpIHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2IgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgaHR0cCBvcHRpb25zIGJ1dCBnZXQgJHt0eXBlb2Ygb3B0aW9uc09yQ2J9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IgfHwge30sIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfVxuICB9XG4gIGJhdGNoR2V0KGFyZ3MsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgQmF0Y2hHZXRDb21tYW5kKGFyZ3MpO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0IGh0dHAgb3B0aW9ucyBidXQgZ2V0ICR7dHlwZW9mIG9wdGlvbnNPckNifWApO1xuICAgICAgfVxuICAgICAgdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiIHx8IHt9LCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IpO1xuICAgIH1cbiAgfVxuICBiYXRjaFdyaXRlKGFyZ3MsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgQmF0Y2hXcml0ZUNvbW1hbmQoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2IgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgaHR0cCBvcHRpb25zIGJ1dCBnZXQgJHt0eXBlb2Ygb3B0aW9uc09yQ2J9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IgfHwge30sIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfVxuICB9XG4gIGRlbGV0ZShhcmdzLCBvcHRpb25zT3JDYiwgY2IpIHtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IERlbGV0ZUNvbW1hbmQoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2IgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgaHR0cCBvcHRpb25zIGJ1dCBnZXQgJHt0eXBlb2Ygb3B0aW9uc09yQ2J9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IgfHwge30sIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfVxuICB9XG4gIGV4ZWN1dGVTdGF0ZW1lbnQoYXJncywgb3B0aW9uc09yQ2IsIGNiKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBFeGVjdXRlU3RhdGVtZW50Q29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbiAgZXhlY3V0ZVRyYW5zYWN0aW9uKGFyZ3MsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgRXhlY3V0ZVRyYW5zYWN0aW9uQ29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbiAgZ2V0KGFyZ3MsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0Q29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbiAgcHV0KGFyZ3MsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0Q29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbiAgcXVlcnkoYXJncywgb3B0aW9uc09yQ2IsIGNiKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBRdWVyeUNvbW1hbmQoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2IgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgaHR0cCBvcHRpb25zIGJ1dCBnZXQgJHt0eXBlb2Ygb3B0aW9uc09yQ2J9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IgfHwge30sIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfVxuICB9XG4gIHNjYW4oYXJncywgb3B0aW9uc09yQ2IsIGNiKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBTY2FuQ29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbiAgdHJhbnNhY3RHZXQoYXJncywgb3B0aW9uc09yQ2IsIGNiKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBUcmFuc2FjdEdldENvbW1hbmQoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2IgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgaHR0cCBvcHRpb25zIGJ1dCBnZXQgJHt0eXBlb2Ygb3B0aW9uc09yQ2J9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNlbmQoY29tbWFuZCwgb3B0aW9uc09yQ2IgfHwge30sIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfVxuICB9XG4gIHRyYW5zYWN0V3JpdGUoYXJncywgb3B0aW9uc09yQ2IsIGNiKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBUcmFuc2FjdFdyaXRlQ29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlKGFyZ3MsIG9wdGlvbnNPckNiLCBjYikge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgVXBkYXRlQ29tbWFuZChhcmdzKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdCBodHRwIG9wdGlvbnMgYnV0IGdldCAke3R5cGVvZiBvcHRpb25zT3JDYn1gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiB8fCB7fSwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZW5kKGNvbW1hbmQsIG9wdGlvbnNPckNiKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHNyYy9wYWdpbmF0aW9uL0ludGVyZmFjZXMudHNcbnZhciBpbXBvcnRfdHlwZXMgPSByZXF1aXJlKFwiQHNtaXRoeS90eXBlc1wiKTtcblxuLy8gc3JjL3BhZ2luYXRpb24vUXVlcnlQYWdpbmF0b3IudHNcbnZhciBpbXBvcnRfY29yZTIgPSByZXF1aXJlKFwiQHNtaXRoeS9jb3JlXCIpO1xuXG52YXIgcGFnaW5hdGVRdWVyeSA9ICgwLCBpbXBvcnRfY29yZTIuY3JlYXRlUGFnaW5hdG9yKShEeW5hbW9EQkRvY3VtZW50Q2xpZW50LCBRdWVyeUNvbW1hbmQsIFwiRXhjbHVzaXZlU3RhcnRLZXlcIiwgXCJMYXN0RXZhbHVhdGVkS2V5XCIsIFwiTGltaXRcIik7XG5cbi8vIHNyYy9wYWdpbmF0aW9uL1NjYW5QYWdpbmF0b3IudHNcbnZhciBpbXBvcnRfY29yZTMgPSByZXF1aXJlKFwiQHNtaXRoeS9jb3JlXCIpO1xuXG52YXIgcGFnaW5hdGVTY2FuID0gKDAsIGltcG9ydF9jb3JlMy5jcmVhdGVQYWdpbmF0b3IpKER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIFNjYW5Db21tYW5kLCBcIkV4Y2x1c2l2ZVN0YXJ0S2V5XCIsIFwiTGFzdEV2YWx1YXRlZEtleVwiLCBcIkxpbWl0XCIpO1xuXG4vLyBzcmMvaW5kZXgudHNcblxuXG5cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE51bWJlclZhbHVlLFxuICBEeW5hbW9EQkRvY3VtZW50LFxuICBfX0NsaWVudCxcbiAgRHluYW1vREJEb2N1bWVudENsaWVudCxcbiAgRHluYW1vREJEb2N1bWVudENsaWVudENvbW1hbmQsXG4gICRDb21tYW5kLFxuICBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLFxuICBCYXRjaEdldENvbW1hbmQsXG4gIEJhdGNoV3JpdGVDb21tYW5kLFxuICBEZWxldGVDb21tYW5kLFxuICBFeGVjdXRlU3RhdGVtZW50Q29tbWFuZCxcbiAgRXhlY3V0ZVRyYW5zYWN0aW9uQ29tbWFuZCxcbiAgR2V0Q29tbWFuZCxcbiAgUHV0Q29tbWFuZCxcbiAgUXVlcnlDb21tYW5kLFxuICBTY2FuQ29tbWFuZCxcbiAgVHJhbnNhY3RHZXRDb21tYW5kLFxuICBUcmFuc2FjdFdyaXRlQ29tbWFuZCxcbiAgVXBkYXRlQ29tbWFuZCxcbiAgcGFnaW5hdGVRdWVyeSxcbiAgcGFnaW5hdGVTY2FuXG59KTtcblxuIiwgIi8vIHNyYy9oYW5kbGVycy9yb2xlcy9nZXRBc3NpZ25hYmxlUm9sZXMudHNcclxuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5SGFuZGxlciwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSAnYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IHF1ZXJ5Um9sZXNCeVBhcmVudCB9IGZyb20gJy4uL2xpYi9keW5hbW8nO1xyXG5pbXBvcnQgeyBnZXRDYWxsZXJEZXRhaWxzIH0gZnJvbSAnLi4vbGliL2F1dGhVdGlscyc7IC8vIEltcG9ydCB0aGUgaGVscGVyXHJcblxyXG4vLyBIZWxwZXIgZm9yIEFQSSByZXNwb25zZXNcclxuY29uc3QgcmVzcG9uZCA9IChzdGF0dXNDb2RlOiBudW1iZXIsIHBheWxvYWQ6IGFueSk6IEFQSUdhdGV3YXlQcm94eVJlc3VsdCA9PiAoe1xyXG4gICAgc3RhdHVzQ29kZSxcclxuICAgICBoZWFkZXJzOiB7IC8vIEFkZCBDT1JTIGhlYWRlcnNcclxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxyXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFscyc6IHRydWUsXHJcbiAgICB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXIgZm9yIHJldHJpZXZpbmcgYWxsIGRlc2NlbmRhbnQgcm9sZXMgYXNzaWduYWJsZSBieSB0aGUgY3VycmVudCB1c2VyLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGhhbmRsZXI6IEFQSUdhdGV3YXlQcm94eUhhbmRsZXIgPSBhc3luYyAoZXZlbnQpID0+IHtcclxuICB0cnkge1xyXG4gICAgLy8gLS0tIEdldCBDYWxsZXIgRGV0YWlscyAtLS1cclxuICAgIGNvbnN0IGNhbGxlciA9IGdldENhbGxlckRldGFpbHMoZXZlbnQpO1xyXG4gICAgLy8gVGhpcyBlbmRwb2ludCByZXF1aXJlcyBhdXRoZW50aWNhdGlvbiBkZXRhaWxzIHRvIGRldGVybWluZSBhc3NpZ25hYmxlIHJvbGVzXHJcbiAgICBpZiAoIWNhbGxlci5pc0F1dGhlbnRpY2F0ZWQpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uZCg0MDEsIHsgZXJyb3I6IGNhbGxlci5lcnJvciB8fCAnVW5hdXRob3JpemVkJyB9KTtcclxuICAgIH1cclxuICAgIC8vIFJvb3QgYWRtaW5zIGNhbiBhc3NpZ24gYW55IHJvbGUsIGJ1dCB0aGUgY29uY2VwdCBvZiBcImFzc2lnbmFibGVcIiBtaWdodFxyXG4gICAgLy8gc3RpbGwgbWVhbiByb2xlcyAqYmVsb3cqIHJvb3QgZm9yIHNlbGVjdGlvbiBVSSwgb3IgbWF5YmUgYWxsIHJvbGVzP1xyXG4gICAgLy8gTGV0J3MgYXNzdW1lIGZvciBub3cgcm9vdCBhZG1pbiBzZWVzIGFsbCByb2xlcyBhcyBhc3NpZ25hYmxlLlxyXG4gICAgLy8gSWYgcm9vdCBhZG1pbiBzaG91bGQgb25seSBzZWUgcm9sZXMgYmVsb3cgcm9vdCwgYWRqdXN0IGxvZ2ljLlxyXG4gICAgY29uc3QgeyByb2xlczogY2FsbGVyUm9sZXMsIGlzUm9vdEFkbWluOiBpc0NhbGxlclJvb3RBZG1pbiB9ID0gY2FsbGVyO1xyXG4gICAgY29uc29sZS5sb2coYFtnZXRBc3NpZ25hYmxlUm9sZXNdIENhbGxlcjogJHtjYWxsZXIuZW1haWx9LCBJc1Jvb3Q6ICR7aXNDYWxsZXJSb290QWRtaW59LCBSb2xlczogJHtKU09OLnN0cmluZ2lmeShjYWxsZXJSb2xlcyl9YCk7XHJcbiAgICAvLyAtLS0gRW5kIEdldCBDYWxsZXIgRGV0YWlscyAtLS1cclxuXHJcblxyXG4gICAgLy8gLS0tIENhbGN1bGF0ZSBBc3NpZ25hYmxlIFJvbGVzIC0tLVxyXG4gICAgY29uc3QgYXNzaWduYWJsZTogYW55W10gPSBbXTsgLy8gQXJyYXkgdG8gaG9sZCB0aGUgcm9sZSBvYmplY3RzXHJcbiAgICBjb25zdCB2aXNpdGVkID0gbmV3IFNldDxzdHJpbmc+KCk7IC8vIEtlZXAgdHJhY2sgb2YgdmlzaXRlZCByb2xlcyB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXHJcblxyXG4gICAgLy8gUmVjdXJzaXZlIGZ1bmN0aW9uIHRvIGZpbmQgYWxsIHJvbGVzIGRvd25zdHJlYW0gZnJvbSBhIGdpdmVuIHJvbGUgSURcclxuICAgIGNvbnN0IGZpbmREb3duc3RyZWFtUm9sZXMgPSBhc3luYyAocm9sZUlkOiBzdHJpbmcgfCBudWxsKSA9PiB7IC8vIEFsbG93IG51bGwgZm9yIHRvcC1sZXZlbCBzdGFydFxyXG4gICAgICAgIC8vIEJhc2UgY2FzZTogSWYgcm9sZUlkIGlzIG51bGwvdW5kZWZpbmVkIG9yIGFscmVhZHkgdmlzaXRlZCwgc3RvcCByZWN1cnNpb25cclxuICAgICAgICBpZiAoIXJvbGVJZCB8fCB2aXNpdGVkLmhhcyhyb2xlSWQpKSByZXR1cm47XHJcbiAgICAgICAgdmlzaXRlZC5hZGQocm9sZUlkKTtcclxuXHJcbiAgICAgICAgLy8gUXVlcnkgZm9yIGRpcmVjdCBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCByb2xlSWRcclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGF3YWl0IHF1ZXJ5Um9sZXNCeVBhcmVudChyb2xlSWQpO1xyXG5cclxuICAgICAgICAvLyBBZGQgY2hpbGRyZW4gdG8gdGhlIGFzc2lnbmFibGUgbGlzdCBhbmQgcmVjdXJzZVxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgLy8gRW5zdXJlIHdlIGRvbid0IGFkZCBkdXBsaWNhdGVzIGlmIGhpZXJhcmNoeSBhbGxvd3MgbXVsdGlwbGUgcGF0aHMgdG8gc2FtZSBub2RlXHJcbiAgICAgICAgICAgIGlmICghYXNzaWduYWJsZS5zb21lKHIgPT4gci5pZCA9PT0gY2hpbGQuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgYXNzaWduYWJsZS5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCBmaW5kRG93bnN0cmVhbVJvbGVzKGNoaWxkLmlkKTsgLy8gUmVjdXJzZSBkZWVwZXJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBpZiAoaXNDYWxsZXJSb290QWRtaW4pIHtcclxuICAgICAgICAgLy8gUm9vdCBBZG1pbiBDYXNlOiBGZXRjaCBhbGwgcm9sZXMgc3RhcnRpbmcgZnJvbSB0aGUgZWZmZWN0aXZlIHRvcC1sZXZlbCBwYXJlbnRcclxuICAgICAgICAgLy8gQXNzdW1lcyBxdWVyeVJvbGVzQnlQYXJlbnQgaGFuZGxlcyBmaW5kaW5nIHRvcC1sZXZlbCByb2xlcyAoZS5nLiwgcGFyZW50SWQ9J1JPT1QnKVxyXG4gICAgICAgICBjb25zb2xlLmxvZyhcIltnZXRBc3NpZ25hYmxlUm9sZXNdIFJvb3QgYWRtaW46IEZldGNoaW5nIGFsbCByb2xlcyBzdGFydGluZyBmcm9tIHJvb3QuXCIpO1xyXG4gICAgICAgICBhd2FpdCBmaW5kRG93bnN0cmVhbVJvbGVzKCdST09UJyk7IC8vIFN0YXJ0IHJlY3Vyc2lvbiBmcm9tIHRoZSBzZW50aW5lbCBwYXJlbnQgSURcclxuICAgICAgICAgLy8gTm90ZTogVGhpcyBzdGlsbCByZWxpZXMgb24gcXVlcnlSb2xlc0J5UGFyZW50IGFuZCByZWN1cnNpb24uXHJcbiAgICAgICAgIC8vIEEgbW9yZSBkaXJlY3QgXCJmZXRjaCBhbGwgcm9sZXNcIiBtaWdodCBiZSBuZWVkZWQgaWYgdGhhdCdzIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGZvciByb290LlxyXG4gICAgICAgICAvLyBUaGlzIGNvdWxkIGludm9sdmUgYSBTY2FuIG9uIFJvbGVzVGFibGUgb3IgYSBkZWRpY2F0ZWQgR1NJIGlmIHBlcmZvcm1hbmNlIGlzIGtleS5cclxuICAgICAgICAgLy8gRm9yIG5vdywgdXNpbmcgcmVjdXJzaW9uIG1pcnJvcnMgdGhlIG5vbi1yb290IGxvZ2ljLlxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gTm9uLVJvb3QgQWRtaW4gQ2FzZTogUmVjdXJzZSBzdGFydGluZyBmcm9tIGVhY2ggcm9sZSB0aGUgdXNlciBpcyBkaXJlY3RseSBhc3NpZ25lZFxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbZ2V0QXNzaWduYWJsZVJvbGVzXSBOb24tcm9vdCBhZG1pbjogRmV0Y2hpbmcgcm9sZXMgZG93bnN0cmVhbSBmcm9tICR7SlNPTi5zdHJpbmdpZnkoY2FsbGVyUm9sZXMpfWApO1xyXG4gICAgICAgIGZvciAoY29uc3QgdXNlclJvbGVJZCBvZiBjYWxsZXJSb2xlcykge1xyXG4gICAgICAgICAgICAvLyBGaW5kIHJvbGVzIGRpcmVjdGx5IGJlbG93IHRoZSB1c2VyJ3MgYXNzaWduZWQgcm9sZXNcclxuICAgICAgICAgICAgYXdhaXQgZmluZERvd25zdHJlYW1Sb2xlcyh1c2VyUm9sZUlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAtLS0gRW5kIENhbGN1bGF0ZSBBc3NpZ25hYmxlIFJvbGVzIC0tLVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBbZ2V0QXNzaWduYWJsZVJvbGVzXSBGb3VuZCAke2Fzc2lnbmFibGUubGVuZ3RofSBhc3NpZ25hYmxlIHJvbGVzLmApO1xyXG4gICAgcmV0dXJuIHJlc3BvbmQoMjAwLCB7IHJvbGVzOiBhc3NpZ25hYmxlIH0pO1xyXG5cclxuICB9IGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcignW2dldEFzc2lnbmFibGVSb2xlc10gVW5oYW5kbGVkIGVycm9yOicsIGVycik7XHJcbiAgICByZXR1cm4gcmVzcG9uZCg1MDAsIHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3IgcmV0cmlldmluZyBhc3NpZ25hYmxlIHJvbGVzJyB9KTtcclxuICB9XHJcbn07XHJcbiIsICIvLyBzcmMvbGliL2R5bmFtby50c1xyXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYic7XHJcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIEdldENvbW1hbmQsIFB1dENvbW1hbmQsIFF1ZXJ5Q29tbWFuZCwgVXBkYXRlQ29tbWFuZCwgRGVsZXRlQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2xpYi1keW5hbW9kYic7IC8vIEFkZGVkIFVwZGF0ZUNvbW1hbmQsIERlbGV0ZUNvbW1hbmRcclxuXHJcbi8vIERldGVybWluZSBpZiBydW5uaW5nIGxvY2FsbHkgdmlhIHNlcnZlcmxlc3Mtb2ZmbGluZVxyXG5jb25zdCBJU19PRkZMSU5FID0gcHJvY2Vzcy5lbnYuSVNfT0ZGTElORSA9PT0gJ3RydWUnO1xyXG5jb25zdCBEWU5BTU9EQl9FTkRQT0lOVCA9IHByb2Nlc3MuZW52LkRZTkFNT0RCX0VORFBPSU5UIHx8ICdodHRwOi8vbG9jYWxob3N0OjgwMDAnOyAvLyBVc2UgZW52IHZhciBvciBkZWZhdWx0XHJcblxyXG5jb25zb2xlLmxvZyhgW0R5bmFtb0RCIExpYl0gSW5pdGlhbGl6aW5nIER5bmFtb0RCIENsaWVudC4gSVNfT0ZGTElORT0ke0lTX09GRkxJTkV9LCBFbmRwb2ludD0ke0lTX09GRkxJTkUgPyBEWU5BTU9EQl9FTkRQT0lOVCA6ICdBV1MgRGVmYXVsdCd9YCk7XHJcblxyXG4vLyBDb25kaXRpb25hbGx5IGNvbmZpZ3VyZSB0aGUgRHluYW1vREIgQ2xpZW50XHJcbmNvbnN0IGNsaWVudENvbmZpZyA9IElTX09GRkxJTkVcclxuICA/IHtcclxuICAgICAgLy8gQ29uZmlndXJhdGlvbiBmb3IgRHluYW1vREIgTG9jYWxcclxuICAgICAgZW5kcG9pbnQ6IERZTkFNT0RCX0VORFBPSU5ULFxyXG4gICAgICByZWdpb246ICdsb2NhbGhvc3QnLCAvLyBVc2UgYSBwbGFjZWhvbGRlciByZWdpb24gZm9yIGxvY2FsXHJcbiAgICAgIGNyZWRlbnRpYWxzOiB7XHJcbiAgICAgICAgYWNjZXNzS2V5SWQ6ICdkdW1teUtleUlkJywgLy8gVmFsdWUgZG9lc24ndCBtYXR0ZXIgZm9yIGxvY2FsXHJcbiAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiAnZHVtbXlTZWNyZXRLZXknLCAvLyBWYWx1ZSBkb2Vzbid0IG1hdHRlciBmb3IgbG9jYWxcclxuICAgICAgfSxcclxuICAgIH1cclxuICA6IHtcclxuICAgICAgLy8gQ29uZmlndXJhdGlvbiBmb3IgZGVwbG95ZWQgZW52aXJvbm1lbnQgKHVzZXMgZGVmYXVsdCBTREsgY3JlZGVudGlhbCBjaGFpbilcclxuICAgICAgLy8gcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIC8vIE9wdGlvbmFsbHkgc2V0IHJlZ2lvbiBmcm9tIGVudlxyXG4gICAgfTtcclxuXHJcbmNvbnN0IGNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudChjbGllbnRDb25maWcpO1xyXG5cclxuLy8gRXhwb3J0IHRoZSBEb2N1bWVudENsaWVudCBpbnN0YW5jZSBmb3IgdXNlIGluIGhhbmRsZXJzXHJcbmV4cG9ydCBjb25zdCBkZGIgPSBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LmZyb20oY2xpZW50KTtcclxuXHJcbi8vIC0tLSBIZWxwZXIgRnVuY3Rpb25zIC0tLVxyXG5cclxuLyoqXHJcbiAqIEZldGNoZXMgYSB1c2VyIGl0ZW0gZnJvbSB0aGUgVXNlcnMgdGFibGUgYnkgZW1haWwgKHByaW1hcnkga2V5KS5cclxuICogQHBhcmFtIGVtYWlsIFRoZSBlbWFpbCBvZiB0aGUgdXNlciB0byBmZXRjaC5cclxuICogQHJldHVybnMgVGhlIHVzZXIgaXRlbSBpZiBmb3VuZCwgb3RoZXJ3aXNlIHVuZGVmaW5lZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyQnlFbWFpbChlbWFpbDogc3RyaW5nKSB7XHJcbiAgY29uc3QgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuVVNFUlNfVEFCTEU7XHJcbiAgaWYgKCF0YWJsZU5hbWUpIHRocm93IG5ldyBFcnJvcihcIlVTRVJTX1RBQkxFIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQuXCIpO1xyXG5cclxuICBjb25zdCBjb21tYW5kID0gbmV3IEdldENvbW1hbmQoe1xyXG4gICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXHJcbiAgICBLZXk6IHsgZW1haWwgfSxcclxuICB9KTtcclxuICBjb25zb2xlLmxvZyhgW2dldFVzZXJCeUVtYWlsXSBGZXRjaGluZyB1c2VyOiAke2VtYWlsfSBmcm9tICR7dGFibGVOYW1lfWApO1xyXG4gIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRkYi5zZW5kKGNvbW1hbmQpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0Lkl0ZW07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgIGNvbnNvbGUuZXJyb3IoYFtnZXRVc2VyQnlFbWFpbF0gRXJyb3IgZmV0Y2hpbmcgdXNlciAke2VtYWlsfTpgLCBlcnJvcik7XHJcbiAgICAgICB0aHJvdyBlcnJvcjsgLy8gUmUtdGhyb3cgYWZ0ZXIgbG9nZ2luZ1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEZldGNoZXMgYSByb2xlIGl0ZW0gZnJvbSB0aGUgUm9sZXMgdGFibGUgYnkgSUQgKHByaW1hcnkga2V5KS5cclxuICogQHBhcmFtIHJvbGVJZCBUaGUgSUQgb2YgdGhlIHJvbGUgdG8gZmV0Y2guXHJcbiAqIEByZXR1cm5zIFRoZSByb2xlIGl0ZW0gaWYgZm91bmQsIG90aGVyd2lzZSB1bmRlZmluZWQuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Um9sZUJ5SWQocm9sZUlkOiBzdHJpbmcpIHtcclxuICBjb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5ST0xFU19UQUJMRTtcclxuICBpZiAoIXRhYmxlTmFtZSkgdGhyb3cgbmV3IEVycm9yKFwiUk9MRVNfVEFCTEUgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgbm90IHNldC5cIik7XHJcblxyXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0Q29tbWFuZCh7XHJcbiAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcclxuICAgIEtleTogeyBpZDogcm9sZUlkIH0sXHJcbiAgfSk7XHJcbiAgIGNvbnNvbGUubG9nKGBbZ2V0Um9sZUJ5SWRdIEZldGNoaW5nIHJvbGU6ICR7cm9sZUlkfSBmcm9tICR7dGFibGVOYW1lfWApO1xyXG4gICB0cnkge1xyXG4gICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGRiLnNlbmQoY29tbWFuZCk7XHJcbiAgICAgICByZXR1cm4gcmVzdWx0Lkl0ZW07XHJcbiAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgW2dldFJvbGVCeUlkXSBFcnJvciBmZXRjaGluZyByb2xlICR7cm9sZUlkfTpgLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7IC8vIFJlLXRocm93IGFmdGVyIGxvZ2dpbmdcclxuICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgb3IgcmVwbGFjZXMgYSB1c2VyIGl0ZW0gaW4gdGhlIFVzZXJzIHRhYmxlLlxyXG4gKiBAcGFyYW0gdXNlciBUaGUgdXNlciBvYmplY3QgdG8gcHV0IGludG8gdGhlIHRhYmxlLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1dFVzZXIodXNlcjogYW55KSB7XHJcbiAgIGNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlVTRVJTX1RBQkxFO1xyXG4gICBpZiAoIXRhYmxlTmFtZSkgdGhyb3cgbmV3IEVycm9yKFwiVVNFUlNfVEFCTEUgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgbm90IHNldC5cIik7XHJcblxyXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0Q29tbWFuZCh7XHJcbiAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcclxuICAgIEl0ZW06IHVzZXIsXHJcbiAgfSk7XHJcbiAgIGNvbnNvbGUubG9nKGBbcHV0VXNlcl0gUHV0dGluZyB1c2VyOiAke3VzZXIuZW1haWx9IGludG8gJHt0YWJsZU5hbWV9YCk7XHJcbiAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgZGRiLnNlbmQoY29tbWFuZCk7XHJcbiAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgW3B1dFVzZXJdIEVycm9yIHB1dHRpbmcgdXNlciAke3VzZXIuZW1haWx9OmAsIGVycm9yKTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUXVlcmllcyB0aGUgUm9sZXMgdGFibGUncyBQYXJlbnRJbmRleCBHU0kgdG8gZmluZCBkaXJlY3QgY2hpbGRyZW4gb2YgYSBnaXZlbiBwYXJlbnQgcm9sZSBJRC5cclxuICogQHBhcmFtIHBhcmVudElkIFRoZSBJRCBvZiB0aGUgcGFyZW50IHJvbGUsIG9yIG51bGwgdG8gcXVlcnkgZm9yIHRvcC1sZXZlbCByb2xlcyAoYXNzdW1lcyBwYXJlbnRJZD0nUk9PVCcpLlxyXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBjaGlsZCByb2xlIGl0ZW1zLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5Um9sZXNCeVBhcmVudChwYXJlbnRJZDogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8YW55W10+IHtcclxuICBjb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5ST0xFU19UQUJMRTtcclxuICBpZiAoIXRhYmxlTmFtZSkgdGhyb3cgbmV3IEVycm9yKFwiUk9MRVNfVEFCTEUgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgbm90IHNldC5cIik7XHJcblxyXG4gIGNvbnN0IFRPUF9MRVZFTF9QQVJFTlRfSUQgPSBcIlJPT1RcIjsgLy8gU2VudGluZWwgdmFsdWUgZm9yIHRvcC1sZXZlbCByb2xlc1xyXG4gIGNvbnN0IGVmZmVjdGl2ZVBhcmVudElkID0gcGFyZW50SWQgPT09IG51bGwgPyBUT1BfTEVWRUxfUEFSRU5UX0lEIDogcGFyZW50SWQ7XHJcblxyXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgUXVlcnlDb21tYW5kKHtcclxuICAgIFRhYmxlTmFtZTogdGFibGVOYW1lLFxyXG4gICAgSW5kZXhOYW1lOiAnUGFyZW50SW5kZXgnLCAvLyBBc3N1bWVzIEdTSSBpcyBuYW1lZCAnUGFyZW50SW5kZXgnXHJcbiAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiAncGFyZW50SWQgPSA6cGlkJyxcclxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcclxuICAgICAgJzpwaWQnOiBlZmZlY3RpdmVQYXJlbnRJZCxcclxuICAgIH0sXHJcbiAgfSk7XHJcbiAgIGNvbnNvbGUubG9nKGBbcXVlcnlSb2xlc0J5UGFyZW50XSBRdWVyeWluZyByb2xlcyB3aXRoIHBhcmVudElkOiAke2VmZmVjdGl2ZVBhcmVudElkfSBvbiBpbmRleCBQYXJlbnRJbmRleGApO1xyXG4gICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGRkYi5zZW5kKGNvbW1hbmQpO1xyXG4gICAgICAgIHJldHVybiByZXMuSXRlbXMgPz8gW107XHJcbiAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgW3F1ZXJ5Um9sZXNCeVBhcmVudF0gRXJyb3IgcXVlcnlpbmcgcm9sZXMgZm9yIHBhcmVudCAke2VmZmVjdGl2ZVBhcmVudElkfTpgLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgIH1cclxufVxyXG5cclxuLy8gTm90ZTogVXBkYXRlL0RlbGV0ZSBjb21tYW5kcyBhcmUgb2Z0ZW4gY2FsbGVkIGRpcmVjdGx5IGluIGhhbmRsZXJzXHJcbi8vIGFzIHRoZXkgbWlnaHQgaW52b2x2ZSBtb3JlIGNvbXBsZXggcGFyYW1ldGVycyAoVXBkYXRlRXhwcmVzc2lvbiwgQ29uZGl0aW9uRXhwcmVzc2lvbiBldGMuKVxyXG4vLyBidXQgeW91IGNvdWxkIGFkZCBoZWxwZXJzIGhlcmUgaWYgZGVzaXJlZC5cclxuXHJcbiIsICJleHBvcnQgY2xhc3MgSW52YWxpZFRva2VuRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG5JbnZhbGlkVG9rZW5FcnJvci5wcm90b3R5cGUubmFtZSA9IFwiSW52YWxpZFRva2VuRXJyb3JcIjtcbmZ1bmN0aW9uIGI2NERlY29kZVVuaWNvZGUoc3RyKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChhdG9iKHN0cikucmVwbGFjZSgvKC4pL2csIChtLCBwKSA9PiB7XG4gICAgICAgIGxldCBjb2RlID0gcC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoY29kZS5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICBjb2RlID0gXCIwXCIgKyBjb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIiVcIiArIGNvZGU7XG4gICAgfSkpO1xufVxuZnVuY3Rpb24gYmFzZTY0VXJsRGVjb2RlKHN0cikge1xuICAgIGxldCBvdXRwdXQgPSBzdHIucmVwbGFjZSgvLS9nLCBcIitcIikucmVwbGFjZSgvXy9nLCBcIi9cIik7XG4gICAgc3dpdGNoIChvdXRwdXQubGVuZ3RoICUgNCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgb3V0cHV0ICs9IFwiPT1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBvdXRwdXQgKz0gXCI9XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhc2U2NCBzdHJpbmcgaXMgbm90IG9mIHRoZSBjb3JyZWN0IGxlbmd0aFwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGI2NERlY29kZVVuaWNvZGUob3V0cHV0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gYXRvYihvdXRwdXQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBqd3REZWNvZGUodG9rZW4sIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkVG9rZW5FcnJvcihcIkludmFsaWQgdG9rZW4gc3BlY2lmaWVkOiBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgIH1cbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIGNvbnN0IHBvcyA9IG9wdGlvbnMuaGVhZGVyID09PSB0cnVlID8gMCA6IDE7XG4gICAgY29uc3QgcGFydCA9IHRva2VuLnNwbGl0KFwiLlwiKVtwb3NdO1xuICAgIGlmICh0eXBlb2YgcGFydCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRva2VuRXJyb3IoYEludmFsaWQgdG9rZW4gc3BlY2lmaWVkOiBtaXNzaW5nIHBhcnQgIyR7cG9zICsgMX1gKTtcbiAgICB9XG4gICAgbGV0IGRlY29kZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgZGVjb2RlZCA9IGJhc2U2NFVybERlY29kZShwYXJ0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUb2tlbkVycm9yKGBJbnZhbGlkIHRva2VuIHNwZWNpZmllZDogaW52YWxpZCBiYXNlNjQgZm9yIHBhcnQgIyR7cG9zICsgMX0gKCR7ZS5tZXNzYWdlfSlgKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlZCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkVG9rZW5FcnJvcihgSW52YWxpZCB0b2tlbiBzcGVjaWZpZWQ6IGludmFsaWQganNvbiBmb3IgcGFydCAjJHtwb3MgKyAxfSAoJHtlLm1lc3NhZ2V9KWApO1xuICAgIH1cbn1cbiIsICIvLyBzcmMvbGliL2F1dGhVdGlscy50c1xyXG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBqd3REZWNvZGUgfSBmcm9tICdqd3QtZGVjb2RlJztcclxuXHJcbmNvbnN0IElTX09GRkxJTkUgPSBwcm9jZXNzLmVudi5JU19PRkZMSU5FID09PSAndHJ1ZSc7IC8vIENoZWNrIGlmIHJ1bm5pbmcgbG9jYWxseVxyXG5cclxuLy8gRGVmaW5lIGV4cGVjdGVkIHN0cnVjdHVyZSBvZiB0aGUgZHVtbXkgdG9rZW4gcGF5bG9hZCAob3IgcmVhbCBjbGFpbXMpXHJcbmludGVyZmFjZSBDYWxsZXJDbGFpbXMge1xyXG4gICAgZW1haWw/OiBzdHJpbmc7IC8vIE9wdGlvbmFsLCBtaWdodCBiZSBpbiAnc3ViJyBkZXBlbmRpbmcgb24gY29uZmlnXHJcbiAgICBzdWI/OiBzdHJpbmc7IC8vIFN1YmplY3QsIG9mdGVuIHVzZWQgYXMgdXNlciBJRFxyXG4gICAgJ2N1c3RvbTpyb2xlcyc/OiBzdHJpbmc7IC8vIEpTT04gc3RyaW5nIGFycmF5XHJcbiAgICAnY3VzdG9tOmlzUm9vdEFkbWluJz86ICd0cnVlJyB8ICdmYWxzZSc7XHJcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7IC8vIEFsbG93IG90aGVyIHByb3BlcnRpZXNcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWxsZXJEZXRhaWxzIHtcclxuICAgIGVtYWlsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICByb2xlczogc3RyaW5nW107XHJcbiAgICBpc1Jvb3RBZG1pbjogYm9vbGVhbjtcclxuICAgIGlzQXV0aGVudGljYXRlZDogYm9vbGVhbjsgLy8gRmxhZyB0byBpbmRpY2F0ZSBpZiB3ZSBzdWNjZXNzZnVsbHkgZ290IGRldGFpbHNcclxuICAgIGVycm9yPzogc3RyaW5nOyAvLyBPcHRpb25hbCBlcnJvciBtZXNzYWdlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHRyYWN0cyBjYWxsZXIgZGV0YWlscyAoZW1haWwsIHJvbGVzLCByb290IHN0YXR1cykgZnJvbSBlaXRoZXIgdGhlXHJcbiAqIEFQSSBHYXRld2F5IGF1dGhvcml6ZXIgY29udGV4dCAoZGVwbG95ZWQpIG9yIGEgZHVtbXkgSldUIChsb2NhbCkuXHJcbiAqXHJcbiAqIEBwYXJhbSBldmVudCBUaGUgQVBJR2F0ZXdheVByb3h5RXZlbnQgb2JqZWN0LlxyXG4gKiBAcmV0dXJucyBDYWxsZXJEZXRhaWxzIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWxsZXJEZXRhaWxzKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCk6IENhbGxlckRldGFpbHMge1xyXG4gICAgbGV0IGVtYWlsOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICBsZXQgcm9sZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBsZXQgaXNSb290QWRtaW4gPSBmYWxzZTtcclxuICAgIGxldCBpc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcclxuICAgIGxldCBlcnJvcjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGlmIChJU19PRkZMSU5FKSB7XHJcbiAgICAgICAgLy8gLS0tIExPQ0FMIE1PREUgLS0tXHJcbiAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IGV2ZW50LmhlYWRlcnM/LkF1dGhvcml6YXRpb24gfHwgZXZlbnQuaGVhZGVycz8uYXV0aG9yaXphdGlvbjtcclxuICAgICAgICBpZiAoIWF1dGhIZWFkZXIgfHwgIWF1dGhIZWFkZXIuc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltBdXRoVXRpbHMgLSBMb2NhbF0gTWlzc2luZyBvciBpbnZhbGlkIEF1dGhvcml6YXRpb24gaGVhZGVyLlwiKTtcclxuICAgICAgICAgICAgZXJyb3IgPSAnTWlzc2luZyBvciBpbnZhbGlkIEF1dGhvcml6YXRpb24gaGVhZGVyJztcclxuICAgICAgICAgICAgLy8gUmV0dXJuIG1pbmltYWwgcGVybWlzc2lvbnMgaWYgbm8gdG9rZW4gbG9jYWxseVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR1bW15VG9rZW4gPSBhdXRoSGVhZGVyLnNwbGl0KCcgJylbMV07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWNvZGVkID0gand0RGVjb2RlPENhbGxlckNsYWltcz4oZHVtbXlUb2tlbik7XHJcbiAgICAgICAgICAgICAgICBlbWFpbCA9IGRlY29kZWQuZW1haWwgfHwgZGVjb2RlZC5zdWI7IC8vIFByZWZlciBlbWFpbCwgZmFsbGJhY2sgdG8gc3ViXHJcbiAgICAgICAgICAgICAgICBpc1Jvb3RBZG1pbiA9IGRlY29kZWRbJ2N1c3RvbTppc1Jvb3RBZG1pbiddID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAvLyBTYWZlbHkgcGFyc2Ugcm9sZXNcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9sZXNDbGFpbSA9IGRlY29kZWRbJ2N1c3RvbTpyb2xlcyddO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb2xlc0NsYWltKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJvbGVzID0gSlNPTi5wYXJzZShyb2xlc0NsYWltKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUm9sZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlcyA9IHBhcnNlZFJvbGVzLmZpbHRlcihyID0+IHR5cGVvZiByID09PSAnc3RyaW5nJyk7IC8vIEVuc3VyZSBvbmx5IHN0cmluZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbQXV0aFV0aWxzIC0gTG9jYWxdICdjdXN0b206cm9sZXMnIGNsYWltIGlzIG5vdCBhIHZhbGlkIEpTT04gYXJyYXk6XCIsIHJvbGVzQ2xhaW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbQXV0aFV0aWxzIC0gTG9jYWxdIEVycm9yIHBhcnNpbmcgY3VzdG9tOnJvbGVzIGZyb20gZHVtbXkgdG9rZW46XCIsIHBhcnNlRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJvbGVzIHJlbWFpbnMgZW1wdHkgYXJyYXlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlzQXV0aGVudGljYXRlZCA9IHRydWU7IC8vIFN1Y2Nlc3NmdWxseSBkZWNvZGVkIHRva2VuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0F1dGhVdGlscyAtIExvY2FsXSBEZWNvZGVkIFVzZXI6ICR7ZW1haWx9LCBJc1Jvb3Q6ICR7aXNSb290QWRtaW59LCBSb2xlczogJHtKU09OLnN0cmluZ2lmeShyb2xlcyl9YCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGRlY29kZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0F1dGhVdGlscyAtIExvY2FsXSBFcnJvciBkZWNvZGluZyBkdW1teSB0b2tlbjpcIiwgZGVjb2RlRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSAnSW52YWxpZCBkdW1teSB0b2tlbiBmb3JtYXQnO1xyXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIG1pbmltYWwgcGVybWlzc2lvbnMgaWYgdG9rZW4gaXMgaW52YWxpZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyAtLS0gREVQTE9ZRUQgTU9ERSAtLS1cclxuICAgICAgICBjb25zdCBjbGFpbXMgPSAoZXZlbnQucmVxdWVzdENvbnRleHQuYXV0aG9yaXplciBhcyBhbnkpPy5jbGFpbXMgYXMgQ2FsbGVyQ2xhaW1zIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICghY2xhaW1zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbQXV0aFV0aWxzIC0gUHJvZF0gQ2xhaW1zIG1pc3NpbmcgZnJvbSBhdXRob3JpemVyIGNvbnRleHQhXCIpO1xyXG4gICAgICAgICAgICBlcnJvciA9ICdVbmF1dGhvcml6ZWQ6IE1pc3NpbmcgY2xhaW1zJztcclxuICAgICAgICAgICAgLy8gUmV0dXJuIG1pbmltYWwgcGVybWlzc2lvbnMgaWYgY2xhaW1zIHNvbWVob3cgbWlzc2luZ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVtYWlsID0gY2xhaW1zLmVtYWlsIHx8IGNsYWltcy5zdWI7XHJcbiAgICAgICAgICAgIGlzUm9vdEFkbWluID0gY2xhaW1zWydjdXN0b206aXNSb290QWRtaW4nXSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAvLyBTYWZlbHkgcGFyc2Ugcm9sZXNcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICBjb25zdCByb2xlc0NsYWltID0gY2xhaW1zWydjdXN0b206cm9sZXMnXTtcclxuICAgICAgICAgICAgICAgICBpZiAocm9sZXNDbGFpbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRSb2xlcyA9IEpTT04ucGFyc2Uocm9sZXNDbGFpbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFJvbGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgcm9sZXMgPSBwYXJzZWRSb2xlcy5maWx0ZXIociA9PiB0eXBlb2YgciA9PT0gJ3N0cmluZycpOyAvLyBFbnN1cmUgb25seSBzdHJpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW0F1dGhVdGlscyAtIFByb2RdICdjdXN0b206cm9sZXMnIGNsYWltIGlzIG5vdCBhIHZhbGlkIEpTT04gYXJyYXk6XCIsIHJvbGVzQ2xhaW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0F1dGhVdGlscyAtIFByb2RdIEVycm9yIHBhcnNpbmcgY3VzdG9tOnJvbGVzIGNsYWltOlwiLCBwYXJzZUVycm9yKTtcclxuICAgICAgICAgICAgICAgIC8vIHJvbGVzIHJlbWFpbnMgZW1wdHkgYXJyYXlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQgPSB0cnVlOyAvLyBDbGFpbXMgd2VyZSBwcmVzZW50XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQXV0aFV0aWxzIC0gUHJvZF0gQ2xhaW1zIFVzZXI6ICR7ZW1haWx9LCBJc1Jvb3Q6ICR7aXNSb290QWRtaW59LCBSb2xlczogJHtKU09OLnN0cmluZ2lmeShyb2xlcyl9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IGVtYWlsLCByb2xlcywgaXNSb290QWRtaW4sIGlzQXV0aGVudGljYXRlZCwgZXJyb3IgfTtcclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLGlEQUFBQSxVQUFBQyxTQUFBO0FBQUEsUUFBSUMsYUFBWSxPQUFPO0FBQ3ZCLFFBQUlDLG9CQUFtQixPQUFPO0FBQzlCLFFBQUlDLHFCQUFvQixPQUFPO0FBQy9CLFFBQUlDLGdCQUFlLE9BQU8sVUFBVTtBQUNwQyxRQUFJLFNBQVMsQ0FBQyxRQUFRLFVBQVVILFdBQVUsUUFBUSxRQUFRLEVBQUUsT0FBTyxjQUFjLEtBQUssQ0FBQztBQUN2RixRQUFJSSxZQUFXLENBQUMsUUFBUSxRQUFRO0FBQzlCLGVBQVMsUUFBUTtBQUNmLFFBQUFKLFdBQVUsUUFBUSxNQUFNLEVBQUUsS0FBSyxJQUFJLElBQUksR0FBRyxZQUFZLEtBQUssQ0FBQztBQUFBLElBQ2hFO0FBQ0EsUUFBSUssZUFBYyxDQUFDLElBQUksTUFBTSxRQUFRLFNBQVM7QUFDNUMsVUFBSSxRQUFRLE9BQU8sU0FBUyxZQUFZLE9BQU8sU0FBUyxZQUFZO0FBQ2xFLGlCQUFTLE9BQU9ILG1C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QUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssbUVBQW1FLFlBQVksR0FBRyxTQUFTLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxtRkFBbUYsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsWUFBWSxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsS0FBSyx1Q0FBdUMsWUFBWSxHQUFHLFNBQVMsRUFBRSxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUssMERBQTBELFlBQVksR0FBRyxTQUFTLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyw0REFBNEQsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLDhEQUE4RCxZQUFZLEdBQUcsU0FBUyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sc0VBQXNFLE1BQU0sRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsS0FBSyxxREFBcUQsWUFB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LFVBQVVJLElBQUcsQ0FBQyxDQUFDLEdBQUdiLEdBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHSixJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUNhLElBQUcsY0FBYyxFQUFFLENBQUMsR0FBRyxVQUFVSSxJQUFHLENBQUMsQ0FBQyxHQUFHYixHQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBR0osSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDYSxJQUFHLFlBQVksRUFBRSxDQUFDLEdBQUcsVUFBVUksSUFBRyxDQUFDLENBQUMsR0FBR2IsR0FBRSxHQUFHLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdKLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQ2EsSUFBRyxXQUFXLEVBQUUsQ0FBQyxHQUFHLFVBQVVJLElBQUcsQ0FBQyxDQUFDLEdBQUdiLEdBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHSixJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUNhLElBQUcsV0FBVyxFQUFFLENBQUMsR0FBRyxVQUFVSSxJQUFHLENBQUMsQ0FBQyxHQUFHYixHQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBR0osSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDYSxJQUFHLFdBQVcsRUFBRSxDQUFDLEdBQUcsVUFBVUksSUFBRyxDQUFDLENBQUMsR0FBR2IsR0FBRSxHQUFHLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdKLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQ2EsSUFBRyxXQUFXLEVBQUUsQ0FBQyxHQUFHLFVBQVVJLElBQUcsQ0FBQyxDQUFDLEdBQUdiLEdBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHSixJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUNhLElBQUdWLEVBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVWMsSUFBRyxDQUFDLENBQUMsR0FBR2IsR0FBRSxHQUFHLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdKLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQ2EsSUFBRyxXQUFXLEVBQUUsQ0FBQyxHQUFHLFVBQVVJLElBQUcsQ0FBQyxDQUFDLEdBQUdiLEdBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHSixJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUNhLElBQUcsV0FBVyxFQUFFLENBQUMsR0FBRyxVQUFVSSxJQUFHLENBQUMsQ0FBQyxHQUFHYixHQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBR0osSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDYSxJQUFHLFdBQVcsRUFBRSxDQUFDLEdBQUcsVUFBVUksSUFBRyxDQUFDLENBQUMsR0FBR2IsR0FBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUtDLElBQUcsWUFBWSxFQUFFLGFBQWEsQ0FBQyxFQUFFLE1BQU1KLElBQUcsYUFBYUMsSUFBRyxlQUFlLFdBQVcsQ0FBQyxFQUFFLEdBQUcsU0FBU2dCLEdBQUUsR0FBRyxDQUFDLENBQUMsR0FBR2QsR0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdFLEdBQUUsR0FBRyxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsRUFBRSxZQUFZLEdBQUcsT0FBTyxxRUFBcUUsQ0FBQyxDQUFDLEdBQUdDLEdBQUUsR0FBRyxFQUFFLFlBQVksR0FBRyxPQUFPLDBFQUEwRSxDQUFDLENBQUMsR0FBR0EsR0FBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUtJLElBQUcsWUFBWU8sSUFBRyxTQUFTQSxHQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUdkLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRSxHQUFFLEdBQUcsRUFBRSxZQUFZLENBQUNNLEVBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUNFLEVBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUNNLElBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHckIsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDRCxJQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxrRUFBa0UsWUFBWW9CLElBQUcsU0FBU0EsR0FBRSxHQUFHLENBQUMsQ0FBQyxHQUFHZCxHQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0UsR0FBRSxHQUFHLEVBQUUsT0FBTyxtRkFBbUYsQ0FBQyxDQUFDLEdBQUdDLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRCxHQUFFLEdBQUcsRUFBRSxZQUFZLEdBQUcsT0FBTyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdQLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHRCxFQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHRSxJQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBR1EsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsWUFBWSxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsS0FBSyxzQ0FBc0MsWUFBWVUsSUFBRyxTQUFTQSxHQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUdkLEdBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLLHlEQUF5RCxZQUFZYyxJQUFHLFNBQVNBLEdBQUUsR0FBRyxDQUFDLENBQUMsR0FBR2QsR0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdFLEdBQUUsR0FBRyxFQUFFLE9BQU8sNERBQTRELENBQUMsQ0FBQyxHQUFHQyxHQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0QsR0FBRSxHQUFHLEVBQUUsWUFBWSxHQUFHLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLEtB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LEVBQUUsWUFBWSxDQUFDa0IsSUFBR00sSUFBR0MsSUFBR0gsSUFBR0ksSUFBRyxFQUFFLENBQUMsQ0FBQyxHQUFHN0IsSUFBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBR1EsSUFBRyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVFDLEdBQUUsR0FBR3FCLElBQUdDLElBQUdDLElBQUdDLEVBQUMsR0FBRyxVQUFVQyxJQUFHLENBQUMsQ0FBQyxHQUFHaEMsR0FBRSxHQUFHLEVBQUUsWUFBWSxDQUFDbUIsSUFBR00sSUFBR0MsSUFBR0gsSUFBR0ksSUFBRyxFQUFFLENBQUMsQ0FBQyxHQUFHN0IsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUdPLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxRQUFRSSxHQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBR0gsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdHLEdBQUUsQ0FBQyxHQUFHLFFBQVFGLEdBQUUsR0FBR3FCLElBQUdDLElBQUdDLElBQUdDLEVBQUMsR0FBRyxVQUFVQyxJQUFHLENBQUMsQ0FBQyxHQUFHaEMsR0FBRSxHQUFHLEVBQUUsWUFBWSxDQUFDbUIsSUFBR00sSUFBR0MsSUFBR0gsSUFBR0ksSUFBRyxFQUFFLENBQUMsQ0FBQyxHQUFHN0IsSUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdVLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHWCxFQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLGdFQUFnRSxDQUFDLENBQUMsR0FBR2lCLElBQUcsQ0FBQyxDQUFDLEdBQUdBLEdBQUUsR0FBRyxDQUFDLENBQUMsR0FBR2QsR0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLEdBQUUsR0FBRyxFQUFFLE9BQU8sdURBQXVELENBQUMsQ0FBQyxHQUFHRixHQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0UsR0FBRSxHQUFHLEVBQUUsWUFBWSxHQUFHLE9BQU8sQ0FBQyxFQUFFLFlBQVksR0FBRyxPQUFPLENBQUMsRUFBRSxZQUFZLENBQUMwQixFQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsWUFBWSxDQUFDRCxFQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsT0FBTyx3RkFBd0YsQ0FBQyxDQUFDLEdBQUczQixHQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0UsR0FBRSxHQUFHLEVBQUUsT0FBTyxzSEFBc0gsQ0FBQyxDQUFDLEdBQUdGLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRSxHQUFFLEdBQUd1QixFQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUd2QixHQUFFLEdBQUdtQixFQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUduQixHQUFFLEdBQUdxQixFQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdyQixHQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0EsR0FBRSxHQUFHLEVBQUUsT0FBTyx5Q0FBeUMsQ0FBQyxDQUFDLEdBQUdGLEdBQUUsQ0FBQyxFQUFFO0FBQ3BuRyxJQUFBSCxTQUFRLFVBQVVxQztBQUFBO0FBQUE7OztBQ05sQixJQUFBQyw0QkFBQTtBQUFBLGdGQUFBQyxVQUFBO0FBQUE7QUFDQSxXQUFPLGVBQWVBLFVBQVMsY0FBYyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQzVELElBQUFBLFNBQVEsMEJBQTBCO0FBQ2xDLFFBQU0sbUJBQW1CO0FBQ3pCLFFBQU0sbUJBQW1CO0FBQ3pCLFFBQU0sWUFBWTtBQUNsQixRQUFNQyxTQUFRLElBQUksaUJBQWlCLGNBQWM7QUFBQSxNQUM3QyxNQUFNO0FBQUEsTUFDTixRQUFRO0FBQUEsUUFDSjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBQ0QsUUFBTUMsMkJBQTBCLENBQUMsZ0JBQWdCLFVBQVUsQ0FBQyxNQUFNO0FBQzlELGFBQU9ELE9BQU0sSUFBSSxnQkFBZ0IsT0FBTyxHQUFHLGlCQUFpQixpQkFBaUIsVUFBVSxTQUFTO0FBQUEsUUFDNUY7QUFBQSxRQUNBLFFBQVEsUUFBUTtBQUFBLE1BQ3BCLENBQUMsQ0FBQztBQUFBLElBQ047QUFDQSxJQUFBRCxTQUFRLDBCQUEwQkU7QUFDbEMscUJBQWlCLHdCQUF3QixNQUFNLGlCQUFpQjtBQUFBO0FBQUE7OztBQzFCaEUsSUFBQUMsZ0NBQUE7QUFBQSwyRUFBQUMsVUFBQTtBQUFBO0FBQ0EsV0FBTyxlQUFlQSxVQUFTLGNBQWMsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUM1RCxJQUFBQSxTQUFRLG1CQUFtQjtBQUMzQixRQUFNLFNBQVM7QUFDZixRQUFNLGtCQUFrQjtBQUN4QixRQUFNLGVBQWU7QUFDckIsUUFBTSxnQkFBZ0I7QUFDdEIsUUFBTSxjQUFjO0FBQ3BCLFFBQU0sMkJBQTJCO0FBQ2pDLFFBQU0scUJBQXFCO0FBQzNCLFFBQU1DLG9CQUFtQixDQUFDLFdBQVc7QUFDakMsYUFBTztBQUFBLFFBQ0gsWUFBWTtBQUFBLFFBQ1osZUFBZSxRQUFRLGlCQUFpQixjQUFjO0FBQUEsUUFDdEQsZUFBZSxRQUFRLGlCQUFpQixjQUFjO0FBQUEsUUFDdEQsbUJBQW1CLFFBQVEscUJBQXFCO0FBQUEsUUFDaEQsa0JBQWtCLFFBQVEsb0JBQW9CLG1CQUFtQjtBQUFBLFFBQ2pFLFlBQVksUUFBUSxjQUFjLENBQUM7QUFBQSxRQUNuQyx3QkFBd0IsUUFBUSwwQkFBMEIseUJBQXlCO0FBQUEsUUFDbkYsaUJBQWlCLFFBQVEsbUJBQW1CO0FBQUEsVUFDeEM7QUFBQSxZQUNJLFVBQVU7QUFBQSxZQUNWLGtCQUFrQixDQUFDLFFBQVEsSUFBSSxvQkFBb0IsZ0JBQWdCO0FBQUEsWUFDbkUsUUFBUSxJQUFJLE9BQU8sa0JBQWtCO0FBQUEsVUFDekM7QUFBQSxRQUNKO0FBQUEsUUFDQSxRQUFRLFFBQVEsVUFBVSxJQUFJLGdCQUFnQixXQUFXO0FBQUEsUUFDekQsV0FBVyxRQUFRLGFBQWE7QUFBQSxRQUNoQyxXQUFXLFFBQVEsYUFBYSxhQUFhO0FBQUEsUUFDN0MsYUFBYSxRQUFRLGVBQWUsWUFBWTtBQUFBLFFBQ2hELGFBQWEsUUFBUSxlQUFlLFlBQVk7QUFBQSxNQUNwRDtBQUFBLElBQ0o7QUFDQSxJQUFBRCxTQUFRLG1CQUFtQkM7QUFBQTtBQUFBOzs7QUNqQzNCLElBQUFDLHlCQUFBO0FBQUEsb0VBQUFDLFVBQUE7QUFBQTtBQUNBLFdBQU8sZUFBZUEsVUFBUyxjQUFjLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDNUQsSUFBQUEsU0FBUSxtQkFBbUI7QUFDM0IsUUFBTSxVQUFVO0FBQ2hCLFFBQU0saUJBQWlCLFFBQVEsZ0JBQWdCLGlCQUEwQjtBQUN6RSxRQUFNLFNBQVM7QUFDZixRQUFNLHdCQUF3QjtBQUM5QixRQUFNLDZCQUE2QjtBQUNuQyxRQUFNLGtDQUFrQztBQUN4QyxRQUFNLHlCQUF5QjtBQUMvQixRQUFNLG9CQUFvQjtBQUMxQixRQUFNLGNBQWM7QUFDcEIsUUFBTSxxQkFBcUI7QUFDM0IsUUFBTSx5QkFBeUI7QUFDL0IsUUFBTSxzQkFBc0I7QUFDNUIsUUFBTSwwQkFBMEI7QUFDaEMsUUFBTSxlQUFlO0FBQ3JCLFFBQU0seUJBQXlCO0FBQy9CLFFBQU0sa0JBQWtCO0FBQ3hCLFFBQU0sNEJBQTRCO0FBQ2xDLFFBQU0sa0JBQWtCO0FBQ3hCLFFBQU1DLG9CQUFtQixDQUFDLFdBQVc7QUFDakMsT0FBQyxHQUFHLGdCQUFnQixpQ0FBaUMsUUFBUSxPQUFPO0FBQ3BFLFlBQU0sZ0JBQWdCLEdBQUcsMEJBQTBCLDJCQUEyQixNQUFNO0FBQ3BGLFlBQU0sd0JBQXdCLE1BQU0sYUFBYSxFQUFFLEtBQUssZ0JBQWdCLHlCQUF5QjtBQUNqRyxZQUFNLHNCQUFzQixHQUFHLHVCQUF1QixrQkFBa0IsTUFBTTtBQUM5RSxPQUFDLEdBQUcsT0FBTyxpQ0FBaUMsUUFBUSxPQUFPO0FBQzNELFlBQU0sZ0JBQWdCLEVBQUUsU0FBUyxRQUFRLFFBQVE7QUFDakQsYUFBTztBQUFBLFFBQ0gsR0FBRztBQUFBLFFBQ0gsR0FBRztBQUFBLFFBQ0gsU0FBUztBQUFBLFFBQ1Q7QUFBQSxRQUNBLHVCQUF1QixRQUFRLDBCQUEwQixHQUFHLHVCQUF1QixZQUFZLHNCQUFzQiw4Q0FBOEMsYUFBYTtBQUFBLFFBQ2hMLHNCQUFzQixRQUFRLHlCQUF5QixHQUFHLHVCQUF1QixZQUFZLE9BQU8scUNBQXFDLGFBQWE7QUFBQSxRQUN0SixtQkFBbUIsUUFBUSxxQkFBcUIsd0JBQXdCO0FBQUEsUUFDeEUsMkJBQTJCLFFBQVEsNkJBQTZCLDJCQUEyQjtBQUFBLFFBQzNGLDBCQUEwQixRQUFRLDZCQUM3QixHQUFHLHVCQUF1QixnQ0FBZ0MsRUFBRSxXQUFXLG1CQUFtQixXQUFXLGVBQWUsZUFBZSxRQUFRLFFBQVEsQ0FBQztBQUFBLFFBQ3pKLGtDQUFrQyxRQUFRLHFDQUFxQyxHQUFHLHVCQUF1QixZQUFZLGdDQUFnQyx3Q0FBd0MsYUFBYTtBQUFBLFFBQzFNLGFBQWEsUUFBUSxnQkFBZ0IsR0FBRyx1QkFBdUIsWUFBWSxtQkFBbUIsaUNBQWlDLE1BQU07QUFBQSxRQUNySSxRQUFRLFFBQVEsV0FDWCxHQUFHLHVCQUF1QixZQUFZLGtCQUFrQiw0QkFBNEIsRUFBRSxHQUFHLGtCQUFrQixpQ0FBaUMsR0FBRyxjQUFjLENBQUM7QUFBQSxRQUNuSyxnQkFBZ0Isb0JBQW9CLGdCQUFnQixPQUFPLFFBQVEsa0JBQWtCLHFCQUFxQjtBQUFBLFFBQzFHLFdBQVcsUUFBUSxjQUNkLEdBQUcsdUJBQXVCLFlBQVk7QUFBQSxVQUNuQyxHQUFHLG1CQUFtQjtBQUFBLFVBQ3RCLFNBQVMsYUFBYSxNQUFNLHNCQUFzQixHQUFHLGFBQWEsYUFBYTtBQUFBLFFBQ25GLEdBQUcsTUFBTTtBQUFBLFFBQ2IsUUFBUSxRQUFRLFVBQVUsWUFBWSxLQUFLLEtBQUssTUFBTSxRQUFRO0FBQUEsUUFDOUQsaUJBQWlCLFFBQVEsbUJBQW1CLG9CQUFvQjtBQUFBLFFBQ2hFLHNCQUFzQixRQUFRLHlCQUF5QixHQUFHLHVCQUF1QixZQUFZLGtCQUFrQiw0Q0FBNEMsYUFBYTtBQUFBLFFBQ3hLLGlCQUFpQixRQUFRLG9CQUFvQixHQUFHLHVCQUF1QixZQUFZLGtCQUFrQix1Q0FBdUMsYUFBYTtBQUFBLFFBQ3pKLGdCQUFnQixRQUFRLG1CQUFtQixHQUFHLHVCQUF1QixZQUFZLHVCQUF1Qiw0QkFBNEIsYUFBYTtBQUFBLE1BQ3JKO0FBQUEsSUFDSjtBQUNBLElBQUFELFNBQVEsbUJBQW1CQztBQUFBO0FBQUE7OztBQ3hEM0IsSUFBQUMscUJBQUE7QUFBQSx1REFBQUMsVUFBQUMsU0FBQTtBQUFBLFFBQUlDLGFBQVksT0FBTztBQUN2QixRQUFJQyxvQkFBbUIsT0FBTztBQUM5QixRQUFJQyxxQkFBb0IsT0FBTztBQUMvQixRQUFJQyxnQkFBZSxPQUFPLFVBQVU7QUFDcEMsUUFBSSxTQUFTLENBQUMsUUFBUSxVQUFVSCxXQUFVLFFBQVEsUUFBUSxFQUFFLE9BQU8sY0FBYyxLQUFLLENBQUM7QUFDdkYsUUFBSUksWUFBVyxDQUFDLFFBQVEsUUFBUTtBQUM5QixlQUFTLFFBQVE7QUFDZixRQUFBSixXQUFVLFFBQVEsTUFBTSxFQUFFLEtBQUssSUFBSSxJQUFJLEdBQUcsWUFBWSxLQUFLLENBQUM7QUFBQSxJQUNoRTtBQUNBLFFBQUlLLGVBQWMsQ0FBQyxJQUFJLE1BQU0sUUFBUSxTQUFTO0FBQzVDLFVBQUksUUFBUSxPQUFPLFNBQVMsWUFBWSxPQUFPLFNBQVMsWUFBWTtBQUNsRSxpQkFBUyxPQUFPSCxtQkFBa0IsSUFBSTtBQUNwQyxjQUFJLENBQUNDLGNBQWEsS0FBSyxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBQ3pDLFlBQUFILFdBQVUsSUFBSSxLQUFLLEVBQUUsS0FBSyxNQUFNLEtBQUssR0FBRyxHQUFHLFlBQVksRUFBRSxPQUFPQyxrQkFBaUIsTUFBTSxHQUFHLE1BQU0sS0FBSyxXQUFXLENBQUM7QUFBQSxNQUN2SDtBQUNBLGFBQU87QUFBQSxJQUNUO0FBQ0EsUUFBSUssZ0JBQWUsQ0FBQyxRQUFRRCxhQUFZTCxXQUFVLENBQUMsR0FBRyxjQUFjLEVBQUUsT0FBTyxLQUFLLENBQUMsR0FBRyxHQUFHO0FBR3pGLFFBQUksY0FBYyxDQUFDO0FBQ25CLElBQUFJLFVBQVMsYUFBYTtBQUFBLE1BQ3BCLGFBQWEsTUFBTTtBQUFBLE1BQ25CLGlCQUFpQixNQUFNO0FBQUEsTUFDdkIsY0FBYyxNQUFNO0FBQUEsTUFDcEIsdUJBQXVCLE1BQU07QUFBQSxJQUMvQixDQUFDO0FBQ0QsSUFBQUwsUUFBTyxVQUFVTyxjQUFhLFdBQVc7QUFHekMsUUFBSSxRQUF3Qix1QkFBTyxDQUFDLFlBQVk7QUFDOUMsYUFBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZLFdBQVcsU0FBUyxVQUFVLEdBQUcsQ0FBQztBQUFBLElBQ3BFLEdBQUcsT0FBTztBQUdWLFFBQUksd0JBQXdCO0FBQUEsTUFDMUIsVUFBVTtBQUFBLE1BQ1YsVUFBVTtBQUFBLElBQ1o7QUFDQSxRQUFJLGNBQStCLGtCQUFDLGlCQUFpQjtBQUNuRCxtQkFBYSxTQUFTLElBQUk7QUFDMUIsbUJBQWEsU0FBUyxJQUFJO0FBQzFCLG1CQUFhLFNBQVMsSUFBSTtBQUMxQixtQkFBYSxPQUFPLElBQUk7QUFDeEIsbUJBQWEsU0FBUyxJQUFJO0FBQzFCLGFBQU87QUFBQSxJQUNULEdBQUcsZUFBZSxDQUFDLENBQUM7QUFDcEIsUUFBSSxrQkFBa0MsdUJBQU8sQ0FBQyxXQUFXO0FBQ3ZELFVBQUksT0FBTyxVQUFVLFdBQXlCO0FBQzVDLGNBQU0sYUFBYSxJQUFJO0FBQUEsVUFDckIsR0FBRyxLQUFLLFVBQVU7QUFBQSxZQUNoQixHQUFHO0FBQUEsWUFDSCxRQUFRO0FBQUEsVUFDVixDQUFDLENBQUM7QUFBQSxRQUNKO0FBQ0EsbUJBQVcsT0FBTztBQUNsQixjQUFNO0FBQUEsTUFDUixXQUFXLE9BQU8sVUFBVSxXQUF5QjtBQUNuRCxjQUFNLGVBQWUsSUFBSTtBQUFBLFVBQ3ZCLEdBQUcsS0FBSyxVQUFVO0FBQUEsWUFDaEIsR0FBRztBQUFBLFlBQ0gsUUFBUTtBQUFBLFVBQ1YsQ0FBQyxDQUFDO0FBQUEsUUFDSjtBQUNBLHFCQUFhLE9BQU87QUFDcEIsY0FBTTtBQUFBLE1BQ1IsV0FBVyxPQUFPLFVBQVUsV0FBeUI7QUFDbkQsY0FBTSxJQUFJLE1BQU0sR0FBRyxLQUFLLFVBQVUsTUFBTSxDQUFDLEVBQUU7QUFBQSxNQUM3QztBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsaUJBQWlCO0FBR3BCLFFBQUksK0JBQStDLHVCQUFPLENBQUMsVUFBVSxVQUFVLGdCQUFnQixZQUFZO0FBQ3pHLFVBQUksVUFBVTtBQUNaLGVBQU87QUFDVCxZQUFNLFFBQVEsV0FBVyxNQUFNLFVBQVU7QUFDekMsYUFBTyxjQUFjLFVBQVUsS0FBSztBQUFBLElBQ3RDLEdBQUcsOEJBQThCO0FBQ2pDLFFBQUksZ0JBQWdDLHVCQUFPLENBQUMsS0FBSyxRQUFRLE1BQU0sS0FBSyxPQUFPLEtBQUssTUFBTSxNQUFNLGVBQWU7QUFDM0csUUFBSSxhQUE2Qix1QkFBTyxPQUFPLEVBQUUsVUFBVSxVQUFVLGFBQWEsaUJBQWlCLFFBQUFDLFNBQVEsWUFBWSxHQUFHLE9BQU8sbUJBQW1CO0FBQ2xKLFlBQU0sb0JBQW9CLENBQUM7QUFDM0IsWUFBTSxFQUFFLE9BQUFDLFFBQU8sT0FBTyxJQUFJLE1BQU0sZUFBZUQsU0FBUSxLQUFLO0FBQzVELFVBQUksUUFBUTtBQUNWLGNBQU0sVUFBVSwwQkFBMEIsTUFBTTtBQUNoRCwwQkFBa0IsT0FBTyxLQUFLO0FBQzlCLDBCQUFrQixPQUFPLEtBQUs7QUFBQSxNQUNoQztBQUNBLFVBQUlDLFdBQVUsU0FBcUI7QUFDakMsZUFBTyxFQUFFLE9BQUFBLFFBQU8sUUFBUSxrQkFBa0I7QUFBQSxNQUM1QztBQUNBLFVBQUksaUJBQWlCO0FBQ3JCLFlBQU0sWUFBWSxLQUFLLElBQUksSUFBSSxjQUFjO0FBQzdDLFlBQU0saUJBQWlCLEtBQUssSUFBSSxXQUFXLFFBQVEsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJO0FBQ3JFLGFBQU8sTUFBTTtBQUNYLFlBQUksaUJBQWlCLFFBQVEsV0FBVyxhQUFhLFNBQVM7QUFDNUQsZ0JBQU0sVUFBVTtBQUNoQiw0QkFBa0IsT0FBTyxLQUFLO0FBQzlCLDRCQUFrQixPQUFPLEtBQUs7QUFDOUIsaUJBQU8sRUFBRSxPQUFPLFdBQXlCLGtCQUFrQjtBQUFBLFFBQzdEO0FBQ0EsY0FBTSxRQUFRLDZCQUE2QixVQUFVLFVBQVUsZ0JBQWdCLGNBQWM7QUFDN0YsWUFBSSxLQUFLLElBQUksSUFBSSxRQUFRLE1BQU0sV0FBVztBQUN4QyxpQkFBTyxFQUFFLE9BQU8sV0FBeUIsa0JBQWtCO0FBQUEsUUFDN0Q7QUFDQSxjQUFNLE1BQU0sS0FBSztBQUNqQixjQUFNLEVBQUUsT0FBT0MsU0FBUSxRQUFRLFFBQVEsSUFBSSxNQUFNLGVBQWVGLFNBQVEsS0FBSztBQUM3RSxZQUFJLFNBQVM7QUFDWCxnQkFBTSxVQUFVLDBCQUEwQixPQUFPO0FBQ2pELDRCQUFrQixPQUFPLEtBQUs7QUFDOUIsNEJBQWtCLE9BQU8sS0FBSztBQUFBLFFBQ2hDO0FBQ0EsWUFBSUUsWUFBVyxTQUFxQjtBQUNsQyxpQkFBTyxFQUFFLE9BQU9BLFNBQVEsUUFBUSxTQUFTLGtCQUFrQjtBQUFBLFFBQzdEO0FBQ0EsMEJBQWtCO0FBQUEsTUFDcEI7QUFBQSxJQUNGLEdBQUcsWUFBWTtBQUNmLFFBQUksNEJBQTRDLHVCQUFPLENBQUMsV0FBVztBQUNqRSxVQUFJLFFBQVEsbUJBQW1CO0FBQzdCLGVBQU8sbUNBQW1DLE9BQU8saUJBQWlCO0FBQUEsTUFDcEU7QUFDQSxVQUFJLFFBQVEsV0FBVyxnQkFBZ0I7QUFDckMsWUFBSSxPQUFPLGFBQWEsT0FBTyxTQUFTO0FBQ3RDLGlCQUFPLEdBQUcsT0FBTyxVQUFVLGNBQWMsT0FBTyxVQUFVLGtCQUFrQixTQUFTLEtBQUssT0FBTyxPQUFPO0FBQUEsUUFDMUc7QUFDQSxlQUFPLEdBQUcsT0FBTyxVQUFVLGNBQWM7QUFBQSxNQUMzQztBQUNBLGFBQU8sT0FBTyxRQUFRLFdBQVcsS0FBSyxVQUFVLE1BQU0sS0FBSyxTQUFTO0FBQUEsSUFDdEUsR0FBRywyQkFBMkI7QUFHOUIsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxZQUFZO0FBQzlELFVBQUksUUFBUSxlQUFlLEdBQUc7QUFDNUIsY0FBTSxJQUFJLE1BQU0sd0RBQXdEO0FBQUEsTUFDMUUsV0FBVyxRQUFRLFlBQVksR0FBRztBQUNoQyxjQUFNLElBQUksTUFBTSxxREFBcUQ7QUFBQSxNQUN2RSxXQUFXLFFBQVEsWUFBWSxHQUFHO0FBQ2hDLGNBQU0sSUFBSSxNQUFNLHFEQUFxRDtBQUFBLE1BQ3ZFLFdBQVcsUUFBUSxlQUFlLFFBQVEsVUFBVTtBQUNsRCxjQUFNLElBQUk7QUFBQSxVQUNSLG9DQUFvQyxRQUFRLFdBQVcsd0RBQXdELFFBQVEsUUFBUTtBQUFBLFFBQ2pJO0FBQUEsTUFDRixXQUFXLFFBQVEsV0FBVyxRQUFRLFVBQVU7QUFDOUMsY0FBTSxJQUFJO0FBQUEsVUFDUixpQ0FBaUMsUUFBUSxRQUFRLHdEQUF3RCxRQUFRLFFBQVE7QUFBQSxRQUMzSDtBQUFBLE1BQ0Y7QUFBQSxJQUNGLEdBQUcsdUJBQXVCO0FBRzFCLFFBQUksZUFBK0IsdUJBQU8sT0FBTyxnQkFBZ0I7QUFDL0QsYUFBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzlCLGNBQU0sVUFBMEIsdUJBQU8sTUFBTSxRQUFRO0FBQUEsVUFBRSxPQUFPO0FBQUE7QUFBQSxRQUF3QixDQUFDLEdBQUcsU0FBUztBQUNuRyxZQUFJLE9BQU8sWUFBWSxxQkFBcUIsWUFBWTtBQUN0RCxzQkFBWSxpQkFBaUIsU0FBUyxPQUFPO0FBQUEsUUFDL0MsT0FBTztBQUNMLHNCQUFZLFVBQVU7QUFBQSxRQUN4QjtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsR0FBRyxjQUFjO0FBQ2pCLFFBQUksZUFBK0IsdUJBQU8sT0FBTyxTQUFTLE9BQU8sbUJBQW1CO0FBQ2xGLFlBQU0sU0FBUztBQUFBLFFBQ2IsR0FBRztBQUFBLFFBQ0gsR0FBRztBQUFBLE1BQ0w7QUFDQSw0QkFBc0IsTUFBTTtBQUM1QixZQUFNLGlCQUFpQixDQUFDLFdBQVcsUUFBUSxPQUFPLGNBQWMsQ0FBQztBQUNqRSxVQUFJLFFBQVEsaUJBQWlCO0FBQzNCLHVCQUFlLEtBQUssYUFBYSxRQUFRLGdCQUFnQixNQUFNLENBQUM7QUFBQSxNQUNsRTtBQUNBLFVBQUksUUFBUSxhQUFhO0FBQ3ZCLHVCQUFlLEtBQUssYUFBYSxRQUFRLFdBQVcsQ0FBQztBQUFBLE1BQ3ZEO0FBQ0EsYUFBTyxRQUFRLEtBQUssY0FBYztBQUFBLElBQ3BDLEdBQUcsY0FBYztBQUFBO0FBQUE7OztBQy9LakIsSUFBQUMscUJBQUE7QUFBQSw0REFBQUMsVUFBQUMsU0FBQTtBQUFBO0FBQ0EsUUFBSUMsYUFBWSxPQUFPO0FBQ3ZCLFFBQUlDLG9CQUFtQixPQUFPO0FBQzlCLFFBQUlDLHFCQUFvQixPQUFPO0FBQy9CLFFBQUlDLGdCQUFlLE9BQU8sVUFBVTtBQUNwQyxRQUFJLFNBQVMsQ0FBQyxRQUFRLFVBQVVILFdBQVUsUUFBUSxRQUFRLEVBQUUsT0FBTyxjQUFjLEtBQUssQ0FBQztBQUN2RixRQUFJSSxZQUFXLENBQUMsUUFBUSxRQUFRO0FBQzlCLGVBQVMsUUFBUTtBQUNmLFFBQUFKLFdBQVUsUUFBUSxNQUFNLEVBQUUsS0FBSyxJQUFJLElBQUksR0FBRyxZQUFZLEtBQUssQ0FBQztBQUFBLElBQ2hFO0FBQ0EsUUFBSUssZUFBYyxDQUFDLElBQUksTUFBTSxRQUFRLFNBQVM7QUFDNUMsVUFBSSxRQUFRLE9BQU8sU0FBUyxZQUFZLE9BQU8sU0FBUyxZQUFZO0FBQ2xFLGlCQUFTLE9BQU9ILG1CQUFrQixJQUFJO0FBQ3BDLGNBQUksQ0FBQ0MsY0FBYSxLQUFLLElBQUksR0FBRyxLQUFLLFFBQVE7QUFDekMsWUFBQUgsV0FBVSxJQUFJLEtBQUssRUFBRSxLQUFLLE1BQU0sS0FBSyxHQUFHLEdBQUcsWUFBWSxFQUFFLE9BQU9DLGtCQUFpQixNQUFNLEdBQUcsTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUFBLE1BQ3ZIO0FBQ0EsYUFBTztBQUFBLElBQ1Q7QUFDQSxRQUFJSyxnQkFBZSxDQUFDLFFBQVFELGFBQVlMLFdBQVUsQ0FBQyxHQUFHLGNBQWMsRUFBRSxPQUFPLEtBQUssQ0FBQyxHQUFHLEdBQUc7QUFHekYsUUFBSSxnQkFBZ0IsQ0FBQztBQUNyQixJQUFBSSxVQUFTLGVBQWU7QUFBQSxNQUN0QixzQ0FBc0MsTUFBTTtBQUFBLE1BQzVDLGlCQUFpQixNQUFNO0FBQUEsTUFDdkIsZ0JBQWdCLE1BQU07QUFBQSxNQUN0QixzQkFBc0IsTUFBTTtBQUFBLE1BQzVCLHlCQUF5QixNQUFNO0FBQUEsTUFDL0IsY0FBYyxNQUFNO0FBQUEsTUFDcEIsWUFBWSxNQUFNO0FBQUEsTUFDbEIsa0JBQWtCLE1BQU07QUFBQSxNQUN4Qiw4QkFBOEIsTUFBTTtBQUFBLE1BQ3BDLHFCQUFxQixNQUFNO0FBQUEsTUFDM0IsNkJBQTZCLE1BQU07QUFBQSxNQUNuQyx1QkFBdUIsTUFBTTtBQUFBLE1BQzdCLGFBQWEsTUFBTTtBQUFBLE1BQ25CLG9CQUFvQixNQUFNO0FBQUEsTUFDMUIsaUNBQWlDLE1BQU07QUFBQSxNQUN2QyxxQkFBcUIsTUFBTTtBQUFBLE1BQzNCLHlCQUF5QixNQUFNO0FBQUEsTUFDL0IsdUNBQXVDLE1BQU07QUFBQSxNQUM3QywyQkFBMkIsTUFBTTtBQUFBLE1BQ2pDLDJCQUEyQixNQUFNO0FBQUEsTUFDakMscUJBQXFCLE1BQU07QUFBQSxNQUMzQiwwQkFBMEIsTUFBTTtBQUFBLE1BQ2hDLG9CQUFvQixNQUFNO0FBQUEsTUFDMUIscUJBQXFCLE1BQU07QUFBQSxNQUMzQixtQkFBbUIsTUFBTTtBQUFBLE1BQ3pCLDZCQUE2QixNQUFNO0FBQUEsTUFDbkMsb0JBQW9CLE1BQU07QUFBQSxNQUMxQix1QkFBdUIsTUFBTTtBQUFBLE1BQzdCLGtDQUFrQyxNQUFNO0FBQUEsTUFDeEMsb0NBQW9DLE1BQU07QUFBQSxNQUMxQywwQkFBMEIsTUFBTTtBQUFBLE1BQ2hDLHVCQUF1QixNQUFNO0FBQUEsTUFDN0IsNEJBQTRCLE1BQU07QUFBQSxNQUNsQyxvQ0FBb0MsTUFBTTtBQUFBLE1BQzFDLHVCQUF1QixNQUFNO0FBQUEsTUFDN0IsNENBQTRDLE1BQU07QUFBQSxNQUNsRCx1QkFBdUIsTUFBTTtBQUFBLE1BQzdCLHNCQUFzQixNQUFNO0FBQUEsTUFDNUIsd0NBQXdDLE1BQU07QUFBQSxNQUM5QywyQkFBMkIsTUFBTTtBQUFBLE1BQ2pDLG1CQUFtQixNQUFNO0FBQUEsTUFDekIsMkNBQTJDLE1BQU07QUFBQSxNQUNqRCx3QkFBd0IsTUFBTTtBQUFBLE1BQzlCLFVBQVUsTUFBTTtBQUFBLE1BQ2hCLGdCQUFnQixNQUFNRztBQUFBLE1BQ3RCLDBCQUEwQixNQUFNO0FBQUEsTUFDaEMsMENBQTBDLE1BQU07QUFBQSxNQUNoRCx5QkFBeUIsTUFBTTtBQUFBLE1BQy9CLDJCQUEyQixNQUFNO0FBQUEsTUFDakMseUJBQXlCLE1BQU07QUFBQSxNQUMvQixjQUFjLE1BQU07QUFBQSxNQUNwQix5QkFBeUIsTUFBTTtBQUFBLE1BQy9CLGNBQWMsTUFBTTtBQUFBLE1BQ3BCLGlDQUFpQyxNQUFNO0FBQUEsTUFDdkMsWUFBWSxNQUFNO0FBQUEsTUFDbEIsZ0JBQWdCLE1BQU07QUFBQSxNQUN0QixnQkFBZ0IsTUFBTTtBQUFBLE1BQ3RCLDBCQUEwQixNQUFNO0FBQUEsTUFDaEMsbUNBQW1DLE1BQU07QUFBQSxNQUN6Qyw4QkFBOEIsTUFBTTtBQUFBLE1BQ3BDLG1CQUFtQixNQUFNO0FBQUEsTUFDekIsc0NBQXNDLE1BQU07QUFBQSxNQUM1Qyx5QkFBeUIsTUFBTTtBQUFBLE1BQy9CLHlCQUF5QixNQUFNO0FBQUEsTUFDL0IsY0FBYyxNQUFNO0FBQUEsTUFDcEIsb0JBQW9CLE1BQU07QUFBQSxNQUMxQix3QkFBd0IsTUFBTTtBQUFBLE1BQzlCLGFBQWEsTUFBTTtBQUFBLE1BQ25CLHNCQUFzQixNQUFNO0FBQUEsTUFDNUIsYUFBYSxNQUFNO0FBQUEsTUFDbkIscUJBQXFCLE1BQU07QUFBQSxNQUMzQiwwQkFBMEIsTUFBTTtBQUFBLE1BQ2hDLDRCQUE0QixNQUFNO0FBQUEsTUFDbEMsNkJBQTZCLE1BQU07QUFBQSxNQUNuQywwQ0FBMEMsTUFBTTtBQUFBLE1BQ2hELFNBQVMsTUFBTTtBQUFBLE1BQ2Ysd0JBQXdCLE1BQU07QUFBQSxNQUM5QixvQkFBb0IsTUFBTTtBQUFBLE1BQzFCLGdDQUFnQyxNQUFNO0FBQUEsTUFDdEMsb0JBQW9CLE1BQU07QUFBQSxNQUMxQix5QkFBeUIsTUFBTTtBQUFBLE1BQy9CLG9CQUFvQixNQUFNO0FBQUEsTUFDMUIsbUJBQW1CLE1BQU07QUFBQSxNQUN6QiwyQkFBMkIsTUFBTTtBQUFBLE1BQ2pDLHdCQUF3QixNQUFNO0FBQUEsTUFDOUIsMkJBQTJCLE1BQU07QUFBQSxNQUNqQyx5Q0FBeUMsTUFBTTtBQUFBLE1BQy9DLHlCQUF5QixNQUFNO0FBQUEsTUFDL0IsZ0JBQWdCLE1BQU07QUFBQSxNQUN0Qix3Q0FBd0MsTUFBTTtBQUFBLE1BQzlDLGdCQUFnQixNQUFNO0FBQUEsTUFDdEIsMEJBQTBCLE1BQU07QUFBQSxNQUNoQyxjQUFjLE1BQU1DO0FBQUEsTUFDcEIsK0JBQStCLE1BQU07QUFBQSxNQUNyQywwQkFBMEIsTUFBTTtBQUFBLE1BQ2hDLGVBQWUsTUFBTTtBQUFBLE1BQ3JCLGtDQUFrQyxNQUFNO0FBQUEsTUFDeEMsc0JBQXNCLE1BQU07QUFBQSxNQUM1Qix3QkFBd0IsTUFBTTtBQUFBLE1BQzlCLDJCQUEyQixNQUFNO0FBQUEsTUFDakMsK0JBQStCLE1BQU07QUFBQSxNQUNyQyxrQ0FBa0MsTUFBTTtBQUFBLE1BQ3hDLHdCQUF3QixNQUFNO0FBQUEsTUFDOUIsNkJBQTZCLE1BQU07QUFBQSxNQUNuQyxhQUFhLE1BQU07QUFBQSxNQUNuQixxQ0FBcUMsTUFBTTtBQUFBLE1BQzNDLGdCQUFnQixNQUFNO0FBQUEsTUFDdEIsV0FBVyxNQUFNO0FBQUEsTUFDakIsU0FBUyxNQUFNO0FBQUEsTUFDZixxQkFBcUIsTUFBTTtBQUFBLE1BQzNCLGFBQWEsTUFBTTtBQUFBLE1BQ25CLFFBQVEsTUFBTTtBQUFBLE1BQ2QsZ0JBQWdCLE1BQU07QUFBQSxNQUN0Qiw2QkFBNkIsTUFBTTtBQUFBLE1BQ25DLFlBQVksTUFBTTtBQUFBLE1BQ2xCLHFCQUFxQixNQUFNO0FBQUEsTUFDM0Isd0JBQXdCLE1BQU07QUFBQSxNQUM5QixhQUFhLE1BQU07QUFBQSxNQUNuQixvQkFBb0IsTUFBTTtBQUFBLE1BQzFCLGtCQUFrQixNQUFNO0FBQUEsTUFDeEIseUJBQXlCLE1BQU07QUFBQSxNQUMvQiwyQkFBMkIsTUFBTTtBQUFBLE1BQ2pDLDhCQUE4QixNQUFNO0FBQUEsTUFDcEMsOEJBQThCLE1BQU07QUFBQSxNQUNwQyxnQ0FBZ0MsTUFBTTtBQUFBLE1BQ3RDLHNCQUFzQixNQUFNO0FBQUEsTUFDNUIsZ0NBQWdDLE1BQU07QUFBQSxNQUN0QyxrQ0FBa0MsTUFBTTtBQUFBLE1BQ3hDLDBCQUEwQixNQUFNO0FBQUEsTUFDaEMsa0NBQWtDLE1BQU07QUFBQSxNQUN4QyxtQkFBbUIsTUFBTTtBQUFBLE1BQ3pCLDBDQUEwQyxNQUFNO0FBQUEsTUFDaEQsb0JBQW9CLE1BQU07QUFBQSxNQUMxQixzQ0FBc0MsTUFBTTtBQUFBLE1BQzVDLHlCQUF5QixNQUFNO0FBQUEsTUFDL0IsVUFBVSxNQUFNQyx1QkFBcUI7QUFBQSxNQUNyQyxpQ0FBaUMsTUFBTTtBQUFBLE1BQ3ZDLHFCQUFxQixNQUFNO0FBQUEsTUFDM0IscUJBQXFCLE1BQU07QUFBQSxNQUMzQixvQkFBb0IsTUFBTTtBQUFBLE1BQzFCLGVBQWUsTUFBTTtBQUFBLE1BQ3JCLGNBQWMsTUFBTTtBQUFBLE1BQ3BCLG9CQUFvQixNQUFNO0FBQUEsTUFDMUIsdUJBQXVCLE1BQU07QUFBQSxNQUM3QixzQkFBc0IsTUFBTTtBQUFBLE1BQzVCLHlCQUF5QixNQUFNO0FBQUEsSUFDakMsQ0FBQztBQUNELElBQUFWLFFBQU8sVUFBVU8sY0FBYSxhQUFhO0FBRzNDLFFBQUksNkJBQTZCO0FBQ2pDLFFBQUksdUNBQXVDO0FBQzNDLFFBQUlJLGlDQUFnQztBQUNwQyxRQUFJQyw0QkFBMkI7QUFDL0IsUUFBSUMseUNBQXdDO0FBQzVDLFFBQUlDLGdDQUErQjtBQUNuQyxRQUFJQywwQkFBeUI7QUFDN0IsUUFBSUMsZ0JBQWU7QUFDbkIsUUFBSUMsb0NBQW1DO0FBRXZDLFFBQUlDLDJCQUEwQjtBQUU5QixRQUFJQyxpQ0FBZ0M7QUFHcEMsUUFBSUMsOEJBQTZCO0FBQ2pDLFFBQUlDLDJCQUEwQjtBQUk5QixRQUFJQyxtQ0FBa0QsdUJBQU8sQ0FBQyxZQUFZO0FBQ3hFLGFBQU8sT0FBTyxPQUFPLFNBQVM7QUFBQSxRQUM1QixzQkFBc0IsUUFBUSx3QkFBd0I7QUFBQSxRQUN0RCxpQkFBaUIsUUFBUSxtQkFBbUI7QUFBQSxRQUM1QyxvQkFBb0I7QUFBQSxNQUN0QixDQUFDO0FBQUEsSUFDSCxHQUFHLGlDQUFpQztBQUNwQyxRQUFJQyxnQkFBZTtBQUFBLE1BQ2pCLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixNQUFNLGtCQUFrQjtBQUFBLE1BQzFELFdBQVcsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxNQUN0RCxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxXQUFXO0FBQUEsTUFDcEQsUUFBUSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sU0FBUztBQUFBLE1BQ2hELGNBQWMsRUFBRSxNQUFNLGlCQUFpQixNQUFNLHVCQUF1QjtBQUFBLE1BQ3BFLHVCQUF1QixFQUFFLE1BQU0saUJBQWlCLE1BQU0sd0JBQXdCO0FBQUEsSUFDaEY7QUFHQSxRQUFJQyxnQkFBYztBQUNsQixRQUFJQyx5QkFBdUI7QUFFM0IsUUFBSSxjQUFjO0FBR2xCLFFBQUlmLHlCQUF1QjtBQUMzQixRQUFJLDJCQUEyQixNQUFNLGtDQUFrQ0EsdUJBQXFCLGlCQUFpQjtBQUFBLE1BQzNHLE9BQU87QUFDTCxlQUFPLE1BQU0sMEJBQTBCO0FBQUEsTUFDekM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLFlBQVksU0FBUztBQUNuQixjQUFNLE9BQU87QUFDYixlQUFPLGVBQWUsTUFBTSwwQkFBMEIsU0FBUztBQUFBLE1BQ2pFO0FBQUEsSUFDRjtBQUdBLFFBQUksdUNBQXVDO0FBQUEsTUFDekMsYUFBYTtBQUFBLE1BQ2IsYUFBYTtBQUFBLElBQ2Y7QUFDQSxRQUFJLGtCQUFrQjtBQUFBLE1BQ3BCLEtBQUs7QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLEtBQUs7QUFBQSxJQUNQO0FBQ0EsUUFBSSxzQkFBc0I7QUFBQSxNQUN4QixHQUFHO0FBQUEsTUFDSCxHQUFHO0FBQUEsTUFDSCxHQUFHO0FBQUEsSUFDTDtBQUNBLFFBQUksZUFBZTtBQUFBLE1BQ2pCLFdBQVc7QUFBQSxNQUNYLFVBQVU7QUFBQSxNQUNWLFNBQVM7QUFBQSxJQUNYO0FBQ0EsUUFBSSxhQUFhO0FBQUEsTUFDZixZQUFZO0FBQUEsTUFDWixRQUFRO0FBQUEsTUFDUixNQUFNO0FBQUEsSUFDUjtBQUNBLFFBQUksY0FBYztBQUFBLE1BQ2hCLGlCQUFpQjtBQUFBLE1BQ2pCLGFBQWE7QUFBQSxJQUNmO0FBQ0EsUUFBSSxVQUFVO0FBQUEsTUFDWixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUksaUJBQWlCO0FBQUEsTUFDbkIsS0FBSztBQUFBLE1BQ0wsU0FBUztBQUFBLE1BQ1QsV0FBVztBQUFBLElBQ2I7QUFDQSxRQUFJLFVBQVU7QUFBQSxNQUNaLFFBQVE7QUFBQSxNQUNSLEtBQUs7QUFBQSxJQUNQO0FBQ0EsUUFBSSxZQUFZO0FBQUEsTUFDZCxVQUFVO0FBQUEsTUFDVixXQUFXO0FBQUEsTUFDWCxTQUFTO0FBQUEsTUFDVCxVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsSUFDWjtBQUNBLFFBQUksaUJBQWlCO0FBQUEsTUFDbkIsV0FBVztBQUFBLE1BQ1gsb0JBQW9CO0FBQUEsTUFDcEIsV0FBVztBQUFBLE1BQ1gsV0FBVztBQUFBLElBQ2I7QUFDQSxRQUFJLG1CQUFtQjtBQUFBLE1BQ3JCLFVBQVU7QUFBQSxNQUNWLFdBQVc7QUFBQSxNQUNYLFNBQVM7QUFBQSxNQUNULFVBQVU7QUFBQSxJQUNaO0FBQ0EsUUFBSSx1QkFBdUIsTUFBTSw4QkFBOEIseUJBQXlCO0FBQUEsTUFDdEYsT0FBTztBQUNMLGVBQU8sTUFBTSxzQkFBc0I7QUFBQSxNQUNyQztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSxzQkFBc0IsU0FBUztBQUFBLE1BQzdEO0FBQUEsSUFDRjtBQUNBLFFBQUksMEJBQTBCLE1BQU0saUNBQWlDLHlCQUF5QjtBQUFBLE1BQzVGLE9BQU87QUFDTCxlQUFPLE1BQU0seUJBQXlCO0FBQUEsTUFDeEM7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0seUJBQXlCLFNBQVM7QUFBQSxNQUNoRTtBQUFBLElBQ0Y7QUFDQSxRQUFJLG1CQUFtQjtBQUFBLE1BQ3JCLEtBQUs7QUFBQSxNQUNMLFlBQVk7QUFBQSxNQUNaLFFBQVE7QUFBQSxNQUNSLE1BQU07QUFBQSxJQUNSO0FBQ0EsUUFBSSx5QkFBeUI7QUFBQSxNQUMzQixTQUFTO0FBQUEsTUFDVCxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUksc0NBQXNDO0FBQUEsTUFDeEMsU0FBUztBQUFBLE1BQ1QsTUFBTTtBQUFBLElBQ1I7QUFDQSxRQUFJLDhCQUE4QjtBQUFBLE1BQ2hDLGNBQWM7QUFBQSxNQUNkLHdCQUF3QjtBQUFBLE1BQ3hCLGVBQWU7QUFBQSxNQUNmLHFCQUFxQjtBQUFBLE1BQ3JCLGlDQUFpQztBQUFBLE1BQ2pDLCtCQUErQjtBQUFBLE1BQy9CLHNCQUFzQjtBQUFBLE1BQ3RCLGtCQUFrQjtBQUFBLE1BQ2xCLGlCQUFpQjtBQUFBLE1BQ2pCLHFCQUFxQjtBQUFBLE1BQ3JCLGlCQUFpQjtBQUFBLElBQ25CO0FBQ0EsUUFBSSxzQkFBc0IsTUFBTSw2QkFBNkIseUJBQXlCO0FBQUEsTUFDcEYsT0FBTztBQUNMLGVBQU8sTUFBTSxxQkFBcUI7QUFBQSxNQUNwQztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSxxQkFBcUIsU0FBUztBQUFBLE1BQzVEO0FBQUEsSUFDRjtBQUNBLFFBQUksdUJBQXVCLE1BQU0sOEJBQThCLHlCQUF5QjtBQUFBLE1BQ3RGLE9BQU87QUFDTCxlQUFPLE1BQU0sc0JBQXNCO0FBQUEsTUFDckM7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sc0JBQXNCLFNBQVM7QUFBQSxNQUM3RDtBQUFBLElBQ0Y7QUFDQSxRQUFJLDJCQUEyQixNQUFNLGtDQUFrQyx5QkFBeUI7QUFBQSxNQUM5RixPQUFPO0FBQ0wsZUFBTyxNQUFNLDBCQUEwQjtBQUFBLE1BQ3pDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUEsTUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSwwQkFBMEIsU0FBUztBQUMvRCxhQUFLLFVBQVUsS0FBSztBQUFBLE1BQ3RCO0FBQUEsSUFDRjtBQUNBLFFBQUkseUNBQXlDLE1BQU0sZ0RBQWdELHlCQUF5QjtBQUFBLE1BQzFILE9BQU87QUFDTCxlQUFPLE1BQU0sd0NBQXdDO0FBQUEsTUFDdkQ7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sd0NBQXdDLFNBQVM7QUFBQSxNQUMvRTtBQUFBLElBQ0Y7QUFDQSxRQUFJLDRCQUE0QixNQUFNLG1DQUFtQyx5QkFBeUI7QUFBQSxNQUNoRyxPQUFPO0FBQ0wsZUFBTyxNQUFNLDJCQUEyQjtBQUFBLE1BQzFDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLDJCQUEyQixTQUFTO0FBQUEsTUFDbEU7QUFBQSxJQUNGO0FBQ0EsUUFBSSw4QkFBOEI7QUFBQSxNQUNoQyxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsSUFDUjtBQUNBLFFBQUksMkNBQTJDLE1BQU0sa0RBQWtELHlCQUF5QjtBQUFBLE1BQzlILE9BQU87QUFDTCxlQUFPLE1BQU0sMENBQTBDO0FBQUEsTUFDekQ7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sMENBQTBDLFNBQVM7QUFBQSxNQUNqRjtBQUFBLElBQ0Y7QUFDQSxRQUFJLHFCQUFxQjtBQUFBLE1BQ3ZCLGFBQWE7QUFBQSxNQUNiLFNBQVM7QUFBQSxNQUNULFVBQVU7QUFBQSxNQUNWLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLGNBQWM7QUFBQSxNQUNkLFVBQVU7QUFBQSxNQUNWLE1BQU07QUFBQSxJQUNSO0FBQ0EsUUFBSSxzQkFBc0I7QUFBQSxNQUN4QixLQUFLO0FBQUEsTUFDTCxJQUFJO0FBQUEsSUFDTjtBQUNBLFFBQUksMEJBQTBCO0FBQUEsTUFDNUIsVUFBVTtBQUFBLE1BQ1YsU0FBUztBQUFBLElBQ1g7QUFDQSxRQUFJLDRCQUE0QjtBQUFBLE1BQzlCLFVBQVU7QUFBQSxNQUNWLFNBQVM7QUFBQSxJQUNYO0FBQ0EsUUFBSSx3Q0FBd0MsTUFBTSwrQ0FBK0MseUJBQXlCO0FBQUEsTUFDeEgsT0FBTztBQUNMLGVBQU8sTUFBTSx1Q0FBdUM7QUFBQSxNQUN0RDtBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSx1Q0FBdUMsU0FBUztBQUFBLE1BQzlFO0FBQUEsSUFDRjtBQUNBLFFBQUksNEJBQTRCO0FBQUEsTUFDOUIsU0FBUztBQUFBLE1BQ1QsUUFBUTtBQUFBLElBQ1Y7QUFDQSxRQUFJLDRCQUE0QjtBQUFBLE1BQzlCLFVBQVU7QUFBQSxNQUNWLFdBQVc7QUFBQSxNQUNYLFNBQVM7QUFBQSxNQUNULFVBQVU7QUFBQSxNQUNWLFFBQVE7QUFBQSxJQUNWO0FBQ0EsUUFBSSx5QkFBeUIsTUFBTSxnQ0FBZ0MseUJBQXlCO0FBQUEsTUFDMUYsT0FBTztBQUNMLGVBQU8sTUFBTSx3QkFBd0I7QUFBQSxNQUN2QztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSx3QkFBd0IsU0FBUztBQUFBLE1BQy9EO0FBQUEsSUFDRjtBQUNBLFFBQUksc0JBQXNCLE1BQU0sNkJBQTZCLHlCQUF5QjtBQUFBLE1BQ3BGLE9BQU87QUFDTCxlQUFPLE1BQU0scUJBQXFCO0FBQUEsTUFDcEM7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0scUJBQXFCLFNBQVM7QUFBQSxNQUM1RDtBQUFBLElBQ0Y7QUFDQSxRQUFJLHlCQUF5QixNQUFNLGdDQUFnQyx5QkFBeUI7QUFBQSxNQUMxRixPQUFPO0FBQ0wsZUFBTyxNQUFNLHdCQUF3QjtBQUFBLE1BQ3ZDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLHdCQUF3QixTQUFTO0FBQUEsTUFDL0Q7QUFBQSxJQUNGO0FBQ0EsUUFBSSxvQkFBb0I7QUFBQSxNQUN0QixRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsSUFDWjtBQUNBLFFBQUksY0FBYztBQUFBLE1BQ2hCLFFBQVE7QUFBQSxNQUNSLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxNQUNWLFVBQVU7QUFBQSxJQUNaO0FBQ0EsUUFBSSxnQkFBZ0I7QUFBQSxNQUNsQixRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixpQkFBaUI7QUFBQSxNQUNqQixVQUFVO0FBQUEsTUFDVixxQ0FBcUM7QUFBQSxNQUNyQyxpQkFBaUI7QUFBQSxNQUNqQixVQUFVO0FBQUEsSUFDWjtBQUNBLFFBQUksYUFBYTtBQUFBLE1BQ2YsVUFBVTtBQUFBLE1BQ1YsNEJBQTRCO0FBQUEsSUFDOUI7QUFDQSxRQUFJLGNBQWM7QUFBQSxNQUNoQixRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixXQUFXO0FBQUEsTUFDWCxVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsTUFDVixxQ0FBcUM7QUFBQSxNQUNyQyxVQUFVO0FBQUEsSUFDWjtBQUNBLFFBQUksb0NBQW9DLE1BQU0sMkNBQTJDLHlCQUF5QjtBQUFBLE1BQ2hILE9BQU87QUFDTCxlQUFPLE1BQU0sbUNBQW1DO0FBQUEsTUFDbEQ7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sbUNBQW1DLFNBQVM7QUFBQSxNQUMxRTtBQUFBLElBQ0Y7QUFDQSxRQUFJLHlCQUF5QjtBQUFBLE1BQzNCLFVBQVU7QUFBQSxNQUNWLFFBQVE7QUFBQSxJQUNWO0FBQ0EsUUFBSSx5QkFBeUIsTUFBTSxnQ0FBZ0MseUJBQXlCO0FBQUEsTUFDMUYsT0FBTztBQUNMLGVBQU8sTUFBTSx3QkFBd0I7QUFBQSxNQUN2QztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSx3QkFBd0IsU0FBUztBQUFBLE1BQy9EO0FBQUEsSUFDRjtBQUNBLFFBQUksY0FBYztBQUFBLE1BQ2hCLFNBQVM7QUFBQSxNQUNULFNBQVM7QUFBQSxNQUNULE1BQU07QUFBQSxNQUNOLGFBQWE7QUFBQSxNQUNiLGFBQWE7QUFBQSxJQUNmO0FBQ0EsUUFBSSxtQ0FBbUMsTUFBTSwwQ0FBMEMseUJBQXlCO0FBQUEsTUFDOUcsT0FBTztBQUNMLGVBQU8sTUFBTSxrQ0FBa0M7QUFBQSxNQUNqRDtBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSxrQ0FBa0MsU0FBUztBQUFBLE1BQ3pFO0FBQUEsSUFDRjtBQUNBLFFBQUksK0JBQStCLE1BQU0sc0NBQXNDLHlCQUF5QjtBQUFBLE1BQ3RHLE9BQU87QUFDTCxlQUFPLE1BQU0sOEJBQThCO0FBQUEsTUFDN0M7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sOEJBQThCLFNBQVM7QUFBQSxNQUNyRTtBQUFBLElBQ0Y7QUFDQSxRQUFJLDBCQUEwQixNQUFNLGlDQUFpQyx5QkFBeUI7QUFBQSxNQUM1RixPQUFPO0FBQ0wsZUFBTyxNQUFNLHlCQUF5QjtBQUFBLE1BQ3hDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLHlCQUF5QixTQUFTO0FBQUEsTUFDaEU7QUFBQSxJQUNGO0FBQ0EsUUFBSSxlQUFlO0FBQUEsTUFDakIsZUFBZTtBQUFBLE1BQ2YsS0FBSztBQUFBLElBQ1A7QUFDQSxRQUFJLGVBQWU7QUFBQSxNQUNqQixXQUFXO0FBQUEsTUFDWCxRQUFRO0FBQUEsTUFDUixhQUFhO0FBQUEsSUFDZjtBQUNBLFFBQUksYUFBYTtBQUFBLE1BQ2YsYUFBYTtBQUFBLE1BQ2Isb0JBQW9CO0FBQUEsSUFDdEI7QUFDQSxRQUFJLGlCQUFpQjtBQUFBLE1BQ25CLG9CQUFvQjtBQUFBLE1BQ3BCLFdBQVc7QUFBQSxJQUNiO0FBQ0EsUUFBSSxpQkFBaUI7QUFBQSxNQUNuQixRQUFRO0FBQUEsTUFDUixLQUFLO0FBQUEsSUFDUDtBQUNBLFFBQUksMEJBQTBCLE1BQU0saUNBQWlDLHlCQUF5QjtBQUFBLE1BQzVGLE9BQU87QUFDTCxlQUFPLE1BQU0seUJBQXlCO0FBQUEsTUFDeEM7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0seUJBQXlCLFNBQVM7QUFBQSxNQUNoRTtBQUFBLElBQ0Y7QUFDQSxRQUFJLCtCQUErQixNQUFNLHNDQUFzQyx5QkFBeUI7QUFBQSxNQUN0RyxPQUFPO0FBQ0wsZUFBTyxNQUFNLDhCQUE4QjtBQUFBLE1BQzdDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLDhCQUE4QixTQUFTO0FBQUEsTUFDckU7QUFBQSxJQUNGO0FBQ0EsUUFBSSxlQUFlO0FBQUEsTUFDakIsV0FBVztBQUFBLE1BQ1gsWUFBWTtBQUFBLE1BQ1osV0FBVztBQUFBLE1BQ1gsUUFBUTtBQUFBLE1BQ1IsYUFBYTtBQUFBLElBQ2Y7QUFDQSxRQUFJLHVCQUF1QjtBQUFBLE1BQ3pCLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxJQUNSO0FBQ0EsUUFBSSxjQUFjO0FBQUEsTUFDaEIsS0FBSztBQUFBLE1BQ0wsZUFBZTtBQUFBLE1BQ2YsS0FBSztBQUFBLElBQ1A7QUFDQSxRQUFJLDBCQUEwQixNQUFNLGlDQUFpQyx5QkFBeUI7QUFBQSxNQUM1RixPQUFPO0FBQ0wsZUFBTyxNQUFNLHlCQUF5QjtBQUFBLE1BQ3hDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLHlCQUF5QixTQUFTO0FBQUEsTUFDaEU7QUFBQSxJQUNGO0FBQ0EsUUFBSSxvQkFBb0I7QUFBQSxNQUN0QixRQUFRO0FBQUEsTUFDUixVQUFVO0FBQUEsTUFDVixXQUFXO0FBQUEsTUFDWCxlQUFlO0FBQUEsTUFDZixVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsSUFDWjtBQUNBLFFBQUkseUJBQXlCLE1BQU0sZ0NBQWdDLHlCQUF5QjtBQUFBLE1BQzFGLE9BQU87QUFDTCxlQUFPLE1BQU0sd0JBQXdCO0FBQUEsTUFDdkM7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sd0JBQXdCLFNBQVM7QUFBQSxNQUMvRDtBQUFBLElBQ0Y7QUFDQSxRQUFJLHVDQUF1QyxNQUFNLDhDQUE4Qyx5QkFBeUI7QUFBQSxNQUN0SCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHNDQUFzQztBQUFBLE1BQ3JEO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUEsTUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSxzQ0FBc0MsU0FBUztBQUMzRSxhQUFLLFVBQVUsS0FBSztBQUFBLE1BQ3RCO0FBQUEsSUFDRjtBQUNBLFFBQUksaUNBQWlDLE1BQU0sd0NBQXdDLHlCQUF5QjtBQUFBLE1BQzFHLE9BQU87QUFDTCxlQUFPLE1BQU0sZ0NBQWdDO0FBQUEsTUFDL0M7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQSxNQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJQSxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLGdDQUFnQyxTQUFTO0FBQ3JFLGFBQUssVUFBVSxLQUFLO0FBQUEsTUFDdEI7QUFBQSxJQUNGO0FBQ0EsUUFBSSwwQkFBMEIsTUFBTSxpQ0FBaUMseUJBQXlCO0FBQUEsTUFDNUYsT0FBTztBQUNMLGVBQU8sTUFBTSx5QkFBeUI7QUFBQSxNQUN4QztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSx5QkFBeUIsU0FBUztBQUFBLE1BQ2hFO0FBQUEsSUFDRjtBQUNBLFFBQUksNkJBQTZCLE1BQU0sb0NBQW9DLHlCQUF5QjtBQUFBLE1BQ2xHLE9BQU87QUFDTCxlQUFPLE1BQU0sNEJBQTRCO0FBQUEsTUFDM0M7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sNEJBQTRCLFNBQVM7QUFBQSxNQUNuRTtBQUFBLElBQ0Y7QUFDQSxRQUFJLDBDQUEwQyxNQUFNLGlEQUFpRCx5QkFBeUI7QUFBQSxNQUM1SCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHlDQUF5QztBQUFBLE1BQ3hEO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLHlDQUF5QyxTQUFTO0FBQUEsTUFDaEY7QUFBQSxJQUNGO0FBQ0EsUUFBSSwwQkFBMEIsTUFBTSxpQ0FBaUMseUJBQXlCO0FBQUEsTUFDNUYsT0FBTztBQUNMLGVBQU8sTUFBTSx5QkFBeUI7QUFBQSxNQUN4QztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSx5QkFBeUIsU0FBUztBQUFBLE1BQ2hFO0FBQUEsSUFDRjtBQUNBLFFBQUksU0FBUztBQUFBLE1BQ1gsZ0JBQWdCO0FBQUEsTUFDaEIsMEJBQTBCO0FBQUEsTUFDMUIsT0FBTztBQUFBLE1BQ1AscUJBQXFCO0FBQUEsSUFDdkI7QUFDQSxRQUFJLDhCQUE4QixNQUFNLHFDQUFxQyx5QkFBeUI7QUFBQSxNQUNwRyxPQUFPO0FBQ0wsZUFBTyxNQUFNLDZCQUE2QjtBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLDZCQUE2QixTQUFTO0FBQUEsTUFDcEU7QUFBQSxJQUNGO0FBQ0EsUUFBSSw4QkFBOEIsTUFBTSxxQ0FBcUMseUJBQXlCO0FBQUEsTUFDcEcsT0FBTztBQUNMLGVBQU8sTUFBTSw2QkFBNkI7QUFBQSxNQUM1QztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSw2QkFBNkIsU0FBUztBQUFBLE1BQ3BFO0FBQUEsSUFDRjtBQUNBLFFBQUksZ0NBQWdDLE1BQU0sdUNBQXVDLHlCQUF5QjtBQUFBLE1BQ3hHLE9BQU87QUFDTCxlQUFPLE1BQU0sK0JBQStCO0FBQUEsTUFDOUM7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlULFlBQVksTUFBTTtBQUNoQixjQUFNO0FBQUEsVUFDSixNQUFNO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDUixHQUFHO0FBQUEsUUFDTCxDQUFDO0FBQ0QsZUFBTyxlQUFlLE1BQU0sK0JBQStCLFNBQVM7QUFBQSxNQUN0RTtBQUFBLElBQ0Y7QUFDQSxRQUFJLDJCQUEyQixNQUFNLGtDQUFrQyx5QkFBeUI7QUFBQSxNQUM5RixPQUFPO0FBQ0wsZUFBTyxNQUFNLDBCQUEwQjtBQUFBLE1BQ3pDO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJVCxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLDBCQUEwQixTQUFTO0FBQUEsTUFDakU7QUFBQSxJQUNGO0FBQ0EsUUFBSSx5QkFBeUIsTUFBTSxnQ0FBZ0MseUJBQXlCO0FBQUEsTUFDMUYsT0FBTztBQUNMLGVBQU8sTUFBTSx3QkFBd0I7QUFBQSxNQUN2QztBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSVQsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSx3QkFBd0IsU0FBUztBQUFBLE1BQy9EO0FBQUEsSUFDRjtBQUNBLFFBQUk7QUFDSixLQUFDLENBQUMsb0JBQW9CO0FBQ3BCLHNCQUFnQixRQUF3Qix1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNqRSxZQUFJLE1BQU0sTUFBTSxPQUFRLFFBQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQztBQUNoRCxZQUFJLE1BQU0sTUFBTSxPQUFRLFFBQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQztBQUNoRCxZQUFJLE1BQU0sTUFBTSxPQUFRLFFBQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQztBQUNoRCxZQUFJLE1BQU0sT0FBTyxPQUFRLFFBQU8sUUFBUSxHQUFHLE1BQU0sRUFBRTtBQUNuRCxZQUFJLE1BQU0sT0FBTyxPQUFRLFFBQU8sUUFBUSxHQUFHLE1BQU0sRUFBRTtBQUNuRCxZQUFJLE1BQU0sT0FBTyxPQUFRLFFBQU8sUUFBUSxHQUFHLE1BQU0sRUFBRTtBQUNuRCxZQUFJLE1BQU0sTUFBTSxPQUFRLFFBQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQztBQUNoRCxZQUFJLE1BQU0sTUFBTSxPQUFRLFFBQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQztBQUNoRCxZQUFJLE1BQU0sU0FBUyxPQUFRLFFBQU8sUUFBUSxLQUFLLE1BQU0sSUFBSTtBQUN6RCxZQUFJLE1BQU0sU0FBUyxPQUFRLFFBQU8sUUFBUSxLQUFLLE1BQU0sSUFBSTtBQUN6RCxlQUFPLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQyxHQUFHLE1BQU0sU0FBUyxDQUFDLENBQUM7QUFBQSxNQUN2RCxHQUFHLE9BQU87QUFBQSxJQUNaLEdBQUcsbUJBQW1CLGlCQUFpQixDQUFDLEVBQUU7QUFDMUMsUUFBSSxrQ0FBa0MsTUFBTSx5Q0FBeUMseUJBQXlCO0FBQUEsTUFDNUcsT0FBTztBQUNMLGVBQU8sTUFBTSxpQ0FBaUM7QUFBQSxNQUNoRDtBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFLVDtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsWUFBWSxNQUFNO0FBQ2hCLGNBQU07QUFBQSxVQUNKLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxVQUNSLEdBQUc7QUFBQSxRQUNMLENBQUM7QUFDRCxlQUFPLGVBQWUsTUFBTSxpQ0FBaUMsU0FBUztBQUN0RSxhQUFLLE9BQU8sS0FBSztBQUFBLE1BQ25CO0FBQUEsSUFDRjtBQUNBLFFBQUksK0JBQStCLE1BQU0sc0NBQXNDLHlCQUF5QjtBQUFBLE1BQ3RHLE9BQU87QUFDTCxlQUFPLE1BQU0sOEJBQThCO0FBQUEsTUFDN0M7QUFBQSxNQUNBLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQSxNQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUtBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJQSxZQUFZLE1BQU07QUFDaEIsY0FBTTtBQUFBLFVBQ0osTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBLFVBQ1IsR0FBRztBQUFBLFFBQ0wsQ0FBQztBQUNELGVBQU8sZUFBZSxNQUFNLDhCQUE4QixTQUFTO0FBQ25FLGFBQUssVUFBVSxLQUFLO0FBQ3BCLGFBQUssc0JBQXNCLEtBQUs7QUFBQSxNQUNsQztBQUFBLElBQ0Y7QUFHQSxRQUFJLGtDQUFrRCx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNyRixZQUFNLFVBQVUsY0FBYyx1QkFBdUI7QUFDckQsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLDhCQUE4QixPQUFPLE9BQU8sQ0FBQztBQUNuRSxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsaUNBQWlDO0FBQ3BDLFFBQUkseUJBQXlDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzVFLFlBQU0sVUFBVSxjQUFjLGNBQWM7QUFDNUMsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLHFCQUFxQixPQUFPLE9BQU8sQ0FBQztBQUMxRCxhQUFPQSxxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyx3QkFBd0I7QUFDM0IsUUFBSSwyQkFBMkMsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDOUUsWUFBTSxVQUFVLGNBQWMsZ0JBQWdCO0FBQzlDLFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSx1QkFBdUIsT0FBTyxPQUFPLENBQUM7QUFDNUQsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsMEJBQTBCO0FBQzdCLFFBQUkseUJBQXlDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzVFLFlBQU0sVUFBVSxjQUFjLGNBQWM7QUFDNUMsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLHdCQUF3QjtBQUMzQixRQUFJLDhCQUE4Qyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNqRixZQUFNLFVBQVUsY0FBYyxtQkFBbUI7QUFDakQsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDZCQUE2QjtBQUNoQyxRQUFJLHdCQUF3Qyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUMzRSxZQUFNLFVBQVUsY0FBYyxhQUFhO0FBQzNDLFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSx5QkFBeUMsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDNUUsWUFBTSxVQUFVLGNBQWMsY0FBYztBQUM1QyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksdUJBQXVDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzFFLFlBQU0sVUFBVSxjQUFjLFlBQVk7QUFDMUMsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLG1CQUFtQixPQUFPLE9BQU8sQ0FBQztBQUN4RCxhQUFPQSxxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSxpQ0FBaUQsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDcEYsWUFBTSxVQUFVLGNBQWMsc0JBQXNCO0FBQ3BELFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyxnQ0FBZ0M7QUFDbkMsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDM0UsWUFBTSxVQUFVLGNBQWMsYUFBYTtBQUMzQyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksMkJBQTJDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzlFLFlBQU0sVUFBVSxjQUFjLGdCQUFnQjtBQUM5QyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksc0NBQXNELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ3pGLFlBQU0sVUFBVSxjQUFjLDJCQUEyQjtBQUN6RCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcscUNBQXFDO0FBQ3hDLFFBQUksd0NBQXdELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzNGLFlBQU0sVUFBVSxjQUFjLDZCQUE2QjtBQUMzRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsdUNBQXVDO0FBQzFDLFFBQUksOEJBQThDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ2pGLFlBQU0sVUFBVSxjQUFjLG1CQUFtQjtBQUNqRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksMkJBQTJDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzlFLFlBQU0sVUFBVSxjQUFjLGdCQUFnQjtBQUM5QyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksZ0NBQWdELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ25GLFlBQU0sVUFBVSxjQUFjLHFCQUFxQjtBQUNuRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsK0JBQStCO0FBQ2xDLFFBQUksd0NBQXdELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzNGLFlBQU0sVUFBVSxjQUFjLDZCQUE2QjtBQUMzRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsdUNBQXVDO0FBQzFDLFFBQUksMkJBQTJDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzlFLFlBQU0sVUFBVSxjQUFjLGdCQUFnQjtBQUM5QyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksZ0RBQWdFLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ25HLFlBQU0sVUFBVSxjQUFjLHFDQUFxQztBQUNuRSxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsK0NBQStDO0FBQ2xELFFBQUksMkJBQTJDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzlFLFlBQU0sVUFBVSxjQUFjLGdCQUFnQjtBQUM5QyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksMEJBQTBDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzdFLFlBQU0sVUFBVSxjQUFjLGVBQWU7QUFDN0MsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLHlCQUF5QjtBQUM1QixRQUFJLDRDQUE0RCx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUMvRixZQUFNLFVBQVUsY0FBYyxpQ0FBaUM7QUFDL0QsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDJDQUEyQztBQUM5QyxRQUFJLCtCQUErQyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNsRixZQUFNLFVBQVUsY0FBYyxvQkFBb0I7QUFDbEQsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLCtDQUErRCx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNsRyxZQUFNLFVBQVUsY0FBYyxvQ0FBb0M7QUFDbEUsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDhDQUE4QztBQUNqRCxRQUFJLDhDQUE4RCx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNqRyxZQUFNLFVBQVUsY0FBYyxtQ0FBbUM7QUFDakUsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDZDQUE2QztBQUNoRCxRQUFJLDZCQUE2Qyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNoRixZQUFNLFVBQVUsY0FBYyxrQkFBa0I7QUFDaEQsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLHlCQUF5QixPQUFPLE9BQU8sQ0FBQztBQUM5RCxhQUFPQSxxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSwrQkFBK0MsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDbEYsWUFBTSxVQUFVLGNBQWMsb0JBQW9CO0FBQ2xELFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSwyQkFBMkIsT0FBTyxPQUFPLENBQUM7QUFDaEUsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsOEJBQThCO0FBQ2pDLFFBQUkscUNBQXFELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ3hGLFlBQU0sVUFBVSxjQUFjLDBCQUEwQjtBQUN4RCxVQUFJO0FBQ0osYUFBTyxLQUFLLFVBQVUsaUNBQWlDLE9BQU8sT0FBTyxDQUFDO0FBQ3RFLGFBQU9BLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLG9DQUFvQztBQUN2QyxRQUFJLG9CQUFvQyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUN2RSxZQUFNLFVBQVUsY0FBYyxTQUFTO0FBQ3ZDLFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSxnQkFBZ0IsT0FBTyxPQUFPLENBQUM7QUFDckQsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsbUJBQW1CO0FBQ3RCLFFBQUksOEJBQThDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ2pGLFlBQU0sVUFBVSxjQUFjLG1CQUFtQjtBQUNqRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksd0JBQXdDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzNFLFlBQU0sVUFBVSxjQUFjLGFBQWE7QUFDM0MsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLG9CQUFvQixPQUFPLE9BQU8sQ0FBQztBQUN6RCxhQUFPQSxxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDM0UsWUFBTSxVQUFVLGNBQWMsYUFBYTtBQUMzQyxVQUFJO0FBQ0osYUFBTyxLQUFLLFVBQVUsb0JBQW9CLE9BQU8sT0FBTyxDQUFDO0FBQ3pELGFBQU9BLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLG9DQUFvRCx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUN2RixZQUFNLFVBQVUsY0FBYyx5QkFBeUI7QUFDdkQsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLG1DQUFtQztBQUN0QyxRQUFJLHdCQUF3Qyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUMzRSxZQUFNLFVBQVUsY0FBYyxhQUFhO0FBQzNDLFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSw2QkFBNkMsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDaEYsWUFBTSxVQUFVLGNBQWMsa0JBQWtCO0FBQ2hELFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDM0UsWUFBTSxVQUFVLGNBQWMsYUFBYTtBQUMzQyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksdUJBQXVDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzFFLFlBQU0sVUFBVSxjQUFjLFlBQVk7QUFDMUMsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLCtCQUErQyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNsRixZQUFNLFVBQVUsY0FBYyxvQkFBb0I7QUFDbEQsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLG9CQUFvQyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUN2RSxZQUFNLFVBQVUsY0FBYyxTQUFTO0FBQ3ZDLFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSxnQkFBZ0IsT0FBTyxPQUFPLENBQUM7QUFDckQsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsbUJBQW1CO0FBQ3RCLFFBQUksOEJBQThDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ2pGLFlBQU0sVUFBVSxjQUFjLG1CQUFtQjtBQUNqRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksa0JBQWtDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ3JFLFlBQU0sVUFBVSxjQUFjLE9BQU87QUFDckMsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLGNBQWMsT0FBTyxPQUFPLENBQUM7QUFDbkQsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsaUJBQWlCO0FBQ3BCLFFBQUksbUNBQW1ELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ3RGLFlBQU0sVUFBVSxjQUFjLHdCQUF3QjtBQUN0RCxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsa0NBQWtDO0FBQ3JDLFFBQUksc0NBQXNELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ3pGLFlBQU0sVUFBVSxjQUFjLDJCQUEyQjtBQUN6RCxVQUFJO0FBQ0osYUFBTyxLQUFLLFVBQVUsa0NBQWtDLE9BQU8sT0FBTyxDQUFDO0FBQ3ZFLGFBQU9BLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLHFDQUFxQztBQUN4QyxRQUFJLGlCQUFpQyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNwRSxZQUFNLFVBQVUsY0FBYyxNQUFNO0FBQ3BDLFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSxhQUFhLE9BQU8sT0FBTyxDQUFDO0FBQ2xELGFBQU9BLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLGdCQUFnQjtBQUNuQixRQUFJLHdCQUF3Qyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUMzRSxZQUFNLFVBQVUsY0FBYyxhQUFhO0FBQzNDLFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSw2QkFBNkMsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDaEYsWUFBTSxVQUFVLGNBQWMsa0JBQWtCO0FBQ2hELFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSx5QkFBeUIsT0FBTyxPQUFPLENBQUM7QUFDOUQsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsNEJBQTRCO0FBQy9CLFFBQUksK0JBQStDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQ2xGLFlBQU0sVUFBVSxjQUFjLG9CQUFvQjtBQUNsRCxVQUFJO0FBQ0osYUFBTyxLQUFLLFVBQVUsMkJBQTJCLE9BQU8sT0FBTyxDQUFDO0FBQ2hFLGFBQU9BLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLDBCQUEwQyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUM3RSxZQUFNLFVBQVUsY0FBYyxlQUFlO0FBQzdDLFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyx5QkFBeUI7QUFDNUIsUUFBSSxvQ0FBb0QsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDdkYsWUFBTSxVQUFVLGNBQWMseUJBQXlCO0FBQ3ZELFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSxzQ0FBc0QsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDekYsWUFBTSxVQUFVLGNBQWMsMkJBQTJCO0FBQ3pELFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyxxQ0FBcUM7QUFDeEMsUUFBSSw4QkFBOEMsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDakYsWUFBTSxVQUFVLGNBQWMsbUJBQW1CO0FBQ2pELFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSxzQ0FBc0QsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDekYsWUFBTSxVQUFVLGNBQWMsMkJBQTJCO0FBQ3pELFVBQUk7QUFDSixhQUFPLEtBQUssVUFBVSxrQ0FBa0MsT0FBTyxPQUFPLENBQUM7QUFDdkUsYUFBT0EscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcscUNBQXFDO0FBQ3hDLFFBQUksdUJBQXVDLHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzFFLFlBQU0sVUFBVSxjQUFjLFlBQVk7QUFDMUMsVUFBSTtBQUNKLGFBQU8sS0FBSyxVQUFVLG1CQUFtQixPQUFPLE9BQU8sQ0FBQztBQUN4RCxhQUFPQSxxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSw4Q0FBOEQsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDakcsWUFBTSxVQUFVLGNBQWMsbUNBQW1DO0FBQ2pFLFVBQUk7QUFDSixhQUFPLEtBQUssV0FBVyxHQUFHaEIsdUJBQXFCLE9BQU8sS0FBSyxDQUFDO0FBQzVELGFBQU9nQixxQkFBb0IsU0FBUyxTQUFTLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDaEUsR0FBRyw2Q0FBNkM7QUFDaEQsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxPQUFPLFlBQVk7QUFDM0UsWUFBTSxVQUFVLGNBQWMsYUFBYTtBQUMzQyxVQUFJO0FBQ0osYUFBTyxLQUFLLFdBQVcsR0FBR2hCLHVCQUFxQixPQUFPLEtBQUssQ0FBQztBQUM1RCxhQUFPZ0IscUJBQW9CLFNBQVMsU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUFBLElBQ2hFLEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksMENBQTBELHVCQUFPLE9BQU8sT0FBTyxZQUFZO0FBQzdGLFlBQU0sVUFBVSxjQUFjLCtCQUErQjtBQUM3RCxVQUFJO0FBQ0osYUFBTyxLQUFLLFVBQVUsc0NBQXNDLE9BQU8sT0FBTyxDQUFDO0FBQzNFLGFBQU9BLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLHlDQUF5QztBQUM1QyxRQUFJLDZCQUE2Qyx1QkFBTyxPQUFPLE9BQU8sWUFBWTtBQUNoRixZQUFNLFVBQVUsY0FBYyxrQkFBa0I7QUFDaEQsVUFBSTtBQUNKLGFBQU8sS0FBSyxXQUFXLEdBQUdoQix1QkFBcUIsT0FBTyxLQUFLLENBQUM7QUFDNUQsYUFBT2dCLHFCQUFvQixTQUFTLFNBQVMsS0FBSyxRQUFRLElBQUk7QUFBQSxJQUNoRSxHQUFHLDRCQUE0QjtBQUMvQixRQUFJLGtDQUFrRCx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUN0RixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9DLGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVywrQkFBK0IsTUFBTSxPQUFPO0FBQ3ZELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsaUNBQWlDO0FBQ3BDLFFBQUkseUJBQXlDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzdFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLHNCQUFzQixNQUFNLE9BQU87QUFDOUMsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyx3QkFBd0I7QUFDM0IsUUFBSSwyQkFBMkMsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDL0UsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsd0JBQXdCLE1BQU0sT0FBTztBQUNoRCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDBCQUEwQjtBQUM3QixRQUFJLHlCQUF5Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUM3RSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxzQkFBc0IsTUFBTSxPQUFPO0FBQzlDLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksOEJBQThDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ2xGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLDJCQUEyQixNQUFNLE9BQU87QUFDbkQsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDNUUsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcscUJBQXFCLE1BQU0sT0FBTztBQUM3QyxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLHlCQUF5Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUM3RSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxzQkFBc0IsTUFBTSxPQUFPO0FBQzlDLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksdUJBQXVDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzNFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLG9CQUFvQixNQUFNLE9BQU87QUFDNUMsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSxpQ0FBaUQsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDckYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsa0JBQVksR0FBR2QsdUJBQXFCLE9BQU8sSUFBSTtBQUMvQyxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdrQixxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyxnQ0FBZ0M7QUFDbkMsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDNUUsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcscUJBQXFCLE1BQU0sT0FBTztBQUM3QyxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLDJCQUEyQyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUMvRSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyx3QkFBd0IsTUFBTSxPQUFPO0FBQ2hELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksc0NBQXNELHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzFGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLG1DQUFtQyxNQUFNLE9BQU87QUFDM0QsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyxxQ0FBcUM7QUFDeEMsUUFBSSx3Q0FBd0QsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDNUYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcscUNBQXFDLE1BQU0sT0FBTztBQUM3RCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHVDQUF1QztBQUMxQyxRQUFJLDhCQUE4Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNsRixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDZCQUE2QjtBQUNoQyxRQUFJLDJCQUEyQyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUMvRSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyx3QkFBd0IsTUFBTSxPQUFPO0FBQ2hELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksZ0NBQWdELHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ3BGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLDZCQUE2QixNQUFNLE9BQU87QUFDckQsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRywrQkFBK0I7QUFDbEMsUUFBSSx3Q0FBd0QsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDNUYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcscUNBQXFDLE1BQU0sT0FBTztBQUM3RCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHVDQUF1QztBQUMxQyxRQUFJLDJCQUEyQyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUMvRSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyx3QkFBd0IsTUFBTSxPQUFPO0FBQ2hELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksZ0RBQWdFLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ3BHLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsK0NBQStDO0FBQ2xELFFBQUksMkJBQTJDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQy9FLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksMEJBQTBDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzlFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLHVCQUF1QixNQUFNLE9BQU87QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyx5QkFBeUI7QUFDNUIsUUFBSSw0Q0FBNEQsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDaEcsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcseUNBQXlDLE1BQU0sT0FBTztBQUNqRSxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDJDQUEyQztBQUM5QyxRQUFJLCtCQUErQyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNuRixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLCtDQUErRCx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNuRyxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDhDQUE4QztBQUNqRCxRQUFJLDhDQUE4RCx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNsRyxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDZDQUE2QztBQUNoRCxRQUFJLDZCQUE2Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNqRixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVywwQkFBMEIsTUFBTSxPQUFPO0FBQ2xELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsNEJBQTRCO0FBQy9CLFFBQUksK0JBQStDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ25GLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLDRCQUE0QixNQUFNLE9BQU87QUFDcEQsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyw4QkFBOEI7QUFDakMsUUFBSSxxQ0FBcUQsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDekYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsa0NBQWtDLE1BQU0sT0FBTztBQUMxRCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLG9DQUFvQztBQUN2QyxRQUFJLG9CQUFvQyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUN4RSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxpQkFBaUIsTUFBTSxPQUFPO0FBQ3pDLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsbUJBQW1CO0FBQ3RCLFFBQUksOEJBQThDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ2xGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksd0JBQXdDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzVFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLHFCQUFxQixNQUFNLE9BQU87QUFDN0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSx3QkFBd0MsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDNUUsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcscUJBQXFCLE1BQU0sT0FBTztBQUM3QyxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLG9DQUFvRCx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUN4RixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLG1DQUFtQztBQUN0QyxRQUFJLHdCQUF3Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUM1RSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLDZCQUE2Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNqRixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDRCQUE0QjtBQUMvQixRQUFJLHdCQUF3Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUM1RSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxxQkFBcUIsTUFBTSxPQUFPO0FBQzdDLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksdUJBQXVDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzNFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksK0JBQStDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ25GLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsOEJBQThCO0FBQ2pDLFFBQUksb0JBQW9DLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ3hFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLGlCQUFpQixNQUFNLE9BQU87QUFDekMsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyxtQkFBbUI7QUFDdEIsUUFBSSw4QkFBOEMsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDbEYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsa0JBQVksR0FBR2QsdUJBQXFCLE9BQU8sSUFBSTtBQUMvQyxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdrQixxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSxrQkFBa0MsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDdEUsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsZUFBZSxNQUFNLE9BQU87QUFDdkMsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyxpQkFBaUI7QUFDcEIsUUFBSSxtQ0FBbUQsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDdkYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsZ0NBQWdDLE1BQU0sT0FBTztBQUN4RCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLGtDQUFrQztBQUNyQyxRQUFJLHNDQUFzRCx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUMxRixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxtQ0FBbUMsTUFBTSxPQUFPO0FBQzNELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcscUNBQXFDO0FBQ3hDLFFBQUksaUJBQWlDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ3JFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLGNBQWMsTUFBTSxPQUFPO0FBQ3RDLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsZ0JBQWdCO0FBQ25CLFFBQUksd0JBQXdDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzVFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsYUFBTyxHQUFHakIsdUJBQXFCLGFBQWEsT0FBTyxNQUFNLE9BQU87QUFDaEUsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxNQUN2QztBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksNkJBQTZDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ2pGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLDBCQUEwQixNQUFNLE9BQU87QUFDbEQsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSwrQkFBK0MsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDbkYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsNEJBQTRCLE1BQU0sT0FBTztBQUNwRCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLDBCQUEwQyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUM5RSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLGFBQU8sR0FBR2pCLHVCQUFxQixhQUFhLE9BQU8sTUFBTSxPQUFPO0FBQ2hFLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsTUFDdkM7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHlCQUF5QjtBQUM1QixRQUFJLG9DQUFvRCx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUN4RixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxpQ0FBaUMsTUFBTSxPQUFPO0FBQ3pELFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsbUNBQW1DO0FBQ3RDLFFBQUksc0NBQXNELHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzFGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcscUNBQXFDO0FBQ3hDLFFBQUksOEJBQThDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ2xGLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLDJCQUEyQixNQUFNLE9BQU87QUFDbkQsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSxzQ0FBc0QsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDMUYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsbUNBQW1DLE1BQU0sT0FBTztBQUMzRCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHFDQUFxQztBQUN4QyxRQUFJLHVCQUF1Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUMzRSxVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixpQkFBVyxvQkFBb0IsTUFBTSxPQUFPO0FBQzVDLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV0kscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksOENBQThELHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQ2xHLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGtCQUFZLEdBQUdkLHVCQUFxQixPQUFPLElBQUk7QUFDL0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXa0IscUJBQW9CLE1BQU07QUFBQSxRQUNyQyxHQUFHO0FBQUEsTUFDTDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsNkNBQTZDO0FBQ2hELFFBQUksd0JBQXdDLHVCQUFPLE9BQU8sUUFBUSxZQUFZO0FBQzVFLFVBQUksT0FBTyxjQUFjLEtBQUs7QUFDNUIsZUFBT0QsaUJBQWdCLFFBQVEsT0FBTztBQUFBLE1BQ3hDO0FBQ0EsWUFBTSxPQUFPLE9BQU8sR0FBR0gsY0FBWSxlQUFlLE9BQU8sTUFBTSxPQUFPO0FBQ3RFLFVBQUksV0FBVyxDQUFDO0FBQ2hCLGlCQUFXLHFCQUFxQixNQUFNLE9BQU87QUFDN0MsWUFBTSxXQUFXO0FBQUEsUUFDZixXQUFXSSxxQkFBb0IsTUFBTTtBQUFBLFFBQ3JDLEdBQUc7QUFBQSxNQUNMO0FBQ0EsYUFBTztBQUFBLElBQ1QsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSwwQ0FBMEQsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDOUYsVUFBSSxPQUFPLGNBQWMsS0FBSztBQUM1QixlQUFPRCxpQkFBZ0IsUUFBUSxPQUFPO0FBQUEsTUFDeEM7QUFDQSxZQUFNLE9BQU8sT0FBTyxHQUFHSCxjQUFZLGVBQWUsT0FBTyxNQUFNLE9BQU87QUFDdEUsVUFBSSxXQUFXLENBQUM7QUFDaEIsaUJBQVcsdUNBQXVDLE1BQU0sT0FBTztBQUMvRCxZQUFNLFdBQVc7QUFBQSxRQUNmLFdBQVdJLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLHlDQUF5QztBQUM1QyxRQUFJLDZCQUE2Qyx1QkFBTyxPQUFPLFFBQVEsWUFBWTtBQUNqRixVQUFJLE9BQU8sY0FBYyxLQUFLO0FBQzVCLGVBQU9ELGlCQUFnQixRQUFRLE9BQU87QUFBQSxNQUN4QztBQUNBLFlBQU0sT0FBTyxPQUFPLEdBQUdILGNBQVksZUFBZSxPQUFPLE1BQU0sT0FBTztBQUN0RSxVQUFJLFdBQVcsQ0FBQztBQUNoQixrQkFBWSxHQUFHZCx1QkFBcUIsT0FBTyxJQUFJO0FBQy9DLFlBQU0sV0FBVztBQUFBLFFBQ2YsV0FBV2tCLHFCQUFvQixNQUFNO0FBQUEsUUFDckMsR0FBRztBQUFBLE1BQ0w7QUFDQSxhQUFPO0FBQUEsSUFDVCxHQUFHLDRCQUE0QjtBQUMvQixRQUFJRCxtQkFBa0MsdUJBQU8sT0FBTyxRQUFRLFlBQVk7QUFDdEUsWUFBTSxlQUFlO0FBQUEsUUFDbkIsR0FBRztBQUFBLFFBQ0gsTUFBTSxPQUFPLEdBQUdILGNBQVksb0JBQW9CLE9BQU8sTUFBTSxPQUFPO0FBQUEsTUFDdEU7QUFDQSxZQUFNLGFBQWEsR0FBR0EsY0FBWSx1QkFBdUIsUUFBUSxhQUFhLElBQUk7QUFDbEYsY0FBUSxXQUFXO0FBQUEsUUFDakIsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sMEJBQTBCLGNBQWMsT0FBTztBQUFBLFFBQzdELEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDJCQUEyQixjQUFjLE9BQU87QUFBQSxRQUM5RCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSwrQkFBK0IsY0FBYyxPQUFPO0FBQUEsUUFDbEUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sNkNBQTZDLGNBQWMsT0FBTztBQUFBLFFBQ2hGLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLGdDQUFnQyxjQUFjLE9BQU87QUFBQSxRQUNuRSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSwrQ0FBK0MsY0FBYyxPQUFPO0FBQUEsUUFDbEYsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sMkJBQTJCLGNBQWMsT0FBTztBQUFBLFFBQzlELEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDRDQUE0QyxjQUFjLE9BQU87QUFBQSxRQUMvRSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSw2QkFBNkIsY0FBYyxPQUFPO0FBQUEsUUFDaEUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sMEJBQTBCLGNBQWMsT0FBTztBQUFBLFFBQzdELEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDZCQUE2QixjQUFjLE9BQU87QUFBQSxRQUNoRSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSx3Q0FBd0MsY0FBYyxPQUFPO0FBQUEsUUFDM0UsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sNkJBQTZCLGNBQWMsT0FBTztBQUFBLFFBQ2hFLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDhCQUE4QixjQUFjLE9BQU87QUFBQSxRQUNqRSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSxzQ0FBc0MsY0FBYyxPQUFPO0FBQUEsUUFDekUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sdUNBQXVDLGNBQWMsT0FBTztBQUFBLFFBQzFFLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLG1DQUFtQyxjQUFjLE9BQU87QUFBQSxRQUN0RSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSw4QkFBOEIsY0FBYyxPQUFPO0FBQUEsUUFDakUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sOEJBQThCLGNBQWMsT0FBTztBQUFBLFFBQ2pFLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLG1DQUFtQyxjQUFjLE9BQU87QUFBQSxRQUN0RSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSw4QkFBOEIsY0FBYyxPQUFPO0FBQUEsUUFDakUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sNkJBQTZCLGNBQWMsT0FBTztBQUFBLFFBQ2hFLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDJDQUEyQyxjQUFjLE9BQU87QUFBQSxRQUM5RSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSxtQ0FBbUMsY0FBYyxPQUFPO0FBQUEsUUFDdEUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0scUNBQXFDLGNBQWMsT0FBTztBQUFBLFFBQ3hFLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDhCQUE4QixjQUFjLE9BQU87QUFBQSxRQUNqRSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSxpQ0FBaUMsY0FBYyxPQUFPO0FBQUEsUUFDcEUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sOENBQThDLGNBQWMsT0FBTztBQUFBLFFBQ2pGLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLDhCQUE4QixjQUFjLE9BQU87QUFBQSxRQUNqRSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSxrQ0FBa0MsY0FBYyxPQUFPO0FBQUEsUUFDckUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sa0NBQWtDLGNBQWMsT0FBTztBQUFBLFFBQ3JFLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFDSCxnQkFBTSxNQUFNLG9DQUFvQyxjQUFjLE9BQU87QUFBQSxRQUN2RSxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0gsZ0JBQU0sTUFBTSwrQkFBK0IsY0FBYyxPQUFPO0FBQUEsUUFDbEUsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGdCQUFNLE1BQU0sNkJBQTZCLGNBQWMsT0FBTztBQUFBLFFBQ2hFO0FBQ0UsZ0JBQU0sYUFBYSxhQUFhO0FBQ2hDLGlCQUFPSyxtQkFBa0I7QUFBQSxZQUN2QjtBQUFBLFlBQ0E7QUFBQSxZQUNBO0FBQUEsVUFDRixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0YsR0FBRyxpQkFBaUI7QUFDcEIsUUFBSSw2QkFBNkMsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDdkYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR25CLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUkscUJBQXFCO0FBQUEsUUFDekMsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSxnQ0FBZ0QsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDMUYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx3QkFBd0I7QUFBQSxRQUM1QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLCtCQUErQjtBQUNsQyxRQUFJLHdDQUF3RCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUNsRyxZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGVBQWUsbUNBQW1DLE1BQU0sT0FBTztBQUNyRSxZQUFNLFlBQVksSUFBSSxnQ0FBZ0M7QUFBQSxRQUNwRCxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLHVDQUF1QztBQUMxQyxRQUFJLDhDQUE4RCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUN4RyxZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHNDQUFzQztBQUFBLFFBQzFELFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsNkNBQTZDO0FBQ2hELFFBQUksK0JBQStDLHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQ3pGLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksdUJBQXVCO0FBQUEsUUFDM0MsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyw4QkFBOEI7QUFDakMsUUFBSSxnQ0FBZ0QsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDMUYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx3QkFBd0I7QUFBQSxRQUM1QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLCtCQUErQjtBQUNsQyxRQUFJLGdDQUFnRCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUMxRixZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHdCQUF3QjtBQUFBLFFBQzVDLFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsK0JBQStCO0FBQ2xDLFFBQUksMENBQTBELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQ3BHLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksa0NBQWtDO0FBQUEsUUFDdEQsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyx5Q0FBeUM7QUFDNUMsUUFBSSxxQ0FBcUQsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDL0YsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSw2QkFBNkI7QUFBQSxRQUNqRCxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLG9DQUFvQztBQUN2QyxRQUFJLDZDQUE2RCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUN2RyxZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHFDQUFxQztBQUFBLFFBQ3pELFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsNENBQTRDO0FBQy9DLFFBQUksZ0NBQWdELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQzFGLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksd0JBQXdCO0FBQUEsUUFDNUMsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRywrQkFBK0I7QUFDbEMsUUFBSSxnQ0FBZ0QsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDMUYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx3QkFBd0I7QUFBQSxRQUM1QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLCtCQUErQjtBQUNsQyxRQUFJLCtCQUErQyx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUN6RixZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHVCQUF1QjtBQUFBLFFBQzNDLFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsOEJBQThCO0FBQ2pDLFFBQUksNEJBQTRDLHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQ3RGLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksb0JBQW9CO0FBQUEsUUFDeEMsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRywyQkFBMkI7QUFDOUIsUUFBSSxpQ0FBaUQsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDM0YsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx5QkFBeUI7QUFBQSxRQUM3QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLGdDQUFnQztBQUNuQyxRQUFJLG1DQUFtRCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUM3RixZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLDJCQUEyQjtBQUFBLFFBQy9DLFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsa0NBQWtDO0FBQ3JDLFFBQUksb0NBQW9ELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQzlGLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksNEJBQTRCO0FBQUEsUUFDaEQsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSxpREFBaUUsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDM0csWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx5Q0FBeUM7QUFBQSxRQUM3RCxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLGdEQUFnRDtBQUNuRCxRQUFJLCtCQUErQyx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUN6RixZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHVCQUF1QjtBQUFBLFFBQzNDLFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsOEJBQThCO0FBQ2pDLFFBQUksZ0RBQWdFLHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQzFHLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksd0NBQXdDO0FBQUEsUUFDNUQsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRywrQ0FBK0M7QUFDbEQsUUFBSSxnQ0FBZ0QsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDMUYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx3QkFBd0I7QUFBQSxRQUM1QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLCtCQUErQjtBQUNsQyxRQUFJLCtDQUErRCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUN6RyxZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHVDQUF1QztBQUFBLFFBQzNELFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsOENBQThDO0FBQ2pELFFBQUksc0NBQXNELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQ2hHLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksOEJBQThCO0FBQUEsUUFDbEQsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyxxQ0FBcUM7QUFDeEMsUUFBSSxpQ0FBaUQsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDM0YsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx5QkFBeUI7QUFBQSxRQUM3QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLGdDQUFnQztBQUNuQyxRQUFJLHlDQUF5RCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUNuRyxZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLGlDQUFpQztBQUFBLFFBQ3JELFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsd0NBQXdDO0FBQzNDLFFBQUksNkJBQTZDLHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQ3ZGLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUkscUJBQXFCO0FBQUEsUUFDekMsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSwrQkFBK0MsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDekYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSx1QkFBdUI7QUFBQSxRQUMzQyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLGtDQUFrRCx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUM1RixZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLDBCQUEwQjtBQUFBLFFBQzlDLFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsaUNBQWlDO0FBQ3BDLFFBQUksb0NBQW9ELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQzlGLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksNEJBQTRCO0FBQUEsUUFDaEQsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSw0QkFBNEMsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDdEYsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSxvQkFBb0I7QUFBQSxRQUN4QyxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLDJCQUEyQjtBQUM5QixRQUFJLCtCQUErQyx1QkFBTyxPQUFPLGNBQWMsWUFBWTtBQUN6RixZQUFNLE9BQU8sYUFBYTtBQUMxQixZQUFNLGdCQUFnQixHQUFHQSx1QkFBcUIsT0FBTyxJQUFJO0FBQ3pELFlBQU0sWUFBWSxJQUFJLHVCQUF1QjtBQUFBLFFBQzNDLFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsOEJBQThCO0FBQ2pDLFFBQUkscUNBQXFELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQy9GLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZUFBZSxnQ0FBZ0MsTUFBTSxPQUFPO0FBQ2xFLFlBQU0sWUFBWSxJQUFJLDZCQUE2QjtBQUFBLFFBQ2pELFdBQVdrQixxQkFBb0IsWUFBWTtBQUFBLFFBQzNDLEdBQUc7QUFBQSxNQUNMLENBQUM7QUFDRCxjQUFRLEdBQUdsQix1QkFBcUIsMEJBQTBCLFdBQVcsSUFBSTtBQUFBLElBQzNFLEdBQUcsb0NBQW9DO0FBQ3ZDLFFBQUkscUNBQXFELHVCQUFPLE9BQU8sY0FBYyxZQUFZO0FBQy9GLFlBQU0sT0FBTyxhQUFhO0FBQzFCLFlBQU0sZ0JBQWdCLEdBQUdBLHVCQUFxQixPQUFPLElBQUk7QUFDekQsWUFBTSxZQUFZLElBQUksNkJBQTZCO0FBQUEsUUFDakQsV0FBV2tCLHFCQUFvQixZQUFZO0FBQUEsUUFDM0MsR0FBRztBQUFBLE1BQ0wsQ0FBQztBQUNELGNBQVEsR0FBR2xCLHVCQUFxQiwwQkFBMEIsV0FBVyxJQUFJO0FBQUEsSUFDM0UsR0FBRyxvQ0FBb0M7QUFDdkMsUUFBSSx1Q0FBdUQsdUJBQU8sT0FBTyxjQUFjLFlBQVk7QUFDakcsWUFBTSxPQUFPLGFBQWE7QUFDMUIsWUFBTSxnQkFBZ0IsR0FBR0EsdUJBQXFCLE9BQU8sSUFBSTtBQUN6RCxZQUFNLFlBQVksSUFBSSwrQkFBK0I7QUFBQSxRQUNuRCxXQUFXa0IscUJBQW9CLFlBQVk7QUFBQSxRQUMzQyxHQUFHO0FBQUEsTUFDTCxDQUFDO0FBQ0QsY0FBUSxHQUFHbEIsdUJBQXFCLDBCQUEwQixXQUFXLElBQUk7QUFBQSxJQUMzRSxHQUFHLHNDQUFzQztBQUN6QyxRQUFJLHNCQUFzQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNuRSxhQUFPLE9BQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUN6RCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSx3QkFBd0IsT0FBTyxPQUFPO0FBQ2pELGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLHFCQUFxQjtBQUN4QixRQUFJLG9CQUFvQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNqRSxhQUFPLGVBQWUsTUFBTSxPQUFPO0FBQUEsUUFDakMsR0FBbUIsdUJBQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxRQUFRLGNBQWMsS0FBSyxFQUFFLElBQUksR0FBRztBQUFBLFFBQy9FLE1BQXNCLHVCQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sTUFBTSxJQUFJLE1BQU07QUFBQSxRQUNqRSxJQUFvQix1QkFBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLDJCQUEyQixPQUFPLE9BQU8sRUFBRSxJQUFJLElBQUk7QUFBQSxRQUNoRyxHQUFtQix1QkFBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLHNCQUFzQixPQUFPLE9BQU8sRUFBRSxJQUFJLEdBQUc7QUFBQSxRQUN4RixHQUFtQix1QkFBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLHFCQUFxQixPQUFPLE9BQU8sRUFBRSxJQUFJLEdBQUc7QUFBQSxRQUN2RixHQUFtQix1QkFBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLE1BQU0sSUFBSSxHQUFHO0FBQUEsUUFDeEQsSUFBb0IsdUJBQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHQSx1QkFBcUIsT0FBTyxLQUFLLEVBQUUsSUFBSSxJQUFJO0FBQUEsUUFDNUYsTUFBc0IsdUJBQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxNQUFNLElBQUksTUFBTTtBQUFBLFFBQ2pFLEdBQW1CLHVCQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxJQUFJLEdBQUc7QUFBQSxRQUN4RCxJQUFvQix1QkFBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUdBLHVCQUFxQixPQUFPLEtBQUssRUFBRSxJQUFJLElBQUk7QUFBQSxRQUM1RixHQUFtQix1QkFBTyxDQUFDLE1BQU0sV0FBVyxFQUFFLENBQUMsSUFBSSxHQUFHLE1BQU0sSUFBSSxHQUFHO0FBQUEsTUFDckUsQ0FBQztBQUFBLElBQ0gsR0FBRyxtQkFBbUI7QUFDdEIsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDckUsYUFBTyxNQUFNLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8sa0JBQWtCLE9BQU8sT0FBTztBQUFBLE1BQ3pDLENBQUM7QUFBQSxJQUNILEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksMEJBQTBDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3ZFLGNBQVEsR0FBR3BCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxRQUFRLENBQUM7QUFBQSxRQUNULE9BQXVCLHVCQUFPLENBQUNxQixPQUFNLGtCQUFrQkEsSUFBRyxPQUFPLEdBQUcsT0FBTztBQUFBLE1BQzdFLENBQUM7QUFBQSxJQUNILEdBQUcseUJBQXlCO0FBQzVCLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzFFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxZQUFZLENBQUM7QUFBQSxRQUNiLDBDQUEwRCx1QkFBTyxDQUFDcUIsT0FBTSw2REFBNkRBLElBQUcsT0FBTyxHQUFHLDBDQUEwQztBQUFBLE1BQzlMLENBQUM7QUFBQSxJQUNILEdBQUcsNEJBQTRCO0FBQy9CLFFBQUksK0JBQStDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzVFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxxQkFBcUIsQ0FBQztBQUFBLFFBQ3RCLG9CQUFvQixDQUFDO0FBQUEsUUFDckIsY0FBYyxDQUFDO0FBQUEsUUFDZixjQUFjLENBQUM7QUFBQSxRQUNmLHFCQUFxQyx1QkFBTyxDQUFDcUIsT0FBTSwyQkFBMkJBLElBQUcsT0FBTyxHQUFHLHFCQUFxQjtBQUFBLE1BQ2xILENBQUM7QUFBQSxJQUNILEdBQUcsOEJBQThCO0FBQ2pDLFFBQUksK0RBQStFLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzVHLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxnQkFBZ0IsQ0FBQztBQUFBLFFBQ2pCLGlCQUFpQixDQUFDO0FBQUEsUUFDbEIsa0JBQWtCLENBQUM7QUFBQSxRQUNuQixhQUFhQSx1QkFBcUI7QUFBQSxNQUNwQyxDQUFDO0FBQUEsSUFDSCxHQUFHLDhEQUE4RDtBQUNqRSxRQUFJLGdDQUFnRCx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUM3RSxjQUFRLEdBQUdBLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyx3QkFBd0IsQ0FBQztBQUFBLFFBQ3pCLFlBQTRCLHVCQUFPLENBQUNxQixPQUFNLHVCQUF1QkEsSUFBRyxPQUFPLEdBQUcsWUFBWTtBQUFBLE1BQzVGLENBQUM7QUFBQSxJQUNILEdBQUcsK0JBQStCO0FBQ2xDLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3BFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxjQUE4Qix1QkFBTyxDQUFDcUIsT0FBTSxzQkFBc0JBLElBQUcsT0FBTyxHQUFHLGNBQWM7QUFBQSxRQUM3Rix3QkFBd0IsQ0FBQztBQUFBLE1BQzNCLENBQUM7QUFBQSxJQUNILEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksd0JBQXdDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3JFLGFBQU8sT0FBTyxRQUFRLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQ3pELFlBQUksVUFBVSxNQUFNO0FBQ2xCLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksR0FBRyxJQUFJLHFCQUFxQixPQUFPLE9BQU87QUFDOUMsZUFBTztBQUFBLE1BQ1QsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUNQLEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksMkJBQTJDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3hFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxnQkFBZ0IsQ0FBQztBQUFBLFFBQ2pCLFlBQTRCLHVCQUFPLENBQUNxQixPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsWUFBWTtBQUFBLFFBQ2xHLHFDQUFxQyxDQUFDO0FBQUEsUUFDdEMsV0FBVyxDQUFDO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSCxHQUFHLDBCQUEwQjtBQUM3QixRQUFJLHlCQUF5Qyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN0RSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsY0FBOEIsdUJBQU8sQ0FBQ3FCLE9BQU0sNEJBQTRCQSxJQUFHLE9BQU8sR0FBRyxjQUFjO0FBQUEsUUFDbkcsd0JBQXdCLENBQUM7QUFBQSxRQUN6Qiw2QkFBNkIsQ0FBQztBQUFBLE1BQ2hDLENBQUM7QUFBQSxJQUNILEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksOEJBQThDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzNFLGFBQU8sT0FBTyxRQUFRLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQ3pELFlBQUksVUFBVSxNQUFNO0FBQ2xCLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksR0FBRyxJQUFJLGlCQUFpQixPQUFPLE9BQU87QUFDMUMsZUFBTztBQUFBLE1BQ1QsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUNQLEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzFFLGFBQU8sTUFBTSxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8sUUFBUSxjQUFjLEtBQUs7QUFBQSxNQUNwQyxDQUFDO0FBQUEsSUFDSCxHQUFHLDRCQUE0QjtBQUMvQixRQUFJLGVBQStCLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzVELGNBQVEsR0FBR3BCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxvQkFBb0MsdUJBQU8sQ0FBQ3FCLE9BQU0sc0JBQXNCQSxJQUFHLE9BQU8sR0FBRyxvQkFBb0I7QUFBQSxRQUN6RyxvQkFBb0IsQ0FBQztBQUFBLE1BQ3ZCLENBQUM7QUFBQSxJQUNILEdBQUcsY0FBYztBQUNqQixRQUFJLG9CQUFvQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNqRSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MscUJBQXFCLENBQUM7QUFBQSxRQUN0QiwwQkFBMEJBLHVCQUFxQjtBQUFBLFFBQy9DLDJCQUEyQyx1QkFBTyxDQUFDcUIsT0FBTSwrQkFBK0JBLElBQUcsT0FBTyxHQUFHLDJCQUEyQjtBQUFBLFFBQ2hJLEtBQXFCLHVCQUFPLENBQUNBLE9BQU0sT0FBT0EsSUFBRyxPQUFPLEdBQUcsS0FBSztBQUFBLFFBQzVELHFDQUFxQyxDQUFDO0FBQUEsUUFDdEMsV0FBVyxDQUFDO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSCxHQUFHLG1CQUFtQjtBQUN0QixRQUFJLFlBQTRCLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3pELGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxxQkFBcUIsQ0FBQztBQUFBLFFBQ3RCLDBCQUEwQkEsdUJBQXFCO0FBQUEsUUFDL0MsMkJBQTJDLHVCQUFPLENBQUNxQixPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsMkJBQTJCO0FBQUEsUUFDaEksS0FBcUIsdUJBQU8sQ0FBQ0EsT0FBTSxPQUFPQSxJQUFHLE9BQU8sR0FBRyxLQUFLO0FBQUEsUUFDNUQscUNBQXFDLENBQUM7QUFBQSxRQUN0QyxXQUFXLENBQUM7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILEdBQUcsV0FBVztBQUNkLFFBQUkscUJBQXFDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ2xFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxxQkFBcUIsQ0FBQztBQUFBLFFBQ3RCLHFCQUFxQixDQUFDO0FBQUEsUUFDdEIsVUFBMEIsdUJBQU8sQ0FBQ3FCLE9BQU0sd0JBQXdCQSxJQUFHLE9BQU8sR0FBRyxVQUFVO0FBQUEsUUFDdkYsMEJBQTBCckIsdUJBQXFCO0FBQUEsUUFDL0MsMkJBQTJDLHVCQUFPLENBQUNxQixPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsMkJBQTJCO0FBQUEsUUFDaEksS0FBcUIsdUJBQU8sQ0FBQ0EsT0FBTSxPQUFPQSxJQUFHLE9BQU8sR0FBRyxLQUFLO0FBQUEsUUFDNUQsd0JBQXdCLENBQUM7QUFBQSxRQUN6Qiw2QkFBNkIsQ0FBQztBQUFBLFFBQzlCLGNBQWMsQ0FBQztBQUFBLFFBQ2YscUNBQXFDLENBQUM7QUFBQSxRQUN0QyxXQUFXLENBQUM7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILEdBQUcsb0JBQW9CO0FBQ3ZCLFFBQUksbUJBQW1DLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ2hFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxLQUFxQix1QkFBTyxDQUFDcUIsT0FBTSxPQUFPQSxJQUFHLE9BQU8sR0FBRyxLQUFLO0FBQUEsTUFDOUQsQ0FBQztBQUFBLElBQ0gsR0FBRyxrQkFBa0I7QUFDckIsUUFBSSwyQkFBMkMsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDeEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLGdCQUFnQixDQUFDO0FBQUEsUUFDakIsT0FBTyxDQUFDO0FBQUEsUUFDUixXQUFXLENBQUM7QUFBQSxRQUNaLFlBQTRCLHVCQUFPLENBQUNxQixPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsWUFBWTtBQUFBLFFBQ2xHLHdCQUF3QixDQUFDO0FBQUEsUUFDekIscUNBQXFDLENBQUM7QUFBQSxRQUN0QyxXQUFXLENBQUM7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzFFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUNxQixPQUFNQSxPQUFNLEdBQUcsWUFBWSxJQUFJLENBQUM7QUFBQSxRQUM1RCx3QkFBd0IsQ0FBQztBQUFBLFFBQ3pCLG9CQUFvQyx1QkFBTyxDQUFDQSxPQUFNLDJCQUEyQkEsSUFBRyxPQUFPLEdBQUcsb0JBQW9CO0FBQUEsTUFDaEgsQ0FBQztBQUFBLElBQ0gsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSwwQkFBMEMsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDdkUsYUFBTyxPQUFPLFFBQVEsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLE1BQU07QUFDekQsWUFBSSxVQUFVLE1BQU07QUFDbEIsaUJBQU87QUFBQSxRQUNUO0FBQ0EsWUFBSSxHQUFHLElBQUksMEJBQTBCLE9BQU8sT0FBTztBQUNuRCxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyx5QkFBeUI7QUFDNUIsUUFBSSw0QkFBNEMsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDekUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLG9CQUFvQyx1QkFBTyxDQUFDcUIsT0FBTSxzQkFBc0JBLElBQUcsT0FBTyxHQUFHLG9CQUFvQjtBQUFBLFFBQ3pHLG9CQUFvQixDQUFDO0FBQUEsUUFDckIsUUFBUSxDQUFDO0FBQUEsUUFDVCxPQUF1Qix1QkFBTyxDQUFDQSxPQUFNLGtCQUFrQkEsSUFBRyxPQUFPLEdBQUcsT0FBTztBQUFBLE1BQzdFLENBQUM7QUFBQSxJQUNILEdBQUcsMkJBQTJCO0FBQzlCLFFBQUksbUNBQW1ELHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ2hGLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxhQUFhLENBQUMsTUFBTSxDQUFDcUIsT0FBTUEsT0FBTSxHQUFHLFlBQVksSUFBSSxDQUFDO0FBQUEsUUFDckQsY0FBYyxDQUFDO0FBQUEsUUFDZixZQUE0Qix1QkFBTyxDQUFDQSxPQUFNQSxHQUFFLFFBQVEsSUFBSSxLQUFLLFlBQVk7QUFBQSxRQUN6RSxZQUFZLENBQUM7QUFBQSxRQUNiLGdDQUFnRCx1QkFBTyxDQUFDQSxPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsZ0NBQWdDO0FBQUEsUUFDN0ksVUFBVSxDQUFDO0FBQUEsUUFDWCxlQUFlLENBQUM7QUFBQSxRQUNoQixVQUFVLENBQUM7QUFBQSxRQUNYLGdCQUFnQixDQUFDO0FBQUEsUUFDakIsZUFBZSxDQUFDO0FBQUEsUUFDaEIsVUFBVSxDQUFDO0FBQUEsTUFDYixDQUFDO0FBQUEsSUFDSCxHQUFHLGtDQUFrQztBQUNyQyxRQUFJLGlDQUFpRCx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUM5RSxhQUFPLE9BQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUN6RCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxrQkFBa0IsT0FBTyxPQUFPO0FBQzNDLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLGdDQUFnQztBQUNuQyxRQUFJLHdCQUF3Qyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNyRSxhQUFPLE9BQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUN6RCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxhQUFhLE9BQU8sT0FBTztBQUN0QyxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyx1QkFBdUI7QUFDMUIsUUFBSSxTQUF5Qix1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN0RCxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsMEJBQTBCQSx1QkFBcUI7QUFBQSxRQUMvQyxLQUFxQix1QkFBTyxDQUFDcUIsT0FBTSxPQUFPQSxJQUFHLE9BQU8sR0FBRyxLQUFLO0FBQUEsUUFDNUQsc0JBQXNCLENBQUM7QUFBQSxRQUN2QixXQUFXLENBQUM7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILEdBQUcsUUFBUTtBQUNYLFFBQUksa0JBQWtDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQy9ELGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxpQkFBaUJBLHVCQUFxQjtBQUFBLFFBQ3RDLGdCQUFnQixDQUFDO0FBQUEsUUFDakIsMEJBQTBCQSx1QkFBcUI7QUFBQSxRQUMvQyxLQUFxQix1QkFBTyxDQUFDcUIsT0FBTSxPQUFPQSxJQUFHLE9BQU8sR0FBRyxLQUFLO0FBQUEsUUFDNUQsc0JBQXNCLENBQUM7QUFBQSxRQUN2Qix3QkFBd0IsQ0FBQztBQUFBLFFBQ3pCLFdBQVcsQ0FBQztBQUFBLE1BQ2QsQ0FBQztBQUFBLElBQ0gsR0FBRyxpQkFBaUI7QUFDcEIsUUFBSSwyQ0FBMkQsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDeEYsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLFdBQVcsQ0FBQztBQUFBLFFBQ1osMkNBQTJELHVCQUFPLENBQUNxQixPQUFNLDZCQUE2QkEsSUFBRyxPQUFPLEdBQUcsMkNBQTJDO0FBQUEsTUFDaEssQ0FBQztBQUFBLElBQ0gsR0FBRywwQ0FBMEM7QUFDN0MsUUFBSSwrQ0FBK0QsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDNUYsYUFBTyxNQUFNLE9BQU8sQ0FBQ0QsT0FBTUEsTUFBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDbkQsZUFBTyx5Q0FBeUMsT0FBTyxPQUFPO0FBQUEsTUFDaEUsQ0FBQztBQUFBLElBQ0gsR0FBRyw4Q0FBOEM7QUFDakQsUUFBSSxtREFBbUUsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDaEcsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLFdBQVcsQ0FBQztBQUFBLFFBQ1osbURBQW1FLHVCQUFPLENBQUNxQixPQUFNLDZCQUE2QkEsSUFBRyxPQUFPLEdBQUcsbURBQW1EO0FBQUEsUUFDOUssK0JBQStCLENBQUM7QUFBQSxNQUNsQyxDQUFDO0FBQUEsSUFDSCxHQUFHLGtEQUFrRDtBQUNyRCxRQUFJLHVEQUF1RSx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNwRyxhQUFPLE1BQU0sT0FBTyxDQUFDRCxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNuRCxlQUFPLGlEQUFpRCxPQUFPLE9BQU87QUFBQSxNQUN4RSxDQUFDO0FBQUEsSUFDSCxHQUFHLHNEQUFzRDtBQUN6RCxRQUFJLHNCQUFzQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNuRSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsYUFBYSxDQUFDLE1BQU0sQ0FBQ3FCLE9BQU1BLE9BQU0sR0FBRyxZQUFZLElBQUksQ0FBQztBQUFBLFFBQ3JELHNCQUFzQixDQUFDO0FBQUEsUUFDdkIsYUFBYSxDQUFDO0FBQUEsUUFDZCxvQkFBb0JyQix1QkFBcUI7QUFBQSxRQUN6QyxnQkFBZ0JBLHVCQUFxQjtBQUFBLFFBQ3JDLHlCQUF5QkEsdUJBQXFCO0FBQUEsTUFDaEQsQ0FBQztBQUFBLElBQ0gsR0FBRyxxQkFBcUI7QUFDeEIsUUFBSSxvQ0FBb0QsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDakYsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsZ0JBQWdDLHVCQUFPLENBQUNxQixPQUFNQSxHQUFFLFFBQVEsSUFBSSxLQUFLLGdCQUFnQjtBQUFBLFFBQ2pGLGNBQThCLHVCQUFPLENBQUNBLE9BQU1BLEdBQUUsUUFBUSxJQUFJLEtBQUssY0FBYztBQUFBLFFBQzdFLGdCQUFnQixDQUFDO0FBQUEsTUFDbkIsQ0FBQztBQUFBLElBQ0gsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSxTQUF5Qix1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN0RCxhQUFPLE9BQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUN6RCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxrQkFBa0IsT0FBTyxPQUFPO0FBQzNDLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLFFBQVE7QUFDWCxRQUFJLG1CQUFtQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNoRSxhQUFPLE9BQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUN6RCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxhQUFhLE9BQU8sT0FBTztBQUN0QyxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyxrQkFBa0I7QUFDckIsUUFBSSxhQUE2Qix1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUMxRCxhQUFPLE1BQU0sT0FBTyxDQUFDRCxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNuRCxlQUFPLE9BQU8sT0FBTyxPQUFPO0FBQUEsTUFDOUIsQ0FBQztBQUFBLElBQ0gsR0FBRyxZQUFZO0FBQ2YsUUFBSSx1QkFBdUMsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDcEUsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLGlCQUFpQkEsdUJBQXFCO0FBQUEsUUFDdEMsZ0JBQWdCLENBQUM7QUFBQSxRQUNqQiwwQkFBMEJBLHVCQUFxQjtBQUFBLFFBQy9DLE1BQXNCLHVCQUFPLENBQUNxQixPQUFNLFdBQVdBLElBQUcsT0FBTyxHQUFHLE1BQU07QUFBQSxRQUNsRSxzQkFBc0IsQ0FBQztBQUFBLE1BQ3pCLENBQUM7QUFBQSxJQUNILEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksd0JBQXdDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3JFLGFBQU8sTUFBTSxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8sa0JBQWtCLE9BQU8sT0FBTztBQUFBLE1BQ3pDLENBQUM7QUFBQSxJQUNILEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ25FLGNBQVEsR0FBR3BCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxZQUFZLENBQUM7QUFBQSxRQUNiLHlCQUF5QixDQUFDO0FBQUEsUUFDMUIsT0FBTyxDQUFDO0FBQUEsUUFDUixXQUFXLENBQUM7QUFBQSxRQUNaLHFCQUFxQyx1QkFBTyxDQUFDcUIsT0FBTUEsR0FBRSxRQUFRLElBQUksS0FBSyxxQkFBcUI7QUFBQSxRQUMzRixxQkFBcUMsdUJBQU8sQ0FBQ0EsT0FBTUEsR0FBRSxRQUFRLElBQUksS0FBSyxxQkFBcUI7QUFBQSxNQUM3RixDQUFDO0FBQUEsSUFDSCxHQUFHLHFCQUFxQjtBQUN4QixRQUFJLHVCQUF1Qyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNwRSxhQUFPLE9BQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUN6RCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxrQkFBa0IsT0FBTyxPQUFPO0FBQzNDLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLDRCQUE0Qyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN6RSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsWUFBNEIsdUJBQU8sQ0FBQ3FCLE9BQU0sK0JBQStCQSxJQUFHLE9BQU8sR0FBRyxZQUFZO0FBQUEsUUFDbEcscUNBQXFDLENBQUM7QUFBQSxRQUN0QyxXQUFXLENBQUM7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILEdBQUcsMkJBQTJCO0FBQzlCLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzFFLGFBQU8sTUFBTSxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8sMEJBQTBCLE9BQU8sT0FBTztBQUFBLE1BQ2pELENBQUM7QUFBQSxJQUNILEdBQUcsNEJBQTRCO0FBQy9CLFFBQUkseUJBQXlDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3RFLGFBQU8sTUFBTSxPQUFPLENBQUNBLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8seUJBQXlCLE9BQU8sT0FBTztBQUFBLE1BQ2hELENBQUM7QUFBQSxJQUNILEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksaUNBQWlELHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzlFLGFBQU8sTUFBTSxPQUFPLENBQUNBLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8sa0JBQWtCLE9BQU8sT0FBTztBQUFBLE1BQ3pDLENBQUM7QUFBQSxJQUNILEdBQUcsZ0NBQWdDO0FBQ25DLFFBQUksU0FBeUIsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDdEQsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLHFCQUFxQixDQUFDO0FBQUEsUUFDdEIsMEJBQTBCQSx1QkFBcUI7QUFBQSxRQUMvQywyQkFBMkMsdUJBQU8sQ0FBQ3FCLE9BQU0sK0JBQStCQSxJQUFHLE9BQU8sR0FBRywyQkFBMkI7QUFBQSxRQUNoSSxNQUFzQix1QkFBTyxDQUFDQSxPQUFNLDRCQUE0QkEsSUFBRyxPQUFPLEdBQUcsTUFBTTtBQUFBLFFBQ25GLHFDQUFxQyxDQUFDO0FBQUEsUUFDdEMsV0FBVyxDQUFDO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSCxHQUFHLFFBQVE7QUFDWCxRQUFJLGtCQUFrQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUMvRCxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MscUJBQXFCLENBQUM7QUFBQSxRQUN0QixxQkFBcUIsQ0FBQztBQUFBLFFBQ3RCLFVBQTBCLHVCQUFPLENBQUNxQixPQUFNLHdCQUF3QkEsSUFBRyxPQUFPLEdBQUcsVUFBVTtBQUFBLFFBQ3ZGLDBCQUEwQnJCLHVCQUFxQjtBQUFBLFFBQy9DLDJCQUEyQyx1QkFBTyxDQUFDcUIsT0FBTSwrQkFBK0JBLElBQUcsT0FBTyxHQUFHLDJCQUEyQjtBQUFBLFFBQ2hJLE1BQXNCLHVCQUFPLENBQUNBLE9BQU0sNEJBQTRCQSxJQUFHLE9BQU8sR0FBRyxNQUFNO0FBQUEsUUFDbkYsd0JBQXdCLENBQUM7QUFBQSxRQUN6Qiw2QkFBNkIsQ0FBQztBQUFBLFFBQzlCLGNBQWMsQ0FBQztBQUFBLFFBQ2YscUNBQXFDLENBQUM7QUFBQSxRQUN0QyxXQUFXLENBQUM7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNILEdBQUcsaUJBQWlCO0FBQ3BCLFFBQUksOEJBQThDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzNFLGFBQU8sT0FBTyxRQUFRLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQ3pELFlBQUksVUFBVSxNQUFNO0FBQ2xCLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksR0FBRyxJQUFJLGtCQUFrQixPQUFPLE9BQU87QUFDM0MsZUFBTztBQUFBLE1BQ1QsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUNQLEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksZ0JBQWdDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzdELGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxNQUFzQix1QkFBTyxDQUFDcUIsT0FBTSw0QkFBNEJBLElBQUcsT0FBTyxHQUFHLE1BQU07QUFBQSxNQUNyRixDQUFDO0FBQUEsSUFDSCxHQUFHLGVBQWU7QUFDbEIsUUFBSSxnQkFBZ0MsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDN0QsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLGlCQUFpQkEsdUJBQXFCO0FBQUEsUUFDdEMscUJBQXFCLENBQUM7QUFBQSxRQUN0QixnQkFBZ0IsQ0FBQztBQUFBLFFBQ2pCLG1CQUFtQyx1QkFBTyxDQUFDcUIsT0FBTSxPQUFPQSxJQUFHLE9BQU8sR0FBRyxtQkFBbUI7QUFBQSxRQUN4RiwwQkFBMEJyQix1QkFBcUI7QUFBQSxRQUMvQywyQkFBMkMsdUJBQU8sQ0FBQ3FCLE9BQU0sK0JBQStCQSxJQUFHLE9BQU8sR0FBRywyQkFBMkI7QUFBQSxRQUNoSSxrQkFBa0IsQ0FBQztBQUFBLFFBQ25CLFdBQVcsQ0FBQztBQUFBLFFBQ1osd0JBQXdCLENBQUM7QUFBQSxRQUN6QixlQUErQix1QkFBTyxDQUFDQSxPQUFNLGlCQUFpQkEsSUFBRyxPQUFPLEdBQUcsZUFBZTtBQUFBLFFBQzFGLE9BQU8sQ0FBQztBQUFBLFFBQ1Isc0JBQXNCLENBQUM7QUFBQSxRQUN2QixhQUE2Qix1QkFBTyxDQUFDQSxPQUFNLHNCQUFzQkEsSUFBRyxPQUFPLEdBQUcsYUFBYTtBQUFBLFFBQzNGLHdCQUF3QixDQUFDO0FBQUEsUUFDekIsa0JBQWtCLENBQUM7QUFBQSxRQUNuQixRQUFRLENBQUM7QUFBQSxRQUNULFdBQVcsQ0FBQztBQUFBLE1BQ2QsQ0FBQztBQUFBLElBQ0gsR0FBRyxlQUFlO0FBQ2xCLFFBQUksOEJBQThDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQzNFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxZQUFZLENBQUM7QUFBQSxRQUNiLG9DQUFvRCx1QkFBTyxDQUFDcUIsT0FBTSxvREFBb0RBLElBQUcsT0FBTyxHQUFHLG9DQUFvQztBQUFBLFFBQ3ZLLGlEQUFpRSx1QkFBTyxDQUFDQSxPQUFNLDZCQUE2QkEsSUFBRyxPQUFPLEdBQUcsaURBQWlEO0FBQUEsTUFDNUssQ0FBQztBQUFBLElBQ0gsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSxrQ0FBa0QsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDL0UsYUFBTyxNQUFNLE9BQU8sQ0FBQ0QsT0FBTUEsTUFBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDbkQsZUFBTyw0QkFBNEIsT0FBTyxPQUFPO0FBQUEsTUFDbkQsQ0FBQztBQUFBLElBQ0gsR0FBRyxpQ0FBaUM7QUFDcEMsUUFBSSxrREFBa0UsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDL0YsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLFdBQVcsQ0FBQztBQUFBLFFBQ1osMENBQTBELHVCQUFPLENBQUNxQixPQUFNLDZCQUE2QkEsSUFBRyxPQUFPLEdBQUcsMENBQTBDO0FBQUEsTUFDOUosQ0FBQztBQUFBLElBQ0gsR0FBRyxpREFBaUQ7QUFDcEQsUUFBSSxzREFBc0UsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDbkcsYUFBTyxNQUFNLE9BQU8sQ0FBQ0QsT0FBTUEsTUFBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDbkQsZUFBTyxnREFBZ0QsT0FBTyxPQUFPO0FBQUEsTUFDdkUsQ0FBQztBQUFBLElBQ0gsR0FBRyxxREFBcUQ7QUFDeEQsUUFBSSwrQ0FBK0QsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDNUYsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLFdBQVcsQ0FBQztBQUFBLFFBQ1osa0RBQWtFLHVCQUFPLENBQUNxQixPQUFNLDZCQUE2QkEsSUFBRyxPQUFPLEdBQUcsa0RBQWtEO0FBQUEsUUFDNUssOEJBQThCLENBQUM7QUFBQSxNQUNqQyxDQUFDO0FBQUEsSUFDSCxHQUFHLDhDQUE4QztBQUNqRCxRQUFJLG1EQUFtRSx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNoRyxhQUFPLE1BQU0sT0FBTyxDQUFDRCxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNuRCxlQUFPLDZDQUE2QyxPQUFPLE9BQU87QUFBQSxNQUNwRSxDQUFDO0FBQUEsSUFDSCxHQUFHLGtEQUFrRDtBQUNyRCxRQUFJLDJCQUEyQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN4RSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsWUFBWSxDQUFDO0FBQUEsUUFDYiwyQ0FBMkQsdUJBQU8sQ0FBQ3FCLE9BQU0saURBQWlEQSxJQUFHLE9BQU8sR0FBRywyQ0FBMkM7QUFBQSxRQUNsTCx5REFBeUUsdUJBQU8sQ0FBQ0EsT0FBTSw2QkFBNkJBLElBQUcsT0FBTyxHQUFHLHlEQUF5RDtBQUFBLFFBQzFMLHFDQUFxQyxDQUFDO0FBQUEsUUFDdEMsbUJBQW1CLENBQUM7QUFBQSxNQUN0QixDQUFDO0FBQUEsSUFDSCxHQUFHLDBCQUEwQjtBQUM3QixRQUFJLCtCQUErQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUM1RSxhQUFPLE1BQU0sT0FBTyxDQUFDRCxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNuRCxlQUFPLHlCQUF5QixPQUFPLE9BQU87QUFBQSxNQUNoRCxDQUFDO0FBQUEsSUFDSCxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLG9DQUFvRCx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNqRixjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MscUJBQXFCLENBQUM7QUFBQSxRQUN0Qiw4QkFBOEJBLHVCQUFxQjtBQUFBLFFBQ25ELDZCQUE2QkEsdUJBQXFCO0FBQUEsUUFDbEQsNEJBQTRCQSx1QkFBcUI7QUFBQSxRQUNqRCwrQkFBK0JBLHVCQUFxQjtBQUFBLFFBQ3BELGlCQUFpQyx1QkFBTyxDQUFDcUIsT0FBTUEsR0FBRSxRQUFRLElBQUksS0FBSyxpQkFBaUI7QUFBQSxRQUNuRiwwQkFBMEJyQix1QkFBcUI7QUFBQSxRQUMvQyxnQkFBZ0IsQ0FBQztBQUFBLFFBQ2pCLGlCQUFpQixDQUFDO0FBQUEsUUFDbEIsaUJBQWlCLENBQUM7QUFBQSxRQUNsQix5QkFBeUIsQ0FBQztBQUFBLE1BQzVCLENBQUM7QUFBQSxJQUNILEdBQUcsbUNBQW1DO0FBQ3RDLFFBQUksZUFBK0IsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDNUQsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsaUJBQWlCQSx1QkFBcUI7QUFBQSxRQUN0QyxxQkFBcUIsQ0FBQztBQUFBLFFBQ3RCLGdCQUFnQixDQUFDO0FBQUEsUUFDakIsbUJBQW1DLHVCQUFPLENBQUNxQixPQUFNLE9BQU9BLElBQUcsT0FBTyxHQUFHLG1CQUFtQjtBQUFBLFFBQ3hGLDBCQUEwQnJCLHVCQUFxQjtBQUFBLFFBQy9DLDJCQUEyQyx1QkFBTyxDQUFDcUIsT0FBTSwrQkFBK0JBLElBQUcsT0FBTyxHQUFHLDJCQUEyQjtBQUFBLFFBQ2hJLGtCQUFrQixDQUFDO0FBQUEsUUFDbkIsV0FBVyxDQUFDO0FBQUEsUUFDWixPQUFPLENBQUM7QUFBQSxRQUNSLHNCQUFzQixDQUFDO0FBQUEsUUFDdkIsd0JBQXdCLENBQUM7QUFBQSxRQUN6QixZQUE0Qix1QkFBTyxDQUFDQSxPQUFNLHNCQUFzQkEsSUFBRyxPQUFPLEdBQUcsWUFBWTtBQUFBLFFBQ3pGLFNBQVMsQ0FBQztBQUFBLFFBQ1YsUUFBUSxDQUFDO0FBQUEsUUFDVCxXQUFXLENBQUM7QUFBQSxRQUNaLGVBQWUsQ0FBQztBQUFBLE1BQ2xCLENBQUM7QUFBQSxJQUNILEdBQUcsY0FBYztBQUNqQixRQUFJLHFCQUFxQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUNsRSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsS0FBcUIsdUJBQU8sQ0FBQ3FCLE9BQU0sT0FBT0EsSUFBRyxPQUFPLEdBQUcsS0FBSztBQUFBLE1BQzlELENBQUM7QUFBQSxJQUNILEdBQUcsb0JBQW9CO0FBQ3ZCLFFBQUkseUJBQXlDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3RFLGFBQU8sTUFBTSxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ25ELGVBQU8sbUJBQW1CLE9BQU8sT0FBTztBQUFBLE1BQzFDLENBQUM7QUFBQSxJQUNILEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksMkJBQTJDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3hFLGNBQVEsR0FBR3BCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyx3QkFBd0IsQ0FBQztBQUFBLFFBQ3pCLGVBQStCLHVCQUFPLENBQUNxQixPQUFNLHVCQUF1QkEsSUFBRyxPQUFPLEdBQUcsZUFBZTtBQUFBLE1BQ2xHLENBQUM7QUFBQSxJQUNILEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3BFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyxnQkFBZ0MsdUJBQU8sQ0FBQ3FCLE9BQU0sa0JBQWtCQSxJQUFHLE9BQU8sR0FBRyxnQkFBZ0I7QUFBQSxRQUM3RixRQUF3Qix1QkFBTyxDQUFDQSxPQUFNLFVBQVVBLElBQUcsT0FBTyxHQUFHLFFBQVE7QUFBQSxRQUNyRSxLQUFxQix1QkFBTyxDQUFDQSxPQUFNLE9BQU9BLElBQUcsT0FBTyxHQUFHLEtBQUs7QUFBQSxRQUM1RCxRQUF3Qix1QkFBTyxDQUFDQSxPQUFNLFVBQVVBLElBQUcsT0FBTyxHQUFHLFFBQVE7QUFBQSxNQUN2RSxDQUFDO0FBQUEsSUFDSCxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLDJCQUEyQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN4RSxhQUFPLE1BQU0sT0FBTyxDQUFDRCxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNuRCxlQUFPLHFCQUFxQixPQUFPLE9BQU87QUFBQSxNQUM1QyxDQUFDO0FBQUEsSUFDSCxHQUFHLDBCQUEwQjtBQUM3QixRQUFJLDZCQUE2Qyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUMxRSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0Msb0JBQW9CLENBQUMsTUFBTSxDQUFDcUIsT0FBTUEsT0FBTSxHQUFHLFlBQVksSUFBSSxDQUFDO0FBQUEsUUFDNUQsd0JBQXdCLENBQUM7QUFBQSxRQUN6Qiw2QkFBNkIsQ0FBQztBQUFBLFFBQzlCLGVBQStCLHVCQUFPLENBQUNBLE9BQU0seUJBQXlCQSxJQUFHLE9BQU8sR0FBRyxlQUFlO0FBQUEsTUFDcEcsQ0FBQztBQUFBLElBQ0gsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSxZQUE0Qix1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUN6RCxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MscUJBQXFCLENBQUM7QUFBQSxRQUN0QiwwQkFBMEJBLHVCQUFxQjtBQUFBLFFBQy9DLDJCQUEyQyx1QkFBTyxDQUFDcUIsT0FBTSwrQkFBK0JBLElBQUcsT0FBTyxHQUFHLDJCQUEyQjtBQUFBLFFBQ2hJLEtBQXFCLHVCQUFPLENBQUNBLE9BQU0sT0FBT0EsSUFBRyxPQUFPLEdBQUcsS0FBSztBQUFBLFFBQzVELHFDQUFxQyxDQUFDO0FBQUEsUUFDdEMsV0FBVyxDQUFDO0FBQUEsUUFDWixrQkFBa0IsQ0FBQztBQUFBLE1BQ3JCLENBQUM7QUFBQSxJQUNILEdBQUcsV0FBVztBQUNkLFFBQUksb0NBQW9ELHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ2pGLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyx3QkFBd0IsQ0FBQztBQUFBLFFBQ3pCLCtDQUErRCx1QkFBTyxDQUFDcUIsT0FBTSxxREFBcURBLElBQUcsT0FBTyxHQUFHLCtDQUErQztBQUFBLFFBQzlMLGlCQUFpQixDQUFDO0FBQUEsUUFDbEIsOERBQThFLHVCQUFPLENBQUNBLE9BQU0sNkJBQTZCQSxJQUFHLE9BQU8sR0FBRyw4REFBOEQ7QUFBQSxRQUNwTSwwQ0FBMEMsQ0FBQztBQUFBLFFBQzNDLHVCQUF1Qyx1QkFBTyxDQUFDQSxPQUFNLDZCQUE2QkEsSUFBRyxPQUFPLEdBQUcsdUJBQXVCO0FBQUEsTUFDeEgsQ0FBQztBQUFBLElBQ0gsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSxxQkFBcUMsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDbEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sT0FBTztBQUFBLFFBQzNDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSxvQkFBb0JBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQ25HLHFCQUFxQixDQUFDO0FBQUEsUUFDdEIscUJBQXFCLENBQUM7QUFBQSxRQUN0QixVQUEwQix1QkFBTyxDQUFDQSxPQUFNLHdCQUF3QkEsSUFBRyxPQUFPLEdBQUcsVUFBVTtBQUFBLFFBQ3ZGLDBCQUEwQnJCLHVCQUFxQjtBQUFBLFFBQy9DLDJCQUEyQyx1QkFBTyxDQUFDcUIsT0FBTSwrQkFBK0JBLElBQUcsT0FBTyxHQUFHLDJCQUEyQjtBQUFBLFFBQ2hJLEtBQXFCLHVCQUFPLENBQUNBLE9BQU0sT0FBT0EsSUFBRyxPQUFPLEdBQUcsS0FBSztBQUFBLFFBQzVELHdCQUF3QixDQUFDO0FBQUEsUUFDekIsNkJBQTZCLENBQUM7QUFBQSxRQUM5QixjQUFjLENBQUM7QUFBQSxRQUNmLHFDQUFxQyxDQUFDO0FBQUEsUUFDdEMsV0FBVyxDQUFDO0FBQUEsUUFDWixrQkFBa0IsQ0FBQztBQUFBLE1BQ3JCLENBQUM7QUFBQSxJQUNILEdBQUcsb0JBQW9CO0FBQ3ZCLFFBQUksd0NBQXdELHVCQUFPLENBQUMsT0FBTyxZQUFZO0FBQ3JGLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLE9BQU87QUFBQSxRQUMzQyw2QkFBNkMsdUJBQU8sQ0FBQ3FCLE9BQU0sNkNBQTZDQSxJQUFHLE9BQU8sR0FBRyw2QkFBNkI7QUFBQSxRQUNsSiwyQ0FBMkQsdUJBQU8sQ0FBQ0EsT0FBTSw2QkFBNkJBLElBQUcsT0FBTyxHQUFHLDJDQUEyQztBQUFBLFFBQzlKLGdCQUFnQyx1QkFBTyxDQUFDQSxPQUFNLGdDQUFnQ0EsSUFBRyxPQUFPLEdBQUcsZ0JBQWdCO0FBQUEsUUFDM0csV0FBVyxDQUFDO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSCxHQUFHLHVDQUF1QztBQUMxQyxRQUFJLGtCQUFrQyx1QkFBTyxDQUFDLE9BQU8sWUFBWTtBQUMvRCxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxPQUFPO0FBQUEsUUFDM0MsZUFBK0IsdUJBQU8sQ0FBQ3FCLE9BQU0saUJBQWlCQSxJQUFHLE9BQU8sR0FBRyxlQUFlO0FBQUEsUUFDMUYsWUFBNEIsdUJBQU8sQ0FBQ0EsT0FBTSxjQUFjQSxJQUFHLE9BQU8sR0FBRyxZQUFZO0FBQUEsTUFDbkYsQ0FBQztBQUFBLElBQ0gsR0FBRyxpQkFBaUI7QUFDcEIsUUFBSSxtQkFBbUMsdUJBQU8sQ0FBQyxPQUFPLFlBQVk7QUFDaEUsYUFBTyxNQUFNLE9BQU8sQ0FBQ0QsT0FBTUEsTUFBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDbkQsZUFBTyxnQkFBZ0IsT0FBTyxPQUFPO0FBQUEsTUFDdkMsQ0FBQztBQUFBLElBQ0gsR0FBRyxrQkFBa0I7QUFDckIsUUFBSSxxQkFBcUMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDbkUsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLG1CQUFtQkEsdUJBQXFCO0FBQUEsUUFDeEMsa0JBQWtDLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLGtCQUFrQjtBQUFBLFFBQ3JNLGdCQUFnQnJCLHVCQUFxQjtBQUFBLE1BQ3ZDLENBQUM7QUFBQSxJQUNILEdBQUcsb0JBQW9CO0FBQ3ZCLFFBQUksa0JBQWtDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2hFLGFBQU8sT0FBTyxRQUFRLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQzFELFlBQUksVUFBVSxNQUFNO0FBQ2xCLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksR0FBRyxJQUFJLG1CQUFtQixHQUFHYyxjQUFZLGdCQUFnQixLQUFLLEdBQUcsT0FBTztBQUM1RSxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyxpQkFBaUI7QUFDcEIsUUFBSSxvQkFBb0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDbEUsVUFBSSxPQUFPLEtBQUssTUFBTTtBQUNwQixlQUFPO0FBQUEsVUFDTCxHQUFHLFFBQVEsY0FBYyxPQUFPLENBQUM7QUFBQSxRQUNuQztBQUFBLE1BQ0Y7QUFDQSxXQUFLLEdBQUdkLHVCQUFxQixlQUFlLE9BQU8sSUFBSSxNQUFNLFFBQVE7QUFDbkUsZUFBTyxFQUFFLE9BQU8sR0FBR0EsdUJBQXFCLGVBQWUsT0FBTyxJQUFJLEVBQUU7QUFBQSxNQUN0RTtBQUNBLFVBQUksT0FBTyxNQUFNLE1BQU07QUFDckIsZUFBTztBQUFBLFVBQ0wsSUFBSSwyQkFBMkIsT0FBTyxJQUFJLE9BQU87QUFBQSxRQUNuRDtBQUFBLE1BQ0Y7QUFDQSxVQUFJLE9BQU8sS0FBSyxNQUFNO0FBQ3BCLGVBQU87QUFBQSxVQUNMLEdBQUcsc0JBQXNCLE9BQU8sR0FBRyxPQUFPO0FBQUEsUUFDNUM7QUFBQSxNQUNGO0FBQ0EsVUFBSSxPQUFPLEtBQUssTUFBTTtBQUNwQixlQUFPO0FBQUEsVUFDTCxHQUFHLHFCQUFxQixPQUFPLEdBQUcsT0FBTztBQUFBLFFBQzNDO0FBQUEsTUFDRjtBQUNBLFdBQUssR0FBR0EsdUJBQXFCLGNBQWMsT0FBTyxDQUFDLE1BQU0sUUFBUTtBQUMvRCxlQUFPLEVBQUUsSUFBSSxHQUFHQSx1QkFBcUIsY0FBYyxPQUFPLENBQUMsRUFBRTtBQUFBLE1BQy9EO0FBQ0EsVUFBSSxPQUFPLE1BQU0sTUFBTTtBQUNyQixlQUFPO0FBQUEsVUFDTCxLQUFLLEdBQUdBLHVCQUFxQixPQUFPLE9BQU8sRUFBRTtBQUFBLFFBQy9DO0FBQUEsTUFDRjtBQUNBLFdBQUssR0FBR0EsdUJBQXFCLGVBQWUsT0FBTyxJQUFJLE1BQU0sUUFBUTtBQUNuRSxlQUFPLEVBQUUsT0FBTyxHQUFHQSx1QkFBcUIsZUFBZSxPQUFPLElBQUksRUFBRTtBQUFBLE1BQ3RFO0FBQ0EsV0FBSyxHQUFHQSx1QkFBcUIsY0FBYyxPQUFPLENBQUMsTUFBTSxRQUFRO0FBQy9ELGVBQU8sRUFBRSxJQUFJLEdBQUdBLHVCQUFxQixjQUFjLE9BQU8sQ0FBQyxFQUFFO0FBQUEsTUFDL0Q7QUFDQSxVQUFJLE9BQU8sTUFBTSxNQUFNO0FBQ3JCLGVBQU87QUFBQSxVQUNMLEtBQUssR0FBR0EsdUJBQXFCLE9BQU8sT0FBTyxFQUFFO0FBQUEsUUFDL0M7QUFBQSxNQUNGO0FBQ0EsYUFBTyxFQUFFLFVBQVUsT0FBTyxRQUFRLE1BQU0sRUFBRSxDQUFDLEVBQUU7QUFBQSxJQUMvQyxHQUFHLG1CQUFtQjtBQUN0QixRQUFJLGtDQUFrRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNoRixjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxZQUFZQSx1QkFBcUI7QUFBQSxRQUNqQywwQ0FBMEQsdUJBQU8sQ0FBQ3FCLE9BQU0sa0VBQWtFQSxJQUFHLE9BQU8sR0FBRywwQ0FBMEM7QUFBQSxNQUNuTSxDQUFDO0FBQUEsSUFDSCxHQUFHLGlDQUFpQztBQUNwQyxRQUFJLHNDQUFzRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNwRixZQUFNLFVBQVUsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDRCxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNwRSxlQUFPLGdDQUFnQyxPQUFPLE9BQU87QUFBQSxNQUN2RCxDQUFDO0FBQ0QsYUFBTztBQUFBLElBQ1QsR0FBRyxxQ0FBcUM7QUFDeEMsUUFBSSxvQ0FBb0QsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDbEYsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLHFCQUFxQkEsdUJBQXFCO0FBQUEsUUFDMUMsb0JBQW9CQSx1QkFBcUI7QUFBQSxRQUN6QyxjQUFjQSx1QkFBcUI7QUFBQSxRQUNuQyxjQUFjQSx1QkFBcUI7QUFBQSxRQUNuQyxpQkFBaUMsdUJBQU8sQ0FBQ3FCLE9BQU0sb0NBQW9DQSxJQUFHLE9BQU8sR0FBRyxpQkFBaUI7QUFBQSxNQUNuSCxDQUFDO0FBQUEsSUFDSCxHQUFHLG1DQUFtQztBQUN0QyxRQUFJLG9FQUFvRix1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNsSCxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsZ0JBQWdCQSx1QkFBcUI7QUFBQSxRQUNyQyxpQkFBaUJBLHVCQUFxQjtBQUFBLFFBQ3RDLGtCQUFrQkEsdUJBQXFCO0FBQUEsUUFDdkMsYUFBYUEsdUJBQXFCO0FBQUEsTUFDcEMsQ0FBQztBQUFBLElBQ0gsR0FBRyxtRUFBbUU7QUFDdEUsUUFBSSx1QkFBdUMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDckUsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsZUFBK0IsdUJBQU8sQ0FBQ3FCLE9BQU0saUJBQWlCQSxJQUFHLE9BQU8sR0FBRyxlQUFlO0FBQUEsUUFDMUYsb0JBQW9DLHVCQUFPLENBQUNBLE9BQU0sc0JBQXNCQSxJQUFHLE9BQU8sR0FBRyxvQkFBb0I7QUFBQSxRQUN6RywyQkFBMkMsdUJBQU8sQ0FBQ0EsT0FBTSw2QkFBNkJBLElBQUcsT0FBTyxHQUFHLDJCQUEyQjtBQUFBLE1BQ2hJLENBQUM7QUFBQSxJQUNILEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksbUJBQW1DLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2pFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxXQUFXQSx1QkFBcUI7QUFBQSxRQUNoQyx3QkFBd0MsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsd0JBQXdCO0FBQUEsUUFDak4sc0JBQXNDLHVCQUFPLENBQUNBLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsc0JBQXNCO0FBQUEsUUFDN00sWUFBWXJCLHVCQUFxQjtBQUFBLFFBQ2pDLGlCQUFpQkEsdUJBQXFCO0FBQUEsUUFDdEMsY0FBY0EsdUJBQXFCO0FBQUEsUUFDbkMsWUFBWUEsdUJBQXFCO0FBQUEsTUFDbkMsQ0FBQztBQUFBLElBQ0gsR0FBRyxrQkFBa0I7QUFDckIsUUFBSSxxQkFBcUMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDbkUsWUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8saUJBQWlCLE9BQU8sT0FBTztBQUFBLE1BQ3hDLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLG9CQUFvQjtBQUN2QixRQUFJLG1CQUFtQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNqRSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsd0JBQXdDLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLHdCQUF3QjtBQUFBLFFBQ2pOLHNCQUFzQyx1QkFBTyxDQUFDQSxRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLHNCQUFzQjtBQUFBLFFBQzdNLFlBQVlyQix1QkFBcUI7QUFBQSxRQUNqQyxpQkFBaUJBLHVCQUFxQjtBQUFBLFFBQ3RDLGNBQWNBLHVCQUFxQjtBQUFBLFFBQ25DLFlBQVlBLHVCQUFxQjtBQUFBLFFBQ2pDLFVBQVVBLHVCQUFxQjtBQUFBLFFBQy9CLFNBQVNBLHVCQUFxQjtBQUFBLFFBQzlCLFdBQVdBLHVCQUFxQjtBQUFBLE1BQ2xDLENBQUM7QUFBQSxJQUNILEdBQUcsa0JBQWtCO0FBQ3JCLFFBQUksaUNBQWlELHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQy9FLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSw0QkFBNEJBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQzNHLFdBQTJCLHVCQUFPLENBQUNBLE9BQU0sd0JBQXdCQSxJQUFHLE9BQU8sR0FBRyxXQUFXO0FBQUEsTUFDM0YsQ0FBQztBQUFBLElBQ0gsR0FBRyxnQ0FBZ0M7QUFDbkMsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSw0QkFBNEJBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQzNHLFdBQTJCLHVCQUFPLENBQUNBLE9BQU0sdUJBQXVCQSxJQUFHLE9BQU8sR0FBRyxXQUFXO0FBQUEsUUFDeEYsaUJBQWlDLHVCQUFPLENBQUNBLE9BQU0sc0JBQXNCQSxJQUFHLE9BQU8sR0FBRyxpQkFBaUI7QUFBQSxNQUNyRyxDQUFDO0FBQUEsSUFDSCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLHdCQUF3Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN0RSxhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUMxRCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxxQkFBcUIsT0FBTyxPQUFPO0FBQzlDLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLHlCQUF5Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN2RSxhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUU7QUFBQSxRQUM1QixDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUNyQixjQUFJLFVBQVUsTUFBTTtBQUNsQixtQkFBTztBQUFBLFVBQ1Q7QUFDQSxjQUFJLEdBQUcsSUFBSSxZQUFZLE9BQU8sT0FBTztBQUNyQyxpQkFBTztBQUFBLFFBQ1Q7QUFBQSxRQUNBLENBQUM7QUFBQSxNQUNIO0FBQUEsSUFDRixHQUFHLHdCQUF3QjtBQUMzQixRQUFJLHlCQUF5Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN2RSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsTUFBTUEsdUJBQXFCO0FBQUEsUUFDM0IsTUFBc0IsdUJBQU8sQ0FBQ3FCLE9BQU0sZ0JBQWdCQSxJQUFHLE9BQU8sR0FBRyxNQUFNO0FBQUEsUUFDdkUsU0FBU3JCLHVCQUFxQjtBQUFBLE1BQ2hDLENBQUM7QUFBQSxJQUNILEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksNEJBQTRDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQzFFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLE9BQXVCLHVCQUFPLENBQUNxQixPQUFNLHVCQUF1QkEsSUFBRyxPQUFPLEdBQUcsT0FBTztBQUFBLFFBQ2hGLE1BQXNCLHVCQUFPLENBQUNBLE9BQU0sZ0JBQWdCQSxJQUFHLE9BQU8sR0FBRyxNQUFNO0FBQUEsUUFDdkUsV0FBV3JCLHVCQUFxQjtBQUFBLE1BQ2xDLENBQUM7QUFBQSxJQUNILEdBQUcsMkJBQTJCO0FBQzlCLFFBQUksMEJBQTBDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3hFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSw0QkFBNEJBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQzNHLHVCQUF1Qyx1QkFBTyxDQUFDQSxPQUFNLGlDQUFpQ0EsSUFBRyxPQUFPLEdBQUcsdUJBQXVCO0FBQUEsUUFDMUgsa0JBQWtDLHVCQUFPLENBQUNBLE9BQU0sNEJBQTRCQSxJQUFHLE9BQU8sR0FBRyxrQkFBa0I7QUFBQSxNQUM3RyxDQUFDO0FBQUEsSUFDSCxHQUFHLHlCQUF5QjtBQUM1QixRQUFJLDhCQUE4Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM1RSxhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUMxRCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxpQkFBaUIsT0FBTyxPQUFPO0FBQzFDLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLDZCQUE2QjtBQUNoQyxRQUFJLHdCQUF3Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN0RSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsYUFBYUEsdUJBQXFCO0FBQUEsUUFDbEMsbUNBQW1ELHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLG1DQUFtQztBQUFBLE1BQ3pPLENBQUM7QUFBQSxJQUNILEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQzNFLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sUUFBUSxjQUFjLEtBQUs7QUFBQSxNQUNwQyxDQUFDO0FBQ0QsYUFBTztBQUFBLElBQ1QsR0FBRyw0QkFBNEI7QUFDL0IsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEUsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLE1BQU1BLHVCQUFxQjtBQUFBLFFBQzNCLE1BQXNCLHVCQUFPLENBQUNxQixPQUFNLGdCQUFnQkEsSUFBRyxPQUFPLEdBQUcsTUFBTTtBQUFBLFFBQ3ZFLFNBQVNyQix1QkFBcUI7QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDSCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLDRCQUE0Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUMxRSxZQUFNLFVBQVUsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDb0IsT0FBTUEsTUFBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDcEUsZUFBTyxzQkFBc0IsT0FBTyxPQUFPO0FBQUEsTUFDN0MsQ0FBQztBQUNELGFBQU87QUFBQSxJQUNULEdBQUcsMkJBQTJCO0FBQzlCLFFBQUksY0FBOEIsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDNUQsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGVBQWVBLHVCQUFxQjtBQUFBLFFBQ3BDLG1CQUFtQkEsdUJBQXFCO0FBQUEsUUFDeEMsb0JBQW9CQSx1QkFBcUI7QUFBQSxNQUMzQyxDQUFDO0FBQUEsSUFDSCxHQUFHLGFBQWE7QUFDaEIsUUFBSSxxQ0FBcUQsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDbkYsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsTUFBc0IsdUJBQU8sQ0FBQ3FCLE9BQU0sZ0JBQWdCQSxJQUFHLE9BQU8sR0FBRyxNQUFNO0FBQUEsUUFDdkUsU0FBU3JCLHVCQUFxQjtBQUFBLE1BQ2hDLENBQUM7QUFBQSxJQUNILEdBQUcsb0NBQW9DO0FBQ3ZDLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3BFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGVBQWVBLHVCQUFxQjtBQUFBLFFBQ3BDLHdCQUF3Qyx1QkFBTyxDQUFDcUIsT0FBTSwrQkFBK0JBLElBQUcsT0FBTyxHQUFHLHdCQUF3QjtBQUFBLFFBQzFILHVCQUF1Qyx1QkFBTyxDQUFDQSxPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsdUJBQXVCO0FBQUEsUUFDeEgsbUJBQW1CckIsdUJBQXFCO0FBQUEsUUFDeEMsT0FBdUIsdUJBQU8sQ0FBQ3FCLE9BQU0sWUFBWUEsSUFBRyxPQUFPLEdBQUcsT0FBTztBQUFBLFFBQ3JFLFdBQVdyQix1QkFBcUI7QUFBQSxRQUNoQyxvQkFBb0JBLHVCQUFxQjtBQUFBLE1BQzNDLENBQUM7QUFBQSxJQUNILEdBQUcscUJBQXFCO0FBQ3hCLFFBQUksOEJBQThDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQzVFLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNvQixPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNwRSxlQUFPLG9CQUFvQixPQUFPLE9BQU87QUFBQSxNQUMzQyxDQUFDO0FBQ0QsYUFBTztBQUFBLElBQ1QsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSxrQ0FBa0QsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDaEYsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLHlCQUF5QkEsdUJBQXFCO0FBQUEsUUFDOUMsZ0NBQWdELHVCQUFPLENBQUNxQixPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsZ0NBQWdDO0FBQUEsTUFDL0ksQ0FBQztBQUFBLElBQ0gsR0FBRyxpQ0FBaUM7QUFDcEMsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGVBQStCLHVCQUFPLENBQUNxQixPQUFNLGlCQUFpQkEsSUFBRyxPQUFPLEdBQUcsZUFBZTtBQUFBLE1BQzVGLENBQUM7QUFBQSxJQUNILEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQzNFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1Qyx3QkFBd0MsdUJBQU8sQ0FBQ3FCLE9BQU0sMEJBQTBCQSxJQUFHLE9BQU8sR0FBRyx3QkFBd0I7QUFBQSxNQUN2SCxDQUFDO0FBQUEsSUFDSCxHQUFHLDRCQUE0QjtBQUMvQixRQUFJLHVCQUF1Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNyRSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsa0JBQWtDLHVCQUFPLENBQUNxQixPQUFNLG9CQUFvQkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsTUFDckcsQ0FBQztBQUFBLElBQ0gsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLG1CQUFtQyx1QkFBTyxDQUFDcUIsT0FBTSxxQkFBcUJBLElBQUcsT0FBTyxHQUFHLG1CQUFtQjtBQUFBLE1BQ3hHLENBQUM7QUFBQSxJQUNILEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3BFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxZQUE0Qix1QkFBTyxDQUFDcUIsT0FBTSxnQkFBZ0JBLElBQUcsT0FBTyxHQUFHLFlBQVk7QUFBQSxRQUNuRixrQkFBa0MsdUJBQU8sQ0FBQ0EsT0FBTSxvQkFBb0JBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQ25HLHVCQUF1Qyx1QkFBTyxDQUFDQSxPQUFNLHlCQUF5QkEsSUFBRyxPQUFPLEdBQUcsdUJBQXVCO0FBQUEsTUFDcEgsQ0FBQztBQUFBLElBQ0gsR0FBRyxxQkFBcUI7QUFDeEIsUUFBSSxtQkFBbUMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDakUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLEtBQXFCLHVCQUFPLENBQUNxQixPQUFNLE9BQU9BLElBQUcsT0FBTyxHQUFHLEtBQUs7QUFBQSxNQUM5RCxDQUFDO0FBQUEsSUFDSCxHQUFHLGtCQUFrQjtBQUNyQixRQUFJLHVCQUF1Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNyRSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsa0JBQWtDLHVCQUFPLENBQUNxQixPQUFNLG9CQUFvQkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsTUFDckcsQ0FBQztBQUFBLElBQ0gsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSwwQkFBMEMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDeEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLG1CQUFtQyx1QkFBTyxDQUFDcUIsT0FBTSxxQkFBcUJBLElBQUcsT0FBTyxHQUFHLG1CQUFtQjtBQUFBLE1BQ3hHLENBQUM7QUFBQSxJQUNILEdBQUcseUJBQXlCO0FBQzVCLFFBQUkscUNBQXFELHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ25GLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1Qyw4QkFBOEMsdUJBQU8sQ0FBQ3FCLE9BQU0sZ0NBQWdDQSxJQUFHLE9BQU8sR0FBRyw4QkFBOEI7QUFBQSxNQUN6SSxDQUFDO0FBQUEsSUFDSCxHQUFHLG9DQUFvQztBQUN2QyxRQUFJLHVDQUF1RCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNyRixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsNkJBQTZCQSx1QkFBcUI7QUFBQSxRQUNsRCwyQkFBMkJBLHVCQUFxQjtBQUFBLFFBQ2hELGtCQUFrQkEsdUJBQXFCO0FBQUEsUUFDdkMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsb0JBQW9DLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLG9CQUFvQjtBQUFBLFFBQ3pNLFdBQVdyQix1QkFBcUI7QUFBQSxNQUNsQyxDQUFDO0FBQUEsSUFDSCxHQUFHLHNDQUFzQztBQUN6QyxRQUFJLDBCQUEwQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN4RSxjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxtQkFBbUMsdUJBQU8sQ0FBQ3FCLE9BQU0scUJBQXFCQSxJQUFHLE9BQU8sR0FBRyxtQkFBbUI7QUFBQSxNQUN4RyxDQUFDO0FBQUEsSUFDSCxHQUFHLHlCQUF5QjtBQUM1QixRQUFJLCtCQUErQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM3RSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsd0JBQXdDLHVCQUFPLENBQUNxQixPQUFNLDBCQUEwQkEsSUFBRyxPQUFPLEdBQUcsd0JBQXdCO0FBQUEsTUFDdkgsQ0FBQztBQUFBLElBQ0gsR0FBRyw4QkFBOEI7QUFDakMsUUFBSSx1Q0FBdUQsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDckYsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGlCQUFpQkEsdUJBQXFCO0FBQUEsUUFDdEMsaUJBQWlDLHVCQUFPLENBQUNxQixPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsaUJBQWlCO0FBQUEsTUFDakgsQ0FBQztBQUFBLElBQ0gsR0FBRyxzQ0FBc0M7QUFDekMsUUFBSSwwQkFBMEMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDeEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLHdCQUF3Qyx1QkFBTyxDQUFDcUIsT0FBTSwwQkFBMEJBLElBQUcsT0FBTyxHQUFHLHdCQUF3QjtBQUFBLE1BQ3ZILENBQUM7QUFBQSxJQUNILEdBQUcseUJBQXlCO0FBQzVCLFFBQUkseUJBQXlDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3ZFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxPQUF1Qix1QkFBTyxDQUFDcUIsT0FBTSxvQkFBb0JBLElBQUcsT0FBTyxHQUFHLE9BQU87QUFBQSxNQUMvRSxDQUFDO0FBQUEsSUFDSCxHQUFHLHdCQUF3QjtBQUMzQixRQUFJLDJDQUEyRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN6RixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsNkJBQTZDLHVCQUFPLENBQUNxQixPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsNkJBQTZCO0FBQUEsTUFDdEksQ0FBQztBQUFBLElBQ0gsR0FBRywwQ0FBMEM7QUFDN0MsUUFBSSw0QkFBNEMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDMUUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSxvQkFBb0JBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQ25HLE9BQXVCLHVCQUFPLENBQUNBLE9BQU0sWUFBWUEsSUFBRyxPQUFPLEdBQUcsT0FBTztBQUFBLFFBQ3JFLGtCQUFrQyx1QkFBTyxDQUFDQSxPQUFNLE9BQU9BLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQ3RGLFdBQVdyQix1QkFBcUI7QUFBQSxNQUNsQyxDQUFDO0FBQUEsSUFDSCxHQUFHLDJCQUEyQjtBQUM5QixRQUFJLDhCQUE4Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM1RSxjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxrQkFBa0MsdUJBQU8sQ0FBQ3FCLE9BQU0sNEJBQTRCQSxJQUFHLE9BQU8sR0FBRyxrQkFBa0I7QUFBQSxRQUMzRyxXQUEyQix1QkFBTyxDQUFDQSxPQUFNLG9CQUFvQkEsSUFBRyxPQUFPLEdBQUcsV0FBVztBQUFBLE1BQ3ZGLENBQUM7QUFBQSxJQUNILEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxpQkFBaUJBLHVCQUFxQjtBQUFBLFFBQ3RDLGFBQWFBLHVCQUFxQjtBQUFBLFFBQ2xDLFNBQXlCLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVM7QUFBQSxRQUNuTCxXQUFXckIsdUJBQXFCO0FBQUEsUUFDaEMsY0FBY0EsdUJBQXFCO0FBQUEsUUFDbkMsZ0JBQWdCQSx1QkFBcUI7QUFBQSxRQUNyQyxjQUFjQSx1QkFBcUI7QUFBQSxRQUNuQyxZQUE0Qix1QkFBTyxDQUFDcUIsUUFBTyxHQUFHckIsdUJBQXFCLGdCQUFnQixHQUFHQSx1QkFBcUIsc0JBQXNCLEdBQUdBLHVCQUFxQixjQUFjcUIsRUFBQyxDQUFDLENBQUMsR0FBRyxZQUFZO0FBQUEsUUFDekwsWUFBWXJCLHVCQUFxQjtBQUFBLFFBQ2pDLGFBQWFBLHVCQUFxQjtBQUFBLFFBQ2xDLGdCQUFnQkEsdUJBQXFCO0FBQUEsUUFDckMsZ0NBQWdELHVCQUFPLENBQUNxQixPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsZ0NBQWdDO0FBQUEsUUFDN0ksV0FBV3JCLHVCQUFxQjtBQUFBLFFBQ2hDLFVBQVVBLHVCQUFxQjtBQUFBLFFBQy9CLGVBQWVBLHVCQUFxQjtBQUFBLFFBQ3BDLFVBQVVBLHVCQUFxQjtBQUFBLFFBQy9CLGdCQUFnQkEsdUJBQXFCO0FBQUEsUUFDckMsZUFBZUEsdUJBQXFCO0FBQUEsUUFDcEMsV0FBMkIsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVztBQUFBLFFBQ3ZMLFVBQVVyQix1QkFBcUI7QUFBQSxRQUMvQixTQUFTQSx1QkFBcUI7QUFBQSxNQUNoQyxDQUFDO0FBQUEsSUFDSCxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLG9DQUFvRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNsRixjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxtQkFBbUMsdUJBQU8sQ0FBQ3FCLE9BQU0scUJBQXFCQSxJQUFHLE9BQU8sR0FBRyxtQkFBbUI7QUFBQSxNQUN4RyxDQUFDO0FBQUEsSUFDSCxHQUFHLG1DQUFtQztBQUN0QyxRQUFJLG1CQUFtQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNqRSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsa0JBQWtDLHVCQUFPLENBQUNxQixPQUFNLG9CQUFvQkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsUUFDbkcsTUFBc0IsdUJBQU8sQ0FBQ0EsT0FBTSxnQkFBZ0JBLElBQUcsT0FBTyxHQUFHLE1BQU07QUFBQSxNQUN6RSxDQUFDO0FBQUEsSUFDSCxHQUFHLGtCQUFrQjtBQUNyQixRQUFJLHFDQUFxRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNuRixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsYUFBYUEsdUJBQXFCO0FBQUEsUUFDbEMsVUFBVUEsdUJBQXFCO0FBQUEsUUFDL0IsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsZ0JBQWdCQSx1QkFBcUI7QUFBQSxRQUNyQyxhQUFhQSx1QkFBcUI7QUFBQSxRQUNsQyxXQUFXQSx1QkFBcUI7QUFBQSxRQUNoQyxXQUFXQSx1QkFBcUI7QUFBQSxRQUNoQyxvQkFBb0JBLHVCQUFxQjtBQUFBLFFBQ3pDLFlBQVlBLHVCQUFxQjtBQUFBLFFBQ2pDLHVCQUF1Qyx1QkFBTyxDQUFDcUIsT0FBTSxvQ0FBb0NBLElBQUcsT0FBTyxHQUFHLHVCQUF1QjtBQUFBLFFBQzdILGdCQUFnQnJCLHVCQUFxQjtBQUFBLE1BQ3ZDLENBQUM7QUFBQSxJQUNILEdBQUcsb0NBQW9DO0FBQ3ZDLFFBQUkseUNBQXlELHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3ZGLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNvQixPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNwRSxlQUFPLG1DQUFtQyxPQUFPLE9BQU87QUFBQSxNQUMxRCxDQUFDO0FBQ0QsYUFBTztBQUFBLElBQ1QsR0FBRyx3Q0FBd0M7QUFDM0MsUUFBSSw0QkFBNEMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDMUUsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsUUFBTyxHQUFHckIsdUJBQXFCLGdCQUFnQixHQUFHQSx1QkFBcUIsc0JBQXNCLEdBQUdBLHVCQUFxQixjQUFjcUIsRUFBQyxDQUFDLENBQUMsR0FBRyxrQkFBa0I7QUFBQSxRQUNyTSxnQkFBZ0JyQix1QkFBcUI7QUFBQSxRQUNyQyxpQkFBaUJBLHVCQUFxQjtBQUFBLFFBQ3RDLG1CQUFtQkEsdUJBQXFCO0FBQUEsUUFDeEMsa0JBQWtDLHVCQUFPLENBQUNxQixPQUFNLDBCQUEwQkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsTUFDM0csQ0FBQztBQUFBLElBQ0gsR0FBRywyQkFBMkI7QUFDOUIsUUFBSSxtQkFBbUMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDakUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLHVCQUF1QkEsdUJBQXFCO0FBQUEsUUFDNUMsU0FBeUIsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUztBQUFBLFFBQ25MLFdBQVdyQix1QkFBcUI7QUFBQSxRQUNoQyxjQUFjQSx1QkFBcUI7QUFBQSxRQUNuQyxhQUFhQSx1QkFBcUI7QUFBQSxRQUNsQyxnQkFBZ0JBLHVCQUFxQjtBQUFBLFFBQ3JDLFdBQTJCLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVc7QUFBQSxRQUN2TCxVQUFVckIsdUJBQXFCO0FBQUEsTUFDakMsQ0FBQztBQUFBLElBQ0gsR0FBRyxrQkFBa0I7QUFDckIsUUFBSSx1QkFBdUMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDckUsWUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8saUJBQWlCLE9BQU8sT0FBTztBQUFBLE1BQ3hDLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLDRCQUE0Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUMxRSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsYUFBYUEsdUJBQXFCO0FBQUEsUUFDbEMsdUJBQXVCQSx1QkFBcUI7QUFBQSxRQUM1QyxTQUF5Qix1QkFBTyxDQUFDcUIsUUFBTyxHQUFHckIsdUJBQXFCLGdCQUFnQixHQUFHQSx1QkFBcUIsc0JBQXNCLEdBQUdBLHVCQUFxQixjQUFjcUIsRUFBQyxDQUFDLENBQUMsR0FBRyxTQUFTO0FBQUEsUUFDbkwsWUFBWXJCLHVCQUFxQjtBQUFBLFFBQ2pDLGFBQWFBLHVCQUFxQjtBQUFBLFFBQ2xDLGdCQUFnQkEsdUJBQXFCO0FBQUEsUUFDckMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsY0FBY0EsdUJBQXFCO0FBQUEsUUFDbkMsbUJBQW1CQSx1QkFBcUI7QUFBQSxRQUN4QyxzQkFBc0JBLHVCQUFxQjtBQUFBLFFBQzNDLGFBQWFBLHVCQUFxQjtBQUFBLFFBQ2xDLG9CQUFvQkEsdUJBQXFCO0FBQUEsUUFDekMsb0JBQW9CQSx1QkFBcUI7QUFBQSxRQUN6QyxvQkFBb0JBLHVCQUFxQjtBQUFBLFFBQ3pDLGdCQUFnQkEsdUJBQXFCO0FBQUEsUUFDckMsV0FBMkIsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVztBQUFBLFFBQ3ZMLFVBQVVyQix1QkFBcUI7QUFBQSxRQUMvQix5QkFBeUJBLHVCQUFxQjtBQUFBLFFBQzlDLFNBQVNBLHVCQUFxQjtBQUFBLE1BQ2hDLENBQUM7QUFBQSxJQUNILEdBQUcsMkJBQTJCO0FBQzlCLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLHdCQUF3Qyx1QkFBTyxDQUFDcUIsT0FBTSwwQkFBMEJBLElBQUcsT0FBTyxHQUFHLHdCQUF3QjtBQUFBLE1BQ3ZILENBQUM7QUFBQSxJQUNILEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksb0NBQW9ELHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2xGLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxnQkFBZ0MsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCO0FBQUEsUUFDak0sY0FBOEIsdUJBQU8sQ0FBQ0EsUUFBTyxHQUFHckIsdUJBQXFCLGdCQUFnQixHQUFHQSx1QkFBcUIsc0JBQXNCLEdBQUdBLHVCQUFxQixjQUFjcUIsRUFBQyxDQUFDLENBQUMsR0FBRyxjQUFjO0FBQUEsUUFDN0wsZ0JBQWdCckIsdUJBQXFCO0FBQUEsTUFDdkMsQ0FBQztBQUFBLElBQ0gsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSxtQ0FBbUQsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDakYsYUFBTyxPQUFPLFFBQVEsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLE1BQU07QUFDMUQsWUFBSSxVQUFVLE1BQU07QUFDbEIsaUJBQU87QUFBQSxRQUNUO0FBQ0EsWUFBSSxHQUFHLElBQUksbUJBQW1CLEdBQUdjLGNBQVksZ0JBQWdCLEtBQUssR0FBRyxPQUFPO0FBQzVFLGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLGtDQUFrQztBQUNyQyxRQUFJLDJCQUEyQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN6RSxjQUFRLEdBQUdkLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxtQkFBbUMsdUJBQU8sQ0FBQ3FCLE9BQU0saUNBQWlDQSxJQUFHLE9BQU8sR0FBRyxtQkFBbUI7QUFBQSxRQUNsSCxxQkFBcUMsdUJBQU8sQ0FBQ0EsT0FBTSxtQ0FBbUNBLElBQUcsT0FBTyxHQUFHLHFCQUFxQjtBQUFBLE1BQzFILENBQUM7QUFBQSxJQUNILEdBQUcsMEJBQTBCO0FBQzdCLFFBQUksbUNBQW1ELHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2pGLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8seUJBQXlCLE9BQU8sT0FBTztBQUFBLE1BQ2hELENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLGtDQUFrQztBQUNyQyxRQUFJLG1DQUFtRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNqRixhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUMxRCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxpQ0FBaUMsT0FBTyxPQUFPO0FBQzFELGVBQU87QUFBQSxNQUNULEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDUCxHQUFHLGtDQUFrQztBQUNyQyxRQUFJLHFDQUFxRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNuRixZQUFNLFVBQVUsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDQSxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNwRSxnQkFBUSxHQUFHcEIsdUJBQXFCLG9CQUFvQixLQUFLO0FBQUEsTUFDM0QsQ0FBQztBQUNELGFBQU87QUFBQSxJQUNULEdBQUcsb0NBQW9DO0FBQ3ZDLFFBQUksY0FBOEIsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDNUQsWUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sZ0JBQWdCLE9BQU8sT0FBTztBQUFBLE1BQ3ZDLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLGFBQWE7QUFDaEIsUUFBSSxrQkFBa0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDaEUsY0FBUSxHQUFHcEIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLE1BQXNCLHVCQUFPLENBQUNxQixPQUFNLGdCQUFnQkEsSUFBRyxPQUFPLEdBQUcsTUFBTTtBQUFBLE1BQ3pFLENBQUM7QUFBQSxJQUNILEdBQUcsaUJBQWlCO0FBQ3BCLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3BFLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sZ0JBQWdCLE9BQU8sT0FBTztBQUFBLE1BQ3ZDLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLHFCQUFxQjtBQUN4QixRQUFJLFNBQXlCLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3ZELGFBQU8sT0FBTyxRQUFRLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQzFELFlBQUksVUFBVSxNQUFNO0FBQ2xCLGlCQUFPO0FBQUEsUUFDVDtBQUNBLFlBQUksR0FBRyxJQUFJLG1CQUFtQixHQUFHTixjQUFZLGdCQUFnQixLQUFLLEdBQUcsT0FBTztBQUM1RSxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyxRQUFRO0FBQ1gsUUFBSSxhQUE2Qix1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUMzRCxZQUFNLFVBQVUsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDTSxPQUFNQSxNQUFLLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNwRSxlQUFPLE9BQU8sT0FBTyxPQUFPO0FBQUEsTUFDOUIsQ0FBQztBQUNELGFBQU87QUFBQSxJQUNULEdBQUcsWUFBWTtBQUNmLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR3BCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxpQkFBaUJBLHVCQUFxQjtBQUFBLFFBQ3RDLGdCQUFnQkEsdUJBQXFCO0FBQUEsUUFDckMsMEJBQTBCQSx1QkFBcUI7QUFBQSxRQUMvQyxNQUFzQix1QkFBTyxDQUFDcUIsT0FBTSxXQUFXQSxJQUFHLE9BQU8sR0FBRyxNQUFNO0FBQUEsUUFDbEUsc0JBQXNCckIsdUJBQXFCO0FBQUEsTUFDN0MsQ0FBQztBQUFBLElBQ0gsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEUsWUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sbUJBQW1CLEdBQUdOLGNBQVksZ0JBQWdCLEtBQUssR0FBRyxPQUFPO0FBQUEsTUFDMUUsQ0FBQztBQUNELGFBQU87QUFBQSxJQUNULEdBQUcsdUJBQXVCO0FBQzFCLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR2QsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGlCQUFpQyx1QkFBTyxDQUFDcUIsT0FBTSxtQkFBbUJBLElBQUcsT0FBTyxHQUFHLGlCQUFpQjtBQUFBLFFBQ2hHLHdCQUF3QnJCLHVCQUFxQjtBQUFBLE1BQy9DLENBQUM7QUFBQSxJQUNILEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLG1CQUFtQyx1QkFBTyxDQUFDcUIsT0FBTSxxQkFBcUJBLElBQUcsT0FBTyxHQUFHLG1CQUFtQjtBQUFBLFFBQ3RHLFdBQVdyQix1QkFBcUI7QUFBQSxNQUNsQyxDQUFDO0FBQUEsSUFDSCxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLHVCQUF1Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNyRSxhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUMxRCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxtQkFBbUIsR0FBR2MsY0FBWSxnQkFBZ0IsS0FBSyxHQUFHLE9BQU87QUFDNUUsZUFBTztBQUFBLE1BQ1QsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUNQLEdBQUcsc0JBQXNCO0FBQ3pCLFFBQUksMEJBQTBDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3hFLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNNLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sMEJBQTBCLE9BQU8sT0FBTztBQUFBLE1BQ2pELENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLHlCQUF5QjtBQUM1QixRQUFJLG9DQUFvRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNsRixjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsNEJBQTRDLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLDRCQUE0QjtBQUFBLFFBQ3pOLDBCQUEwQyx1QkFBTyxDQUFDQSxRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLDBCQUEwQjtBQUFBLFFBQ3JOLDJCQUEyQnJCLHVCQUFxQjtBQUFBLFFBQ2hELHNCQUFzQkEsdUJBQXFCO0FBQUEsTUFDN0MsQ0FBQztBQUFBLElBQ0gsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSSxzQ0FBc0QsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDcEYsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsc0JBQXNDLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLHNCQUFzQjtBQUFBLFFBQzdNLHNCQUFzQyx1QkFBTyxDQUFDQSxRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLHNCQUFzQjtBQUFBLFFBQzdNLHdCQUF3QnJCLHVCQUFxQjtBQUFBLFFBQzdDLG1CQUFtQkEsdUJBQXFCO0FBQUEsUUFDeEMsb0JBQW9CQSx1QkFBcUI7QUFBQSxNQUMzQyxDQUFDO0FBQUEsSUFDSCxHQUFHLHFDQUFxQztBQUN4QyxRQUFJLDhCQUE4Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM1RSxhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUMxRCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxtQkFBbUIsR0FBR2MsY0FBWSxnQkFBZ0IsS0FBSyxHQUFHLE9BQU87QUFDNUUsZUFBTztBQUFBLE1BQ1QsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUNQLEdBQUcsNkJBQTZCO0FBQ2hDLFFBQUksbUJBQW1DLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2pFLGNBQVEsR0FBR2QsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLFlBQTRCLHVCQUFPLENBQUNxQixPQUFNLGdCQUFnQkEsSUFBRyxPQUFPLEdBQUcsWUFBWTtBQUFBLFFBQ25GLGtCQUFrQyx1QkFBTyxDQUFDQSxPQUFNLG9CQUFvQkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsUUFDbkcsdUJBQXVDLHVCQUFPLENBQUNBLE9BQU0seUJBQXlCQSxJQUFHLE9BQU8sR0FBRyx1QkFBdUI7QUFBQSxNQUNwSCxDQUFDO0FBQUEsSUFDSCxHQUFHLGtCQUFrQjtBQUNyQixRQUFJLGdCQUFnQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM5RCxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsTUFBc0IsdUJBQU8sQ0FBQ3FCLE9BQU0sNEJBQTRCQSxJQUFHLE9BQU8sR0FBRyxNQUFNO0FBQUEsTUFDckYsQ0FBQztBQUFBLElBQ0gsR0FBRyxlQUFlO0FBQ2xCLFFBQUksaUJBQWlDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQy9ELGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxrQkFBa0MsdUJBQU8sQ0FBQ3FCLE9BQU0sb0JBQW9CQSxJQUFHLE9BQU8sR0FBRyxrQkFBa0I7QUFBQSxRQUNuRyxPQUFPckIsdUJBQXFCO0FBQUEsUUFDNUIsT0FBdUIsdUJBQU8sQ0FBQ3FCLE9BQU0sWUFBWUEsSUFBRyxPQUFPLEdBQUcsT0FBTztBQUFBLFFBQ3JFLGtCQUFrQyx1QkFBTyxDQUFDQSxPQUFNLE9BQU9BLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQ3RGLGNBQWNyQix1QkFBcUI7QUFBQSxNQUNyQyxDQUFDO0FBQUEsSUFDSCxHQUFHLGdCQUFnQjtBQUNuQixRQUFJLG1DQUFtRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNqRixjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1Qyx3QkFBd0MsdUJBQU8sQ0FBQ3FCLE9BQU0seURBQXlEQSxJQUFHLE9BQU8sR0FBRyx3QkFBd0I7QUFBQSxRQUNwSixZQUFZckIsdUJBQXFCO0FBQUEsUUFDakMsbURBQW1FLHVCQUFPLENBQUNxQixPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsbURBQW1EO0FBQUEsUUFDbkwsb0RBQW9FLHVCQUFPLENBQUNBLE9BQU0sa0NBQWtDQSxJQUFHLE9BQU8sR0FBRyxvREFBb0Q7QUFBQSxRQUNyTCxlQUFlckIsdUJBQXFCO0FBQUEsTUFDdEMsQ0FBQztBQUFBLElBQ0gsR0FBRyxrQ0FBa0M7QUFDckMsUUFBSSx1Q0FBdUQsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDckYsWUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8saUNBQWlDLE9BQU8sT0FBTztBQUFBLE1BQ3hELENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLHNDQUFzQztBQUN6QyxRQUFJLHdCQUF3Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN0RSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsd0JBQXdCQSx1QkFBcUI7QUFBQSxRQUM3QyxnQkFBZ0JBLHVCQUFxQjtBQUFBLFFBQ3JDLDRCQUE0QkEsdUJBQXFCO0FBQUEsUUFDakQsK0JBQStCQSx1QkFBcUI7QUFBQSxRQUNwRCxZQUFZQSx1QkFBcUI7QUFBQSxRQUNqQyw2QkFBNkMsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsNkJBQTZCO0FBQUEsUUFDM04sZUFBZXJCLHVCQUFxQjtBQUFBLFFBQ3BDLDBCQUEwQkEsdUJBQXFCO0FBQUEsUUFDL0MsOEJBQThCQSx1QkFBcUI7QUFBQSxRQUNuRCwwQkFBMEMsdUJBQU8sQ0FBQ3FCLE9BQU0scUJBQXFCQSxJQUFHLE9BQU8sR0FBRywwQkFBMEI7QUFBQSxRQUNwSCxnQkFBZ0JyQix1QkFBcUI7QUFBQSxNQUN2QyxDQUFDO0FBQUEsSUFDSCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLDRCQUE0Qyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUMxRSxZQUFNLFVBQVUsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDb0IsT0FBTUEsTUFBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFDcEUsZUFBTyxzQkFBc0IsT0FBTyxPQUFPO0FBQUEsTUFDN0MsQ0FBQztBQUNELGFBQU87QUFBQSxJQUNULEdBQUcsMkJBQTJCO0FBQzlCLFFBQUksdURBQXVFLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JHLGNBQVEsR0FBR3BCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxXQUFXQSx1QkFBcUI7QUFBQSxRQUNoQyxhQUFhQSx1QkFBcUI7QUFBQSxRQUNsQyw0Q0FBNEQsdUJBQU8sQ0FBQ3FCLE9BQU0sa0NBQWtDQSxJQUFHLE9BQU8sR0FBRyw0Q0FBNEM7QUFBQSxRQUNySyw2Q0FBNkQsdUJBQU8sQ0FBQ0EsT0FBTSxrQ0FBa0NBLElBQUcsT0FBTyxHQUFHLDZDQUE2QztBQUFBLE1BQ3pLLENBQUM7QUFBQSxJQUNILEdBQUcsc0RBQXNEO0FBQ3pELFFBQUksMkRBQTJFLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3pHLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8scURBQXFELE9BQU8sT0FBTztBQUFBLE1BQzVFLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLDBEQUEwRDtBQUM3RCxRQUFJLG9EQUFvRSx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNsRyxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsYUFBYUEsdUJBQXFCO0FBQUEsUUFDbEMsNENBQTRELHVCQUFPLENBQUNxQixPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsNENBQTRDO0FBQUEsUUFDckssOEJBQThCckIsdUJBQXFCO0FBQUEsUUFDbkQsNkNBQTZELHVCQUFPLENBQUNxQixPQUFNLGtDQUFrQ0EsSUFBRyxPQUFPLEdBQUcsNkNBQTZDO0FBQUEsUUFDdkssK0JBQStCckIsdUJBQXFCO0FBQUEsTUFDdEQsQ0FBQztBQUFBLElBQ0gsR0FBRyxtREFBbUQ7QUFDdEQsUUFBSSx3REFBd0UsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEcsWUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQ29CLE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sa0RBQWtELE9BQU8sT0FBTztBQUFBLE1BQ3pFLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLHVEQUF1RDtBQUMxRCxRQUFJLGdDQUFnRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM5RSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsWUFBWUEsdUJBQXFCO0FBQUEsUUFDakMsMkJBQTJDLHVCQUFPLENBQUNxQixPQUFNLHNCQUFzQkEsSUFBRyxPQUFPLEdBQUcsMkJBQTJCO0FBQUEsUUFDdkgscUNBQXFELHVCQUFPLENBQUNBLE9BQU0sc0RBQXNEQSxJQUFHLE9BQU8sR0FBRyxxQ0FBcUM7QUFBQSxRQUMzSyxtREFBbUUsdUJBQU8sQ0FBQ0EsT0FBTSxrQ0FBa0NBLElBQUcsT0FBTyxHQUFHLG1EQUFtRDtBQUFBLFFBQ25MLHFDQUFxQ3JCLHVCQUFxQjtBQUFBLFFBQzFELG9EQUFvRSx1QkFBTyxDQUFDcUIsT0FBTSxrQ0FBa0NBLElBQUcsT0FBTyxHQUFHLG9EQUFvRDtBQUFBLFFBQ3JMLHNDQUFzQ3JCLHVCQUFxQjtBQUFBLFFBQzNELGVBQWVBLHVCQUFxQjtBQUFBLFFBQ3BDLDBCQUEwQyx1QkFBTyxDQUFDcUIsT0FBTSxxQkFBcUJBLElBQUcsT0FBTyxHQUFHLDBCQUEwQjtBQUFBLE1BQ3RILENBQUM7QUFBQSxJQUNILEdBQUcsK0JBQStCO0FBQ2xDLFFBQUksb0NBQW9ELHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2xGLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sOEJBQThCLE9BQU8sT0FBTztBQUFBLE1BQ3JELENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLG1DQUFtQztBQUN0QyxRQUFJLG9CQUFvQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNsRSxjQUFRLEdBQUdwQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsaUJBQWlDLHVCQUFPLENBQUNxQixRQUFPLEdBQUdyQix1QkFBcUIsZ0JBQWdCLEdBQUdBLHVCQUFxQixzQkFBc0IsR0FBR0EsdUJBQXFCLGNBQWNxQixFQUFDLENBQUMsQ0FBQyxHQUFHLGlCQUFpQjtBQUFBLFFBQ25NLG1CQUFtQnJCLHVCQUFxQjtBQUFBLFFBQ3hDLGlCQUFpQkEsdUJBQXFCO0FBQUEsUUFDdEMsZ0JBQWdCQSx1QkFBcUI7QUFBQSxNQUN2QyxDQUFDO0FBQUEsSUFDSCxHQUFHLG1CQUFtQjtBQUN0QixRQUFJLGtDQUFrRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNoRixjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxrQkFBa0MsdUJBQU8sQ0FBQ3FCLE9BQU0sb0JBQW9CQSxJQUFHLE9BQU8sR0FBRyxrQkFBa0I7QUFBQSxNQUNyRyxDQUFDO0FBQUEsSUFDSCxHQUFHLGlDQUFpQztBQUNwQyxRQUFJLHFDQUFxRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNuRixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsa0JBQWtDLHVCQUFPLENBQUNxQixPQUFNLG9CQUFvQkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsTUFDckcsQ0FBQztBQUFBLElBQ0gsR0FBRyxvQ0FBb0M7QUFDdkMsUUFBSSxnQkFBZ0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDOUQsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSxvQkFBb0JBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQ25HLE9BQU9yQix1QkFBcUI7QUFBQSxRQUM1QixPQUF1Qix1QkFBTyxDQUFDcUIsT0FBTSxZQUFZQSxJQUFHLE9BQU8sR0FBRyxPQUFPO0FBQUEsUUFDckUsa0JBQWtDLHVCQUFPLENBQUNBLE9BQU0sT0FBT0EsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsUUFDdEYsY0FBY3JCLHVCQUFxQjtBQUFBLE1BQ3JDLENBQUM7QUFBQSxJQUNILEdBQUcsZUFBZTtBQUNsQixRQUFJLGlDQUFpRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUMvRSxhQUFPLE9BQU8sUUFBUSxNQUFNLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUMxRCxZQUFJLFVBQVUsTUFBTTtBQUNsQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxZQUFJLEdBQUcsSUFBSSxZQUFZLE9BQU8sT0FBTztBQUNyQyxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyxnQ0FBZ0M7QUFDbkMsUUFBSSx3QkFBd0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDdEUsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsYUFBYUEsdUJBQXFCO0FBQUEsUUFDbEMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsb0JBQW9CQSx1QkFBcUI7QUFBQSxRQUN6Qyx1QkFBdUJBLHVCQUFxQjtBQUFBLFFBQzVDLFVBQVVBLHVCQUFxQjtBQUFBLFFBQy9CLHVCQUF1Qyx1QkFBTyxDQUFDcUIsUUFBTyxHQUFHckIsdUJBQXFCLGdCQUFnQixHQUFHQSx1QkFBcUIsc0JBQXNCLEdBQUdBLHVCQUFxQixjQUFjcUIsRUFBQyxDQUFDLENBQUMsR0FBRyx1QkFBdUI7QUFBQSxRQUMvTSxTQUFTckIsdUJBQXFCO0FBQUEsUUFDOUIsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsZ0JBQWdCQSx1QkFBcUI7QUFBQSxNQUN2QyxDQUFDO0FBQUEsSUFDSCxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLCtCQUErQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUM3RSxjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1Qyx3QkFBd0JBLHVCQUFxQjtBQUFBLFFBQzdDLHVCQUF1QkEsdUJBQXFCO0FBQUEsUUFDNUMsZ0JBQWdDLHVCQUFPLENBQUNxQixPQUFNLGtCQUFrQkEsSUFBRyxPQUFPLEdBQUcsZ0JBQWdCO0FBQUEsUUFDN0YsbUJBQW1CckIsdUJBQXFCO0FBQUEsUUFDeEMsdUJBQXVCQSx1QkFBcUI7QUFBQSxNQUM5QyxDQUFDO0FBQUEsSUFDSCxHQUFHLDhCQUE4QjtBQUNqQyxRQUFJLG9CQUFvQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNsRSxjQUFRLEdBQUdBLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxnQ0FBZ0QsdUJBQU8sQ0FBQ3FCLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsZ0NBQWdDO0FBQUEsUUFDak8saUJBQWlCckIsdUJBQXFCO0FBQUEsUUFDdEMsU0FBU0EsdUJBQXFCO0FBQUEsUUFDOUIsUUFBUUEsdUJBQXFCO0FBQUEsTUFDL0IsQ0FBQztBQUFBLElBQ0gsR0FBRyxtQkFBbUI7QUFDdEIsUUFBSSxpQ0FBaUQsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDL0UsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsVUFBMEIsdUJBQU8sQ0FBQ3FCLE9BQU0scUNBQXFDQSxJQUFHLE9BQU8sR0FBRyxVQUFVO0FBQUEsUUFDcEcsV0FBV3JCLHVCQUFxQjtBQUFBLFFBQ2hDLGFBQWFBLHVCQUFxQjtBQUFBLE1BQ3BDLENBQUM7QUFBQSxJQUNILEdBQUcsZ0NBQWdDO0FBQ25DLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLG9CQUFvQyx1QkFBTyxDQUFDcUIsUUFBTyxHQUFHckIsdUJBQXFCLGdCQUFnQixHQUFHQSx1QkFBcUIsc0JBQXNCLEdBQUdBLHVCQUFxQixjQUFjcUIsRUFBQyxDQUFDLENBQUMsR0FBRyxvQkFBb0I7QUFBQSxRQUN6TSxZQUFZckIsdUJBQXFCO0FBQUEsTUFDbkMsQ0FBQztBQUFBLElBQ0gsR0FBRyxzQkFBc0I7QUFDekIsUUFBSSxzQkFBc0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDcEUsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsaUJBQWlDLHVCQUFPLENBQUNxQixPQUFNLG1CQUFtQkEsSUFBRyxPQUFPLEdBQUcsaUJBQWlCO0FBQUEsUUFDaEcsc0JBQXNCckIsdUJBQXFCO0FBQUEsUUFDM0Msb0JBQW9DLHVCQUFPLENBQUNxQixPQUFNLHNCQUFzQkEsSUFBRyxPQUFPLEdBQUcsb0JBQW9CO0FBQUEsUUFDekcsa0JBQWtDLHVCQUFPLENBQUNBLFFBQU8sR0FBR3JCLHVCQUFxQixnQkFBZ0IsR0FBR0EsdUJBQXFCLHNCQUFzQixHQUFHQSx1QkFBcUIsY0FBY3FCLEVBQUMsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCO0FBQUEsUUFDck0sMkJBQTJCckIsdUJBQXFCO0FBQUEsUUFDaEQsd0JBQXdDLHVCQUFPLENBQUNxQixPQUFNLHVDQUF1Q0EsSUFBRyxPQUFPLEdBQUcsd0JBQXdCO0FBQUEsUUFDbEksb0JBQW9CckIsdUJBQXFCO0FBQUEsUUFDekMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsV0FBV0EsdUJBQXFCO0FBQUEsUUFDaEMsaUJBQWlCQSx1QkFBcUI7QUFBQSxRQUN0QyxtQkFBbUJBLHVCQUFxQjtBQUFBLFFBQ3hDLHVCQUF1QkEsdUJBQXFCO0FBQUEsUUFDNUMsd0JBQXdCQSx1QkFBcUI7QUFBQSxRQUM3QyxvQkFBb0JBLHVCQUFxQjtBQUFBLFFBQ3pDLHVCQUF1Qyx1QkFBTyxDQUFDcUIsT0FBTSxvQ0FBb0NBLElBQUcsT0FBTyxHQUFHLHVCQUF1QjtBQUFBLFFBQzdILFVBQTBCLHVCQUFPLENBQUNBLE9BQU0sMEJBQTBCQSxJQUFHLE9BQU8sR0FBRyxVQUFVO0FBQUEsUUFDekYsZ0JBQWdDLHVCQUFPLENBQUNBLE9BQU0sa0JBQWtCQSxJQUFHLE9BQU8sR0FBRyxnQkFBZ0I7QUFBQSxRQUM3RixnQkFBZ0MsdUJBQU8sQ0FBQ0EsT0FBTSxrQkFBa0JBLElBQUcsT0FBTyxHQUFHLGdCQUFnQjtBQUFBLFFBQzdGLHFCQUFxQnJCLHVCQUFxQjtBQUFBLFFBQzFDLFVBQVVBLHVCQUFxQjtBQUFBLFFBQy9CLG1CQUFtQyx1QkFBTyxDQUFDcUIsT0FBTSxxQkFBcUJBLElBQUcsT0FBTyxHQUFHLG1CQUFtQjtBQUFBLFFBQ3RHLFNBQVNyQix1QkFBcUI7QUFBQSxRQUM5QixXQUFXQSx1QkFBcUI7QUFBQSxRQUNoQyxnQkFBZ0JBLHVCQUFxQjtBQUFBLFFBQ3JDLGFBQWFBLHVCQUFxQjtBQUFBLFFBQ2xDLGdCQUFnQkEsdUJBQXFCO0FBQUEsTUFDdkMsQ0FBQztBQUFBLElBQ0gsR0FBRyxxQkFBcUI7QUFDeEIsUUFBSSw0QkFBNEMsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDMUUsY0FBUSxHQUFHQSx1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsa0JBQWtDLHVCQUFPLENBQUNxQixPQUFNLDRCQUE0QkEsSUFBRyxPQUFPLEdBQUcsa0JBQWtCO0FBQUEsUUFDM0csV0FBMkIsdUJBQU8sQ0FBQ0EsT0FBTSxvQkFBb0JBLElBQUcsT0FBTyxHQUFHLFdBQVc7QUFBQSxNQUN2RixDQUFDO0FBQUEsSUFDSCxHQUFHLDJCQUEyQjtBQUM5QixRQUFJLGtDQUFrRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNoRixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMscUJBQXFDLHVCQUFPLENBQUNxQixPQUFNLDBCQUEwQkEsSUFBRyxPQUFPLEdBQUcscUJBQXFCO0FBQUEsUUFDL0csU0FBU3JCLHVCQUFxQjtBQUFBLE1BQ2hDLENBQUM7QUFBQSxJQUNILEdBQUcsaUNBQWlDO0FBQ3BDLFFBQUksOEJBQThDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQzVFLGNBQVEsR0FBR0EsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGtCQUFrQyx1QkFBTyxDQUFDcUIsT0FBTSw0QkFBNEJBLElBQUcsT0FBTyxHQUFHLGtCQUFrQjtBQUFBLFFBQzNHLHVCQUF1Qyx1QkFBTyxDQUFDQSxPQUFNLGlDQUFpQ0EsSUFBRyxPQUFPLEdBQUcsdUJBQXVCO0FBQUEsTUFDNUgsQ0FBQztBQUFBLElBQ0gsR0FBRyw2QkFBNkI7QUFDaEMsUUFBSSxtQ0FBbUQsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDakYsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLDhCQUE4Qyx1QkFBTyxDQUFDcUIsT0FBTSxnQ0FBZ0NBLElBQUcsT0FBTyxHQUFHLDhCQUE4QjtBQUFBLE1BQ3pJLENBQUM7QUFBQSxJQUNILEdBQUcsa0NBQWtDO0FBQ3JDLFFBQUksNkJBQTZDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQzNFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1Qyx3QkFBd0MsdUJBQU8sQ0FBQ3FCLE9BQU0sMEJBQTBCQSxJQUFHLE9BQU8sR0FBRyx3QkFBd0I7QUFBQSxNQUN2SCxDQUFDO0FBQUEsSUFDSCxHQUFHLDRCQUE0QjtBQUMvQixRQUFJLHFDQUFxRCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNuRixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsaUJBQWlCQSx1QkFBcUI7QUFBQSxRQUN0QyxpQkFBaUMsdUJBQU8sQ0FBQ3FCLE9BQU0sa0NBQWtDQSxJQUFHLE9BQU8sR0FBRyxpQkFBaUI7QUFBQSxNQUNqSCxDQUFDO0FBQUEsSUFDSCxHQUFHLG9DQUFvQztBQUN2QyxRQUFJLHNCQUFzQyx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUNwRSxjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsWUFBNEIsdUJBQU8sQ0FBQ3FCLE9BQU0sZ0JBQWdCQSxJQUFHLE9BQU8sR0FBRyxZQUFZO0FBQUEsUUFDbkYsa0JBQWtDLHVCQUFPLENBQUNBLE9BQU0sb0JBQW9CQSxJQUFHLE9BQU8sR0FBRyxrQkFBa0I7QUFBQSxRQUNuRyx1QkFBdUMsdUJBQU8sQ0FBQ0EsT0FBTSx5QkFBeUJBLElBQUcsT0FBTyxHQUFHLHVCQUF1QjtBQUFBLE1BQ3BILENBQUM7QUFBQSxJQUNILEdBQUcscUJBQXFCO0FBQ3hCLFFBQUksdUJBQXVDLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ3JFLGNBQVEsR0FBR3JCLHVCQUFxQixNQUFNLFFBQVE7QUFBQSxRQUM1QyxrQkFBa0MsdUJBQU8sQ0FBQ3FCLE9BQU0sb0JBQW9CQSxJQUFHLE9BQU8sR0FBRyxrQkFBa0I7QUFBQSxNQUNyRyxDQUFDO0FBQUEsSUFDSCxHQUFHLHNCQUFzQjtBQUN6QixRQUFJLHlDQUF5RCx1QkFBTyxDQUFDLFFBQVEsWUFBWTtBQUN2RixjQUFRLEdBQUdyQix1QkFBcUIsTUFBTSxRQUFRO0FBQUEsUUFDNUMsNkJBQTZDLHVCQUFPLENBQUNxQixPQUFNLCtCQUErQkEsSUFBRyxPQUFPLEdBQUcsNkJBQTZCO0FBQUEsTUFDdEksQ0FBQztBQUFBLElBQ0gsR0FBRyx3Q0FBd0M7QUFDM0MsUUFBSSxrQkFBa0MsdUJBQU8sQ0FBQyxRQUFRLFlBQVk7QUFDaEUsY0FBUSxHQUFHckIsdUJBQXFCLE1BQU0sUUFBUTtBQUFBLFFBQzVDLGVBQStCLHVCQUFPLENBQUNxQixPQUFNLGlCQUFpQkEsSUFBRyxPQUFPLEdBQUcsZUFBZTtBQUFBLFFBQzFGLFlBQTRCLHVCQUFPLENBQUNBLE9BQU0sY0FBY0EsSUFBRyxPQUFPLEdBQUcsWUFBWTtBQUFBLE1BQ25GLENBQUM7QUFBQSxJQUNILEdBQUcsaUJBQWlCO0FBQ3BCLFFBQUksbUJBQW1DLHVCQUFPLENBQUMsUUFBUSxZQUFZO0FBQ2pFLFlBQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUNELE9BQU1BLE1BQUssSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ3BFLGVBQU8sZ0JBQWdCLE9BQU8sT0FBTztBQUFBLE1BQ3ZDLENBQUM7QUFDRCxhQUFPO0FBQUEsSUFDVCxHQUFHLGtCQUFrQjtBQUNyQixRQUFJRix1QkFBc0MsdUJBQU8sQ0FBQyxZQUFZO0FBQUEsTUFDNUQsZ0JBQWdCLE9BQU87QUFBQSxNQUN2QixXQUFXLE9BQU8sUUFBUSxrQkFBa0IsS0FBSyxPQUFPLFFBQVEsbUJBQW1CLEtBQUssT0FBTyxRQUFRLGtCQUFrQjtBQUFBLE1BQ3pILG1CQUFtQixPQUFPLFFBQVEsWUFBWTtBQUFBLE1BQzlDLE1BQU0sT0FBTyxRQUFRLGFBQWE7QUFBQSxJQUNwQyxJQUFJLHFCQUFxQjtBQUN6QixRQUFJQyxzQkFBcUIsR0FBR25CLHVCQUFxQixtQkFBbUIsd0JBQXdCO0FBQzVGLFFBQUlnQix1QkFBc0MsdUJBQU8sT0FBTyxTQUFTLFNBQVMsTUFBTSxrQkFBa0IsU0FBUztBQUN6RyxZQUFNLEVBQUUsVUFBVSxXQUFXLFNBQVMsTUFBTSxNQUFNLFNBQVMsSUFBSSxNQUFNLFFBQVEsU0FBUztBQUN0RixZQUFNLFdBQVc7QUFBQSxRQUNmO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLFFBQVE7QUFBQSxRQUNSLE1BQU0sU0FBUyxTQUFTLEdBQUcsSUFBSSxTQUFTLE1BQU0sR0FBRyxFQUFFLElBQUksT0FBTyxXQUFXO0FBQUEsUUFDekU7QUFBQSxNQUNGO0FBQ0EsVUFBSSxxQkFBcUIsUUFBUTtBQUMvQixpQkFBUyxXQUFXO0FBQUEsTUFDdEI7QUFDQSxVQUFJLFNBQVMsUUFBUTtBQUNuQixpQkFBUyxPQUFPO0FBQUEsTUFDbEI7QUFDQSxhQUFPLElBQUlELHVCQUFxQixZQUFZLFFBQVE7QUFBQSxJQUN0RCxHQUFHLHFCQUFxQjtBQUN4QixhQUFTLGNBQWMsV0FBVztBQUNoQyxhQUFPO0FBQUEsUUFDTCxnQkFBZ0I7QUFBQSxRQUNoQixnQkFBZ0IscUJBQXFCLFNBQVM7QUFBQSxNQUNoRDtBQUFBLElBQ0Y7QUFDQSxXQUFPLGVBQWUsZUFBZTtBQUdyQyxRQUFJLDJCQUEyQixjQUFjZix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBR2EsYUFBWSxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUMzSSxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsMEJBQTBCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLDJCQUEyQixFQUFFLEdBQUcsMkJBQTJCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDNUwsT0FBTztBQUNMLGVBQU8sTUFBTSwwQkFBMEI7QUFBQSxNQUN6QztBQUFBLElBQ0Y7QUFHQSxRQUFJYSx3QkFBdUI7QUFHM0IsUUFBSUMsaUNBQWdDO0FBS3BDLFFBQUlDLHFDQUFvRCx1QkFBTyxDQUFDLGtCQUFrQjtBQUNoRixZQUFNLG1CQUFtQixjQUFjO0FBQ3ZDLFVBQUksMEJBQTBCLGNBQWM7QUFDNUMsVUFBSSxlQUFlLGNBQWM7QUFDakMsYUFBTztBQUFBLFFBQ0wsa0JBQWtCLGdCQUFnQjtBQUNoQyxnQkFBTSxRQUFRLGlCQUFpQixVQUFVLENBQUMsV0FBVyxPQUFPLGFBQWEsZUFBZSxRQUFRO0FBQ2hHLGNBQUksVUFBVSxJQUFJO0FBQ2hCLDZCQUFpQixLQUFLLGNBQWM7QUFBQSxVQUN0QyxPQUFPO0FBQ0wsNkJBQWlCLE9BQU8sT0FBTyxHQUFHLGNBQWM7QUFBQSxVQUNsRDtBQUFBLFFBQ0Y7QUFBQSxRQUNBLGtCQUFrQjtBQUNoQixpQkFBTztBQUFBLFFBQ1Q7QUFBQSxRQUNBLDBCQUEwQix3QkFBd0I7QUFDaEQsb0NBQTBCO0FBQUEsUUFDNUI7QUFBQSxRQUNBLHlCQUF5QjtBQUN2QixpQkFBTztBQUFBLFFBQ1Q7QUFBQSxRQUNBLGVBQWUsYUFBYTtBQUMxQix5QkFBZTtBQUFBLFFBQ2pCO0FBQUEsUUFDQSxjQUFjO0FBQ1osaUJBQU87QUFBQSxRQUNUO0FBQUEsTUFDRjtBQUFBLElBQ0YsR0FBRyxtQ0FBbUM7QUFDdEMsUUFBSUMsZ0NBQStDLHVCQUFPLENBQUMsV0FBVztBQUNwRSxhQUFPO0FBQUEsUUFDTCxpQkFBaUIsT0FBTyxnQkFBZ0I7QUFBQSxRQUN4Qyx3QkFBd0IsT0FBTyx1QkFBdUI7QUFBQSxRQUN0RCxhQUFhLE9BQU8sWUFBWTtBQUFBLE1BQ2xDO0FBQUEsSUFDRixHQUFHLDhCQUE4QjtBQUdqQyxRQUFJQyw0QkFBMkMsdUJBQU8sQ0FBQyxlQUFlLGVBQWU7QUFDbkYsWUFBTSx5QkFBeUIsT0FBTztBQUFBLFNBQ25DLEdBQUdILCtCQUE4QixvQ0FBb0MsYUFBYTtBQUFBLFNBQ2xGLEdBQUd4Qix1QkFBcUIsa0NBQWtDLGFBQWE7QUFBQSxTQUN2RSxHQUFHZSx1QkFBcUIsc0NBQXNDLGFBQWE7QUFBQSxRQUM1RVUsbUNBQWtDLGFBQWE7QUFBQSxNQUNqRDtBQUNBLGlCQUFXLFFBQVEsQ0FBQyxjQUFjLFVBQVUsVUFBVSxzQkFBc0IsQ0FBQztBQUM3RSxhQUFPLE9BQU87QUFBQSxRQUNaO0FBQUEsU0FDQyxHQUFHRCwrQkFBOEIsd0NBQXdDLHNCQUFzQjtBQUFBLFNBQy9GLEdBQUd4Qix1QkFBcUIsNkJBQTZCLHNCQUFzQjtBQUFBLFNBQzNFLEdBQUdlLHVCQUFxQixpQ0FBaUMsc0JBQXNCO0FBQUEsUUFDaEZXLDhCQUE2QixzQkFBc0I7QUFBQSxNQUNyRDtBQUFBLElBQ0YsR0FBRywwQkFBMEI7QUFHN0IsUUFBSTVCLGtCQUFpQixjQUFjRSx1QkFBcUIsT0FBTztBQUFBLE1BQzdELE9BQU87QUFDTCxlQUFPLE1BQU0sZ0JBQWdCO0FBQUEsTUFDL0I7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBO0FBQUEsTUFDQSxlQUFlLENBQUMsYUFBYSxHQUFHO0FBQzlCLGNBQU0sYUFBYSxHQUFHdUIsc0JBQXFCLGtCQUFrQixpQkFBaUIsQ0FBQyxDQUFDO0FBQ2hGLGNBQU0sU0FBUztBQUNmLGFBQUssYUFBYTtBQUNsQixjQUFNLFlBQVlYLGlDQUFnQyxTQUFTO0FBQzNELGNBQU0sYUFBYSxHQUFHLDJCQUEyQixvQ0FBb0MsU0FBUztBQUM5RixjQUFNLGFBQWEsR0FBR1IsOEJBQTZCLHdCQUF3QixTQUFTO0FBQ3BGLGNBQU0sYUFBYSxHQUFHSSx5QkFBd0Isb0JBQW9CLFNBQVM7QUFDM0UsY0FBTSxhQUFhLEdBQUdILHdCQUF1QixxQkFBcUIsU0FBUztBQUMzRSxjQUFNLGFBQWEsR0FBR0osK0JBQThCLHlCQUF5QixTQUFTO0FBQ3RGLGNBQU0sYUFBYSxHQUFHUyw0QkFBMkIsdUJBQXVCLFNBQVM7QUFDakYsY0FBTSxhQUFhLEdBQUdELCtCQUE4Qiw2QkFBNkIsU0FBUztBQUMxRixjQUFNLGFBQWEsR0FBRyxxQ0FBcUMsZ0NBQWdDLFdBQVc7QUFBQSxVQUNwRyw4QkFBOEI7QUFBQSxRQUNoQyxDQUFDO0FBQ0QsY0FBTSxhQUFha0IsMEJBQXlCLFdBQVcsZUFBZSxjQUFjLENBQUMsQ0FBQztBQUN0RixhQUFLLFNBQVM7QUFDZCxhQUFLLGdCQUFnQixLQUFLLEdBQUd2Qiw4QkFBNkIsb0JBQW9CLEtBQUssTUFBTSxDQUFDO0FBQzFGLGFBQUssZ0JBQWdCLEtBQUssR0FBR0kseUJBQXdCLGdCQUFnQixLQUFLLE1BQU0sQ0FBQztBQUNqRixhQUFLLGdCQUFnQixLQUFLLEdBQUdELGtDQUFpQyx3QkFBd0IsS0FBSyxNQUFNLENBQUM7QUFDbEcsYUFBSyxnQkFBZ0IsS0FBSyxHQUFHTiwrQkFBOEIscUJBQXFCLEtBQUssTUFBTSxDQUFDO0FBQzVGLGFBQUssZ0JBQWdCLEtBQUssR0FBR0MsMEJBQXlCLGlCQUFpQixLQUFLLE1BQU0sQ0FBQztBQUNuRixhQUFLLGdCQUFnQixLQUFLLEdBQUdDLHVDQUFzQyw2QkFBNkIsS0FBSyxNQUFNLENBQUM7QUFDNUcsYUFBSyxnQkFBZ0I7QUFBQSxXQUNsQixHQUFHRyxjQUFhLHdDQUF3QyxLQUFLLFFBQVE7QUFBQSxZQUNwRSxrQ0FBa0NHLCtCQUE4QjtBQUFBLFlBQ2hFLGdDQUFnRCx1QkFBTyxPQUFPLFdBQVcsSUFBSUgsY0FBYSw4QkFBOEI7QUFBQSxjQUN0SCxrQkFBa0IsT0FBTztBQUFBLFlBQzNCLENBQUMsR0FBRyxnQ0FBZ0M7QUFBQSxVQUN0QyxDQUFDO0FBQUEsUUFDSDtBQUNBLGFBQUssZ0JBQWdCLEtBQUssR0FBR0EsY0FBYSxzQkFBc0IsS0FBSyxNQUFNLENBQUM7QUFBQSxNQUM5RTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU1BLFVBQVU7QUFDUixjQUFNLFFBQVE7QUFBQSxNQUNoQjtBQUFBLElBQ0Y7QUFTQSxRQUFJLCtCQUErQixjQUFjTix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBR2EsYUFBWSxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUMvSSxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQix5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsOEJBQThCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLCtCQUErQixFQUFFLEdBQUcsK0JBQStCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDNU0sT0FBTztBQUNMLGVBQU8sTUFBTSw4QkFBOEI7QUFBQSxNQUM3QztBQUFBLElBQ0Y7QUFNQSxRQUFJLHNCQUFzQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ3JGLEdBQUdhO0FBQUEsTUFDSCxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixLQUFxQix1QkFBTyxDQUFDLFVBQVUsT0FBTyxLQUFLLE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRTtBQUFBLElBQzNJLENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLHFCQUFxQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxzQkFBc0IsRUFBRSxHQUFHLHNCQUFzQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ3hLLE9BQU87QUFDTCxlQUFPLE1BQU0scUJBQXFCO0FBQUEsTUFDcEM7QUFBQSxJQUNGO0FBTUEsUUFBSSx3QkFBd0IsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUN2RixHQUFHYTtBQUFBLE1BQ0gsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsS0FBcUIsdUJBQU8sQ0FBQyxVQUFVLE9BQU8sS0FBSyxPQUFPLGdCQUFnQixDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUU7QUFBQSxJQUMzSSxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGtCQUFrQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix1QkFBdUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksd0JBQXdCLEVBQUUsR0FBRyx3QkFBd0IsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHVCQUF1QjtBQUFBLE1BQ3RDO0FBQUEsSUFDRjtBQU1BLFFBQUksc0JBQXNCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDckYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGdCQUFnQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixxQkFBcUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksc0JBQXNCLEVBQUUsR0FBRyxzQkFBc0IsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4SyxPQUFPO0FBQ0wsZUFBTyxNQUFNLHFCQUFxQjtBQUFBLE1BQ3BDO0FBQUEsSUFDRjtBQU1BLFFBQUksMkJBQTJCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDMUYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLGtCQUFrQjtBQUFBLElBQ2hFLENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIscUJBQXFCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLDBCQUEwQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSwyQkFBMkIsRUFBRSxHQUFHLDJCQUEyQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQzVMLE9BQU87QUFDTCxlQUFPLE1BQU0sMEJBQTBCO0FBQUEsTUFDekM7QUFBQSxJQUNGO0FBTUEsUUFBSSxxQkFBcUIsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNwRixHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsZUFBZSxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixvQkFBb0IsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUkscUJBQXFCLEVBQUUsR0FBRyxxQkFBcUIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwSyxPQUFPO0FBQ0wsZUFBTyxNQUFNLG9CQUFvQjtBQUFBLE1BQ25DO0FBQUEsSUFDRjtBQU1BLFFBQUksc0JBQXNCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDckYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGdCQUFnQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixxQkFBcUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksc0JBQXNCLEVBQUUsR0FBRyxzQkFBc0IsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4SyxPQUFPO0FBQ0wsZUFBTyxNQUFNLHFCQUFxQjtBQUFBLE1BQ3BDO0FBQUEsSUFDRjtBQU1BLFFBQUksb0JBQW9CLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDbkYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsbUJBQW1CLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLG9CQUFvQixFQUFFLEdBQUcsb0JBQW9CLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDaEssT0FBTztBQUNMLGVBQU8sTUFBTSxtQkFBbUI7QUFBQSxNQUNsQztBQUFBLElBQ0Y7QUFNQSxRQUFJLDhCQUE4QixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQzdGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxjQUFjO0FBQUEsSUFDNUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQix3QkFBd0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsNkJBQTZCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLDhCQUE4QixFQUFFLEdBQUcsOEJBQThCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDeE0sT0FBTztBQUNMLGVBQU8sTUFBTSw2QkFBNkI7QUFBQSxNQUM1QztBQUFBLElBQ0Y7QUFNQSxRQUFJLHFCQUFxQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ3BGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxZQUFZO0FBQUEsSUFDMUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLG9CQUFvQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxxQkFBcUIsRUFBRSxHQUFHLHFCQUFxQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ3BLLE9BQU87QUFDTCxlQUFPLE1BQU0sb0JBQW9CO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBTUEsUUFBSSx3QkFBd0IsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUN2RixHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLHVCQUF1QixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSx3QkFBd0IsRUFBRSxHQUFHLHdCQUF3QixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ2hMLE9BQU87QUFDTCxlQUFPLE1BQU0sdUJBQXVCO0FBQUEsTUFDdEM7QUFBQSxJQUNGO0FBTUEsUUFBSSxtQ0FBbUMsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNsRyxHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsNkJBQTZCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLGtDQUFrQyxFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxtQ0FBbUMsRUFBRSxHQUFHLG1DQUFtQyxFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQzVOLE9BQU87QUFDTCxlQUFPLE1BQU0sa0NBQWtDO0FBQUEsTUFDakQ7QUFBQSxJQUNGO0FBTUEsUUFBSSxxQ0FBcUMsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNwRyxHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsK0JBQStCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLG9DQUFvQyxFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxxQ0FBcUMsRUFBRSxHQUFHLHFDQUFxQyxFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ3BPLE9BQU87QUFDTCxlQUFPLE1BQU0sb0NBQW9DO0FBQUEsTUFDbkQ7QUFBQSxJQUNGO0FBTUEsUUFBSSx3QkFBd0IsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUN2RixHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLHVCQUF1QixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSx3QkFBd0IsRUFBRSxHQUFHLHdCQUF3QixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ2hMLE9BQU87QUFDTCxlQUFPLE1BQU0sdUJBQXVCO0FBQUEsTUFDdEM7QUFBQSxJQUNGO0FBTUEsUUFBSSw2QkFBNkIsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUM1RixHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sa0JBQWtCO0FBQUEsSUFDaEUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQix1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsNEJBQTRCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLDZCQUE2QixFQUFFLEdBQUcsNkJBQTZCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDcE0sT0FBTztBQUNMLGVBQU8sTUFBTSw0QkFBNEI7QUFBQSxNQUMzQztBQUFBLElBQ0Y7QUFNQSxRQUFJLHFDQUFxQyxjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ3BHLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxrQkFBa0I7QUFBQSxJQUNoRSxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLCtCQUErQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixvQ0FBb0MsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUkscUNBQXFDLEVBQUUsR0FBRyxxQ0FBcUMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwTyxPQUFPO0FBQ0wsZUFBTyxNQUFNLG9DQUFvQztBQUFBLE1BQ25EO0FBQUEsSUFDRjtBQU1BLFFBQUksd0JBQXdCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDdkYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGtCQUFrQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix1QkFBdUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksd0JBQXdCLEVBQUUsR0FBRyx3QkFBd0IsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHVCQUF1QjtBQUFBLE1BQ3RDO0FBQUEsSUFDRjtBQU1BLFFBQUksNkNBQTZDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDNUcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHVDQUF1QyxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiw0Q0FBNEMsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksNkNBQTZDLEVBQUUsR0FBRyw2Q0FBNkMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwUSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDRDQUE0QztBQUFBLE1BQzNEO0FBQUEsSUFDRjtBQU1BLFFBQUksd0JBQXdCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHYSxhQUFZLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3hJLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGtCQUFrQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix1QkFBdUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksd0JBQXdCLEVBQUUsR0FBRyx3QkFBd0IsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHVCQUF1QjtBQUFBLE1BQ3RDO0FBQUEsSUFDRjtBQU1BLFFBQUksdUJBQXVCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDdEYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixzQkFBc0IsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksdUJBQXVCLEVBQUUsR0FBRyx1QkFBdUIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUM1SyxPQUFPO0FBQ0wsZUFBTyxNQUFNLHNCQUFzQjtBQUFBLE1BQ3JDO0FBQUEsSUFDRjtBQU1BLFFBQUkseUNBQXlDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDeEcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLG1DQUFtQyxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix3Q0FBd0MsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUkseUNBQXlDLEVBQUUsR0FBRyx5Q0FBeUMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwUCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHdDQUF3QztBQUFBLE1BQ3ZEO0FBQUEsSUFDRjtBQU1BLFFBQUksNEJBQTRCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDM0YsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHNCQUFzQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiwyQkFBMkIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksNEJBQTRCLEVBQUUsR0FBRyw0QkFBNEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDJCQUEyQjtBQUFBLE1BQzFDO0FBQUEsSUFDRjtBQU1BLFFBQUksNENBQTRDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDM0csR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHNDQUFzQyxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiwyQ0FBMkMsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksNENBQTRDLEVBQUUsR0FBRyw0Q0FBNEMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoUSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDJDQUEyQztBQUFBLE1BQzFEO0FBQUEsSUFDRjtBQU1BLFFBQUksMkNBQTJDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDMUcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHFDQUFxQyxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiwwQ0FBMEMsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksMkNBQTJDLEVBQUUsR0FBRywyQ0FBMkMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUM1UCxPQUFPO0FBQ0wsZUFBTyxNQUFNLDBDQUEwQztBQUFBLE1BQ3pEO0FBQUEsSUFDRjtBQU1BLFFBQUksMEJBQTBCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHYSxhQUFZLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQzFJLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLG9CQUFvQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix5QkFBeUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksMEJBQTBCLEVBQUUsR0FBRywwQkFBMEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4TCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHlCQUF5QjtBQUFBLE1BQ3hDO0FBQUEsSUFDRjtBQU1BLFFBQUksNEJBQTRCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHYSxhQUFZLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQzVJLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHNCQUFzQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiwyQkFBMkIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksNEJBQTRCLEVBQUUsR0FBRyw0QkFBNEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDJCQUEyQjtBQUFBLE1BQzFDO0FBQUEsSUFDRjtBQU1BLFFBQUksa0NBQWtDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDakcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFdBQVc7QUFBQSxJQUN6RCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLDRCQUE0QixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixpQ0FBaUMsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksa0NBQWtDLEVBQUUsR0FBRyxrQ0FBa0MsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4TixPQUFPO0FBQ0wsZUFBTyxNQUFNLGlDQUFpQztBQUFBLE1BQ2hEO0FBQUEsSUFDRjtBQU1BLFFBQUksaUJBQWlCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDaEYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsZ0JBQWdCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLGlCQUFpQixFQUFFLEdBQUcsaUJBQWlCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDcEosT0FBTztBQUNMLGVBQU8sTUFBTSxnQkFBZ0I7QUFBQSxNQUMvQjtBQUFBLElBQ0Y7QUFNQSxRQUFJLDJCQUEyQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQzFGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxjQUFjO0FBQUEsSUFDNUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsMEJBQTBCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLDJCQUEyQixFQUFFLEdBQUcsMkJBQTJCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDNUwsT0FBTztBQUNMLGVBQU8sTUFBTSwwQkFBMEI7QUFBQSxNQUN6QztBQUFBLElBQ0Y7QUFNQSxRQUFJLHFCQUFxQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ3BGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsS0FBcUIsdUJBQU8sQ0FBQyxVQUFVLE9BQU8seUJBQXlCLFdBQVcsS0FBSyxFQUFFO0FBQUEsSUFDMUksQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLG9CQUFvQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxxQkFBcUIsRUFBRSxHQUFHLHFCQUFxQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ3BLLE9BQU87QUFDTCxlQUFPLE1BQU0sb0JBQW9CO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBTUEsUUFBSSxxQkFBcUIsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNwRixHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsZUFBZSxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixvQkFBb0IsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUkscUJBQXFCLEVBQUUsR0FBRyxxQkFBcUIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwSyxPQUFPO0FBQ0wsZUFBTyxNQUFNLG9CQUFvQjtBQUFBLE1BQ25DO0FBQUEsSUFDRjtBQU1BLFFBQUksaUNBQWlDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDaEcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLDJCQUEyQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixnQ0FBZ0MsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksaUNBQWlDLEVBQUUsR0FBRyxpQ0FBaUMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwTixPQUFPO0FBQ0wsZUFBTyxNQUFNLGdDQUFnQztBQUFBLE1BQy9DO0FBQUEsSUFDRjtBQU1BLFFBQUkscUJBQXFCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDcEYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFdBQVc7QUFBQSxJQUN6RCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0Isb0JBQW9CLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLHFCQUFxQixFQUFFLEdBQUcscUJBQXFCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDcEssT0FBTztBQUNMLGVBQU8sTUFBTSxvQkFBb0I7QUFBQSxNQUNuQztBQUFBLElBQ0Y7QUFNQSxRQUFJLDBCQUEwQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBR2EsYUFBWSxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUMxSSxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IseUJBQXlCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLDBCQUEwQixFQUFFLEdBQUcsMEJBQTBCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDeEwsT0FBTztBQUNMLGVBQU8sTUFBTSx5QkFBeUI7QUFBQSxNQUN4QztBQUFBLElBQ0Y7QUFNQSxRQUFJLHFCQUFxQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ3BGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxXQUFXO0FBQUEsSUFDekQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLG9CQUFvQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxxQkFBcUIsRUFBRSxHQUFHLHFCQUFxQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ3BLLE9BQU87QUFDTCxlQUFPLE1BQU0sb0JBQW9CO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBTUEsUUFBSSxvQkFBb0IsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUdhLGFBQVksRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEksYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsY0FBYyxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixtQkFBbUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksb0JBQW9CLEVBQUUsR0FBRyxvQkFBb0IsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoSyxPQUFPO0FBQ0wsZUFBTyxNQUFNLG1CQUFtQjtBQUFBLE1BQ2xDO0FBQUEsSUFDRjtBQU1BLFFBQUksNEJBQTRCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDM0YsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLGNBQWM7QUFBQSxJQUM1RCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHNCQUFzQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiwyQkFBMkIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksNEJBQTRCLEVBQUUsR0FBRyw0QkFBNEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDJCQUEyQjtBQUFBLE1BQzFDO0FBQUEsSUFDRjtBQU1BLFFBQUksaUJBQWlCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDaEYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsZ0JBQWdCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLGlCQUFpQixFQUFFLEdBQUcsaUJBQWlCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDcEosT0FBTztBQUNMLGVBQU8sTUFBTSxnQkFBZ0I7QUFBQSxNQUMvQjtBQUFBLElBQ0Y7QUFNQSxRQUFJLDJCQUEyQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQzFGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxjQUFjO0FBQUEsSUFDNUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixxQkFBcUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsMEJBQTBCLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLDJCQUEyQixFQUFFLEdBQUcsMkJBQTJCLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDNUwsT0FBTztBQUNMLGVBQU8sTUFBTSwwQkFBMEI7QUFBQSxNQUN6QztBQUFBLElBQ0Y7QUFNQSxRQUFJWCxnQkFBZSxjQUFjQyx1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQzlFLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxZQUFZO0FBQUEsSUFDMUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLGNBQWMsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksZUFBZSxFQUFFLEdBQUcsZUFBZSxFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQzVJLE9BQU87QUFDTCxlQUFPLE1BQU0sY0FBYztBQUFBLE1BQzdCO0FBQUEsSUFDRjtBQU1BLFFBQUksZ0NBQWdDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDL0YsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLGtCQUFrQjtBQUFBLElBQ2hFLENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsMEJBQTBCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLCtCQUErQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxnQ0FBZ0MsRUFBRSxHQUFHLGdDQUFnQyxFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ2hOLE9BQU87QUFDTCxlQUFPLE1BQU0sK0JBQStCO0FBQUEsTUFDOUM7QUFBQSxJQUNGO0FBTUEsUUFBSSxtQ0FBbUMsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNsRyxHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sa0JBQWtCO0FBQUEsSUFDaEUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQiw2QkFBNkIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0Isa0NBQWtDLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLG1DQUFtQyxFQUFFLEdBQUcsbUNBQW1DLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDNU4sT0FBTztBQUNMLGVBQU8sTUFBTSxrQ0FBa0M7QUFBQSxNQUNqRDtBQUFBLElBQ0Y7QUFNQSxRQUFJLGNBQWMsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUM3RSxHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixhQUFhLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLGNBQWMsRUFBRSxHQUFHLGNBQWMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4SSxPQUFPO0FBQ0wsZUFBTyxNQUFNLGFBQWE7QUFBQSxNQUM1QjtBQUFBLElBQ0Y7QUFNQSxRQUFJLHFCQUFxQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ3BGLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxjQUFjO0FBQUEsSUFDNUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLG9CQUFvQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxxQkFBcUIsRUFBRSxHQUFHLHFCQUFxQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ3BLLE9BQU87QUFDTCxlQUFPLE1BQU0sb0JBQW9CO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBTUEsUUFBSSwwQkFBMEIsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUN6RixHQUFHYTtBQUFBLE1BQ0gsaUJBQWlCO0FBQUEsUUFDZixNQUFNO0FBQUEsUUFDTixLQUFxQix1QkFBTyxDQUFDLFVBQVUsT0FBTyxlQUFlLElBQUksQ0FBQyxRQUFRLEtBQUssS0FBSyxTQUFTLEdBQUcsS0FBSztBQUFBLE1BQ3ZHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLG9CQUFvQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix5QkFBeUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksMEJBQTBCLEVBQUUsR0FBRywwQkFBMEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4TCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHlCQUF5QjtBQUFBLE1BQ3hDO0FBQUEsSUFDRjtBQU1BLFFBQUksNEJBQTRCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDM0YsR0FBR2E7QUFBQSxNQUNILGlCQUFpQjtBQUFBLFFBQ2YsTUFBTTtBQUFBLFFBQ04sS0FBcUIsdUJBQU8sQ0FBQyxVQUFVLE9BQU8sZUFBZTtBQUFBLFVBQzNELENBQUMsUUFBUSxDQUFDLEtBQUssZ0JBQWdCLFdBQVcsS0FBSyxLQUFLLFdBQVcsS0FBSyxRQUFRLFdBQVcsS0FBSyxRQUFRLFNBQVMsRUFBRTtBQUFBLFlBQzdHLENBQUNlLE9BQU1BO0FBQUEsVUFDVDtBQUFBLFFBQ0YsRUFBRSxLQUFLLEdBQUcsS0FBSztBQUFBLE1BQ2pCO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRTixJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLHNCQUFzQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQiwyQkFBMkIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksNEJBQTRCLEVBQUUsR0FBRyw0QkFBNEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNoTSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDJCQUEyQjtBQUFBLE1BQzFDO0FBQUEsSUFDRjtBQU1BLFFBQUksdUJBQXVCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDdEYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLGNBQWM7QUFBQSxJQUM1RCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixzQkFBc0IsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksdUJBQXVCLEVBQUUsR0FBRyx1QkFBdUIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUM1SyxPQUFPO0FBQ0wsZUFBTyxNQUFNLHNCQUFzQjtBQUFBLE1BQ3JDO0FBQUEsSUFDRjtBQU1BLFFBQUksaUNBQWlDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDaEcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLDJCQUEyQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixnQ0FBZ0MsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksaUNBQWlDLEVBQUUsR0FBRyxpQ0FBaUMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwTixPQUFPO0FBQ0wsZUFBTyxNQUFNLGdDQUFnQztBQUFBLE1BQy9DO0FBQUEsSUFDRjtBQU1BLFFBQUksbUNBQW1DLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDbEcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLDZCQUE2QixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixrQ0FBa0MsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksbUNBQW1DLEVBQUUsR0FBRyxtQ0FBbUMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUM1TixPQUFPO0FBQ0wsZUFBTyxNQUFNLGtDQUFrQztBQUFBLE1BQ2pEO0FBQUEsSUFDRjtBQU1BLFFBQUksMkJBQTJCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDMUYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLGtCQUFrQjtBQUFBLElBQ2hFLENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIscUJBQXFCLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLDBCQUEwQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSwyQkFBMkIsRUFBRSxHQUFHLDJCQUEyQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQzVMLE9BQU87QUFDTCxlQUFPLE1BQU0sMEJBQTBCO0FBQUEsTUFDekM7QUFBQSxJQUNGO0FBTUEsUUFBSSxtQ0FBbUMsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNsRyxHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sa0JBQWtCO0FBQUEsSUFDaEUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQiw2QkFBNkIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxrQkFBa0Isa0NBQWtDLEVBQUUsRUFBRSxRQUFRLE1BQU0sRUFBRSxJQUFJLG1DQUFtQyxFQUFFLEdBQUcsbUNBQW1DLEVBQUUsTUFBTSxFQUFFO0FBQUEsTUFDNU4sT0FBTztBQUNMLGVBQU8sTUFBTSxrQ0FBa0M7QUFBQSxNQUNqRDtBQUFBLElBQ0Y7QUFNQSxRQUFJLG9CQUFvQixjQUFjVix1QkFBcUIsUUFBUSxhQUFhLEVBQUUsR0FBRztBQUFBLE1BQ25GLEdBQUdhO0FBQUEsTUFDSCxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsTUFBTSxZQUFZO0FBQUEsSUFDMUQsQ0FBQyxFQUFFLEVBQUUsU0FBUyxTQUFTLElBQUksUUFBUVMsSUFBRztBQUNwQyxhQUFPO0FBQUEsU0FDSixHQUFHWCx5QkFBd0IsZ0JBQWdCLFFBQVEsS0FBSyxXQUFXLEtBQUssV0FBVztBQUFBLFNBQ25GLEdBQUdELDRCQUEyQixtQkFBbUIsUUFBUSxRQUFRLGlDQUFpQyxDQUFDO0FBQUEsTUFDdEc7QUFBQSxJQUNGLENBQUMsRUFBRSxFQUFFLHFCQUFxQixjQUFjLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLG1CQUFtQixFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSxvQkFBb0IsRUFBRSxHQUFHLG9CQUFvQixFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQ2hLLE9BQU87QUFDTCxlQUFPLE1BQU0sbUJBQW1CO0FBQUEsTUFDbEM7QUFBQSxJQUNGO0FBTUEsUUFBSSwyQ0FBMkMsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUMxRyxHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIscUNBQXFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLDBDQUEwQyxFQUFFLEVBQUUsUUFBUSxNQUFNLEVBQUUsSUFBSSwyQ0FBMkMsRUFBRSxHQUFHLDJDQUEyQyxFQUFFLE1BQU0sRUFBRTtBQUFBLE1BQzVQLE9BQU87QUFDTCxlQUFPLE1BQU0sMENBQTBDO0FBQUEsTUFDekQ7QUFBQSxJQUNGO0FBTUEsUUFBSSxxQkFBcUIsY0FBY1YsdUJBQXFCLFFBQVEsYUFBYSxFQUFFLEdBQUc7QUFBQSxNQUNwRixHQUFHYTtBQUFBLE1BQ0gsYUFBYSxFQUFFLE1BQU0saUJBQWlCLE1BQU0sWUFBWTtBQUFBLElBQzFELENBQUMsRUFBRSxFQUFFLFNBQVMsU0FBUyxJQUFJLFFBQVFTLElBQUc7QUFDcEMsYUFBTztBQUFBLFNBQ0osR0FBR1gseUJBQXdCLGdCQUFnQixRQUFRLEtBQUssV0FBVyxLQUFLLFdBQVc7QUFBQSxTQUNuRixHQUFHRCw0QkFBMkIsbUJBQW1CLFFBQVEsUUFBUSxpQ0FBaUMsQ0FBQztBQUFBLE1BQ3RHO0FBQUEsSUFDRixDQUFDLEVBQUUsRUFBRSxxQkFBcUIsZUFBZSxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixvQkFBb0IsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUkscUJBQXFCLEVBQUUsR0FBRyxxQkFBcUIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUNwSyxPQUFPO0FBQ0wsZUFBTyxNQUFNLG9CQUFvQjtBQUFBLE1BQ25DO0FBQUEsSUFDRjtBQU1BLFFBQUksdUNBQXVDLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDdEcsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLGlDQUFpQyxDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQixzQ0FBc0MsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksdUNBQXVDLEVBQUUsR0FBRyx1Q0FBdUMsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUM1TyxPQUFPO0FBQ0wsZUFBTyxNQUFNLHNDQUFzQztBQUFBLE1BQ3JEO0FBQUEsSUFDRjtBQU1BLFFBQUksMEJBQTBCLGNBQWNWLHVCQUFxQixRQUFRLGFBQWEsRUFBRSxHQUFHO0FBQUEsTUFDekYsR0FBR2E7QUFBQSxNQUNILGFBQWEsRUFBRSxNQUFNLGlCQUFpQixNQUFNLFlBQVk7QUFBQSxJQUMxRCxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVMsSUFBSSxRQUFRUyxJQUFHO0FBQ3BDLGFBQU87QUFBQSxTQUNKLEdBQUdYLHlCQUF3QixnQkFBZ0IsUUFBUSxLQUFLLFdBQVcsS0FBSyxXQUFXO0FBQUEsU0FDbkYsR0FBR0QsNEJBQTJCLG1CQUFtQixRQUFRLFFBQVEsaUNBQWlDLENBQUM7QUFBQSxNQUN0RztBQUFBLElBQ0YsQ0FBQyxFQUFFLEVBQUUscUJBQXFCLG9CQUFvQixDQUFDLENBQUMsRUFBRSxFQUFFLGtCQUFrQix5QkFBeUIsRUFBRSxFQUFFLFFBQVEsTUFBTSxFQUFFLElBQUksMEJBQTBCLEVBQUUsR0FBRywwQkFBMEIsRUFBRSxNQUFNLEVBQUU7QUFBQSxNQUN4TCxPQUFPO0FBQ0wsZUFBTyxNQUFNLHlCQUF5QjtBQUFBLE1BQ3hDO0FBQUEsSUFDRjtBQUdBLFFBQUltQixZQUFXO0FBQUEsTUFDYjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsY0FBQTlCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQSxRQUFJLFdBQVcsY0FBY0QsZ0JBQWU7QUFBQSxNQUMxQyxPQUFPO0FBQ0wsZUFBTyxNQUFNLFVBQVU7QUFBQSxNQUN6QjtBQUFBLElBQ0Y7QUFDQSxLQUFDLEdBQUdFLHVCQUFxQix3QkFBd0I2QixXQUFVLFFBQVE7QUFHbkUsUUFBSUMsZ0JBQWU7QUFDbkIsUUFBSSxtQ0FBbUMsR0FBR0EsY0FBYSxpQkFBaUJoQyxpQkFBZ0IsZ0NBQWdDLGFBQWEsYUFBYSxZQUFZO0FBRzlKLFFBQUlpQyxnQkFBZTtBQUNuQixRQUFJLHVCQUF1QixHQUFHQSxjQUFhLGlCQUFpQmpDLGlCQUFnQixvQkFBb0IsYUFBYSxhQUFhLFlBQVk7QUFHdEksUUFBSWtDLGdCQUFlO0FBQ25CLFFBQUksdUJBQXVCLEdBQUdBLGNBQWEsaUJBQWlCbEMsaUJBQWdCLG9CQUFvQixhQUFhLGFBQWEsVUFBVTtBQUdwSSxRQUFJbUMsZ0JBQWU7QUFDbkIsUUFBSSxzQkFBc0IsR0FBR0EsY0FBYSxpQkFBaUJuQyxpQkFBZ0IsbUJBQW1CLDJCQUEyQiwwQkFBMEIsT0FBTztBQUcxSixRQUFJb0MsZ0JBQWU7QUFDbkIsUUFBSSxpQkFBaUIsR0FBR0EsY0FBYSxpQkFBaUJwQyxpQkFBZ0JDLGVBQWMscUJBQXFCLG9CQUFvQixPQUFPO0FBR3BJLFFBQUlvQyxnQkFBZTtBQUNuQixRQUFJLGdCQUFnQixHQUFHQSxjQUFhLGlCQUFpQnJDLGlCQUFnQixhQUFhLHFCQUFxQixvQkFBb0IsT0FBTztBQUdsSSxRQUFJLHFCQUFxQjtBQUN6QixRQUFJLGFBQTZCLHVCQUFPLE9BQU9zQyxTQUFRLFVBQVU7QUFDL0QsVUFBSTtBQUNKLFVBQUk7QUFDRixjQUFNLFNBQVMsTUFBTUEsUUFBTyxLQUFLLElBQUkscUJBQXFCLEtBQUssQ0FBQztBQUNoRSxpQkFBUztBQUNULFlBQUk7QUFDRixnQkFBTSxtQkFBbUMsdUJBQU8sTUFBTTtBQUNwRCxtQkFBTyxPQUFPLE1BQU07QUFBQSxVQUN0QixHQUFHLGtCQUFrQjtBQUNyQixjQUFJLGlCQUFpQixNQUFNLFVBQVU7QUFDbkMsbUJBQU8sRUFBRSxPQUFPLG1CQUFtQixZQUFZLFNBQVMsT0FBTztBQUFBLFVBQ2pFO0FBQUEsUUFDRixTQUFTaEIsSUFBRztBQUFBLFFBQ1o7QUFBQSxNQUNGLFNBQVMsV0FBVztBQUNsQixpQkFBUztBQUNULFlBQUksVUFBVSxRQUFRLFVBQVUsUUFBUSw2QkFBNkI7QUFDbkUsaUJBQU8sRUFBRSxPQUFPLG1CQUFtQixZQUFZLE9BQU8sT0FBTztBQUFBLFFBQy9EO0FBQUEsTUFDRjtBQUNBLGFBQU8sRUFBRSxPQUFPLG1CQUFtQixZQUFZLE9BQU8sT0FBTztBQUFBLElBQy9ELEdBQUcsWUFBWTtBQUNmLFFBQUkscUJBQXFDLHVCQUFPLE9BQU8sUUFBUSxVQUFVO0FBQ3ZFLFlBQU0sa0JBQWtCLEVBQUUsVUFBVSxJQUFJLFVBQVUsSUFBSTtBQUN0RCxjQUFRLEdBQUcsbUJBQW1CLGNBQWMsRUFBRSxHQUFHLGlCQUFpQixHQUFHLE9BQU8sR0FBRyxPQUFPLFVBQVU7QUFBQSxJQUNsRyxHQUFHLG9CQUFvQjtBQUN2QixRQUFJLHVCQUF1Qyx1QkFBTyxPQUFPLFFBQVEsVUFBVTtBQUN6RSxZQUFNLGtCQUFrQixFQUFFLFVBQVUsSUFBSSxVQUFVLElBQUk7QUFDdEQsWUFBTSxTQUFTLE9BQU8sR0FBRyxtQkFBbUIsY0FBYyxFQUFFLEdBQUcsaUJBQWlCLEdBQUcsT0FBTyxHQUFHLE9BQU8sVUFBVTtBQUM5RyxjQUFRLEdBQUcsbUJBQW1CLGlCQUFpQixNQUFNO0FBQUEsSUFDdkQsR0FBRyxzQkFBc0I7QUFJekIsUUFBSSxjQUE4Qix1QkFBTyxPQUFPZ0IsU0FBUSxVQUFVO0FBQ2hFLFVBQUk7QUFDSixVQUFJO0FBQ0YsY0FBTSxTQUFTLE1BQU1BLFFBQU8sS0FBSyxJQUFJLHFCQUFxQixLQUFLLENBQUM7QUFDaEUsaUJBQVM7QUFBQSxNQUNYLFNBQVMsV0FBVztBQUNsQixpQkFBUztBQUNULFlBQUksVUFBVSxRQUFRLFVBQVUsUUFBUSw2QkFBNkI7QUFDbkUsaUJBQU8sRUFBRSxPQUFPLG1CQUFtQixZQUFZLFNBQVMsT0FBTztBQUFBLFFBQ2pFO0FBQUEsTUFDRjtBQUNBLGFBQU8sRUFBRSxPQUFPLG1CQUFtQixZQUFZLE9BQU8sT0FBTztBQUFBLElBQy9ELEdBQUcsWUFBWTtBQUNmLFFBQUksd0JBQXdDLHVCQUFPLE9BQU8sUUFBUSxVQUFVO0FBQzFFLFlBQU0sa0JBQWtCLEVBQUUsVUFBVSxJQUFJLFVBQVUsSUFBSTtBQUN0RCxjQUFRLEdBQUcsbUJBQW1CLGNBQWMsRUFBRSxHQUFHLGlCQUFpQixHQUFHLE9BQU8sR0FBRyxPQUFPLFdBQVc7QUFBQSxJQUNuRyxHQUFHLHVCQUF1QjtBQUMxQixRQUFJLDBCQUEwQyx1QkFBTyxPQUFPLFFBQVEsVUFBVTtBQUM1RSxZQUFNLGtCQUFrQixFQUFFLFVBQVUsSUFBSSxVQUFVLElBQUk7QUFDdEQsWUFBTSxTQUFTLE9BQU8sR0FBRyxtQkFBbUIsY0FBYyxFQUFFLEdBQUcsaUJBQWlCLEdBQUcsT0FBTyxHQUFHLE9BQU8sV0FBVztBQUMvRyxjQUFRLEdBQUcsbUJBQW1CLGlCQUFpQixNQUFNO0FBQUEsSUFDdkQsR0FBRyx5QkFBeUI7QUFBQTtBQUFBOzs7QUNoeUs1QixJQUFBQyxxQkFBQTtBQUFBLDBEQUFBQyxVQUFBQyxTQUFBO0FBQUE7QUFDQSxRQUFJQyxhQUFZLE9BQU87QUFDdkIsUUFBSUMsb0JBQW1CLE9BQU87QUFDOUIsUUFBSUMscUJBQW9CLE9BQU87QUFDL0IsUUFBSUMsZ0JBQWUsT0FBTyxVQUFVO0FBQ3BDLFFBQUksU0FBUyxDQUFDLFFBQVEsVUFBVUgsV0FBVSxRQUFRLFFBQVEsRUFBRSxPQUFPLGNBQWMsS0FBSyxDQUFDO0FBQ3ZGLFFBQUlJLFlBQVcsQ0FBQyxRQUFRLFFBQVE7QUFDOUIsZUFBUyxRQUFRO0FBQ2YsUUFBQUosV0FBVSxRQUFRLE1BQU0sRUFBRSxLQUFLLElBQUksSUFBSSxHQUFHLFlBQVksS0FBSyxDQUFDO0FBQUEsSUFDaEU7QUFDQSxRQUFJSyxlQUFjLENBQUMsSUFBSSxNQUFNLFFBQVEsU0FBUztBQUM1QyxVQUFJLFFBQVEsT0FBTyxTQUFTLFlBQVksT0FBTyxTQUFTLFlBQVk7QUFDbEUsaUJBQVMsT0FBT0gsbUJBQWtCLElBQUk7QUFDcEMsY0FBSSxDQUFDQyxjQUFhLEtBQUssSUFBSSxHQUFHLEtBQUssUUFBUTtBQUN6QyxZQUFBSCxXQUFVLElBQUksS0FBSyxFQUFFLEtBQUssTUFBTSxLQUFLLEdBQUcsR0FBRyxZQUFZLEVBQUUsT0FBT0Msa0JBQWlCLE1BQU0sR0FBRyxNQUFNLEtBQUssV0FBVyxDQUFDO0FBQUEsTUFDdkg7QUFDQSxhQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUlLLGdCQUFlLENBQUMsUUFBUUQsYUFBWUwsV0FBVSxDQUFDLEdBQUcsY0FBYyxFQUFFLE9BQU8sS0FBSyxDQUFDLEdBQUcsR0FBRztBQUd6RixRQUFJLGdCQUFnQixDQUFDO0FBQ3JCLElBQUFJLFVBQVMsZUFBZTtBQUFBLE1BQ3RCLGlCQUFpQixNQUFNRztBQUFBLE1BQ3ZCLGVBQWUsTUFBTTtBQUFBLE1BQ3JCLGlCQUFpQixNQUFNO0FBQUEsTUFDdkIsVUFBVSxNQUFNO0FBQUEsTUFDaEIsWUFBWSxNQUFNO0FBQUEsSUFDcEIsQ0FBQztBQUNELElBQUFSLFFBQU8sVUFBVU8sY0FBYSxhQUFhO0FBRzNDLFFBQUlDLGVBQWMsTUFBTSxhQUFhO0FBQUEsTUFDbkMsT0FBTztBQUNMLGVBQU8sTUFBTSxhQUFhO0FBQUEsTUFDNUI7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BTUEsWUFBWSxPQUFPO0FBQ2pCLFlBQUksT0FBTyxVQUFVLFlBQVksT0FBTyxPQUFPO0FBQzdDLGVBQUssUUFBUSxPQUFPLE1BQU0sQ0FBQztBQUFBLFFBQzdCLE9BQU87QUFDTCxlQUFLLFFBQVEsT0FBTyxLQUFLO0FBQUEsUUFDM0I7QUFDQSxjQUFNLFVBQVUsT0FBTyxNQUFNLFFBQVEsTUFBTSxXQUFXLE1BQU0sUUFBUSxJQUFJO0FBQ3hFLGNBQU0sWUFBWSxVQUFVLE9BQU8sb0JBQW9CLFVBQVUsT0FBTyxvQkFBb0IsS0FBSyxJQUFJLE9BQU8sTUFBTSxZQUFZLE9BQU8sTUFBTSxPQUFPO0FBQ2xKLFlBQUksV0FBVztBQUNiLGdCQUFNLElBQUk7QUFBQSxZQUNSLGtFQUFrRSxPQUFPO0FBQUEsVUFDM0U7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU1BLE9BQU8sS0FBSyxPQUFPO0FBQ2pCLGVBQU8sSUFBSSxhQUFhLEtBQUs7QUFBQSxNQUMvQjtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsbUJBQW1CO0FBQ2pCLGVBQU87QUFBQSxVQUNMLEdBQUcsS0FBSyxTQUFTO0FBQUEsUUFDbkI7QUFBQSxNQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BTUEsV0FBVztBQUNULGNBQU0sY0FBYyxLQUFLLFNBQVM7QUFDbEMsZUFBTyxPQUFPLFdBQVc7QUFBQSxNQUMzQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQU1BLFdBQVc7QUFDVCxlQUFPLE9BQU8sS0FBSyxLQUFLO0FBQUEsTUFDMUI7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLFVBQVU7QUFDUixlQUFPLEtBQUssU0FBUztBQUFBLE1BQ3ZCO0FBQUEsSUFDRjtBQUdBLFFBQUksZ0JBQWdDLHVCQUFPLENBQUMsTUFBTSxZQUFZO0FBQzVELFVBQUksU0FBUyxRQUFRO0FBQ25CLGNBQU0sSUFBSSxNQUFNLHdGQUF3RjtBQUFBLE1BQzFHLFdBQVcsU0FBUyxRQUFRLE9BQU8sU0FBUyxVQUFVO0FBQ3BELGVBQU8sa0JBQWtCO0FBQUEsTUFDM0IsV0FBVyxNQUFNLFFBQVEsSUFBSSxHQUFHO0FBQzlCLGVBQU8sa0JBQWtCLE1BQU0sT0FBTztBQUFBLE1BQ3hDLFdBQVcsTUFBTSxhQUFhLFNBQVMsT0FBTztBQUM1QyxlQUFPLGlCQUFpQixNQUFNLE9BQU87QUFBQSxNQUN2QyxXQUFXLE1BQU0sYUFBYSxTQUFTLE9BQU87QUFDNUMsZUFBTyw2QkFBNkIsTUFBTSxPQUFPO0FBQUEsTUFDbkQsV0FBVyxNQUFNLGFBQWEsU0FBUztBQUFBLE1BQ3ZDLENBQUMsS0FBSyxlQUFlLE9BQU8sU0FBUyxVQUFVO0FBQzdDLGVBQU8sb0NBQW9DLE1BQU0sT0FBTztBQUFBLE1BQzFELFdBQVcsU0FBUyxJQUFJLEdBQUc7QUFDekIsWUFBSSxLQUFLLFdBQVcsS0FBSyxTQUFTLG9CQUFvQjtBQUNwRCxpQkFBTyxrQkFBa0I7QUFBQSxRQUMzQjtBQUNBLGVBQU8sb0JBQW9CLElBQUk7QUFBQSxNQUNqQyxXQUFXLE9BQU8sU0FBUyxhQUFhLE1BQU0sYUFBYSxTQUFTLFdBQVc7QUFDN0UsZUFBTyxFQUFFLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFBQSxNQUNoQyxXQUFXLE9BQU8sU0FBUyxZQUFZLE1BQU0sYUFBYSxTQUFTLFVBQVU7QUFDM0UsZUFBTyxvQkFBb0IsTUFBTSxPQUFPO0FBQUEsTUFDMUMsV0FBVyxnQkFBZ0JBLGNBQWE7QUFDdEMsZUFBTyxLQUFLLGlCQUFpQjtBQUFBLE1BQy9CLFdBQVcsT0FBTyxTQUFTLFVBQVU7QUFDbkMsZUFBTyxvQkFBb0IsSUFBSTtBQUFBLE1BQ2pDLFdBQVcsT0FBTyxTQUFTLFlBQVksTUFBTSxhQUFhLFNBQVMsVUFBVTtBQUMzRSxZQUFJLEtBQUssV0FBVyxLQUFLLFNBQVMsb0JBQW9CO0FBQ3BELGlCQUFPLGtCQUFrQjtBQUFBLFFBQzNCO0FBQ0EsZUFBTyxvQkFBb0IsSUFBSTtBQUFBLE1BQ2pDLFdBQVcsU0FBUyw2QkFBNkIsT0FBTyxTQUFTLFVBQVU7QUFDekUsZUFBTyxvQ0FBb0MsTUFBTSxPQUFPO0FBQUEsTUFDMUQ7QUFDQSxZQUFNLElBQUk7QUFBQSxRQUNSLDRCQUE0QixJQUFJO0FBQUEsTUFDbEM7QUFBQSxJQUNGLEdBQUcsZUFBZTtBQUNsQixRQUFJLG9CQUFvQyx1QkFBTyxDQUFDLE1BQU0sYUFBYTtBQUFBLE1BQ2pFLEdBQUcsS0FBSztBQUFBLFFBQ04sQ0FBQyxTQUFTLE9BQU8sU0FBUyxlQUFlLENBQUMsU0FBUyx5QkFBeUIsU0FBUyx5QkFBeUIsU0FBUztBQUFBLE1BQ3pILEVBQUUsSUFBSSxDQUFDLFNBQVMsY0FBYyxNQUFNLE9BQU8sQ0FBQztBQUFBLElBQzlDLElBQUksbUJBQW1CO0FBQ3ZCLFFBQUksbUJBQW1DLHVCQUFPLENBQUMsS0FBSyxZQUFZO0FBQzlELFlBQU0sZUFBZSxTQUFTLHdCQUF3QixJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUMsVUFBVSxVQUFVLE1BQU0sQ0FBQyxJQUFJO0FBQzlHLFVBQUksQ0FBQyxTQUFTLHlCQUF5QixhQUFhLElBQUksTUFBTSxHQUFHO0FBQy9ELGNBQU0sSUFBSSxNQUFNLHdGQUF3RjtBQUFBLE1BQzFHO0FBQ0EsVUFBSSxhQUFhLFNBQVMsR0FBRztBQUMzQixZQUFJLFNBQVMsb0JBQW9CO0FBQy9CLGlCQUFPLGtCQUFrQjtBQUFBLFFBQzNCO0FBQ0EsY0FBTSxJQUFJLE1BQU0sMkRBQTJEO0FBQUEsTUFDN0U7QUFDQSxZQUFNLE9BQU8sYUFBYSxPQUFPLEVBQUUsS0FBSyxFQUFFO0FBQzFDLFVBQUksZ0JBQWdCQSxjQUFhO0FBQy9CLGVBQU87QUFBQSxVQUNMLElBQUksTUFBTSxLQUFLLFlBQVksRUFBRSxJQUFJLENBQUNDLE9BQU1BLEdBQUUsU0FBUyxDQUFDO0FBQUEsUUFDdEQ7QUFBQSxNQUNGLFdBQVcsT0FBTyxTQUFTLFVBQVU7QUFDbkMsZUFBTztBQUFBLFVBQ0wsSUFBSSxNQUFNLEtBQUssWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLG9CQUFvQixLQUFLLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLE1BQU0sQ0FBQztBQUFBLFFBQ3JHO0FBQUEsTUFDRixXQUFXLE9BQU8sU0FBUyxVQUFVO0FBQ25DLGVBQU87QUFBQSxVQUNMLElBQUksTUFBTSxLQUFLLFlBQVksRUFBRSxJQUFJLG1CQUFtQixFQUFFLElBQUksQ0FBQyxVQUFVLE1BQU0sQ0FBQztBQUFBLFFBQzlFO0FBQUEsTUFDRixXQUFXLE9BQU8sU0FBUyxVQUFVO0FBQ25DLGVBQU87QUFBQSxVQUNMLElBQUksTUFBTSxLQUFLLFlBQVksRUFBRSxJQUFJLG1CQUFtQixFQUFFLElBQUksQ0FBQyxVQUFVLE1BQU0sQ0FBQztBQUFBLFFBQzlFO0FBQUEsTUFDRixXQUFXLFNBQVMsSUFBSSxHQUFHO0FBQ3pCLGVBQU87QUFBQTtBQUFBO0FBQUEsVUFHTCxJQUFJLE1BQU0sS0FBSyxZQUFZLEVBQUUsSUFBSSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsVUFBVSxNQUFNLENBQUM7QUFBQSxRQUM5RTtBQUFBLE1BQ0YsT0FBTztBQUNMLGNBQU0sSUFBSSxNQUFNLHVFQUF1RTtBQUFBLE1BQ3pGO0FBQUEsSUFDRixHQUFHLGtCQUFrQjtBQUNyQixRQUFJLCtCQUErQyx1QkFBTyxDQUFDLE1BQU0sYUFBYTtBQUFBLE1BQzVFLElBQUksQ0FBQyxVQUFVO0FBQ2IsY0FBTUMsT0FBTSxDQUFDO0FBQ2IsbUJBQVcsQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPO0FBQ2hDLGNBQUksT0FBTyxVQUFVLGVBQWUsVUFBVSxVQUFVLENBQUMsU0FBUyx3QkFBd0I7QUFDeEYsWUFBQUEsS0FBSSxHQUFHLElBQUksY0FBYyxPQUFPLE9BQU87QUFBQSxVQUN6QztBQUFBLFFBQ0Y7QUFDQSxlQUFPQTtBQUFBLE1BQ1QsR0FBRyxJQUFJO0FBQUEsSUFDVCxJQUFJLDhCQUE4QjtBQUNsQyxRQUFJLHNDQUFzRCx1QkFBTyxDQUFDLE1BQU0sYUFBYTtBQUFBLE1BQ25GLElBQUksQ0FBQyxVQUFVO0FBQ2IsY0FBTUEsT0FBTSxDQUFDO0FBQ2IsbUJBQVcsT0FBTyxPQUFPO0FBQ3ZCLGdCQUFNLFFBQVEsTUFBTSxHQUFHO0FBQ3ZCLGNBQUksT0FBTyxVQUFVLGVBQWUsVUFBVSxVQUFVLENBQUMsU0FBUyx3QkFBd0I7QUFDeEYsWUFBQUEsS0FBSSxHQUFHLElBQUksY0FBYyxPQUFPLE9BQU87QUFBQSxVQUN6QztBQUFBLFFBQ0Y7QUFDQSxlQUFPQTtBQUFBLE1BQ1QsR0FBRyxJQUFJO0FBQUEsSUFDVCxJQUFJLHFDQUFxQztBQUN6QyxRQUFJLG9CQUFvQyx1QkFBTyxPQUFPLEVBQUUsTUFBTSxLQUFLLElBQUksbUJBQW1CO0FBQzFGLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsS0FBSyxJQUFJLHFCQUFxQjtBQUMvRixRQUFJLHNCQUFzQyx1QkFBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEtBQUssU0FBUyxFQUFFLElBQUkscUJBQXFCO0FBQzFHLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsS0FBSyxTQUFTLEVBQUUsSUFBSSxxQkFBcUI7QUFDMUcsUUFBSSx5QkFBeUMsdUJBQU8sQ0FBQyxnQkFBZ0I7QUFDbkUsWUFBTSxJQUFJLE1BQU0sR0FBRyxXQUFXLDhDQUE4QztBQUFBLElBQzlFLEdBQUcsd0JBQXdCO0FBQzNCLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsS0FBSyxZQUFZO0FBQ2pFLFVBQUksQ0FBQyxPQUFPLEtBQUssT0FBTyxtQkFBbUIsT0FBTyxpQkFBaUIsRUFBRSxJQUFJLENBQUNDLFNBQVFBLEtBQUksU0FBUyxDQUFDLEVBQUUsU0FBUyxJQUFJLFNBQVMsQ0FBQyxHQUFHO0FBQzFILGNBQU0sSUFBSSxNQUFNLHlCQUF5QixJQUFJLFNBQVMsQ0FBQyxpQkFBaUI7QUFBQSxNQUMxRSxXQUFXLENBQUMsU0FBUyx1QkFBdUI7QUFDMUMsWUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLGtCQUFrQjtBQUN6QyxpQ0FBdUIsVUFBVSxJQUFJLFNBQVMsQ0FBQywyQ0FBMkM7QUFBQSxRQUM1RixXQUFXLE9BQU8sR0FBRyxJQUFJLE9BQU8sa0JBQWtCO0FBQ2hELGlDQUF1QixVQUFVLElBQUksU0FBUyxDQUFDLDBDQUEwQztBQUFBLFFBQzNGO0FBQUEsTUFDRjtBQUNBLGFBQU8sRUFBRSxHQUFHLElBQUksU0FBUyxFQUFFO0FBQUEsSUFDN0IsR0FBRyxxQkFBcUI7QUFDeEIsUUFBSSxXQUEyQix1QkFBTyxDQUFDLFNBQVM7QUFDOUMsWUFBTSxjQUFjO0FBQUEsUUFDbEI7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQ0EsVUFBSSxNQUFNLGFBQWE7QUFDckIsZUFBTyxZQUFZLFNBQVMsS0FBSyxZQUFZLElBQUk7QUFBQSxNQUNuRDtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsVUFBVTtBQUdiLFFBQUksa0JBQWtDLHVCQUFPLENBQUMsTUFBTSxZQUFZO0FBQzlELGlCQUFXLENBQUMsS0FBSyxLQUFLLEtBQUssT0FBTyxRQUFRLElBQUksR0FBRztBQUMvQyxZQUFJLFVBQVUsUUFBUTtBQUNwQixrQkFBUSxLQUFLO0FBQUEsWUFDWCxLQUFLO0FBQ0gscUJBQU87QUFBQSxZQUNULEtBQUs7QUFDSCxxQkFBTyxRQUFRLEtBQUs7QUFBQSxZQUN0QixLQUFLO0FBQ0gscUJBQU8sY0FBYyxPQUFPLE9BQU87QUFBQSxZQUNyQyxLQUFLO0FBQ0gscUJBQU8sY0FBYyxLQUFLO0FBQUEsWUFDNUIsS0FBSztBQUNILHFCQUFPLGNBQWMsS0FBSztBQUFBLFlBQzVCLEtBQUs7QUFDSCxxQkFBTyxZQUFZLE9BQU8sT0FBTztBQUFBLFlBQ25DLEtBQUs7QUFDSCxxQkFBTyxXQUFXLE9BQU8sT0FBTztBQUFBLFlBQ2xDLEtBQUs7QUFDSCxxQkFBTyxJQUFJLElBQUksTUFBTSxJQUFJLENBQUMsU0FBUyxjQUFjLE1BQU0sT0FBTyxDQUFDLENBQUM7QUFBQSxZQUNsRSxLQUFLO0FBQ0gscUJBQU8sSUFBSSxJQUFJLE1BQU0sSUFBSSxhQUFhLENBQUM7QUFBQSxZQUN6QyxLQUFLO0FBQ0gscUJBQU8sSUFBSSxJQUFJLE1BQU0sSUFBSSxhQUFhLENBQUM7QUFBQSxZQUN6QztBQUNFLG9CQUFNLElBQUksTUFBTSw0QkFBNEIsR0FBRyxFQUFFO0FBQUEsVUFDckQ7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUNBLFlBQU0sSUFBSSxNQUFNLHFCQUFxQixLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7QUFBQSxJQUM3RCxHQUFHLGlCQUFpQjtBQUNwQixRQUFJLGdCQUFnQyx1QkFBTyxDQUFDLFdBQVcsWUFBWTtBQUNqRSxVQUFJLE9BQU8sU0FBUyxnQkFBZ0IsWUFBWTtBQUM5QyxlQUFPLFNBQVMsWUFBWSxTQUFTO0FBQUEsTUFDdkM7QUFDQSxVQUFJLFNBQVMsYUFBYTtBQUN4QixlQUFPSCxhQUFZLEtBQUssU0FBUztBQUFBLE1BQ25DO0FBQ0EsWUFBTSxNQUFNLE9BQU8sU0FBUztBQUM1QixZQUFNLGlCQUFpQixDQUFDLE9BQU8sbUJBQW1CLE9BQU8saUJBQWlCO0FBQzFFLFlBQU0sdUJBQXVCLE1BQU0sT0FBTyxvQkFBb0IsTUFBTSxPQUFPLHFCQUFxQixDQUFDLGVBQWUsU0FBUyxHQUFHO0FBQzVILFVBQUkscUJBQXFCO0FBQ3ZCLFlBQUksT0FBTyxXQUFXLFlBQVk7QUFDaEMsY0FBSTtBQUNGLG1CQUFPLE9BQU8sU0FBUztBQUFBLFVBQ3pCLFNBQVMsT0FBTztBQUNkLGtCQUFNLElBQUksTUFBTSxHQUFHLFNBQVMsNkVBQTZFO0FBQUEsVUFDM0c7QUFBQSxRQUNGLE9BQU87QUFDTCxnQkFBTSxJQUFJLE1BQU0sR0FBRyxTQUFTLCtFQUErRTtBQUFBLFFBQzdHO0FBQUEsTUFDRjtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsZUFBZTtBQUNsQixRQUFJLGdCQUFnQyx1QkFBTyxDQUFDLGdCQUFnQixhQUFhLGVBQWU7QUFDeEYsUUFBSSxnQkFBZ0MsdUJBQU8sQ0FBQyxnQkFBZ0IsYUFBYSxlQUFlO0FBQ3hGLFFBQUksY0FBOEIsdUJBQU8sQ0FBQyxNQUFNLFlBQVksS0FBSyxJQUFJLENBQUMsU0FBUyxnQkFBZ0IsTUFBTSxPQUFPLENBQUMsR0FBRyxhQUFhO0FBQzdILFFBQUksYUFBNkIsdUJBQU8sQ0FBQ0UsTUFBSyxZQUFZLE9BQU8sUUFBUUEsSUFBRyxFQUFFO0FBQUEsTUFDNUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLE9BQU8sSUFBSSxHQUFHLElBQUksZ0JBQWdCLE9BQU8sT0FBTyxHQUFHO0FBQUEsTUFDcEUsQ0FBQztBQUFBLElBQ0gsR0FBRyxZQUFZO0FBR2YsYUFBUyxTQUFTLE1BQU0sU0FBUztBQUMvQixZQUFNLGlCQUFpQixjQUFjLE1BQU0sT0FBTztBQUNsRCxZQUFNLENBQUMsS0FBSyxLQUFLLElBQUksT0FBTyxRQUFRLGNBQWMsRUFBRSxDQUFDO0FBQ3JELGNBQVEsS0FBSztBQUFBLFFBQ1gsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNILGlCQUFPLFNBQVMsMkJBQTJCLGlCQUFpQjtBQUFBLFFBQzlELEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMO0FBQ0UsaUJBQU87QUFBQSxNQUNYO0FBQUEsSUFDRjtBQUNBLFdBQU8sVUFBVSxVQUFVO0FBRzNCLFFBQUksYUFBNkIsdUJBQU8sQ0FBQyxNQUFNLFlBQVk7QUFDekQsVUFBSSxTQUFTLDBCQUEwQjtBQUNyQyxlQUFPLGdCQUFnQixNQUFNLE9BQU87QUFBQSxNQUN0QztBQUNBLGFBQU8sZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLEdBQUcsT0FBTztBQUFBLElBQzdDLEdBQUcsWUFBWTtBQUFBO0FBQUE7OztBQ25WZixJQUFBRSxxQkFBQTtBQUFBLHlEQUFBQyxVQUFBQyxTQUFBO0FBQUE7QUFDQSxRQUFJQyxhQUFZLE9BQU87QUFDdkIsUUFBSUMsb0JBQW1CLE9BQU87QUFDOUIsUUFBSUMscUJBQW9CLE9BQU87QUFDL0IsUUFBSUMsZ0JBQWUsT0FBTyxVQUFVO0FBQ3BDLFFBQUksU0FBUyxDQUFDLFFBQVEsVUFBVUgsV0FBVSxRQUFRLFFBQVEsRUFBRSxPQUFPLGNBQWMsS0FBSyxDQUFDO0FBQ3ZGLFFBQUlJLFlBQVcsQ0FBQyxRQUFRLFFBQVE7QUFDOUIsZUFBUyxRQUFRO0FBQ2YsUUFBQUosV0FBVSxRQUFRLE1BQU0sRUFBRSxLQUFLLElBQUksSUFBSSxHQUFHLFlBQVksS0FBSyxDQUFDO0FBQUEsSUFDaEU7QUFDQSxRQUFJSyxlQUFjLENBQUMsSUFBSSxNQUFNLFFBQVEsU0FBUztBQUM1QyxVQUFJLFFBQVEsT0FBTyxTQUFTLFlBQVksT0FBTyxTQUFTLFlBQVk7QUFDbEUsaUJBQVMsT0FBT0gsbUJBQWtCLElBQUk7QUFDcEMsY0FBSSxDQUFDQyxjQUFhLEtBQUssSUFBSSxHQUFHLEtBQUssUUFBUTtBQUN6QyxZQUFBSCxXQUFVLElBQUksS0FBSyxFQUFFLEtBQUssTUFBTSxLQUFLLEdBQUcsR0FBRyxZQUFZLEVBQUUsT0FBT0Msa0JBQWlCLE1BQU0sR0FBRyxNQUFNLEtBQUssV0FBVyxDQUFDO0FBQUEsTUFDdkg7QUFDQSxhQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUlLLGdCQUFlLENBQUMsUUFBUUQsYUFBWUwsV0FBVSxDQUFDLEdBQUcsY0FBYyxFQUFFLE9BQU8sS0FBSyxDQUFDLEdBQUcsR0FBRztBQUd6RixRQUFJLGdCQUFnQixDQUFDO0FBQ3JCLElBQUFJLFVBQVMsZUFBZTtBQUFBLE1BQ3RCLDhCQUE4QixNQUFNO0FBQUEsTUFDcEMsaUJBQWlCLE1BQU07QUFBQSxNQUN2QixtQkFBbUIsTUFBTTtBQUFBLE1BQ3pCLGVBQWUsTUFBTUc7QUFBQSxNQUNyQixrQkFBa0IsTUFBTTtBQUFBLE1BQ3hCLHdCQUF3QixNQUFNQztBQUFBLE1BQzlCLCtCQUErQixNQUFNO0FBQUEsTUFDckMseUJBQXlCLE1BQU07QUFBQSxNQUMvQiwyQkFBMkIsTUFBTTtBQUFBLE1BQ2pDLFlBQVksTUFBTUM7QUFBQSxNQUNsQix1QkFBdUIsTUFBTSxxQkFBcUI7QUFBQSxNQUNsRCxzQkFBc0IsTUFBTSxxQkFBcUI7QUFBQSxNQUNqRCw0QkFBNEIsTUFBTSxxQkFBcUI7QUFBQSxNQUN2RCxhQUFhLE1BQU0scUJBQXFCO0FBQUEsTUFDeEMseUJBQXlCLE1BQU1DLGNBQWE7QUFBQSxNQUM1QyxZQUFZLE1BQU1DO0FBQUEsTUFDbEIsY0FBYyxNQUFNQztBQUFBLE1BQ3BCLGFBQWEsTUFBTTtBQUFBLE1BQ25CLG9CQUFvQixNQUFNO0FBQUEsTUFDMUIsc0JBQXNCLE1BQU07QUFBQSxNQUM1QixlQUFlLE1BQU1DO0FBQUEsTUFDckIsVUFBVSxNQUFNQyx1QkFBcUI7QUFBQSxNQUNyQyxpQkFBaUIsTUFBTSxxQkFBcUI7QUFBQSxNQUM1QyxlQUFlLE1BQU07QUFBQSxNQUNyQixjQUFjLE1BQU07QUFBQSxNQUNwQixtQkFBbUIsTUFBTSxxQkFBcUI7QUFBQSxJQUNoRCxDQUFDO0FBQ0QsSUFBQWYsUUFBTyxVQUFVTyxjQUFhLGFBQWE7QUFHM0MsUUFBSVMsMEJBQXlCO0FBSTdCLFFBQUlDLGdCQUFjO0FBQ2xCLFFBQUlGLHlCQUF1QjtBQUczQixRQUFJLHVCQUF1QjtBQUMzQixRQUFJLE9BQU87QUFDWCxRQUFJLGFBQWEsQ0FBQztBQUNsQixRQUFJLGNBQWMsQ0FBQztBQUNuQixRQUFJLGFBQWE7QUFDakIsUUFBSSxhQUE2Qix1QkFBTyxDQUFDLEtBQUssYUFBYSxhQUFhO0FBQ3RFLFVBQUksUUFBUSxRQUFRO0FBQ2xCLFlBQUksWUFBWSxNQUFNO0FBQ3BCLGlCQUFPLFlBQVksR0FBRztBQUFBLFFBQ3hCLE9BQU87QUFDTCxnQkFBTSxPQUFPLE9BQU8sS0FBSyxRQUFRO0FBQ2pDLGdCQUFNLGdCQUFnQixLQUFLLFdBQVcsS0FBSyxLQUFLLENBQUMsTUFBTTtBQUN2RCxnQkFBTSxlQUFlLEtBQUssVUFBVSxLQUFLLENBQUM7QUFDMUMsZ0JBQU0sY0FBYyxLQUFLLFdBQVc7QUFDcEMsY0FBSSxjQUFjO0FBQ2hCLG1CQUFPLGlCQUFpQixLQUFLLGFBQWEsUUFBUTtBQUFBLFVBQ3BELFdBQVcsYUFBYTtBQUN0QixtQkFBTyxvQkFBb0IsS0FBSyxhQUFhLElBQUk7QUFBQSxVQUNuRCxXQUFXLGVBQWU7QUFDeEIsbUJBQU8sT0FBTyxRQUFRLE9BQU8sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQ0csSUFBR0MsRUFBQyxNQUFNO0FBQ3ZELGtCQUFJLE9BQU9BLE9BQU0sWUFBWTtBQUMzQixvQkFBSUQsRUFBQyxJQUFJLFdBQVdDLElBQUcsYUFBYSxTQUFTLFVBQVUsQ0FBQztBQUFBLGNBQzFEO0FBQ0EscUJBQU87QUFBQSxZQUNULEdBQUcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQUEsVUFDakM7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsWUFBWTtBQUNmLFFBQUksbUJBQW1DLHVCQUFPLENBQUMsS0FBSyxhQUFhLGFBQWE7QUFDNUUsVUFBSTtBQUNKLFVBQUksTUFBTSxRQUFRLEdBQUcsR0FBRztBQUN0QixzQkFBYyxJQUFJLE9BQU8sQ0FBQyxTQUFTLE9BQU8sU0FBUyxVQUFVO0FBQUEsTUFDL0QsT0FBTztBQUNMLHNCQUFjLENBQUM7QUFDZixtQkFBVyxDQUFDRCxJQUFHQyxFQUFDLEtBQUssT0FBTyxRQUFRLEdBQUcsR0FBRztBQUN4QyxjQUFJLE9BQU9BLE9BQU0sWUFBWTtBQUMzQix3QkFBWUQsRUFBQyxJQUFJQztBQUFBLFVBQ25CO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxpQkFBVyxDQUFDLFNBQVMsS0FBSyxLQUFLLE9BQU8sUUFBUSxRQUFRLEdBQUc7QUFDdkQsWUFBSSxPQUFPLElBQUksT0FBTyxNQUFNLFlBQVk7QUFDdEM7QUFBQSxRQUNGO0FBQ0EsY0FBTSxpQkFBaUIsV0FBVyxJQUFJLE9BQU8sR0FBRyxhQUFhLEtBQUs7QUFDbEUsWUFBSSxtQkFBbUIsVUFBVSxPQUFPLG1CQUFtQixZQUFZO0FBQ3JFLHNCQUFZLE9BQU8sSUFBSTtBQUFBLFFBQ3pCO0FBQUEsTUFDRjtBQUNBLGFBQU87QUFBQSxJQUNULEdBQUcsa0JBQWtCO0FBQ3JCLFFBQUksc0JBQXNDLHVCQUFPLENBQUMsS0FBSyxhQUFhLGFBQWE7QUFDL0UsVUFBSSxNQUFNLFFBQVEsR0FBRyxHQUFHO0FBQ3RCLGVBQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxPQUFPLFNBQVMsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLFdBQVcsTUFBTSxhQUFhLFFBQVEsQ0FBQztBQUFBLE1BQy9HO0FBQ0EsYUFBTyxPQUFPLFFBQVEsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLE1BQU07QUFDdkQsWUFBSSxPQUFPLFVBQVUsWUFBWTtBQUMvQixpQkFBTztBQUFBLFFBQ1Q7QUFDQSxjQUFNLGlCQUFpQixXQUFXLE9BQU8sYUFBYSxRQUFRO0FBQzlELFlBQUksbUJBQW1CLFVBQVUsT0FBTyxtQkFBbUIsWUFBWTtBQUNyRSxjQUFJLEdBQUcsSUFBSTtBQUFBLFFBQ2I7QUFDQSxlQUFPO0FBQUEsTUFDVCxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ1AsR0FBRyxxQkFBcUI7QUFDeEIsUUFBSSxnQkFBZ0MsdUJBQU8sQ0FBQyxLQUFLLFVBQVUsWUFBWTtBQUNyRSxZQUFNLGVBQStCLHVCQUFPLENBQUMsZ0JBQWdCLEdBQUcscUJBQXFCLFVBQVUsWUFBWSxPQUFPLEdBQUcsY0FBYztBQUNuSSxhQUFPLGlCQUFpQixLQUFLLGNBQWMsUUFBUTtBQUFBLElBQ3JELEdBQUcsZUFBZTtBQUNsQixRQUFJLG1CQUFtQyx1QkFBTyxDQUFDLEtBQUssVUFBVSxZQUFZO0FBQ3hFLFlBQU0saUJBQWlDLHVCQUFPLENBQUMsZ0JBQWdCLEdBQUcscUJBQXFCLFlBQVksWUFBWSxPQUFPLEdBQUcsZ0JBQWdCO0FBQ3pJLGFBQU8saUJBQWlCLEtBQUssZ0JBQWdCLFFBQVE7QUFBQSxJQUN2RCxHQUFHLGtCQUFrQjtBQUdyQixRQUFJLGdDQUFnQyxjQUFjSix1QkFBcUIsUUFBUTtBQUFBLE1BQzdFLE9BQU87QUFDTCxlQUFPLE1BQU0sK0JBQStCO0FBQUEsTUFDOUM7QUFBQSxNQUNBLHlCQUF5QixlQUFlO0FBQ3RDLGNBQU0sRUFBRSxpQkFBaUIsbUJBQW1CLENBQUMsR0FBRyxtQkFBbUIscUJBQXFCLENBQUMsRUFBRSxJQUFJLGNBQWMsbUJBQW1CLENBQUM7QUFDakkseUJBQWlCLDJCQUEyQixpQkFBaUIsNEJBQTRCO0FBQ3pGLDJCQUFtQiwyQkFBMkIsbUJBQW1CLDRCQUE0QjtBQUM3RixhQUFLLGNBQWMsZ0JBQWdCO0FBQUEsVUFDakMsQ0FBQyxNQUFNLFlBQVksT0FBTyxTQUFTO0FBQ2pDLGFBQUMsR0FBR0UsY0FBWSxZQUFZLFNBQVMsY0FBYyxHQUFHO0FBQ3RELGlCQUFLLFFBQVEsY0FBYyxLQUFLLE9BQU8sS0FBSyxlQUFlLGdCQUFnQjtBQUMzRSxtQkFBTyxLQUFLLElBQUk7QUFBQSxVQUNsQjtBQUFBLFVBQ0E7QUFBQSxZQUNFLE1BQU07QUFBQSxZQUNOLFVBQVU7QUFBQSxZQUNWLGNBQWM7QUFBQSxZQUNkLFVBQVU7QUFBQSxVQUNaO0FBQUEsUUFDRjtBQUNBLGFBQUssY0FBYyxnQkFBZ0I7QUFBQSxVQUNqQyxDQUFDLE1BQU0sWUFBWSxPQUFPLFNBQVM7QUFDakMsa0JBQU0sZUFBZSxNQUFNLEtBQUssSUFBSTtBQUNwQyx5QkFBYSxTQUFTLGlCQUFpQixhQUFhLFFBQVEsS0FBSyxnQkFBZ0Isa0JBQWtCO0FBQ25HLG1CQUFPO0FBQUEsVUFDVDtBQUFBLFVBQ0E7QUFBQSxZQUNFLE1BQU07QUFBQSxZQUNOLFVBQVU7QUFBQSxZQUNWLGNBQWM7QUFBQSxZQUNkLFVBQVU7QUFBQSxVQUNaO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0EsUUFBSSwrQkFBK0IsY0FBYyw4QkFBOEI7QUFBQSxNQUM3RSxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlELHdCQUF1Qiw2QkFBNkIsS0FBSyxLQUFLO0FBQ3ZGLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLDhCQUE4QjtBQUFBLE1BQzdDO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLFlBQVk7QUFBQSxVQUNWLEtBQUs7QUFBQSxZQUNILFlBQVk7QUFBQTtBQUFBLFVBRWQ7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsUUFDZixXQUFXO0FBQUEsVUFDVCxLQUFLO0FBQUEsWUFDSCxPQUFPO0FBQUEsY0FDTCxNQUFNO0FBQUE7QUFBQSxZQUVSO0FBQUEsWUFDQSxNQUFNO0FBQUE7QUFBQSxVQUVSO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsa0JBQWtCLGFBQWEsZUFBZSxTQUFTO0FBQ3JELGFBQUsseUJBQXlCLGFBQWE7QUFDM0MsY0FBTSxRQUFRLFlBQVksT0FBTyxLQUFLLGVBQWU7QUFDckQsY0FBTUksV0FBVSxLQUFLLGNBQWMsa0JBQWtCLE9BQU8sZUFBZSxPQUFPO0FBQ2xGLGVBQU8sWUFBWUEsU0FBUSxLQUFLLGFBQWE7QUFBQSxNQUMvQztBQUFBLElBQ0Y7QUFLQSxRQUFJLGtCQUFrQixjQUFjLDhCQUE4QjtBQUFBLE1BQ2hFLFlBQVksT0FBTztBQUNqQixjQUFNO0FBQ04sYUFBSyxRQUFRO0FBQ2IsYUFBSyxnQkFBZ0IsSUFBSUosd0JBQXVCLG9CQUFvQixLQUFLLEtBQUs7QUFDOUUsYUFBSyxrQkFBa0IsS0FBSyxjQUFjO0FBQUEsTUFDNUM7QUFBQSxNQUNBLE9BQU87QUFDTCxlQUFPLE1BQU0saUJBQWlCO0FBQUEsTUFDaEM7QUFBQSxNQUNBLGdCQUFnQjtBQUFBLFFBQ2QsY0FBYztBQUFBLFVBQ1osS0FBSztBQUFBLFlBQ0gsTUFBTTtBQUFBLGNBQ0osS0FBSztBQUFBO0FBQUEsWUFFUDtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsUUFDZixXQUFXO0FBQUEsVUFDVCxLQUFLO0FBQUEsWUFDSCxLQUFLO0FBQUE7QUFBQSxVQUVQO0FBQUEsUUFDRjtBQUFBLFFBQ0EsaUJBQWlCO0FBQUEsVUFDZixLQUFLO0FBQUEsWUFDSCxNQUFNO0FBQUEsY0FDSixLQUFLO0FBQUE7QUFBQSxZQUVQO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLGtCQUFrQixhQUFhLGVBQWUsU0FBUztBQUNyRCxhQUFLLHlCQUF5QixhQUFhO0FBQzNDLGNBQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxlQUFlO0FBQ3JELGNBQU1JLFdBQVUsS0FBSyxjQUFjLGtCQUFrQixPQUFPLGVBQWUsT0FBTztBQUNsRixlQUFPLFlBQVlBLFNBQVEsS0FBSyxhQUFhO0FBQUEsTUFDL0M7QUFBQSxJQUNGO0FBS0EsUUFBSSxvQkFBb0IsY0FBYyw4QkFBOEI7QUFBQSxNQUNsRSxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlKLHdCQUF1QixzQkFBc0IsS0FBSyxLQUFLO0FBQ2hGLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLG1CQUFtQjtBQUFBLE1BQ2xDO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLGNBQWM7QUFBQSxVQUNaLEtBQUs7QUFBQSxZQUNILEtBQUs7QUFBQSxjQUNILFlBQVk7QUFBQSxnQkFDVixNQUFNO0FBQUE7QUFBQSxjQUVSO0FBQUEsY0FDQSxlQUFlO0FBQUEsZ0JBQ2IsS0FBSztBQUFBO0FBQUEsY0FFUDtBQUFBLFlBQ0Y7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxNQUNBLGlCQUFpQjtBQUFBLFFBQ2Ysa0JBQWtCO0FBQUEsVUFDaEIsS0FBSztBQUFBLFlBQ0gsS0FBSztBQUFBLGNBQ0gsWUFBWTtBQUFBLGdCQUNWLE1BQU07QUFBQTtBQUFBLGNBRVI7QUFBQSxjQUNBLGVBQWU7QUFBQSxnQkFDYixLQUFLO0FBQUE7QUFBQSxjQUVQO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUEsUUFDQSx1QkFBdUI7QUFBQSxVQUNyQixLQUFLO0FBQUEsWUFDSCxLQUFLO0FBQUEsY0FDSCxtQkFBbUI7QUFBQTtBQUFBLFlBRXJCO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLGtCQUFrQixhQUFhLGVBQWUsU0FBUztBQUNyRCxhQUFLLHlCQUF5QixhQUFhO0FBQzNDLGNBQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxlQUFlO0FBQ3JELGNBQU1JLFdBQVUsS0FBSyxjQUFjLGtCQUFrQixPQUFPLGVBQWUsT0FBTztBQUNsRixlQUFPLFlBQVlBLFNBQVEsS0FBSyxhQUFhO0FBQUEsTUFDL0M7QUFBQSxJQUNGO0FBS0EsUUFBSVosaUJBQWdCLGNBQWMsOEJBQThCO0FBQUEsTUFDOUQsWUFBWSxPQUFPO0FBQ2pCLGNBQU07QUFDTixhQUFLLFFBQVE7QUFDYixhQUFLLGdCQUFnQixJQUFJUSx3QkFBdUIsa0JBQWtCLEtBQUssS0FBSztBQUM1RSxhQUFLLGtCQUFrQixLQUFLLGNBQWM7QUFBQSxNQUM1QztBQUFBLE1BQ0EsT0FBTztBQUNMLGVBQU8sTUFBTSxlQUFlO0FBQUEsTUFDOUI7QUFBQSxNQUNBLGdCQUFnQjtBQUFBLFFBQ2QsS0FBSztBQUFBO0FBQUEsUUFFTCxVQUFVO0FBQUEsVUFDUixLQUFLO0FBQUEsWUFDSCxPQUFPO0FBQUEsWUFDUCxvQkFBb0I7QUFBQTtBQUFBLFVBRXRCO0FBQUEsUUFDRjtBQUFBLFFBQ0EsMkJBQTJCO0FBQUE7QUFBQSxNQUU3QjtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsUUFDZixZQUFZO0FBQUE7QUFBQSxRQUVaLHVCQUF1QjtBQUFBLFVBQ3JCLG1CQUFtQjtBQUFBO0FBQUEsUUFFckI7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLGtCQUFrQixhQUFhLGVBQWUsU0FBUztBQUNyRCxhQUFLLHlCQUF5QixhQUFhO0FBQzNDLGNBQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxlQUFlO0FBQ3JELGNBQU1JLFdBQVUsS0FBSyxjQUFjLGtCQUFrQixPQUFPLGVBQWUsT0FBTztBQUNsRixlQUFPLFlBQVlBLFNBQVEsS0FBSyxhQUFhO0FBQUEsTUFDL0M7QUFBQSxJQUNGO0FBS0EsUUFBSSwwQkFBMEIsY0FBYyw4QkFBOEI7QUFBQSxNQUN4RSxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlKLHdCQUF1Qix3QkFBd0IsS0FBSyxLQUFLO0FBQ2xGLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLHlCQUF5QjtBQUFBLE1BQ3hDO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLFlBQVk7QUFBQTtBQUFBLE1BRWQ7QUFBQSxNQUNBLGlCQUFpQjtBQUFBLFFBQ2YsT0FBTztBQUFBLFVBQ0wsS0FBSztBQUFBO0FBQUEsUUFFUDtBQUFBLFFBQ0Esa0JBQWtCO0FBQUE7QUFBQSxNQUVwQjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJQSxrQkFBa0IsYUFBYSxlQUFlLFNBQVM7QUFDckQsYUFBSyx5QkFBeUIsYUFBYTtBQUMzQyxjQUFNLFFBQVEsWUFBWSxPQUFPLEtBQUssZUFBZTtBQUNyRCxjQUFNSSxXQUFVLEtBQUssY0FBYyxrQkFBa0IsT0FBTyxlQUFlLE9BQU87QUFDbEYsZUFBTyxZQUFZQSxTQUFRLEtBQUssYUFBYTtBQUFBLE1BQy9DO0FBQUEsSUFDRjtBQUtBLFFBQUksNEJBQTRCLGNBQWMsOEJBQThCO0FBQUEsTUFDMUUsWUFBWSxPQUFPO0FBQ2pCLGNBQU07QUFDTixhQUFLLFFBQVE7QUFDYixhQUFLLGdCQUFnQixJQUFJSix3QkFBdUIsMEJBQTBCLEtBQUssS0FBSztBQUNwRixhQUFLLGtCQUFrQixLQUFLLGNBQWM7QUFBQSxNQUM1QztBQUFBLE1BQ0EsT0FBTztBQUNMLGVBQU8sTUFBTSwyQkFBMkI7QUFBQSxNQUMxQztBQUFBLE1BQ0EsZ0JBQWdCO0FBQUEsUUFDZCxvQkFBb0I7QUFBQSxVQUNsQixLQUFLO0FBQUEsWUFDSCxZQUFZO0FBQUE7QUFBQSxVQUVkO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxNQUNBLGlCQUFpQjtBQUFBLFFBQ2YsV0FBVztBQUFBLFVBQ1QsS0FBSztBQUFBLFlBQ0gsTUFBTTtBQUFBO0FBQUEsVUFFUjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLGtCQUFrQixhQUFhLGVBQWUsU0FBUztBQUNyRCxhQUFLLHlCQUF5QixhQUFhO0FBQzNDLGNBQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxlQUFlO0FBQ3JELGNBQU1JLFdBQVUsS0FBSyxjQUFjLGtCQUFrQixPQUFPLGVBQWUsT0FBTztBQUNsRixlQUFPLFlBQVlBLFNBQVEsS0FBSyxhQUFhO0FBQUEsTUFDL0M7QUFBQSxJQUNGO0FBS0EsUUFBSVYsY0FBYSxjQUFjLDhCQUE4QjtBQUFBLE1BQzNELFlBQVksT0FBTztBQUNqQixjQUFNO0FBQ04sYUFBSyxRQUFRO0FBQ2IsYUFBSyxnQkFBZ0IsSUFBSU0sd0JBQXVCLGVBQWUsS0FBSyxLQUFLO0FBQ3pFLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLFlBQVk7QUFBQSxNQUMzQjtBQUFBLE1BQ0EsZ0JBQWdCO0FBQUEsUUFDZCxLQUFLO0FBQUE7QUFBQSxNQUVQO0FBQUEsTUFDQSxpQkFBaUI7QUFBQSxRQUNmLE1BQU07QUFBQTtBQUFBLE1BRVI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsa0JBQWtCLGFBQWEsZUFBZSxTQUFTO0FBQ3JELGFBQUsseUJBQXlCLGFBQWE7QUFDM0MsY0FBTSxRQUFRLFlBQVksT0FBTyxLQUFLLGVBQWU7QUFDckQsY0FBTUksV0FBVSxLQUFLLGNBQWMsa0JBQWtCLE9BQU8sZUFBZSxPQUFPO0FBQ2xGLGVBQU8sWUFBWUEsU0FBUSxLQUFLLGFBQWE7QUFBQSxNQUMvQztBQUFBLElBQ0Y7QUFLQSxRQUFJUixjQUFhLGNBQWMsOEJBQThCO0FBQUEsTUFDM0QsWUFBWSxPQUFPO0FBQ2pCLGNBQU07QUFDTixhQUFLLFFBQVE7QUFDYixhQUFLLGdCQUFnQixJQUFJSSx3QkFBdUIsZUFBZSxLQUFLLEtBQUs7QUFDekUsYUFBSyxrQkFBa0IsS0FBSyxjQUFjO0FBQUEsTUFDNUM7QUFBQSxNQUNBLE9BQU87QUFDTCxlQUFPLE1BQU0sWUFBWTtBQUFBLE1BQzNCO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLE1BQU07QUFBQTtBQUFBLFFBRU4sVUFBVTtBQUFBLFVBQ1IsS0FBSztBQUFBLFlBQ0gsT0FBTztBQUFBLFlBQ1Asb0JBQW9CO0FBQUE7QUFBQSxVQUV0QjtBQUFBLFFBQ0Y7QUFBQSxRQUNBLDJCQUEyQjtBQUFBO0FBQUEsTUFFN0I7QUFBQSxNQUNBLGlCQUFpQjtBQUFBLFFBQ2YsWUFBWTtBQUFBO0FBQUEsUUFFWix1QkFBdUI7QUFBQSxVQUNyQixtQkFBbUI7QUFBQTtBQUFBLFFBRXJCO0FBQUEsTUFDRjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJQSxrQkFBa0IsYUFBYSxlQUFlLFNBQVM7QUFDckQsYUFBSyx5QkFBeUIsYUFBYTtBQUMzQyxjQUFNLFFBQVEsWUFBWSxPQUFPLEtBQUssZUFBZTtBQUNyRCxjQUFNSSxXQUFVLEtBQUssY0FBYyxrQkFBa0IsT0FBTyxlQUFlLE9BQU87QUFDbEYsZUFBTyxZQUFZQSxTQUFRLEtBQUssYUFBYTtBQUFBLE1BQy9DO0FBQUEsSUFDRjtBQUtBLFFBQUlQLGdCQUFlLGNBQWMsOEJBQThCO0FBQUEsTUFDN0QsWUFBWSxPQUFPO0FBQ2pCLGNBQU07QUFDTixhQUFLLFFBQVE7QUFDYixhQUFLLGdCQUFnQixJQUFJRyx3QkFBdUIsYUFBYSxLQUFLLEtBQUs7QUFDdkUsYUFBSyxrQkFBa0IsS0FBSyxjQUFjO0FBQUEsTUFDNUM7QUFBQSxNQUNBLE9BQU87QUFDTCxlQUFPLE1BQU0sY0FBYztBQUFBLE1BQzdCO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLGVBQWU7QUFBQSxVQUNiLEtBQUs7QUFBQSxZQUNILG9CQUFvQjtBQUFBO0FBQUEsVUFFdEI7QUFBQSxRQUNGO0FBQUEsUUFDQSxhQUFhO0FBQUEsVUFDWCxLQUFLO0FBQUEsWUFDSCxvQkFBb0I7QUFBQTtBQUFBLFVBRXRCO0FBQUEsUUFDRjtBQUFBLFFBQ0EsbUJBQW1CO0FBQUE7QUFBQSxRQUVuQiwyQkFBMkI7QUFBQTtBQUFBLE1BRTdCO0FBQUEsTUFDQSxpQkFBaUI7QUFBQSxRQUNmLE9BQU87QUFBQSxVQUNMLEtBQUs7QUFBQTtBQUFBLFFBRVA7QUFBQSxRQUNBLGtCQUFrQjtBQUFBO0FBQUEsTUFFcEI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsa0JBQWtCLGFBQWEsZUFBZSxTQUFTO0FBQ3JELGFBQUsseUJBQXlCLGFBQWE7QUFDM0MsY0FBTSxRQUFRLFlBQVksT0FBTyxLQUFLLGVBQWU7QUFDckQsY0FBTUksV0FBVSxLQUFLLGNBQWMsa0JBQWtCLE9BQU8sZUFBZSxPQUFPO0FBQ2xGLGVBQU8sWUFBWUEsU0FBUSxLQUFLLGFBQWE7QUFBQSxNQUMvQztBQUFBLElBQ0Y7QUFLQSxRQUFJLGNBQWMsY0FBYyw4QkFBOEI7QUFBQSxNQUM1RCxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlKLHdCQUF1QixZQUFZLEtBQUssS0FBSztBQUN0RSxhQUFLLGtCQUFrQixLQUFLLGNBQWM7QUFBQSxNQUM1QztBQUFBLE1BQ0EsT0FBTztBQUNMLGVBQU8sTUFBTSxhQUFhO0FBQUEsTUFDNUI7QUFBQSxNQUNBLGdCQUFnQjtBQUFBLFFBQ2QsWUFBWTtBQUFBLFVBQ1YsS0FBSztBQUFBLFlBQ0gsb0JBQW9CO0FBQUE7QUFBQSxVQUV0QjtBQUFBLFFBQ0Y7QUFBQSxRQUNBLG1CQUFtQjtBQUFBO0FBQUEsUUFFbkIsMkJBQTJCO0FBQUE7QUFBQSxNQUU3QjtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsUUFDZixPQUFPO0FBQUEsVUFDTCxLQUFLO0FBQUE7QUFBQSxRQUVQO0FBQUEsUUFDQSxrQkFBa0I7QUFBQTtBQUFBLE1BRXBCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLGtCQUFrQixhQUFhLGVBQWUsU0FBUztBQUNyRCxhQUFLLHlCQUF5QixhQUFhO0FBQzNDLGNBQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxlQUFlO0FBQ3JELGNBQU1JLFdBQVUsS0FBSyxjQUFjLGtCQUFrQixPQUFPLGVBQWUsT0FBTztBQUNsRixlQUFPLFlBQVlBLFNBQVEsS0FBSyxhQUFhO0FBQUEsTUFDL0M7QUFBQSxJQUNGO0FBS0EsUUFBSSxxQkFBcUIsY0FBYyw4QkFBOEI7QUFBQSxNQUNuRSxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlKLHdCQUF1Qix3QkFBd0IsS0FBSyxLQUFLO0FBQ2xGLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLG9CQUFvQjtBQUFBLE1BQ25DO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLGVBQWU7QUFBQSxVQUNiLEtBQUs7QUFBQSxZQUNILEtBQUs7QUFBQSxjQUNILEtBQUs7QUFBQTtBQUFBLFlBRVA7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxNQUNBLGlCQUFpQjtBQUFBLFFBQ2YsV0FBVztBQUFBLFVBQ1QsS0FBSztBQUFBLFlBQ0gsTUFBTTtBQUFBO0FBQUEsVUFFUjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUlBLGtCQUFrQixhQUFhLGVBQWUsU0FBUztBQUNyRCxhQUFLLHlCQUF5QixhQUFhO0FBQzNDLGNBQU0sUUFBUSxZQUFZLE9BQU8sS0FBSyxlQUFlO0FBQ3JELGNBQU1JLFdBQVUsS0FBSyxjQUFjLGtCQUFrQixPQUFPLGVBQWUsT0FBTztBQUNsRixlQUFPLFlBQVlBLFNBQVEsS0FBSyxhQUFhO0FBQUEsTUFDL0M7QUFBQSxJQUNGO0FBS0EsUUFBSSx1QkFBdUIsY0FBYyw4QkFBOEI7QUFBQSxNQUNyRSxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlKLHdCQUF1QiwwQkFBMEIsS0FBSyxLQUFLO0FBQ3BGLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLHNCQUFzQjtBQUFBLE1BQ3JDO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxRQUNkLGVBQWU7QUFBQSxVQUNiLEtBQUs7QUFBQSxZQUNILGdCQUFnQjtBQUFBLGNBQ2QsS0FBSztBQUFBO0FBQUEsY0FFTCwyQkFBMkI7QUFBQTtBQUFBLFlBRTdCO0FBQUEsWUFDQSxLQUFLO0FBQUEsY0FDSCxNQUFNO0FBQUE7QUFBQSxjQUVOLDJCQUEyQjtBQUFBO0FBQUEsWUFFN0I7QUFBQSxZQUNBLFFBQVE7QUFBQSxjQUNOLEtBQUs7QUFBQTtBQUFBLGNBRUwsMkJBQTJCO0FBQUE7QUFBQSxZQUU3QjtBQUFBLFlBQ0EsUUFBUTtBQUFBLGNBQ04sS0FBSztBQUFBO0FBQUEsY0FFTCwyQkFBMkI7QUFBQTtBQUFBLFlBRTdCO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsTUFDQSxpQkFBaUI7QUFBQSxRQUNmLHVCQUF1QjtBQUFBLFVBQ3JCLEtBQUs7QUFBQSxZQUNILEtBQUs7QUFBQSxjQUNILG1CQUFtQjtBQUFBO0FBQUEsWUFFckI7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSUEsa0JBQWtCLGFBQWEsZUFBZSxTQUFTO0FBQ3JELGFBQUsseUJBQXlCLGFBQWE7QUFDM0MsY0FBTSxRQUFRLFlBQVksT0FBTyxLQUFLLGVBQWU7QUFDckQsY0FBTUksV0FBVSxLQUFLLGNBQWMsa0JBQWtCLE9BQU8sZUFBZSxPQUFPO0FBQ2xGLGVBQU8sWUFBWUEsU0FBUSxLQUFLLGFBQWE7QUFBQSxNQUMvQztBQUFBLElBQ0Y7QUFLQSxRQUFJTixpQkFBZ0IsY0FBYyw4QkFBOEI7QUFBQSxNQUM5RCxZQUFZLE9BQU87QUFDakIsY0FBTTtBQUNOLGFBQUssUUFBUTtBQUNiLGFBQUssZ0JBQWdCLElBQUlFLHdCQUF1QixrQkFBa0IsS0FBSyxLQUFLO0FBQzVFLGFBQUssa0JBQWtCLEtBQUssY0FBYztBQUFBLE1BQzVDO0FBQUEsTUFDQSxPQUFPO0FBQ0wsZUFBTyxNQUFNLGVBQWU7QUFBQSxNQUM5QjtBQUFBLE1BQ0EsZ0JBQWdCO0FBQUEsUUFDZCxLQUFLO0FBQUE7QUFBQSxRQUVMLGtCQUFrQjtBQUFBLFVBQ2hCLEtBQUs7QUFBQSxZQUNILE9BQU87QUFBQSxVQUNUO0FBQUEsUUFDRjtBQUFBLFFBQ0EsVUFBVTtBQUFBLFVBQ1IsS0FBSztBQUFBLFlBQ0gsT0FBTztBQUFBLFlBQ1Asb0JBQW9CO0FBQUE7QUFBQSxVQUV0QjtBQUFBLFFBQ0Y7QUFBQSxRQUNBLDJCQUEyQjtBQUFBO0FBQUEsTUFFN0I7QUFBQSxNQUNBLGlCQUFpQjtBQUFBLFFBQ2YsWUFBWTtBQUFBO0FBQUEsUUFFWix1QkFBdUI7QUFBQSxVQUNyQixtQkFBbUI7QUFBQTtBQUFBLFFBRXJCO0FBQUEsTUFDRjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJQSxrQkFBa0IsYUFBYSxlQUFlLFNBQVM7QUFDckQsYUFBSyx5QkFBeUIsYUFBYTtBQUMzQyxjQUFNLFFBQVEsWUFBWSxPQUFPLEtBQUssZUFBZTtBQUNyRCxjQUFNSSxXQUFVLEtBQUssY0FBYyxrQkFBa0IsT0FBTyxlQUFlLE9BQU87QUFDbEYsZUFBTyxZQUFZQSxTQUFRLEtBQUssYUFBYTtBQUFBLE1BQy9DO0FBQUEsSUFDRjtBQUlBLFFBQUlYLDBCQUF5QixNQUFNLGdDQUFnQ00sdUJBQXFCLE9BQU87QUFBQSxNQUM3RixPQUFPO0FBQ0wsZUFBTyxNQUFNLHdCQUF3QjtBQUFBLE1BQ3ZDO0FBQUEsTUFDQTtBQUFBLE1BQ0EsWUFBWU0sU0FBUSxpQkFBaUI7QUFDbkMsY0FBTUEsUUFBTyxNQUFNO0FBQ25CLGFBQUssU0FBU0EsUUFBTztBQUNyQixhQUFLLE9BQU8sa0JBQWtCO0FBQzlCLGFBQUssa0JBQWtCQSxRQUFPO0FBQzlCLFlBQUksS0FBSyxRQUFRLGlCQUFpQjtBQUNoQyxnQkFBTSxJQUFJO0FBQUEsWUFDUjtBQUFBLFVBQ0Y7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLE1BQ0EsT0FBTyxLQUFLQSxTQUFRLGlCQUFpQjtBQUNuQyxlQUFPLElBQUksd0JBQXdCQSxTQUFRLGVBQWU7QUFBQSxNQUM1RDtBQUFBLE1BQ0EsVUFBVTtBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBR0EsUUFBSSxtQkFBbUIsTUFBTSwwQkFBMEJaLHdCQUF1QjtBQUFBLE1BQzVFLE9BQU87QUFDTCxlQUFPLE1BQU0sa0JBQWtCO0FBQUEsTUFDakM7QUFBQSxNQUNBLE9BQU8sS0FBS1ksU0FBUSxpQkFBaUI7QUFDbkMsZUFBTyxJQUFJLGtCQUFrQkEsU0FBUSxlQUFlO0FBQUEsTUFDdEQ7QUFBQSxNQUNBLHNCQUFzQixNQUFNLGFBQWEsSUFBSTtBQUMzQyxjQUFNLFVBQVUsSUFBSSw2QkFBNkIsSUFBSTtBQUNyRCxZQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDckMsZUFBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ2hDLFdBQVcsT0FBTyxPQUFPLFlBQVk7QUFDbkMsY0FBSSxPQUFPLGdCQUFnQixVQUFVO0FBQ25DLGtCQUFNLElBQUksTUFBTSwrQkFBK0IsT0FBTyxXQUFXLEVBQUU7QUFBQSxVQUNyRTtBQUNBLGVBQUssS0FBSyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFBQSxRQUMxQyxPQUFPO0FBQ0wsaUJBQU8sS0FBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ3ZDO0FBQUEsTUFDRjtBQUFBLE1BQ0EsU0FBUyxNQUFNLGFBQWEsSUFBSTtBQUM5QixjQUFNLFVBQVUsSUFBSSxnQkFBZ0IsSUFBSTtBQUN4QyxZQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDckMsZUFBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ2hDLFdBQVcsT0FBTyxPQUFPLFlBQVk7QUFDbkMsY0FBSSxPQUFPLGdCQUFnQixVQUFVO0FBQ25DLGtCQUFNLElBQUksTUFBTSwrQkFBK0IsT0FBTyxXQUFXLEVBQUU7QUFBQSxVQUNyRTtBQUNBLGVBQUssS0FBSyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFBQSxRQUMxQyxPQUFPO0FBQ0wsaUJBQU8sS0FBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ3ZDO0FBQUEsTUFDRjtBQUFBLE1BQ0EsV0FBVyxNQUFNLGFBQWEsSUFBSTtBQUNoQyxjQUFNLFVBQVUsSUFBSSxrQkFBa0IsSUFBSTtBQUMxQyxZQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDckMsZUFBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ2hDLFdBQVcsT0FBTyxPQUFPLFlBQVk7QUFDbkMsY0FBSSxPQUFPLGdCQUFnQixVQUFVO0FBQ25DLGtCQUFNLElBQUksTUFBTSwrQkFBK0IsT0FBTyxXQUFXLEVBQUU7QUFBQSxVQUNyRTtBQUNBLGVBQUssS0FBSyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFBQSxRQUMxQyxPQUFPO0FBQ0wsaUJBQU8sS0FBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ3ZDO0FBQUEsTUFDRjtBQUFBLE1BQ0EsT0FBTyxNQUFNLGFBQWEsSUFBSTtBQUM1QixjQUFNLFVBQVUsSUFBSWIsZUFBYyxJQUFJO0FBQ3RDLFlBQUksT0FBTyxnQkFBZ0IsWUFBWTtBQUNyQyxlQUFLLEtBQUssU0FBUyxXQUFXO0FBQUEsUUFDaEMsV0FBVyxPQUFPLE9BQU8sWUFBWTtBQUNuQyxjQUFJLE9BQU8sZ0JBQWdCLFVBQVU7QUFDbkMsa0JBQU0sSUFBSSxNQUFNLCtCQUErQixPQUFPLFdBQVcsRUFBRTtBQUFBLFVBQ3JFO0FBQ0EsZUFBSyxLQUFLLFNBQVMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUFBLFFBQzFDLE9BQU87QUFDTCxpQkFBTyxLQUFLLEtBQUssU0FBUyxXQUFXO0FBQUEsUUFDdkM7QUFBQSxNQUNGO0FBQUEsTUFDQSxpQkFBaUIsTUFBTSxhQUFhLElBQUk7QUFDdEMsY0FBTSxVQUFVLElBQUksd0JBQXdCLElBQUk7QUFDaEQsWUFBSSxPQUFPLGdCQUFnQixZQUFZO0FBQ3JDLGVBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUNoQyxXQUFXLE9BQU8sT0FBTyxZQUFZO0FBQ25DLGNBQUksT0FBTyxnQkFBZ0IsVUFBVTtBQUNuQyxrQkFBTSxJQUFJLE1BQU0sK0JBQStCLE9BQU8sV0FBVyxFQUFFO0FBQUEsVUFDckU7QUFDQSxlQUFLLEtBQUssU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQUEsUUFDMUMsT0FBTztBQUNMLGlCQUFPLEtBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUN2QztBQUFBLE1BQ0Y7QUFBQSxNQUNBLG1CQUFtQixNQUFNLGFBQWEsSUFBSTtBQUN4QyxjQUFNLFVBQVUsSUFBSSwwQkFBMEIsSUFBSTtBQUNsRCxZQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDckMsZUFBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ2hDLFdBQVcsT0FBTyxPQUFPLFlBQVk7QUFDbkMsY0FBSSxPQUFPLGdCQUFnQixVQUFVO0FBQ25DLGtCQUFNLElBQUksTUFBTSwrQkFBK0IsT0FBTyxXQUFXLEVBQUU7QUFBQSxVQUNyRTtBQUNBLGVBQUssS0FBSyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFBQSxRQUMxQyxPQUFPO0FBQ0wsaUJBQU8sS0FBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ3ZDO0FBQUEsTUFDRjtBQUFBLE1BQ0EsSUFBSSxNQUFNLGFBQWEsSUFBSTtBQUN6QixjQUFNLFVBQVUsSUFBSUUsWUFBVyxJQUFJO0FBQ25DLFlBQUksT0FBTyxnQkFBZ0IsWUFBWTtBQUNyQyxlQUFLLEtBQUssU0FBUyxXQUFXO0FBQUEsUUFDaEMsV0FBVyxPQUFPLE9BQU8sWUFBWTtBQUNuQyxjQUFJLE9BQU8sZ0JBQWdCLFVBQVU7QUFDbkMsa0JBQU0sSUFBSSxNQUFNLCtCQUErQixPQUFPLFdBQVcsRUFBRTtBQUFBLFVBQ3JFO0FBQ0EsZUFBSyxLQUFLLFNBQVMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUFBLFFBQzFDLE9BQU87QUFDTCxpQkFBTyxLQUFLLEtBQUssU0FBUyxXQUFXO0FBQUEsUUFDdkM7QUFBQSxNQUNGO0FBQUEsTUFDQSxJQUFJLE1BQU0sYUFBYSxJQUFJO0FBQ3pCLGNBQU0sVUFBVSxJQUFJRSxZQUFXLElBQUk7QUFDbkMsWUFBSSxPQUFPLGdCQUFnQixZQUFZO0FBQ3JDLGVBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUNoQyxXQUFXLE9BQU8sT0FBTyxZQUFZO0FBQ25DLGNBQUksT0FBTyxnQkFBZ0IsVUFBVTtBQUNuQyxrQkFBTSxJQUFJLE1BQU0sK0JBQStCLE9BQU8sV0FBVyxFQUFFO0FBQUEsVUFDckU7QUFDQSxlQUFLLEtBQUssU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQUEsUUFDMUMsT0FBTztBQUNMLGlCQUFPLEtBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUN2QztBQUFBLE1BQ0Y7QUFBQSxNQUNBLE1BQU0sTUFBTSxhQUFhLElBQUk7QUFDM0IsY0FBTSxVQUFVLElBQUlDLGNBQWEsSUFBSTtBQUNyQyxZQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDckMsZUFBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ2hDLFdBQVcsT0FBTyxPQUFPLFlBQVk7QUFDbkMsY0FBSSxPQUFPLGdCQUFnQixVQUFVO0FBQ25DLGtCQUFNLElBQUksTUFBTSwrQkFBK0IsT0FBTyxXQUFXLEVBQUU7QUFBQSxVQUNyRTtBQUNBLGVBQUssS0FBSyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFBQSxRQUMxQyxPQUFPO0FBQ0wsaUJBQU8sS0FBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ3ZDO0FBQUEsTUFDRjtBQUFBLE1BQ0EsS0FBSyxNQUFNLGFBQWEsSUFBSTtBQUMxQixjQUFNLFVBQVUsSUFBSSxZQUFZLElBQUk7QUFDcEMsWUFBSSxPQUFPLGdCQUFnQixZQUFZO0FBQ3JDLGVBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUNoQyxXQUFXLE9BQU8sT0FBTyxZQUFZO0FBQ25DLGNBQUksT0FBTyxnQkFBZ0IsVUFBVTtBQUNuQyxrQkFBTSxJQUFJLE1BQU0sK0JBQStCLE9BQU8sV0FBVyxFQUFFO0FBQUEsVUFDckU7QUFDQSxlQUFLLEtBQUssU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQUEsUUFDMUMsT0FBTztBQUNMLGlCQUFPLEtBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUN2QztBQUFBLE1BQ0Y7QUFBQSxNQUNBLFlBQVksTUFBTSxhQUFhLElBQUk7QUFDakMsY0FBTSxVQUFVLElBQUksbUJBQW1CLElBQUk7QUFDM0MsWUFBSSxPQUFPLGdCQUFnQixZQUFZO0FBQ3JDLGVBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUNoQyxXQUFXLE9BQU8sT0FBTyxZQUFZO0FBQ25DLGNBQUksT0FBTyxnQkFBZ0IsVUFBVTtBQUNuQyxrQkFBTSxJQUFJLE1BQU0sK0JBQStCLE9BQU8sV0FBVyxFQUFFO0FBQUEsVUFDckU7QUFDQSxlQUFLLEtBQUssU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQUEsUUFDMUMsT0FBTztBQUNMLGlCQUFPLEtBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUN2QztBQUFBLE1BQ0Y7QUFBQSxNQUNBLGNBQWMsTUFBTSxhQUFhLElBQUk7QUFDbkMsY0FBTSxVQUFVLElBQUkscUJBQXFCLElBQUk7QUFDN0MsWUFBSSxPQUFPLGdCQUFnQixZQUFZO0FBQ3JDLGVBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUNoQyxXQUFXLE9BQU8sT0FBTyxZQUFZO0FBQ25DLGNBQUksT0FBTyxnQkFBZ0IsVUFBVTtBQUNuQyxrQkFBTSxJQUFJLE1BQU0sK0JBQStCLE9BQU8sV0FBVyxFQUFFO0FBQUEsVUFDckU7QUFDQSxlQUFLLEtBQUssU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQUEsUUFDMUMsT0FBTztBQUNMLGlCQUFPLEtBQUssS0FBSyxTQUFTLFdBQVc7QUFBQSxRQUN2QztBQUFBLE1BQ0Y7QUFBQSxNQUNBLE9BQU8sTUFBTSxhQUFhLElBQUk7QUFDNUIsY0FBTSxVQUFVLElBQUlDLGVBQWMsSUFBSTtBQUN0QyxZQUFJLE9BQU8sZ0JBQWdCLFlBQVk7QUFDckMsZUFBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ2hDLFdBQVcsT0FBTyxPQUFPLFlBQVk7QUFDbkMsY0FBSSxPQUFPLGdCQUFnQixVQUFVO0FBQ25DLGtCQUFNLElBQUksTUFBTSwrQkFBK0IsT0FBTyxXQUFXLEVBQUU7QUFBQSxVQUNyRTtBQUNBLGVBQUssS0FBSyxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFBQSxRQUMxQyxPQUFPO0FBQ0wsaUJBQU8sS0FBSyxLQUFLLFNBQVMsV0FBVztBQUFBLFFBQ3ZDO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFHQSxRQUFJSCxnQkFBZTtBQUduQixRQUFJVyxnQkFBZTtBQUVuQixRQUFJLGlCQUFpQixHQUFHQSxjQUFhLGlCQUFpQmIseUJBQXdCSSxlQUFjLHFCQUFxQixvQkFBb0IsT0FBTztBQUc1SSxRQUFJVSxnQkFBZTtBQUVuQixRQUFJLGdCQUFnQixHQUFHQSxjQUFhLGlCQUFpQmQseUJBQXdCLGFBQWEscUJBQXFCLG9CQUFvQixPQUFPO0FBQUE7QUFBQTs7O0FDNy9CMUk7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDQ0EsNkJBQStCO0FBQy9CLDBCQUEyRztBQUczRyxJQUFNLGFBQWEsUUFBUSxJQUFJLGVBQWU7QUFDOUMsSUFBTSxvQkFBb0IsUUFBUSxJQUFJLHFCQUFxQjtBQUUzRCxRQUFRLElBQUksMkRBQTJELFVBQVUsY0FBYyxhQUFhLG9CQUFvQixhQUFhLEVBQUU7QUFHL0ksSUFBTSxlQUFlLGFBQ2pCO0FBQUE7QUFBQSxFQUVFLFVBQVU7QUFBQSxFQUNWLFFBQVE7QUFBQTtBQUFBLEVBQ1IsYUFBYTtBQUFBLElBQ1gsYUFBYTtBQUFBO0FBQUEsSUFDYixpQkFBaUI7QUFBQTtBQUFBLEVBQ25CO0FBQ0YsSUFDQTtBQUFBO0FBQUE7QUFHQTtBQUVKLElBQU0sU0FBUyxJQUFJLHNDQUFlLFlBQVk7QUFHdkMsSUFBTSxNQUFNLDJDQUF1QixLQUFLLE1BQU07QUE2RXJELGVBQXNCLG1CQUFtQixVQUF5QztBQUNoRixRQUFNLFlBQVksUUFBUSxJQUFJO0FBQzlCLE1BQUksQ0FBQyxVQUFXLE9BQU0sSUFBSSxNQUFNLDhDQUE4QztBQUU5RSxRQUFNLHNCQUFzQjtBQUM1QixRQUFNLG9CQUFvQixhQUFhLE9BQU8sc0JBQXNCO0FBRXBFLFFBQU0sVUFBVSxJQUFJLGlDQUFhO0FBQUEsSUFDL0IsV0FBVztBQUFBLElBQ1gsV0FBVztBQUFBO0FBQUEsSUFDWCx3QkFBd0I7QUFBQSxJQUN4QiwyQkFBMkI7QUFBQSxNQUN6QixRQUFRO0FBQUEsSUFDVjtBQUFBLEVBQ0YsQ0FBQztBQUNBLFVBQVEsSUFBSSxzREFBc0QsaUJBQWlCLHVCQUF1QjtBQUMxRyxNQUFJO0FBQ0MsVUFBTSxNQUFNLE1BQU0sSUFBSSxLQUFLLE9BQU87QUFDbEMsV0FBTyxJQUFJLFNBQVMsQ0FBQztBQUFBLEVBQzFCLFNBQVMsT0FBTztBQUNYLFlBQVEsTUFBTSx3REFBd0QsaUJBQWlCLEtBQUssS0FBSztBQUNqRyxVQUFNO0FBQUEsRUFDWDtBQUNIOzs7QUNqSU8sSUFBTSxvQkFBTixjQUFnQyxNQUFNO0FBQzdDO0FBQ0Esa0JBQWtCLFVBQVUsT0FBTztBQUNuQyxTQUFTLGlCQUFpQixLQUFLO0FBQzNCLFNBQU8sbUJBQW1CLEtBQUssR0FBRyxFQUFFLFFBQVEsUUFBUSxDQUFDZSxJQUFHQyxPQUFNO0FBQzFELFFBQUksT0FBT0EsR0FBRSxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxZQUFZO0FBQ3BELFFBQUksS0FBSyxTQUFTLEdBQUc7QUFDakIsYUFBTyxNQUFNO0FBQUEsSUFDakI7QUFDQSxXQUFPLE1BQU07QUFBQSxFQUNqQixDQUFDLENBQUM7QUFDTjtBQUNBLFNBQVMsZ0JBQWdCLEtBQUs7QUFDMUIsTUFBSSxTQUFTLElBQUksUUFBUSxNQUFNLEdBQUcsRUFBRSxRQUFRLE1BQU0sR0FBRztBQUNyRCxVQUFRLE9BQU8sU0FBUyxHQUFHO0FBQUEsSUFDdkIsS0FBSztBQUNEO0FBQUEsSUFDSixLQUFLO0FBQ0QsZ0JBQVU7QUFDVjtBQUFBLElBQ0osS0FBSztBQUNELGdCQUFVO0FBQ1Y7QUFBQSxJQUNKO0FBQ0ksWUFBTSxJQUFJLE1BQU0sNENBQTRDO0FBQUEsRUFDcEU7QUFDQSxNQUFJO0FBQ0EsV0FBTyxpQkFBaUIsTUFBTTtBQUFBLEVBQ2xDLFNBQ09DLE1BQUs7QUFDUixXQUFPLEtBQUssTUFBTTtBQUFBLEVBQ3RCO0FBQ0o7QUFDTyxTQUFTLFVBQVUsT0FBTyxTQUFTO0FBQ3RDLE1BQUksT0FBTyxVQUFVLFVBQVU7QUFDM0IsVUFBTSxJQUFJLGtCQUFrQiwyQ0FBMkM7QUFBQSxFQUMzRTtBQUNBLGNBQVksVUFBVSxDQUFDO0FBQ3ZCLFFBQU0sTUFBTSxRQUFRLFdBQVcsT0FBTyxJQUFJO0FBQzFDLFFBQU0sT0FBTyxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUc7QUFDakMsTUFBSSxPQUFPLFNBQVMsVUFBVTtBQUMxQixVQUFNLElBQUksa0JBQWtCLDBDQUEwQyxNQUFNLENBQUMsRUFBRTtBQUFBLEVBQ25GO0FBQ0EsTUFBSTtBQUNKLE1BQUk7QUFDQSxjQUFVLGdCQUFnQixJQUFJO0FBQUEsRUFDbEMsU0FDT0MsSUFBRztBQUNOLFVBQU0sSUFBSSxrQkFBa0IscURBQXFELE1BQU0sQ0FBQyxLQUFLQSxHQUFFLE9BQU8sR0FBRztBQUFBLEVBQzdHO0FBQ0EsTUFBSTtBQUNBLFdBQU8sS0FBSyxNQUFNLE9BQU87QUFBQSxFQUM3QixTQUNPQSxJQUFHO0FBQ04sVUFBTSxJQUFJLGtCQUFrQixtREFBbUQsTUFBTSxDQUFDLEtBQUtBLEdBQUUsT0FBTyxHQUFHO0FBQUEsRUFDM0c7QUFDSjs7O0FDcERBLElBQU1DLGNBQWEsUUFBUSxJQUFJLGVBQWU7QUEwQnZDLFNBQVMsaUJBQWlCLE9BQTRDO0FBQ3pFLE1BQUksUUFBNEI7QUFDaEMsTUFBSSxRQUFrQixDQUFDO0FBQ3ZCLE1BQUksY0FBYztBQUNsQixNQUFJLGtCQUFrQjtBQUN0QixNQUFJLFFBQTRCO0FBRWhDLE1BQUlBLGFBQVk7QUFFWixVQUFNLGFBQWEsTUFBTSxTQUFTLGlCQUFpQixNQUFNLFNBQVM7QUFDbEUsUUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLFdBQVcsU0FBUyxHQUFHO0FBQ2xELGNBQVEsS0FBSyw4REFBOEQ7QUFDM0UsY0FBUTtBQUFBLElBRVosT0FBTztBQUNILFlBQU0sYUFBYSxXQUFXLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDMUMsVUFBSTtBQUNBLGNBQU0sVUFBVSxVQUF3QixVQUFVO0FBQ2xELGdCQUFRLFFBQVEsU0FBUyxRQUFRO0FBQ2pDLHNCQUFjLFFBQVEsb0JBQW9CLE1BQU07QUFFaEQsWUFBSTtBQUNBLGdCQUFNLGFBQWEsUUFBUSxjQUFjO0FBQ3pDLGNBQUksWUFBWTtBQUNaLGtCQUFNLGNBQWMsS0FBSyxNQUFNLFVBQVU7QUFDekMsZ0JBQUksTUFBTSxRQUFRLFdBQVcsR0FBRztBQUM1QixzQkFBUSxZQUFZLE9BQU8sQ0FBQUMsT0FBSyxPQUFPQSxPQUFNLFFBQVE7QUFBQSxZQUN6RCxPQUFPO0FBQ0Ysc0JBQVEsS0FBSyx1RUFBdUUsVUFBVTtBQUFBLFlBQ25HO0FBQUEsVUFDSjtBQUFBLFFBQ0osU0FBUyxZQUFZO0FBQ2pCLGtCQUFRLE1BQU0sb0VBQW9FLFVBQVU7QUFBQSxRQUVoRztBQUNBLDBCQUFrQjtBQUNsQixnQkFBUSxJQUFJLHFDQUFxQyxLQUFLLGFBQWEsV0FBVyxZQUFZLEtBQUssVUFBVSxLQUFLLENBQUMsRUFBRTtBQUFBLE1BQ3JILFNBQVMsYUFBYTtBQUNsQixnQkFBUSxNQUFNLG1EQUFtRCxXQUFXO0FBQzVFLGdCQUFRO0FBQUEsTUFFWjtBQUFBLElBQ0o7QUFBQSxFQUNKLE9BQU87QUFFSCxVQUFNLFNBQVUsTUFBTSxlQUFlLFlBQW9CO0FBQ3pELFFBQUksQ0FBQyxRQUFRO0FBQ1QsY0FBUSxNQUFNLDREQUE0RDtBQUMxRSxjQUFRO0FBQUEsSUFFWixPQUFPO0FBQ0gsY0FBUSxPQUFPLFNBQVMsT0FBTztBQUMvQixvQkFBYyxPQUFPLG9CQUFvQixNQUFNO0FBRS9DLFVBQUk7QUFDQyxjQUFNLGFBQWEsT0FBTyxjQUFjO0FBQ3hDLFlBQUksWUFBWTtBQUNaLGdCQUFNLGNBQWMsS0FBSyxNQUFNLFVBQVU7QUFDekMsY0FBSSxNQUFNLFFBQVEsV0FBVyxHQUFHO0FBQzVCLG9CQUFRLFlBQVksT0FBTyxDQUFBQSxPQUFLLE9BQU9BLE9BQU0sUUFBUTtBQUFBLFVBQ3pELE9BQU87QUFDRixvQkFBUSxLQUFLLHNFQUFzRSxVQUFVO0FBQUEsVUFDbEc7QUFBQSxRQUNKO0FBQUEsTUFDTCxTQUFTLFlBQVk7QUFDakIsZ0JBQVEsTUFBTSx3REFBd0QsVUFBVTtBQUFBLE1BRXBGO0FBQ0Esd0JBQWtCO0FBQ2xCLGNBQVEsSUFBSSxtQ0FBbUMsS0FBSyxhQUFhLFdBQVcsWUFBWSxLQUFLLFVBQVUsS0FBSyxDQUFDLEVBQUU7QUFBQSxJQUNuSDtBQUFBLEVBQ0o7QUFFQSxTQUFPLEVBQUUsT0FBTyxPQUFPLGFBQWEsaUJBQWlCLE1BQU07QUFDL0Q7OztBSGxHQSxJQUFNLFVBQVUsQ0FBQyxZQUFvQixhQUF5QztBQUFBLEVBQzFFO0FBQUEsRUFDQyxTQUFTO0FBQUE7QUFBQSxJQUNOLCtCQUErQjtBQUFBLElBQy9CLG9DQUFvQztBQUFBLEVBQ3hDO0FBQUEsRUFDQSxNQUFNLEtBQUssVUFBVSxPQUFPO0FBQ2hDO0FBS08sSUFBTSxVQUFrQyxPQUFPLFVBQVU7QUFDOUQsTUFBSTtBQUVGLFVBQU0sU0FBUyxpQkFBaUIsS0FBSztBQUVyQyxRQUFJLENBQUMsT0FBTyxpQkFBaUI7QUFDekIsYUFBTyxRQUFRLEtBQUssRUFBRSxPQUFPLE9BQU8sU0FBUyxlQUFlLENBQUM7QUFBQSxJQUNqRTtBQUtBLFVBQU0sRUFBRSxPQUFPLGFBQWEsYUFBYSxrQkFBa0IsSUFBSTtBQUMvRCxZQUFRLElBQUksZ0NBQWdDLE9BQU8sS0FBSyxhQUFhLGlCQUFpQixZQUFZLEtBQUssVUFBVSxXQUFXLENBQUMsRUFBRTtBQUsvSCxVQUFNLGFBQW9CLENBQUM7QUFDM0IsVUFBTSxVQUFVLG9CQUFJLElBQVk7QUFHaEMsVUFBTSxzQkFBc0IsT0FBTyxXQUEwQjtBQUV6RCxVQUFJLENBQUMsVUFBVSxRQUFRLElBQUksTUFBTSxFQUFHO0FBQ3BDLGNBQVEsSUFBSSxNQUFNO0FBR2xCLFlBQU0sV0FBVyxNQUFNLG1CQUFtQixNQUFNO0FBR2hELGlCQUFXLFNBQVMsVUFBVTtBQUUxQixZQUFJLENBQUMsV0FBVyxLQUFLLENBQUFDLE9BQUtBLEdBQUUsT0FBTyxNQUFNLEVBQUUsR0FBRztBQUN6QyxxQkFBVyxLQUFLLEtBQUs7QUFBQSxRQUMxQjtBQUNBLGNBQU0sb0JBQW9CLE1BQU0sRUFBRTtBQUFBLE1BQ3RDO0FBQUEsSUFDSjtBQUdBLFFBQUksbUJBQW1CO0FBR2xCLGNBQVEsSUFBSSx5RUFBeUU7QUFDckYsWUFBTSxvQkFBb0IsTUFBTTtBQUFBLElBTXJDLE9BQU87QUFFSCxjQUFRLElBQUksdUVBQXVFLEtBQUssVUFBVSxXQUFXLENBQUMsRUFBRTtBQUNoSCxpQkFBVyxjQUFjLGFBQWE7QUFFbEMsY0FBTSxvQkFBb0IsVUFBVTtBQUFBLE1BQ3hDO0FBQUEsSUFDSjtBQUdBLFlBQVEsSUFBSSw4QkFBOEIsV0FBVyxNQUFNLG9CQUFvQjtBQUMvRSxXQUFPLFFBQVEsS0FBSyxFQUFFLE9BQU8sV0FBVyxDQUFDO0FBQUEsRUFFM0MsU0FBU0MsTUFBVTtBQUNqQixZQUFRLE1BQU0seUNBQXlDQSxJQUFHO0FBQzFELFdBQU8sUUFBUSxLQUFLLEVBQUUsT0FBTyxvREFBb0QsQ0FBQztBQUFBLEVBQ3BGO0FBQ0Y7IiwKICAibmFtZXMiOiBbImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiSHR0cEFwaUtleUF1dGhMb2NhdGlvbiIsICJTTUlUSFlfQ09OVEVYVF9LRVkiLCAicmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnIiwgIkh0dHBBcGlLZXlBdXRoTG9jYXRpb24yIiwgImNsaWVudENvbmZpZyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiZ2V0U21pdGh5Q29udGV4dCIsICJub3JtYWxpemVQcm92aWRlciIsICJpbXBvcnRfdHlwZXMiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIkh0dHBSZXF1ZXN0IiwgIkh0dHBSZXNwb25zZSIsICJpbXBvcnRfdHlwZXMiLCAiZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uIiwgInJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWciLCAiaGFuZGxlciIsICJ2IiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIkl0ZXJhdG9yIiwgImwiLCAiaSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJrIiwgImkiLCAibCIsICJzIiwgImV4cG9ydHMiLCAicCIsICJ0IiwgInYiLCAiaSIsICJsIiwgIm8iLCAiZXhwb3J0cyIsICJsIiwgImkiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiSXRlcmF0b3IiLCAiaSIsICJsIiwgImNhY2hlIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19jcmVhdGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19nZXRQcm90b09mIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvRVNNIiwgIl9fdG9Db21tb25KUyIsICJFbmRwb2ludENhY2hlIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJpIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgImhhbmRsZXIiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgImdldEhvc3RIZWFkZXJQbHVnaW4iLCAicmVzb2x2ZUhvc3RIZWFkZXJDb25maWciLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgImdldExvZ2dlclBsdWdpbiIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgImgiLCAibWFwIiwgImltcG9ydF90eXBlcyIsICJpbXBvcnRfdXRpbF9taWRkbGV3YXJlIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJnZXRTZXJkZVBsdWdpbiIsICJzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiIsICJlIiwgImltcG9ydF90eXBlcyIsICJpbXBvcnRfdXRpbF9taWRkbGV3YXJlIiwgIm5vcm1hbGl6ZVByb3ZpZGVyIiwgImNsaWVudCIsICJfIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiZXhwb3J0cyIsICJmcm9tQmFzZTY0IiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJmcm9tVXRmOCIsICJ0b1V0ZjgiLCAiZXhwb3J0cyIsICJ0b0Jhc2U2NCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiZXhwb3J0cyIsICJDaGVja3N1bVN0cmVhbSIsICJfYSIsICJlIiwgImV4cG9ydHMiLCAiaXNSZWFkYWJsZVN0cmVhbSIsICJfYSIsICJpc0Jsb2IiLCAiZXhwb3J0cyIsICJDaGVja3N1bVN0cmVhbSIsICJleHBvcnRzIiwgImNyZWF0ZUNoZWNrc3VtU3RyZWFtIiwgIl9hIiwgImV4cG9ydHMiLCAiY3JlYXRlQ2hlY2tzdW1TdHJlYW0iLCAiZXhwb3J0cyIsICJpIiwgImV4cG9ydHMiLCAic2l6ZSIsICJzIiwgIl9hIiwgImV4cG9ydHMiLCAiY3JlYXRlQnVmZmVyZWRSZWFkYWJsZSIsICJzaXplIiwgImV4cG9ydHMiLCAiZ2V0QXdzQ2h1bmtlZEVuY29kaW5nU3RyZWFtIiwgImV4cG9ydHMiLCAiaGVhZFN0cmVhbSIsICJfYSIsICJleHBvcnRzIiwgImhlYWRTdHJlYW0iLCAiZXJyIiwgImJ5dGVzIiwgIl9hIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJjIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJpIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19jcmVhdGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19nZXRQcm90b09mIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvRVNNIiwgIl9fdG9Db21tb25KUyIsICJzdHJlYW1Db2xsZWN0b3IiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiZXJyIiwgImUiLCAicyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAic3RyZWFtQ29sbGVjdG9yIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgImltcG9ydF91dGlsX2Jhc2U2NCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiaSIsICJleHBvcnRzIiwgInNka1N0cmVhbU1peGluIiwgIl9hIiwgImV4cG9ydHMiLCAic2RrU3RyZWFtTWl4aW4iLCAiX2EiLCAiZSIsICJleHBvcnRzIiwgInNwbGl0U3RyZWFtIiwgImV4cG9ydHMiLCAic3BsaXRTdHJlYW0iLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIlVpbnQ4QXJyYXlCbG9iQWRhcHRlciIsICJpbXBvcnRfdXRpbF9iYXNlNjQiLCAiaW1wb3J0X3V0aWxfdXRmOCIsICJjb2xsZWN0Qm9keSIsICJleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCIsICJjIiwgInJlc29sdmVkUGF0aCIsICJleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCIsICJpbXBvcnRfcHJvdG9jb2xfaHR0cCIsICJyZXNvbHZlZFBhdGgiLCAiY29sbGVjdEJvZHkiLCAiZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQiLCAicmVzb2x2ZWRQYXRoIiwgImluaXRfcmVxdWVzdEJ1aWxkZXIiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiaW1wb3J0X3R5cGVzIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgIm5vcm1hbGl6ZVByb3ZpZGVyIiwgImluaXRfcmVxdWVzdEJ1aWxkZXIiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIkVuZHBvaW50Q2FjaGUiLCAiRW5kcG9pbnRFcnJvciIsICJjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyIsICJpc0lwQWRkcmVzcyIsICJyZXNvbHZlRW5kcG9pbnQiLCAiaSIsICJ2YWwiLCAiaW1wb3J0X3R5cGVzMyIsICJrIiwgInYiLCAiYyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiaW1wb3J0X3V0aWxfZW5kcG9pbnRzIiwgImF3c0VuZHBvaW50RnVuY3Rpb25zIiwgInZlcnNpb24iLCAic2V0RmVhdHVyZSIsICJpbml0X3NldEZlYXR1cmUiLCAic2V0RmVhdHVyZSIsICJpbml0X3NldEZlYXR1cmUiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIlByb3ZpZGVyRXJyb3IiLCAiZXJyIiwgIm5vcm1hbGl6ZVByb3ZpZGVyIiwgIl8iLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIlNpZ25hdHVyZVY0IiwgImltcG9ydF91dGlsX3V0ZjgiLCAiaW1wb3J0X3V0aWxfdXRmODIiLCAiaW1wb3J0X3V0aWxfdXRmODMiLCAiaSIsICJpbXBvcnRfcHJvdG9jb2xfaHR0cCIsICJpbXBvcnRfdXRpbF9taWRkbGV3YXJlIiwgIm5vcm1hbGl6ZVByb3ZpZGVyIiwgImluaXRfaHR0cEF1dGhTY2hlbWVzIiwgInZhbCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiYSIsICJiIiwgImhhbmRsZXIiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIk5vT3BMb2dnZXIiLCAiU0VOU0lUSVZFX1NUUklORyIsICJfanNvbiIsICJpbXBvcnRfcHJvdG9jb2xzIiwgImNyZWF0ZUFnZ3JlZ2F0ZWRDbGllbnQiLCAiZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiIsICJleHBlY3RVbmlvbiIsICJnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsICJnZXRWYWx1ZUZyb21UZXh0Tm9kZSIsICJsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlIiwgIm1hcCIsICJyZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWciLCAidGFrZSIsICJ0aHJvd0RlZmF1bHRFcnJvciIsICJ3aXRoQmFzZUV4Y2VwdGlvbiIsICJoYW5kbGVyIiwgImVyciIsICJpbXBvcnRfdHlwZXMiLCAiXyIsICJjb21tYW5kcyIsICJ2IiwgImsiLCAicyIsICJkZXNlcmlhbGl6ZU1ldGFkYXRhIiwgInZlcnNpb24iLCAiY2xpZW50Q29uZmlnIiwgInZhbCIsICJpIiwgInoiLCAiejIiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiZSIsICJrIiwgImV4cG9ydHMiLCAidiIsICJhIiwgImkiLCAiZXhwb3J0cyIsICJpIiwgInQiLCAiZXhwb3J0cyIsICJ2YWwiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidmFsIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImkiLCAiZW50aXR5TmFtZSIsICJ2YWwiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiXyIsICJpIiwgInZhbCIsICJyZXN1bHQiLCAiZW50aXR5TmFtZSIsICJleHBvcnRzIiwgImkiLCAidmFsIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlhNTFBhcnNlciIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpIiwgImF0dFN0ciIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhIiwgInZhbCIsICJqIiwgImkiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiWE1MUGFyc2VyIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgIl8iLCAidmFsIiwgImUiLCAiaW5pdF9wcm90b2NvbHMiLCAiZGlzdF9lc19leHBvcnRzIiwgInNldEZlYXR1cmUiLCAiaW5pdF9kaXN0X2VzIiwgImluaXRfaHR0cEF1dGhTY2hlbWVzIiwgImluaXRfcHJvdG9jb2xzIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJnZXRVc2VyQWdlbnRQbHVnaW4iLCAicmVzb2x2ZVVzZXJBZ2VudENvbmZpZyIsICJpbXBvcnRfY29yZSIsICJpbXBvcnRfdXRpbF9lbmRwb2ludHMiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiaW1wb3J0X2NvcmUyIiwgInZhbCIsICJ2ZXJzaW9uIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUyIsICJOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUyIsICJOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMiLCAiTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyIsICJyZXNvbHZlUmVnaW9uQ29uZmlnIiwgImltcG9ydF91dGlsX21pZGRsZXdhcmUiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgImdldENvbnRlbnRMZW5ndGhQbHVnaW4iLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiY3J5cHRvIiwgImkiLCAiaSIsICJiIiwgIm4iLCAidiIsICJpIiwgInZlcnNpb24iLCAiZXJyIiwgIlVSTCIsICJjcnlwdG8iLCAiaW1wb3J0X2NyeXB0byIsICJpbXBvcnRfY3J5cHRvIiwgImNyeXB0byIsICJpIiwgImNyeXB0byIsICJpbXBvcnRfY3J5cHRvIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiREVGQVVMVF9SRVRSWV9NT0RFIiwgInQiLCAiZXhwb3J0cyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUyIsICJOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMiLCAiZ2V0UmV0cnlQbHVnaW4iLCAicmVzb2x2ZVJldHJ5Q29uZmlnIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgImltcG9ydF91dGlsX3JldHJ5IiwgImUiLCAiZXJyIiwgImltcG9ydF91dGlsX21pZGRsZXdhcmUiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiZXhwb3J0cyIsICJjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbiIsICJyZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWciLCAiZXhwb3J0cyIsICJnZXRIb21lRGlyIiwgImV4cG9ydHMiLCAiZ2V0U1NPVG9rZW5GaWxlcGF0aCIsICJleHBvcnRzIiwgImdldFNTT1Rva2VuRnJvbUZpbGUiLCAiZXhwb3J0cyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiaW1wb3J0X3R5cGVzIiwgIm1hcCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyIiwgImUiLCAiZXhwb3J0cyIsICJ3IiwgImVuZHBvaW50VXJsIiwgImV4cG9ydHMiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJwYXJzZVVybCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiZ2V0RW5kcG9pbnRQbHVnaW4iLCAicmVzb2x2ZUVuZHBvaW50Q29uZmlnIiwgImltcG9ydF91cmxfcGFyc2VyIiwgImNsaWVudENvbmZpZyIsICJpbXBvcnRfY29yZSIsICJpbXBvcnRfdXRpbF9taWRkbGV3YXJlIiwgImltcG9ydF9taWRkbGV3YXJlX3NlcmRlIiwgImQiLCAiYiIsICJzIiwgImUiLCAidCIsICJwIiwgImkiLCAiYyIsICJyIiwgImYiLCAiXyIsICJ4IiwgInkiLCAiZyIsICJuIiwgInYiLCAibSIsICJvIiwgImsiLCAiYSIsICJqIiwgImwiLCAicSIsICJzdGF0ZSIsICJfX2Fzc2lnbiIsICJrMiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiaW1wb3J0X2NsaWVudCIsICJpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgImltcG9ydF9wcm9wZXJ0eV9wcm92aWRlciIsICJlcnIiLCAiaSIsICJpbXBvcnRfbm9kZV9jb25maWdfcHJvdmlkZXIiLCAiaW1wb3J0X3VybF9wYXJzZXIiLCAiZSIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiayIsICJ2IiwgImUiLCAiZXhwb3J0cyIsICJpIiwgImUiLCAiZXhwb3J0cyIsICJlIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJyZXF1aXJlX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCAiZXhwb3J0cyIsICJjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbiIsICJjcmVhdGVTbWl0aHlBcGlOb0F1dGhIdHRwQXV0aE9wdGlvbiIsICJyZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWciLCAicmVxdWlyZV9wYWNrYWdlIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJOT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUyIsICJjcmVhdGVEZWZhdWx0VXNlckFnZW50UHJvdmlkZXIiLCAiaW1wb3J0X21pZGRsZXdhcmVfdXNlcl9hZ2VudCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiSGFzaCIsICJpbXBvcnRfdXRpbF91dGY4IiwgImltcG9ydF9jcnlwdG8iLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgImNhbGN1bGF0ZUJvZHlMZW5ndGgiLCAiZXhwb3J0cyIsICJ1IiwgInYiLCAidyIsICJ4IiwgImEiLCAiYiIsICJjIiwgImQiLCAiZSIsICJmIiwgImciLCAiaCIsICJpIiwgImoiLCAiayIsICJsIiwgIm0iLCAibiIsICJvIiwgInAiLCAicSIsICJyIiwgInMiLCAidCIsICJfZGF0YSIsICJleHBvcnRzIiwgImNhY2hlIiwgImRlZmF1bHRFbmRwb2ludFJlc29sdmVyIiwgImV4cG9ydHMiLCAiZ2V0UnVudGltZUNvbmZpZyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fY3JlYXRlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9fZ2V0UHJvdG9PZiIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0VTTSIsICJfX3RvQ29tbW9uSlMiLCAicmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyIsICJpbXBvcnRfY29uZmlnX3Jlc29sdmVyIiwgImltcG9ydF9ub2RlX2NvbmZpZ19wcm92aWRlciIsICJpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIiLCAiZSIsICJleHBvcnRzIiwgImdldFJ1bnRpbWVDb25maWciLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIk5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMiLCAiTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMiLCAiZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsICJyZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsICJyZXNvbHZlUmVnaW9uQ29uZmlnIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICJpbXBvcnRfbWlkZGxld2FyZV9ob3N0X2hlYWRlciIsICJpbXBvcnRfbWlkZGxld2FyZV9sb2dnZXIiLCAiaW1wb3J0X21pZGRsZXdhcmVfcmVjdXJzaW9uX2RldGVjdGlvbiIsICJpbXBvcnRfbWlkZGxld2FyZV91c2VyX2FnZW50IiwgImltcG9ydF9jb25maWdfcmVzb2x2ZXIiLCAiaW1wb3J0X2NvcmUiLCAiaW1wb3J0X21pZGRsZXdhcmVfY29udGVudF9sZW5ndGgiLCAiaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQiLCAiaW1wb3J0X21pZGRsZXdhcmVfcmV0cnkiLCAiaW1wb3J0X2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCAicmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyIsICJjb21tb25QYXJhbXMiLCAiaW1wb3J0X3J1bnRpbWVDb25maWciLCAiaW1wb3J0X3JlZ2lvbl9jb25maWdfcmVzb2x2ZXIiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uIiwgInJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWciLCAicmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zIiwgImltcG9ydF9taWRkbGV3YXJlX3NlcmRlIiwgImltcG9ydF9jb3JlMiIsICJiIiwgImRlX0NvbW1hbmRFcnJvciIsICJkZXNlcmlhbGl6ZU1ldGFkYXRhIiwgImRlX0ludmFsaWRSZXF1ZXN0RXhjZXB0aW9uUmVzIiwgInRocm93RGVmYXVsdEVycm9yIiwgIm8iLCAiY29tbWFuZHMiLCAiaW1wb3J0X3V0aWxfbWlkZGxld2FyZSIsICJpbml0X2Rpc3RfZXMiLCAiaW1wb3J0X3V0aWxfZW5kcG9pbnRzIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgImluaXRfZGlzdF9lcyIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICJnZXRSdW50aW1lQ29uZmlnIiwgImluaXRfZGlzdF9lcyIsICJsb2FkTm9kZUNvbmZpZyIsICJSZXF1ZXN0SGFuZGxlciIsICJpbXBvcnRfcHJvdG9jb2xfaHR0cCIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICJpbXBvcnRfY29uZmlnX3Jlc29sdmVyIiwgImltcG9ydF9taWRkbGV3YXJlX3JldHJ5IiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgIl9fQ2xpZW50IiwgImdldFJ1bnRpbWVDb25maWciLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiX19TZXJ2aWNlRXhjZXB0aW9uIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgImluaXRfZGlzdF9lcyIsICJiIiwgIl8iLCAiX19leHBlY3ROb25OdWxsIiwgIl9fZXhwZWN0T2JqZWN0IiwgIl9fZXhwZWN0U3RyaW5nIiwgIl9fZXhwZWN0SW50MzIiLCAiX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24iLCAiaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQiLCAiaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiJENvbW1hbmQiLCAibyIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICIkQ29tbWFuZCIsICJfX0NsaWVudCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fY3JlYXRlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9fZ2V0UHJvdG9PZiIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0VTTSIsICJfX3RvQ29tbW9uSlMiLCAiU1NPT0lEQ0NsaWVudCIsICJDcmVhdGVUb2tlbkNvbW1hbmQiLCAiaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyIiwgImUiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19lc20iLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgImltcG9ydF9jbGllbnQiLCAiaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyIiwgImNsaWVudENvbmZpZyIsICJlIiwgImNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uIiwgImNyZWF0ZVNtaXRoeUFwaU5vQXV0aEh0dHBBdXRoT3B0aW9uIiwgImltcG9ydF91dGlsX21pZGRsZXdhcmUiLCAicmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnIiwgImluaXRfaHR0cEF1dGhTY2hlbWVQcm92aWRlciIsICJpbml0X2Rpc3RfZXMiLCAicmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyIsICJjb21tb25QYXJhbXMiLCAiaW5pdF9FbmRwb2ludFBhcmFtZXRlcnMiLCAiYSIsICJiIiwgImMiLCAiZCIsICJlIiwgImYiLCAiZyIsICJoIiwgImkiLCAiaiIsICJrIiwgImwiLCAibSIsICJuIiwgIm8iLCAicCIsICJxIiwgInIiLCAicyIsICJ0IiwgInUiLCAidiIsICJ3IiwgIngiLCAiX2RhdGEiLCAicnVsZVNldCIsICJpbml0X3J1bGVzZXQiLCAiaW1wb3J0X3V0aWxfZW5kcG9pbnRzIiwgImNhY2hlIiwgImRlZmF1bHRFbmRwb2ludFJlc29sdmVyIiwgImluaXRfZW5kcG9pbnRSZXNvbHZlciIsICJpbml0X3J1bGVzZXQiLCAicnVsZVNldCIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICJpbXBvcnRfdXJsX3BhcnNlciIsICJpbXBvcnRfdXRpbF9iYXNlNjQiLCAiaW1wb3J0X3V0aWxfdXRmOCIsICJnZXRSdW50aW1lQ29uZmlnIiwgImluaXRfcnVudGltZUNvbmZpZ19zaGFyZWQiLCAiaW5pdF9kaXN0X2VzIiwgImluaXRfaHR0cEF1dGhTY2hlbWVQcm92aWRlciIsICJpbml0X2VuZHBvaW50UmVzb2x2ZXIiLCAiZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIiLCAiaW1wb3J0X3V0aWxfdXNlcl9hZ2VudF9ub2RlIiwgImltcG9ydF9jb25maWdfcmVzb2x2ZXIiLCAiaW1wb3J0X2hhc2hfbm9kZSIsICJpbXBvcnRfbWlkZGxld2FyZV9yZXRyeSIsICJpbXBvcnRfbm9kZV9jb25maWdfcHJvdmlkZXIiLCAiaW1wb3J0X25vZGVfaHR0cF9oYW5kbGVyIiwgImltcG9ydF91dGlsX2JvZHlfbGVuZ3RoX25vZGUiLCAiaW1wb3J0X3V0aWxfcmV0cnkiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiaW1wb3J0X3V0aWxfZGVmYXVsdHNfbW9kZV9ub2RlIiwgImdldFJ1bnRpbWVDb25maWciLCAiaW5pdF9ydW50aW1lQ29uZmlnIiwgImluaXRfZGlzdF9lcyIsICJpbml0X3J1bnRpbWVDb25maWdfc2hhcmVkIiwgImxvYWROb2RlQ29uZmlnIiwgIlJlcXVlc3RIYW5kbGVyIiwgImdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsICJyZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnIiwgImluaXRfaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uIiwgImltcG9ydF9yZWdpb25fY29uZmlnX3Jlc29sdmVyIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgInJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyIsICJpbml0X3J1bnRpbWVFeHRlbnNpb25zIiwgImluaXRfaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uIiwgImdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsICJyZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnIiwgImltcG9ydF9taWRkbGV3YXJlX2hvc3RfaGVhZGVyIiwgImltcG9ydF9taWRkbGV3YXJlX2xvZ2dlciIsICJpbXBvcnRfbWlkZGxld2FyZV9yZWN1cnNpb25fZGV0ZWN0aW9uIiwgImltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQiLCAiaW1wb3J0X2NvbmZpZ19yZXNvbHZlciIsICJpbXBvcnRfbWlkZGxld2FyZV9jb250ZW50X2xlbmd0aCIsICJpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludCIsICJpbXBvcnRfbWlkZGxld2FyZV9yZXRyeSIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICJpbml0X2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCAiaW5pdF9FbmRwb2ludFBhcmFtZXRlcnMiLCAiaW5pdF9ydW50aW1lQ29uZmlnIiwgImluaXRfcnVudGltZUV4dGVuc2lvbnMiLCAiX19DbGllbnQiLCAiZ2V0UnVudGltZUNvbmZpZyIsICJyZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzIiwgInJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyIsICJyZXNvbHZlUnVudGltZUV4dGVuc2lvbnMiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiX19TZXJ2aWNlRXhjZXB0aW9uIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgIkV4cGlyZWRUb2tlbkV4Y2VwdGlvbiIsICJpbml0X21vZGVsc18wIiwgImltcG9ydF9wcm90b2NvbF9odHRwIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgImRlX0NvbW1hbmRFcnJvciIsICJkZV9FeHBpcmVkVG9rZW5FeGNlcHRpb25SZXMiLCAiZGVzZXJpYWxpemVNZXRhZGF0YSIsICJ0aHJvd0RlZmF1bHRFcnJvciIsICJpbml0X2Rpc3RfZXMiLCAiaW5pdF9tb2RlbHNfMCIsICJFeHBpcmVkVG9rZW5FeGNlcHRpb24iLCAiX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24iLCAiX19leHBlY3RTdHJpbmciLCAiX19zdHJpY3RQYXJzZUludDMyIiwgIl9fZXhwZWN0Tm9uTnVsbCIsICJfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldCIsICJfX0h0dHBSZXF1ZXN0IiwgIl9fZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQiLCAiaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQiLCAiaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiaW5pdF9FbmRwb2ludFBhcmFtZXRlcnMiLCAiaW5pdF9tb2RlbHNfMCIsICIkQ29tbWFuZCIsICJjb21tb25QYXJhbXMiLCAibyIsICJpbXBvcnRfbWlkZGxld2FyZV9lbmRwb2ludCIsICJpbXBvcnRfbWlkZGxld2FyZV9zZXJkZSIsICJpbXBvcnRfc21pdGh5X2NsaWVudCIsICJpbml0X0VuZHBvaW50UGFyYW1ldGVycyIsICJpbml0X21vZGVsc18wIiwgIiRDb21tYW5kIiwgImNvbW1vblBhcmFtcyIsICJvIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgImNvbW1hbmRzIiwgImluaXRfY29tbWFuZHMiLCAiaW5pdF9tb2RlbHMiLCAiaW5pdF9tb2RlbHNfMCIsICJTVFNDbGllbnQiLCAiZ2V0RGVmYXVsdFJvbGVBc3N1bWVyIiwgImdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSIsICJFeHBpcmVkVG9rZW5FeGNlcHRpb24iLCAiX19DbGllbnQiLCAiZ2V0RGVmYXVsdFJvbGVBc3N1bWVyIiwgImdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSIsICJpbml0X2NvbW1hbmRzIiwgImluaXRfbW9kZWxzIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9Db21tb25KUyIsICJpbXBvcnRfcHJvcGVydHlfcHJvdmlkZXIiLCAiaW1wb3J0X2NsaWVudCIsICJleHBvcnRzIiwgIl9fY3JlYXRlQmluZGluZyIsICJvIiwgIm0iLCAiayIsICJrMiIsICJfX3NldE1vZHVsZURlZmF1bHQiLCAidiIsICJfX2ltcG9ydFN0YXIiLCAiZnJvbVdlYlRva2VuIiwgImdldERlZmF1bHRSb2xlQXNzdW1lcldpdGhXZWJJZGVudGl0eSIsICJleHBvcnRzIiwgImZyb21Ub2tlbkZpbGUiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgInJlcXVpcmVfZGlzdF9janMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX19jcmVhdGUiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19nZXRQcm90b09mIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvRVNNIiwgIl9fdG9Db21tb25KUyIsICJpbXBvcnRfY2xpZW50IiwgImltcG9ydF9wcm9wZXJ0eV9wcm92aWRlciIsICJnZXREZWZhdWx0Um9sZUFzc3VtZXIiLCAiZnJvbVRva2VuRmlsZSIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fY3JlYXRlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9fZ2V0UHJvdG9PZiIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0VTTSIsICJfX3RvQ29tbW9uSlMiLCAiaW1wb3J0X3Byb3BlcnR5X3Byb3ZpZGVyIiwgImZyb21Ub2tlbkZpbGUiLCAicmVxdWlyZV9ydWxlc2V0IiwgImV4cG9ydHMiLCAiYSIsICJiIiwgImMiLCAiZCIsICJlIiwgImYiLCAiZyIsICJoIiwgImkiLCAiaiIsICJrIiwgImwiLCAibSIsICJuIiwgIm8iLCAicCIsICJxIiwgInIiLCAicyIsICJ0IiwgInUiLCAidiIsICJ3IiwgIngiLCAieSIsICJ6IiwgIkEiLCAiQiIsICJDIiwgIkQiLCAiRSIsICJGIiwgIkciLCAiSCIsICJJIiwgIkoiLCAiX2RhdGEiLCAicmVxdWlyZV9lbmRwb2ludFJlc29sdmVyIiwgImV4cG9ydHMiLCAiY2FjaGUiLCAiZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIiLCAicmVxdWlyZV9ydW50aW1lQ29uZmlnX3NoYXJlZCIsICJleHBvcnRzIiwgImdldFJ1bnRpbWVDb25maWciLCAicmVxdWlyZV9ydW50aW1lQ29uZmlnIiwgImV4cG9ydHMiLCAiZ2V0UnVudGltZUNvbmZpZyIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiY2xpZW50IiwgInN0YXRlIiwgInN0YXRlMiIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiRHluYW1vREJDbGllbnQiLCAiUXVlcnlDb21tYW5kIiwgImltcG9ydF9zbWl0aHlfY2xpZW50IiwgImltcG9ydF9taWRkbGV3YXJlX2hvc3RfaGVhZGVyIiwgImltcG9ydF9taWRkbGV3YXJlX2xvZ2dlciIsICJpbXBvcnRfbWlkZGxld2FyZV9yZWN1cnNpb25fZGV0ZWN0aW9uIiwgImltcG9ydF9taWRkbGV3YXJlX3VzZXJfYWdlbnQiLCAiaW1wb3J0X2NvbmZpZ19yZXNvbHZlciIsICJpbXBvcnRfY29yZTIiLCAiaW1wb3J0X21pZGRsZXdhcmVfY29udGVudF9sZW5ndGgiLCAiaW1wb3J0X21pZGRsZXdhcmVfcmV0cnkiLCAiaW1wb3J0X2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCAiaW1wb3J0X21pZGRsZXdhcmVfZW5kcG9pbnQiLCAiaW1wb3J0X21pZGRsZXdhcmVfc2VyZGUiLCAicmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyIsICJjb21tb25QYXJhbXMiLCAiaW1wb3J0X2NvcmUiLCAiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCAiYnVpbGRIdHRwUnBjUmVxdWVzdCIsICJkZV9Db21tYW5kRXJyb3IiLCAiZGVzZXJpYWxpemVNZXRhZGF0YSIsICJ0aHJvd0RlZmF1bHRFcnJvciIsICJlIiwgIl8iLCAibyIsICJpbXBvcnRfcnVudGltZUNvbmZpZyIsICJpbXBvcnRfcmVnaW9uX2NvbmZpZ19yZXNvbHZlciIsICJnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCAicmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyIsICJyZXNvbHZlUnVudGltZUV4dGVuc2lvbnMiLCAiaSIsICJjb21tYW5kcyIsICJpbXBvcnRfY29yZTMiLCAiaW1wb3J0X2NvcmU0IiwgImltcG9ydF9jb3JlNSIsICJpbXBvcnRfY29yZTYiLCAiaW1wb3J0X2NvcmU3IiwgImltcG9ydF9jb3JlOCIsICJjbGllbnQiLCAicmVxdWlyZV9kaXN0X2NqcyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2hhc093blByb3AiLCAiX19leHBvcnQiLCAiX19jb3B5UHJvcHMiLCAiX190b0NvbW1vbkpTIiwgIk51bWJlclZhbHVlIiwgIl8iLCAibWFwIiwgInZhbCIsICJyZXF1aXJlX2Rpc3RfY2pzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl9fZGVmUHJvcCIsICJfX2dldE93blByb3BEZXNjIiwgIl9fZ2V0T3duUHJvcE5hbWVzIiwgIl9faGFzT3duUHJvcCIsICJfX2V4cG9ydCIsICJfX2NvcHlQcm9wcyIsICJfX3RvQ29tbW9uSlMiLCAiRGVsZXRlQ29tbWFuZCIsICJEeW5hbW9EQkRvY3VtZW50Q2xpZW50IiwgIkdldENvbW1hbmQiLCAiaW1wb3J0X3R5cGVzIiwgIlB1dENvbW1hbmQiLCAiUXVlcnlDb21tYW5kIiwgIlVwZGF0ZUNvbW1hbmQiLCAiaW1wb3J0X3NtaXRoeV9jbGllbnQiLCAiaW1wb3J0X2NsaWVudF9keW5hbW9kYiIsICJpbXBvcnRfY29yZSIsICJrIiwgInYiLCAiaGFuZGxlciIsICJjbGllbnQiLCAiaW1wb3J0X2NvcmUyIiwgImltcG9ydF9jb3JlMyIsICJtIiwgInAiLCAiZXJyIiwgImUiLCAiSVNfT0ZGTElORSIsICJyIiwgInIiLCAiZXJyIl0KfQo=
